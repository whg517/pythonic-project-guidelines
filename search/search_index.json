{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python \u9879\u76ee\u5de5\u7a0b\u5316\u5f00\u53d1\u6307\u5357 \u91cd\u5927\u66f4\u65b0\u8fdb\u884c\u4e2d \u57fa\u4e8e\u65b0\u7684\u9879\u76ee\u6a21\u677f\u540c\u6b65\u8c03\u6574\u6587\u6863 \u589e\u52a0\u6570\u636e\u5904\u7406\u5b9e\u8df5\u677f\u5757 \u6587\u6863\u76ee\u6807 \u4ee5\u901a\u4fd7\u6613\u61c2\u7ed3\u6784\u6e05\u6670\u7684\u6587\u6863\u5411\u8bfb\u8005\u5c55\u793a\u5982\u4f55\u505a Python \u5de5\u7a0b\u5316 \u53d7\u4f17\u76ee\u6807\uff1a Python \u521d\u5b66\u8005 Python \u521d\u7ea7\u5f00\u53d1 Python \u4e2d\u7ea7\u5f00\u53d1 \u6307\u5357\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u4e3b\u9898\uff1a \u5feb\u901f\u4e0a\u624b\uff08\u4e00\u4e2a\u6700\u901a\u7528\uff0c\u6700\u521d\u7ea7\u7684\u793a\u4f8b\u9879\u76ee\uff09 \u5f00\u53d1\u524d\u51c6\u5907 Python \u73af\u5883\u7684\u5b89\u88c5 \u865a\u62df\u73af\u5883\u7ba1\u7406 IDE \u7684\u9009\u62e9 Python \u89c4\u8303 \u98ce\u683c\u89c4\u8303 \u8bed\u8a00\u89c4\u8303 \u9879\u76ee\u5de5\u7a0b\u5316 \u521d\u7ea7\u6559\u7a0b(\u4e00\u4e2a\u5305\u542b\u5b8c\u6574\u5f00\u53d1\u6d41\u7a0b\u7684\u793a\u4f8b\u9879\u76ee) \u521d\u59cb\u5316\u9879\u76ee \u529f\u80fd\u5f00\u53d1 \u6d4b\u8bd5 \u6253\u5305\u53d1\u5e03 \u8fdb\u9636\u6559\u7a0b \u7c7b\u578b\u6807\u6ce8 \u4f7f\u7528\u914d\u7f6e\u7cfb\u7edf \u5982\u4f55\u7528\u597d\u65e5\u5fd7 \u5f02\u5e38\u7ba1\u7406 \u5982\u4f55\u66f4\u597d\u5f97\u6d4b\u8bd5 \u7528\u4fe1\u53f7\u89e3\u8026\u903b\u8f91 \u652f\u6301\u63d2\u4ef6\u5316 \u9879\u76ee\u7ba1\u7406 \u4ee3\u7801\u68c0\u6d4b \u9879\u76ee\u7ed3\u6784 \u6587\u6863\u7ba1\u7406 \u6253\u5305\u53d1\u5e03 \u5f00\u53d1\u5b9e\u8df5 Web Fastapi Django Flask \u722c\u866b Scrapy aiohttp \u6570\u636e\u5e93 SQLALchemy \u5982\u679c\u60a8\u5bf9\u6587\u6863\u6709\u4efb\u4f55\u5efa\u8bae\u6216\u610f\u89c1\uff0c\u6b22\u8fce\u63d0\u4ea4 issues \u8fdb\u884c\u8ba8\u8bba\u3002\u5f53\u7136\u6211\u4eec\u66f4\u671f\u5f85\u4e0e\u60a8\u5171\u540c\u534f\u4f5c\u5f00\u53d1\uff0c\u8ba9\u6587\u6863\u53d8\u5f97\u66f4\u52a0\u5b8c\u5584\u3002 \u4f7f\u7528\u65b9\u5f0f 1. \u514b\u9686\u9879\u76ee git clone https://github.com/pyloong/pythonic-project-guidelines 2. \u521d\u59cb\u5316\u73af\u5883 \u9879\u76ee\u9884\u89c8\u9700\u8981\u5b89\u88c5 Python \u73af\u5883\u6765\u542f\u52a8 server\uff0c\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528 Python 3.6+ \u7684\u7248\u672c\u3002\u5982\u679c\u672c\u5730\u6ca1\u6709 Python \u73af\u5883\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Docker\u9884\u89c8\u670d\u52a1\u5668 \u6765\u542f\u52a8\u3002 2.1 \u672c\u5730\u521d\u59cb\u5316 \u5b89\u88c5\u4f9d\u8d56 pip install -r requirements.txt 2.2 \u4f7f\u7528 Docker \u521d\u59cb\u5316 docker pull squidfunk/mkdocs-material 3. \u9884\u89c8 3.1 \u672c\u5730\u9884\u89c8 mkdocs serve 3.2 \u4f7f\u7528 Docker \u9884\u89c8 uinx : docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material Windows : docker run --rm -it -p 8000 :8000 -v \"%cd%\" :/docs squidfunk/mkdocs-material \u534f\u4f5c\u89c4\u8303 \u6587\u6863\u4f7f\u7528 Markdown \u7f16\u5199\uff0c\u4f7f\u7528 mkdocs \u914d\u5408 mkdocs-material \u4e3b\u9898\u6784\u5efa\u3002 form code pr","title":"Python \u5f00\u53d1\u6307\u5357"},{"location":"#python","text":"","title":"Python \u9879\u76ee\u5de5\u7a0b\u5316\u5f00\u53d1\u6307\u5357"},{"location":"#_1","text":"\u57fa\u4e8e\u65b0\u7684\u9879\u76ee\u6a21\u677f\u540c\u6b65\u8c03\u6574\u6587\u6863 \u589e\u52a0\u6570\u636e\u5904\u7406\u5b9e\u8df5\u677f\u5757","title":"\u91cd\u5927\u66f4\u65b0\u8fdb\u884c\u4e2d"},{"location":"#_2","text":"\u4ee5\u901a\u4fd7\u6613\u61c2\u7ed3\u6784\u6e05\u6670\u7684\u6587\u6863\u5411\u8bfb\u8005\u5c55\u793a\u5982\u4f55\u505a Python \u5de5\u7a0b\u5316 \u53d7\u4f17\u76ee\u6807\uff1a Python \u521d\u5b66\u8005 Python \u521d\u7ea7\u5f00\u53d1 Python \u4e2d\u7ea7\u5f00\u53d1 \u6307\u5357\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u4e3b\u9898\uff1a \u5feb\u901f\u4e0a\u624b\uff08\u4e00\u4e2a\u6700\u901a\u7528\uff0c\u6700\u521d\u7ea7\u7684\u793a\u4f8b\u9879\u76ee\uff09 \u5f00\u53d1\u524d\u51c6\u5907 Python \u73af\u5883\u7684\u5b89\u88c5 \u865a\u62df\u73af\u5883\u7ba1\u7406 IDE \u7684\u9009\u62e9 Python \u89c4\u8303 \u98ce\u683c\u89c4\u8303 \u8bed\u8a00\u89c4\u8303 \u9879\u76ee\u5de5\u7a0b\u5316 \u521d\u7ea7\u6559\u7a0b(\u4e00\u4e2a\u5305\u542b\u5b8c\u6574\u5f00\u53d1\u6d41\u7a0b\u7684\u793a\u4f8b\u9879\u76ee) \u521d\u59cb\u5316\u9879\u76ee \u529f\u80fd\u5f00\u53d1 \u6d4b\u8bd5 \u6253\u5305\u53d1\u5e03 \u8fdb\u9636\u6559\u7a0b \u7c7b\u578b\u6807\u6ce8 \u4f7f\u7528\u914d\u7f6e\u7cfb\u7edf \u5982\u4f55\u7528\u597d\u65e5\u5fd7 \u5f02\u5e38\u7ba1\u7406 \u5982\u4f55\u66f4\u597d\u5f97\u6d4b\u8bd5 \u7528\u4fe1\u53f7\u89e3\u8026\u903b\u8f91 \u652f\u6301\u63d2\u4ef6\u5316 \u9879\u76ee\u7ba1\u7406 \u4ee3\u7801\u68c0\u6d4b \u9879\u76ee\u7ed3\u6784 \u6587\u6863\u7ba1\u7406 \u6253\u5305\u53d1\u5e03 \u5f00\u53d1\u5b9e\u8df5 Web Fastapi Django Flask \u722c\u866b Scrapy aiohttp \u6570\u636e\u5e93 SQLALchemy \u5982\u679c\u60a8\u5bf9\u6587\u6863\u6709\u4efb\u4f55\u5efa\u8bae\u6216\u610f\u89c1\uff0c\u6b22\u8fce\u63d0\u4ea4 issues \u8fdb\u884c\u8ba8\u8bba\u3002\u5f53\u7136\u6211\u4eec\u66f4\u671f\u5f85\u4e0e\u60a8\u5171\u540c\u534f\u4f5c\u5f00\u53d1\uff0c\u8ba9\u6587\u6863\u53d8\u5f97\u66f4\u52a0\u5b8c\u5584\u3002","title":"\u6587\u6863\u76ee\u6807"},{"location":"#_3","text":"","title":"\u4f7f\u7528\u65b9\u5f0f"},{"location":"#1","text":"git clone https://github.com/pyloong/pythonic-project-guidelines","title":"1. \u514b\u9686\u9879\u76ee"},{"location":"#2","text":"\u9879\u76ee\u9884\u89c8\u9700\u8981\u5b89\u88c5 Python \u73af\u5883\u6765\u542f\u52a8 server\uff0c\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528 Python 3.6+ \u7684\u7248\u672c\u3002\u5982\u679c\u672c\u5730\u6ca1\u6709 Python \u73af\u5883\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Docker\u9884\u89c8\u670d\u52a1\u5668 \u6765\u542f\u52a8\u3002","title":"2. \u521d\u59cb\u5316\u73af\u5883"},{"location":"#21","text":"\u5b89\u88c5\u4f9d\u8d56 pip install -r requirements.txt","title":"2.1 \u672c\u5730\u521d\u59cb\u5316"},{"location":"#22-docker","text":"docker pull squidfunk/mkdocs-material","title":"2.2 \u4f7f\u7528 Docker \u521d\u59cb\u5316"},{"location":"#3","text":"","title":"3. \u9884\u89c8"},{"location":"#31","text":"mkdocs serve","title":"3.1 \u672c\u5730\u9884\u89c8"},{"location":"#32-docker","text":"uinx : docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material Windows : docker run --rm -it -p 8000 :8000 -v \"%cd%\" :/docs squidfunk/mkdocs-material","title":"3.2 \u4f7f\u7528 Docker \u9884\u89c8"},{"location":"#_4","text":"\u6587\u6863\u4f7f\u7528 Markdown \u7f16\u5199\uff0c\u4f7f\u7528 mkdocs \u914d\u5408 mkdocs-material \u4e3b\u9898\u6784\u5efa\u3002 form code pr","title":"\u534f\u4f5c\u89c4\u8303"},{"location":"quick_start/","text":"\u5feb\u901f\u4e0a\u624b \u8fd9\u662f\u4e00\u4e2a\u5feb\u901f\u4e0a\u624b\u7684\u5f00\u53d1\u6307\u5357\uff0c\u672c\u6587\u901a\u8fc7\u4e00\u4e2a\u5305\u542b\u4e3b\u8981\u77e5\u8bc6\u70b9\u7684\u7b80\u5355\u9879\u76ee\uff0c\u5411\u5f00\u53d1\u8005\u5c55\u793a\u4e00\u4e2a\u66f4\u7b26\u5408 Python \u89c4\u8303\u548c\u98ce\u683c\uff08Pythonic\uff09\u7684\u9879\u76ee\u5f00\u53d1\u6d41\u7a0b\u3002 \u793a\u4f8b\u9879\u76ee\u662f\u4e00\u4e2a\u5355\u8bcd\u7edf\u8ba1\u7684\u6f14\u793a\u7a0b\u5e8f\uff0c\u5982\u679c\u4f60\u60f3\u67e5\u770b\u5b8c\u6574\u793a\u4f8b\uff0c\u53ef\u4ee5\u6d4f\u89c8 Word Count \u9879\u76ee\u6e90\u7801\u3002 1. \u5f00\u53d1\u73af\u5883\u642d\u5efa 1.1 Python \u5f00\u53d1\u73af\u5883 \u672c\u9879\u76ee\u4f7f\u7528 Python 3.10 \u3002\u5177\u4f53\u7248\u672c\u7684 Python \u73af\u5883\u53ef\u4ee5\u5728 \u5b98\u7f51 \u4e0b\u8f7d\u3002 1.2 \u5f00\u53d1\u5de5\u5177 \u63a8\u8350\u4f7f\u7528 Pycharm \u5f00\u53d1\u5de5\u5177\uff0c\u53ef\u4ee5\u9009\u62e9\u514d\u8d39\u7684\u793e\u533a\u7248\u672c\u3002 Visual Studio Code \u662f\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u6b3e\u514d\u8d39\u8f7b\u91cf\u7ea7\u6587\u672c\u7f16\u8f91\u5668\uff0c\u901a\u8fc7\u5b89\u88c5\u63d2\u4ef6\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6210\u4e00\u6b3e\u529f\u80fd\u5f3a\u5927\u7684 IDE \u5f00\u53d1\u5de5\u5177\u3002\u76ee\u524d\u652f\u6301 Python \u7684\u63d2\u4ef6\u4f53\u7cfb\u5df2\u7ecf\u8f83\u4e3a\u5b8c\u5584\uff0c\u6b64\u65b9\u6848\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5907\u7528\u3002 1.3 \u865a\u62df\u73af\u5883\u5de5\u5177 \u63a8\u8350\u4f7f\u7528 Poetry \uff0c\u65e2\u5305\u542b\u4e86\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\u4e5f\u652f\u6301\u6253\u5305\u53d1\u5e03\u7b49\u529f\u80fd\u3002 \u5728\u5b89\u88c5\u597d Python \u73af\u5883\u540e\uff0c\u5e94\u8be5\u5728\u5168\u5c40\u73af\u5883\u4e2d\u5b89\u88c5 Poetry \u3002 sudo python -m pip install -U pip sudo pip install -U poetry 1.4 \u521d\u59cb\u5316\u9879\u76ee cookiecutter \u662f\u4e00\u4e2a\u901a\u8fc7\u9879\u76ee\u6a21\u677f\u521b\u5efa\u9879\u76ee\u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002 \u5b89\u88c5 cookiecutter sudo pip3 install -U cookiecutter \u521d\u59cb\u5316\u9879\u76ee cd workspace cookiecutter https://github.com/pyloong/cookiecutter-pythonic-project \u8fd0\u884c\u547d\u4ee4\u540e\u4f1a\u51fa\u73b0\u4e0b\u9762\u7684\u914d\u7f6e\u8fc7\u7a0b\uff0c\u5982\u679c\u4f60\u4e0d\u6e05\u695a\u914d\u7f6e\u7684\u5177\u4f53\u7528\u9014\uff0c\u53ef\u4ee5\u76f4\u63a5\u6309\u56de\u8f66\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\uff0c\u9ed8\u8ba4\u914d\u7f6e\u4f7f\u7528\u9879\u76ee\u6a21\u677f\u521d\u59cb\u503c\u3002 \u276f cookiecutter https://github.com/pyloong/cookiecutter-pythonic-project project_name [ My Project ] : Word Count project_slug [ word_count ] : project_description [ My Awesome Project! ] : Word Count Project author_name [ Author ] : author_email [ author@example.com ] : version [ 0 .1.0 ] : Select python_version: 1 - 3 .10 2 - 3 .9 Choose from 1 , 2 [ 1 ] : use_src_layout [ y ] : use_poetry [ y ] : use_docker [ n ] : Select ci_tools: 1 - none 2 - Gitlab 3 - Github Choose from 1 , 2 , 3 [ 1 ] : init_skeleton [ n ] : \u5982\u679c\u4f60\u5728\u4f7f\u7528\u9879\u76ee\u6a21\u677f\u8fc7\u7a0b\u4e2d\u6709\u4efb\u4f55\u95ee\u9898\u6216\u7591\u95ee\uff0c\u53ef\u4ee5\u901a\u8fc7\u53d1\u8d77 issues \u8fdb\u884c\u53cd\u9988\u3002 \u751f\u6210\u540e\u7684\u9879\u76ee\u7ed3\u6784\u5982\u4e0b\uff1a word_count \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 development.md \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 word_count \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u2514\u2500\u2500 test_version.py \u2514\u2500\u2500 tox.ini \u751f\u6210\u9879\u76ee\u7684 src \u76ee\u5f55\u4e0b\u6709\u4e00\u4e2a\u9879\u76ee\u6a21\u5757\uff0c\u7528\u6765\u5b58\u653e\u9879\u76ee\u6e90\u4ee3\u7801\uff0c tests \u76ee\u5f55\u7528\u6765\u7f16\u5199\u6a21\u5757\u7684\u76f8\u5173\u6d4b\u8bd5\u4ee3\u7801\u3002 pyproject.toml \u5305\u542b\u9879\u76ee\u521d\u59cb\u4f9d\u8d56\uff0c\u548c\u9879\u76ee\u7684\u63cf\u8ff0\u4fe1\u606f\uff0c tox.ini \u5b9a\u4e49\u4e86\u4efb\u52a1\u81ea\u52a8\u5316\u6267\u884c\u903b\u8f91\u3002 1.5 \u521d\u59cb\u5316\u9879\u76ee\u73af\u5883 \u4f7f\u7528 poetry \u521d\u59cb\u5316\u4e00\u4e2a\u865a\u62df\u73af\u5883\u3002 poetry install \u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a poetry.lock \uff0c\u53ef\u4ee5\u7528\u6765\u9501\u5b9a\u751f\u4ea7\u73af\u5883\u5b89\u88c5\u5305\u7684\u7248\u672c\u548c\u4f9d\u8d56\u4fe1\u606f\u3002 1.6 \u521d\u59cb\u5316 Git \u63a8\u8350\u4f7f\u7528 Git \u5bf9\u9879\u76ee\u8fdb\u884c\u7248\u672c\u7ba1\u7406\u3002\u6240\u4ee5\u9700\u8981\u63d0\u524d\u5b89\u88c5 Git \uff0c\u5e76\u719f\u6089\u5e38\u7528\u7684 Git \u6982\u5ff5\u548c Git \u547d\u4ee4\u3002 git init git config user.name test git config user.email test@example.com # \u521d\u59cb\u5316\u9879\u76ee\u63d0\u4ea4 git add . git commit -m \"feat: \u521d\u59cb\u5316\u9879\u76ee\u63d0\u4ea4\" 1.7 \u4f1a\u7528\u5230\u7684\u5176\u4ed6\u5de5\u5177 \u5728\u751f\u6210\u7684 pyproject.toml \u6587\u4ef6\u4e2d\uff0c\u9ed8\u8ba4\u6dfb\u52a0\u4e86\u4e00\u4e9b\u5f00\u53d1\u73af\u5883\u4e2d\u5e38\u7528\u7684\u5de5\u5177\u3002 isort : isort \u662f\u4e00\u4e2a\u81ea\u52a8\u683c\u5f0f\u5316\u5bfc\u5165\u5de5\u5177 pylint : pylint \u662f\u4e00\u4e2a\u68c0\u6d4b\u4ee3\u7801\u98ce\u683c\u5de5\u5177 pytest : pytest \u662f\u4e00\u4e2a\u66f4\u52a0\u6613\u7528\u7684\u6d4b\u8bd5\u6846\u67b6\uff0c\u517c\u5bb9 unittest \u6d4b\u8bd5\u6846\u67b6 pytest-cov : pytest-cov \u662f pytest \u7684 Coverage \u63d2\u4ef6\uff0c\u7528\u6765\u7edf\u8ba1\u6d4b\u8bd5\u8986\u76d6\u7387 mkdocs : mkdocs \u662f\u4e00\u4e2a\u9879\u76ee\u6587\u6863\u6784\u5efa\u5de5\u5177\uff0c\u4f7f\u7528 markdown \u7f16\u5199\u5185\u5bb9\uff0c\u6784\u5efa\u751f\u6210\u6587\u6863\u9875\u9762\u3002 mkdocs-material : mkdocs-material \u662f\u57fa\u4e8e mkdocs \u6784\u5efa\u6587\u6863\uff0c\u5e76\u63d0\u4f9b\u73b0\u4ee3\u5316\u4e3b\u9898\u7684\u5e93\u3002 tox : tox \u662f\u4e00\u4e2a\u4efb\u52a1\u81ea\u52a8\u5316\u5de5\u5177 \u5982\u679c\u60f3\u8981\u4e86\u89e3\u76f8\u5173\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u9605\u8bfb\u5bf9\u5e94\u7684\u6280\u672f\u8bf4\u660e\u6587\u6863\u3002 2. \u529f\u80fd\u5f00\u53d1 \u9996\u5148\u5c06\u9879\u76ee\u4ee5\u53ef\u7f16\u8f91\u65b9\u5f0f\u5b89\u88c5\u5230\u73af\u5883\u4e2d\uff1a pip install -e . \u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u5c06 src \u4e0b\u7684\u5305\u5b89\u88c5\u5230 Python \u73af\u5883\u4e2d\uff0c\u5426\u5219\u65e0\u6cd5\u6b63\u5e38\u5bfc\u5165\u5305\u4e2d\u7684\u6a21\u5757\u3002 2.1 \u529f\u80fd\u9700\u6c42 \u63d0\u4f9b\u4e00\u4e2a\u4ece\u6587\u672c\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\uff0c\u6570\u636e\u4ee5\u7a7a\u683c\u5206\u5272\u5355\u8bcd\uff0c\u7136\u540e\u7edf\u8ba1\u6587\u4ef6\u4e2d\u7684\u5355\u8bcd\u6570\u91cf\uff0c\u5e76\u5c06\u7ed3\u679c\u5199\u5165\u5230\u76ee\u6807\u6587\u4ef6\u4e2d\u3002 2.2 \u7f16\u5199\u8ba1\u6570\u5668 \u5728 src/word_count/ \u4e0b\u521b\u5efa counter.py \u6587\u4ef6\uff0c\u540c\u65f6\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a \"\"\"Count a file \"\"\" import logging from collections.abc import Generator from pathlib import Path # Config root logger logging . basicConfig ( level = logging . DEBUG , format = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' ) def count ( source_file : str , dest_file : str ): \"\"\" Count source :param source_file: :param dest_file: :return: \"\"\" words = read_from_file ( Path ( source_file )) total = 0 for _ in words : total += 1 write_to_file ( Path ( dest_file ), total ) def read_from_file ( source_file : Path ) -> Generator [ str , None , None ]: \"\"\" :param source_file: :return: \"\"\" # Read source_file logging . debug ( 'Read file: %s ' , source_file ) with open ( source_file , 'r' , encoding = 'utf-8' ) as source_obj : for line in source_obj : for word in line . split ( ' ' ): yield word def write_to_file ( dest_file : Path , total_words : int ) -> None : \"\"\" Write result to file :param dest_file: :param total_words: :return: \"\"\" logging . debug ( 'Count %s words, write to %d ' , dest_file , total_words ) with open ( dest_file , 'w' , encoding = 'utf-8' ) as dest_obj : dest_obj . write ( f 'Total count: { total_words } ' ) 2.2.1 \u5bfc\u5165\u683c\u5f0f\u5316 \u5728\u9879\u76ee\u6839\u76ee\u5f55\u8fd0\u884c isort \u5bf9\u5bfc\u5165\u8fdb\u884c\u683c\u5f0f\u5316\u3002 isort . \u6b64\u64cd\u4f5c\u4f1a\u81ea\u52a8\u4fee\u6539\u4ee3\u7801\uff0c\u5c06\u5bfc\u5165\u7684\u5305\u683c\u5f0f\u5316\u3002\u5982\u679c\u60f3\u67e5\u770b\u533a\u522b\uff0c\u53ef\u4ee5\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\uff1a isort . --check-only --diff 2.2.2 \u4ee3\u7801\u98ce\u683c\u68c0\u67e5 \u5728\u9879\u76ee\u6839\u76ee\u5f55\u8fd0\u884c pylint \u68c0\u67e5\u4ee3\u7801\u662f\u5426\u89c4\u8303\uff0c\u662f\u5426\u7b26\u5408 PEP8 \u6807\u51c6\u3002 pylint tests src \u6b64\u64cd\u4f5c\u4f1a\u5217\u51fa\u4ee3\u7801\u4e2d\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u90e8\u5206\uff0c\u5e76\u663e\u793a\u5bf9\u5e94\u7684\u89c4\u8303\u540d\u79f0\u3002\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u6240\u6709\u89c4\u5219\u3002 \u5728\u5b8c\u6210\u4fee\u6539\u540e\u518d\u6b21\u8fd0\u884c\u4e24\u4e2a\u547d\u4ee4\uff0c\u76f4\u5230\u90fd\u6ca1\u6709\u5f02\u5e38\u8f93\u51fa\u4e3a\u6b62\u3002 2.2.3 \u6d4b\u8bd5 \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Pycharm \u5f00\u53d1\uff0c\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb File --> Settings --> Tools --> Python Integrated Tools --> Testing --> Default runner \u9009\u62e9\u6d4b\u8bd5\u6846\u67b6\uff0c\u63a8\u8350\u4f7f\u7528 pytest \u3002 \u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528 mock \u9700\u8981\u5b89\u88c5 pytest-mock \u6a21\u5757\uff0c\u53ef\u4ee5\u5728 pytest \u7684 fixture \u7279\u6027\u4e0a\u4f7f\u7528 mock \u3002 poetry add --dev pytest-mock \u6dfb\u52a0\u6d4b\u8bd5\u914d\u7f6e\uff0c\u5728 tests/conftest.py \u4e2d\u52a0\u5165\uff1a \"\"\"Test config\"\"\" from pathlib import Path from tempfile import TemporaryDirectory import pytest @pytest . fixture def mock_path () -> Path : \"\"\"Mock a path, and clean when unit test done.\"\"\" with TemporaryDirectory () as temp_path : yield Path ( temp_path ) \u5728 tests/ \u4e0b\u6dfb\u52a0\u4e0e src/word_count \u76ee\u5f55\u4e2d\u6587\u4ef6\u540d\u76f8\u540c\u7684\u6587\u4ef6\uff0c\u5e76\u5728\u6587\u4ef6\u540d\u524d\u6dfb\u52a0 test_ \u524d\u7f00\u3002 \u6dfb\u52a0\u6587\u4ef6 tests/test_counter.py \uff1a \"\"\"Test counter\"\"\" from pathlib import Path import pytest from word_count.counter import count , read_from_file , write_to_file @pytest . fixture ( name = 'mock_source_file' ) def fixture_mock_source_file ( mock_path ) -> Path : \"\"\"mock source_file, this file has two words.\"\"\" words = [ 'hello' , ' ' , 'words' ] source_file = mock_path / 'source.txt' with open ( source_file , 'w' , encoding = 'utf-8' ) as obj : obj . write ( '' . join ( words )) yield source_file def test_read_from_file ( mock_source_file ): \"\"\"Test read_from_file\"\"\" result = read_from_file ( mock_source_file ) assert sum ( 1 for _ in result ) == 2 def test_write_to_file ( mock_path ): \"\"\"Test write_to_file\"\"\" dest_file = mock_path / 'dest.txt' write_to_file ( dest_file , 100 ) with open ( dest_file , 'r' , encoding = 'utf-8' ) as obj : txt = obj . read () assert 'Total count: 100' in txt def test_count ( mocker , mock_path , mock_source_file ): \"\"\"Test count\"\"\" mock_read_from_file = mocker . patch ( 'word_count.counter.read_from_file' , return_value = list ( range ( 10 )) ) mock_write_to_file = mocker . patch ( 'word_count.counter.write_to_file' ) dest_file = mock_path / 'dest.txt' count ( str ( mock_source_file ), str ( dest_file )) mock_read_from_file . assert_called_once_with ( mock_source_file ) mock_write_to_file . assert_called_once_with ( dest_file , 10 ) \u8fd0\u884c pytest \uff0c\u8ba9\u6d4b\u8bd5\u6b63\u786e\u8fd0\u884c\u3002\u5982\u679c\u6d4b\u8bd5\u7528\u4f8b\u5931\u8d25\uff0c\u9700\u8981\u6839\u636e\u51fa\u9519\u5806\u6808\u627e\u5230\u95ee\u9898\u539f\u56e0\uff0c\u89e3\u51b3\u6389\u540e\u518d\u6b21\u8fd0\u884c\u6d4b\u8bd5\u547d\u4ee4\uff0c\u76f4\u5230\u4ee3\u7801\u6d4b\u8bd5\u901a\u8fc7\u3002 \u7136\u540e\u8fd0\u884c isort \u548c pylint \u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u68c0\u67e5\u4ee3\u7801\u98ce\u683c\u3002 2.2.4 \u63d0\u4ea4\u4ee3\u7801 \u4e00\u4e2a\u529f\u80fd\u7279\u6027\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u9700\u8981\u63d0\u4ea4\u4ee3\u7801\u6765\u4fdd\u5b58\u8bb0\u5f55\uff0c\u907f\u514d\u610f\u5916\u64cd\u4f5c\u3002 git add . git commit -m \"feat(counter): \u589e\u52a0 Counter \u903b\u8f91\uff0c\u5e76\u5b8c\u6210\u6d4b\u8bd5\u3002\" 2.3 \u7f16\u5199\u547d\u4ee4\u884c\u5165\u53e3 \u5728 src/word_count/ \u76ee\u5f55\u4e0b\uff0c\u521b\u5efa cmdline.py \u6587\u4ef6\uff0c\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a \"\"\"Cmdline\"\"\" \"\"\"Cmdline\"\"\" import argparse import sys from word_count.counter import count def init_args () -> argparse . Namespace : \"\"\"Init argument and parse\"\"\" parser = argparse . ArgumentParser () parser . add_argument ( '-s' , '--source' , required = True , help = 'Source file used for count.' ) parser . add_argument ( '-d' , '--dest' , required = True , help = 'Dest file used for count result' ) return parser . parse_args ( sys . argv [ 1 :]) def main (): \"\"\"Execute\"\"\" args = init_args () count ( args . source , args . dest ) if __name__ == '__main__' : main () \u8fd0\u884c isort \u548c pylint \u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u68c0\u67e5\u4ee3\u7801\u98ce\u683c\u3002 2.3.1 \u6d4b\u8bd5 \u521b\u5efa tests/test_cmdline.py \u6587\u4ef6\uff0c\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a \"\"\"Test cmdline\"\"\" import sys import pytest from word_count import cmdline def test_help ( mocker , capsys ): \"\"\"test help command\"\"\" args = [ 'word_count' , '-h' ] mocker . patch . object ( sys , 'argv' , args ) with pytest . raises ( SystemExit ) as ex : cmdline . main () assert ex . value . code == 0 outerr = capsys . readouterr () assert '-s SOURCE' in outerr . out assert '-d DEST' in outerr . out def test_only_pass_source ( mocker , capsys ): \"\"\"test only pass -s \"\"\" args = [ 'word_count' , '-s' , 'foo' ] mocker . patch . object ( sys , 'argv' , args ) with pytest . raises ( SystemExit ) as ex : cmdline . main () assert ex . value . code == 2 outerr = capsys . readouterr () assert 'the following arguments are required: -d' in outerr . err def test_only_pass_dest ( mocker , capsys ): \"\"\"test only pass -d\"\"\" args = [ 'word_count' , '-d' , 'foo' ] mocker . patch . object ( sys , 'argv' , args ) with pytest . raises ( SystemExit ) as ex : cmdline . main () assert ex . value . code == 2 outerr = capsys . readouterr () assert 'the following arguments are required: -s' in outerr . err def test_main ( mocker ): \"\"\"test cmdline, and everything is fine.\"\"\" args = [ 'word_count' , '-s' , 'foo' , '-d' , 'bar' ] mocker . patch . object ( sys , 'argv' , args ) mock_count = mocker . patch ( 'word_count.cmdline.count' ) cmdline . main () mock_count . assert_called_once () \u8fd0\u884c pytest \uff0c\u8ba9\u6d4b\u8bd5\u6b63\u786e\u8fd0\u884c\u3002 \u8fd0\u884c isort \u548c pylint \u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u68c0\u67e5\u4ee3\u7801\u98ce\u683c\u3002 2.3.2 \u63d0\u4ea4\u4ee3\u7801 git add . git commit -m \"feat(cmdline): \u589e\u52a0 cmdline \u903b\u8f91\uff0c\u5e76\u5b8c\u6210\u6d4b\u8bd5\u3002\" 2.4 \u603b\u7ed3 \u81f3\u6b64\uff0c\u6211\u4eec\u7684\u529f\u80fd\u5df2\u7ecf\u5f00\u53d1\u5b8c\u6210\u3002\u5728\u6574\u4e2a\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u9075\u5faa\u4e86 \u201c\u6dfb\u52a0\u529f\u80fd\u7279\u6027\u201d => \u201c\u4ee3\u7801\u98ce\u683c\u68c0\u67e5\u201d => \u201c\u5355\u5143\u6d4b\u8bd5\u201d \u7684\u5f00\u53d1\u6d41\u7a0b\u3002 \u5982\u679c\u611f\u89c9\u6bcf\u6b21\u8fd0\u884c\u591a\u4e2a\u547d\u4ee4\u6bd4\u8f83\u7e41\u7410\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e2d\u8fd0\u884c tox \u81ea\u52a8\u5316\u5b8c\u6210\u4ee3\u7801\u6d4b\u8bd5\u3001\u5bfc\u5305\u68c0\u67e5\u548c\u4ee3\u7801\u98ce\u683c\u68c0\u67e5\u3002 tox \u73b0\u5728\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d\u8fd0\u884c\u5355\u8bcd\u7edf\u8ba1\uff1a python src/word_count/cmdline.py -s foo.txt -d bar.txt 2.5 \u6253\u5305\u53d1\u5e03 \u5982\u679c\u5e0c\u671b\u522b\u4eba\u80fd\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u9879\u76ee\uff0c\u53ef\u4ee5\u5c06\u9879\u76ee\u6253\u5305\u53d1\u5e03\u5230 pypi \u4e2d\uff0c\u7136\u540e\u5728\u9700\u8981\u4f7f\u7528\u7684\u5730\u65b9\u8fd0\u884c pip install -U word-count \u3002 \u4f46\u662f\u5b89\u88c5\u5230\u73af\u5883\u540e\u53bb\u8fd0\u884c cmdline.py \u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u9700\u8981\u5c06 cmdline.py \u6ce8\u518c\u6210\u53ef\u6267\u884c\u547d\u4ee4\u3002 \u4fee\u6539 pyproject.toml \uff0c\u589e\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a [tool.poetry.plugins.console_scripts] word_count = \"word_count.cmdline:main\" \u5f53\u4f7f\u7528 pip \u547d\u4ee4\u5c06\u9879\u76ee\u5305\u5b89\u88c5\u5230\u73af\u5883\u540e\uff0c\u4f1a\u81ea\u52a8\u6ce8\u518c\u4e00\u4e2a word_count \u7684\u53ef\u6267\u884c\u547d\u4ee4\u3002 \u518d\u6b21\u5c06\u672c\u5730\u9879\u76ee\u4ee5\u53ef\u7f16\u8f91\u65b9\u5f0f\u5b89\u88c5\u5230\u5f53\u524d Python \u73af\u5883\uff1a pip install -e . \u7136\u540e\u5c31\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528 word_count \u547d\u4ee4\uff1a $ word_count -h usage: word_count [-h] -s SOURCE -d DEST optional arguments: -h, --help show this help message and exit -s SOURCE, --source SOURCE Source file used for count. -d DEST, --dest DEST Dest file used for count result 2.5.1 \u6253\u5305 \u8fd0\u884c\u6253\u5305\u547d\u4ee4\uff1a poetry build sdist \u4f1a\u5c06\u9879\u76ee\u6253\u5305\u6210\u6e90\u7801\u5305\uff0c bdist_wheel \u4f1a\u5c06\u9879\u76ee\u6253\u5305\u6210\u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u5305\u3002 \u6253\u5305\u540e\u7684\u6587\u4ef6\u5728 dist \u76ee\u5f55\u4e2d\u3002\u53ef\u4ee5\u76f4\u63a5\u5728\u5176\u4ed6\u5730\u65b9\u8fd0\u884c pip install word_count.wheel \u5b89\u88c5\u3002 2.5.2 \u53d1\u5e03 \u5c06\u5f00\u53d1\u597d\u7684\u9879\u76ee\u53d1\u5e03\u5230\u7d22\u5f15\u4ed3\u5e93\uff0c\u6216\u5185\u7f51\u7684\u79c1\u6709\u4ed3\u5e93\u3002 poetry publish \u9ed8\u8ba4\u4f1a\u5c06\u9879\u76ee\u53d1\u5e03\u5230 pypi \u4e2d\uff0c\u6240\u4ee5\u9700\u8981\u6709\u5bf9\u5e94\u7684\u767b\u5f55\u8d26\u53f7\u3002","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"quick_start/#_1","text":"\u8fd9\u662f\u4e00\u4e2a\u5feb\u901f\u4e0a\u624b\u7684\u5f00\u53d1\u6307\u5357\uff0c\u672c\u6587\u901a\u8fc7\u4e00\u4e2a\u5305\u542b\u4e3b\u8981\u77e5\u8bc6\u70b9\u7684\u7b80\u5355\u9879\u76ee\uff0c\u5411\u5f00\u53d1\u8005\u5c55\u793a\u4e00\u4e2a\u66f4\u7b26\u5408 Python \u89c4\u8303\u548c\u98ce\u683c\uff08Pythonic\uff09\u7684\u9879\u76ee\u5f00\u53d1\u6d41\u7a0b\u3002 \u793a\u4f8b\u9879\u76ee\u662f\u4e00\u4e2a\u5355\u8bcd\u7edf\u8ba1\u7684\u6f14\u793a\u7a0b\u5e8f\uff0c\u5982\u679c\u4f60\u60f3\u67e5\u770b\u5b8c\u6574\u793a\u4f8b\uff0c\u53ef\u4ee5\u6d4f\u89c8 Word Count \u9879\u76ee\u6e90\u7801\u3002","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"quick_start/#1","text":"","title":"1. \u5f00\u53d1\u73af\u5883\u642d\u5efa"},{"location":"quick_start/#11-python","text":"\u672c\u9879\u76ee\u4f7f\u7528 Python 3.10 \u3002\u5177\u4f53\u7248\u672c\u7684 Python \u73af\u5883\u53ef\u4ee5\u5728 \u5b98\u7f51 \u4e0b\u8f7d\u3002","title":"1.1 Python \u5f00\u53d1\u73af\u5883"},{"location":"quick_start/#12","text":"\u63a8\u8350\u4f7f\u7528 Pycharm \u5f00\u53d1\u5de5\u5177\uff0c\u53ef\u4ee5\u9009\u62e9\u514d\u8d39\u7684\u793e\u533a\u7248\u672c\u3002 Visual Studio Code \u662f\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u6b3e\u514d\u8d39\u8f7b\u91cf\u7ea7\u6587\u672c\u7f16\u8f91\u5668\uff0c\u901a\u8fc7\u5b89\u88c5\u63d2\u4ef6\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6210\u4e00\u6b3e\u529f\u80fd\u5f3a\u5927\u7684 IDE \u5f00\u53d1\u5de5\u5177\u3002\u76ee\u524d\u652f\u6301 Python \u7684\u63d2\u4ef6\u4f53\u7cfb\u5df2\u7ecf\u8f83\u4e3a\u5b8c\u5584\uff0c\u6b64\u65b9\u6848\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5907\u7528\u3002","title":"1.2 \u5f00\u53d1\u5de5\u5177"},{"location":"quick_start/#13","text":"\u63a8\u8350\u4f7f\u7528 Poetry \uff0c\u65e2\u5305\u542b\u4e86\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\u4e5f\u652f\u6301\u6253\u5305\u53d1\u5e03\u7b49\u529f\u80fd\u3002 \u5728\u5b89\u88c5\u597d Python \u73af\u5883\u540e\uff0c\u5e94\u8be5\u5728\u5168\u5c40\u73af\u5883\u4e2d\u5b89\u88c5 Poetry \u3002 sudo python -m pip install -U pip sudo pip install -U poetry","title":"1.3 \u865a\u62df\u73af\u5883\u5de5\u5177"},{"location":"quick_start/#14","text":"cookiecutter \u662f\u4e00\u4e2a\u901a\u8fc7\u9879\u76ee\u6a21\u677f\u521b\u5efa\u9879\u76ee\u7684\u547d\u4ee4\u884c\u5de5\u5177\u3002 \u5b89\u88c5 cookiecutter sudo pip3 install -U cookiecutter \u521d\u59cb\u5316\u9879\u76ee cd workspace cookiecutter https://github.com/pyloong/cookiecutter-pythonic-project \u8fd0\u884c\u547d\u4ee4\u540e\u4f1a\u51fa\u73b0\u4e0b\u9762\u7684\u914d\u7f6e\u8fc7\u7a0b\uff0c\u5982\u679c\u4f60\u4e0d\u6e05\u695a\u914d\u7f6e\u7684\u5177\u4f53\u7528\u9014\uff0c\u53ef\u4ee5\u76f4\u63a5\u6309\u56de\u8f66\u4f7f\u7528\u9ed8\u8ba4\u914d\u7f6e\uff0c\u9ed8\u8ba4\u914d\u7f6e\u4f7f\u7528\u9879\u76ee\u6a21\u677f\u521d\u59cb\u503c\u3002 \u276f cookiecutter https://github.com/pyloong/cookiecutter-pythonic-project project_name [ My Project ] : Word Count project_slug [ word_count ] : project_description [ My Awesome Project! ] : Word Count Project author_name [ Author ] : author_email [ author@example.com ] : version [ 0 .1.0 ] : Select python_version: 1 - 3 .10 2 - 3 .9 Choose from 1 , 2 [ 1 ] : use_src_layout [ y ] : use_poetry [ y ] : use_docker [ n ] : Select ci_tools: 1 - none 2 - Gitlab 3 - Github Choose from 1 , 2 , 3 [ 1 ] : init_skeleton [ n ] : \u5982\u679c\u4f60\u5728\u4f7f\u7528\u9879\u76ee\u6a21\u677f\u8fc7\u7a0b\u4e2d\u6709\u4efb\u4f55\u95ee\u9898\u6216\u7591\u95ee\uff0c\u53ef\u4ee5\u901a\u8fc7\u53d1\u8d77 issues \u8fdb\u884c\u53cd\u9988\u3002 \u751f\u6210\u540e\u7684\u9879\u76ee\u7ed3\u6784\u5982\u4e0b\uff1a word_count \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 development.md \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 word_count \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u2514\u2500\u2500 test_version.py \u2514\u2500\u2500 tox.ini \u751f\u6210\u9879\u76ee\u7684 src \u76ee\u5f55\u4e0b\u6709\u4e00\u4e2a\u9879\u76ee\u6a21\u5757\uff0c\u7528\u6765\u5b58\u653e\u9879\u76ee\u6e90\u4ee3\u7801\uff0c tests \u76ee\u5f55\u7528\u6765\u7f16\u5199\u6a21\u5757\u7684\u76f8\u5173\u6d4b\u8bd5\u4ee3\u7801\u3002 pyproject.toml \u5305\u542b\u9879\u76ee\u521d\u59cb\u4f9d\u8d56\uff0c\u548c\u9879\u76ee\u7684\u63cf\u8ff0\u4fe1\u606f\uff0c tox.ini \u5b9a\u4e49\u4e86\u4efb\u52a1\u81ea\u52a8\u5316\u6267\u884c\u903b\u8f91\u3002","title":"1.4 \u521d\u59cb\u5316\u9879\u76ee"},{"location":"quick_start/#15","text":"\u4f7f\u7528 poetry \u521d\u59cb\u5316\u4e00\u4e2a\u865a\u62df\u73af\u5883\u3002 poetry install \u521d\u59cb\u5316\u5b8c\u6210\u540e\uff0c\u4f1a\u751f\u6210\u4e00\u4e2a poetry.lock \uff0c\u53ef\u4ee5\u7528\u6765\u9501\u5b9a\u751f\u4ea7\u73af\u5883\u5b89\u88c5\u5305\u7684\u7248\u672c\u548c\u4f9d\u8d56\u4fe1\u606f\u3002","title":"1.5 \u521d\u59cb\u5316\u9879\u76ee\u73af\u5883"},{"location":"quick_start/#16-git","text":"\u63a8\u8350\u4f7f\u7528 Git \u5bf9\u9879\u76ee\u8fdb\u884c\u7248\u672c\u7ba1\u7406\u3002\u6240\u4ee5\u9700\u8981\u63d0\u524d\u5b89\u88c5 Git \uff0c\u5e76\u719f\u6089\u5e38\u7528\u7684 Git \u6982\u5ff5\u548c Git \u547d\u4ee4\u3002 git init git config user.name test git config user.email test@example.com # \u521d\u59cb\u5316\u9879\u76ee\u63d0\u4ea4 git add . git commit -m \"feat: \u521d\u59cb\u5316\u9879\u76ee\u63d0\u4ea4\"","title":"1.6 \u521d\u59cb\u5316 Git"},{"location":"quick_start/#17","text":"\u5728\u751f\u6210\u7684 pyproject.toml \u6587\u4ef6\u4e2d\uff0c\u9ed8\u8ba4\u6dfb\u52a0\u4e86\u4e00\u4e9b\u5f00\u53d1\u73af\u5883\u4e2d\u5e38\u7528\u7684\u5de5\u5177\u3002 isort : isort \u662f\u4e00\u4e2a\u81ea\u52a8\u683c\u5f0f\u5316\u5bfc\u5165\u5de5\u5177 pylint : pylint \u662f\u4e00\u4e2a\u68c0\u6d4b\u4ee3\u7801\u98ce\u683c\u5de5\u5177 pytest : pytest \u662f\u4e00\u4e2a\u66f4\u52a0\u6613\u7528\u7684\u6d4b\u8bd5\u6846\u67b6\uff0c\u517c\u5bb9 unittest \u6d4b\u8bd5\u6846\u67b6 pytest-cov : pytest-cov \u662f pytest \u7684 Coverage \u63d2\u4ef6\uff0c\u7528\u6765\u7edf\u8ba1\u6d4b\u8bd5\u8986\u76d6\u7387 mkdocs : mkdocs \u662f\u4e00\u4e2a\u9879\u76ee\u6587\u6863\u6784\u5efa\u5de5\u5177\uff0c\u4f7f\u7528 markdown \u7f16\u5199\u5185\u5bb9\uff0c\u6784\u5efa\u751f\u6210\u6587\u6863\u9875\u9762\u3002 mkdocs-material : mkdocs-material \u662f\u57fa\u4e8e mkdocs \u6784\u5efa\u6587\u6863\uff0c\u5e76\u63d0\u4f9b\u73b0\u4ee3\u5316\u4e3b\u9898\u7684\u5e93\u3002 tox : tox \u662f\u4e00\u4e2a\u4efb\u52a1\u81ea\u52a8\u5316\u5de5\u5177 \u5982\u679c\u60f3\u8981\u4e86\u89e3\u76f8\u5173\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u9605\u8bfb\u5bf9\u5e94\u7684\u6280\u672f\u8bf4\u660e\u6587\u6863\u3002","title":"1.7 \u4f1a\u7528\u5230\u7684\u5176\u4ed6\u5de5\u5177"},{"location":"quick_start/#2","text":"\u9996\u5148\u5c06\u9879\u76ee\u4ee5\u53ef\u7f16\u8f91\u65b9\u5f0f\u5b89\u88c5\u5230\u73af\u5883\u4e2d\uff1a pip install -e . \u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u5c06 src \u4e0b\u7684\u5305\u5b89\u88c5\u5230 Python \u73af\u5883\u4e2d\uff0c\u5426\u5219\u65e0\u6cd5\u6b63\u5e38\u5bfc\u5165\u5305\u4e2d\u7684\u6a21\u5757\u3002","title":"2. \u529f\u80fd\u5f00\u53d1"},{"location":"quick_start/#21","text":"\u63d0\u4f9b\u4e00\u4e2a\u4ece\u6587\u672c\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\uff0c\u6570\u636e\u4ee5\u7a7a\u683c\u5206\u5272\u5355\u8bcd\uff0c\u7136\u540e\u7edf\u8ba1\u6587\u4ef6\u4e2d\u7684\u5355\u8bcd\u6570\u91cf\uff0c\u5e76\u5c06\u7ed3\u679c\u5199\u5165\u5230\u76ee\u6807\u6587\u4ef6\u4e2d\u3002","title":"2.1 \u529f\u80fd\u9700\u6c42"},{"location":"quick_start/#22","text":"\u5728 src/word_count/ \u4e0b\u521b\u5efa counter.py \u6587\u4ef6\uff0c\u540c\u65f6\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a \"\"\"Count a file \"\"\" import logging from collections.abc import Generator from pathlib import Path # Config root logger logging . basicConfig ( level = logging . DEBUG , format = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' ) def count ( source_file : str , dest_file : str ): \"\"\" Count source :param source_file: :param dest_file: :return: \"\"\" words = read_from_file ( Path ( source_file )) total = 0 for _ in words : total += 1 write_to_file ( Path ( dest_file ), total ) def read_from_file ( source_file : Path ) -> Generator [ str , None , None ]: \"\"\" :param source_file: :return: \"\"\" # Read source_file logging . debug ( 'Read file: %s ' , source_file ) with open ( source_file , 'r' , encoding = 'utf-8' ) as source_obj : for line in source_obj : for word in line . split ( ' ' ): yield word def write_to_file ( dest_file : Path , total_words : int ) -> None : \"\"\" Write result to file :param dest_file: :param total_words: :return: \"\"\" logging . debug ( 'Count %s words, write to %d ' , dest_file , total_words ) with open ( dest_file , 'w' , encoding = 'utf-8' ) as dest_obj : dest_obj . write ( f 'Total count: { total_words } ' )","title":"2.2 \u7f16\u5199\u8ba1\u6570\u5668"},{"location":"quick_start/#221","text":"\u5728\u9879\u76ee\u6839\u76ee\u5f55\u8fd0\u884c isort \u5bf9\u5bfc\u5165\u8fdb\u884c\u683c\u5f0f\u5316\u3002 isort . \u6b64\u64cd\u4f5c\u4f1a\u81ea\u52a8\u4fee\u6539\u4ee3\u7801\uff0c\u5c06\u5bfc\u5165\u7684\u5305\u683c\u5f0f\u5316\u3002\u5982\u679c\u60f3\u67e5\u770b\u533a\u522b\uff0c\u53ef\u4ee5\u8fd0\u884c\u5982\u4e0b\u547d\u4ee4\uff1a isort . --check-only --diff","title":"2.2.1 \u5bfc\u5165\u683c\u5f0f\u5316"},{"location":"quick_start/#222","text":"\u5728\u9879\u76ee\u6839\u76ee\u5f55\u8fd0\u884c pylint \u68c0\u67e5\u4ee3\u7801\u662f\u5426\u89c4\u8303\uff0c\u662f\u5426\u7b26\u5408 PEP8 \u6807\u51c6\u3002 pylint tests src \u6b64\u64cd\u4f5c\u4f1a\u5217\u51fa\u4ee3\u7801\u4e2d\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u90e8\u5206\uff0c\u5e76\u663e\u793a\u5bf9\u5e94\u7684\u89c4\u8303\u540d\u79f0\u3002\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u6240\u6709\u89c4\u5219\u3002 \u5728\u5b8c\u6210\u4fee\u6539\u540e\u518d\u6b21\u8fd0\u884c\u4e24\u4e2a\u547d\u4ee4\uff0c\u76f4\u5230\u90fd\u6ca1\u6709\u5f02\u5e38\u8f93\u51fa\u4e3a\u6b62\u3002","title":"2.2.2 \u4ee3\u7801\u98ce\u683c\u68c0\u67e5"},{"location":"quick_start/#223","text":"\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Pycharm \u5f00\u53d1\uff0c\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb File --> Settings --> Tools --> Python Integrated Tools --> Testing --> Default runner \u9009\u62e9\u6d4b\u8bd5\u6846\u67b6\uff0c\u63a8\u8350\u4f7f\u7528 pytest \u3002 \u4e3a\u4e86\u65b9\u4fbf\u4f7f\u7528 mock \u9700\u8981\u5b89\u88c5 pytest-mock \u6a21\u5757\uff0c\u53ef\u4ee5\u5728 pytest \u7684 fixture \u7279\u6027\u4e0a\u4f7f\u7528 mock \u3002 poetry add --dev pytest-mock \u6dfb\u52a0\u6d4b\u8bd5\u914d\u7f6e\uff0c\u5728 tests/conftest.py \u4e2d\u52a0\u5165\uff1a \"\"\"Test config\"\"\" from pathlib import Path from tempfile import TemporaryDirectory import pytest @pytest . fixture def mock_path () -> Path : \"\"\"Mock a path, and clean when unit test done.\"\"\" with TemporaryDirectory () as temp_path : yield Path ( temp_path ) \u5728 tests/ \u4e0b\u6dfb\u52a0\u4e0e src/word_count \u76ee\u5f55\u4e2d\u6587\u4ef6\u540d\u76f8\u540c\u7684\u6587\u4ef6\uff0c\u5e76\u5728\u6587\u4ef6\u540d\u524d\u6dfb\u52a0 test_ \u524d\u7f00\u3002 \u6dfb\u52a0\u6587\u4ef6 tests/test_counter.py \uff1a \"\"\"Test counter\"\"\" from pathlib import Path import pytest from word_count.counter import count , read_from_file , write_to_file @pytest . fixture ( name = 'mock_source_file' ) def fixture_mock_source_file ( mock_path ) -> Path : \"\"\"mock source_file, this file has two words.\"\"\" words = [ 'hello' , ' ' , 'words' ] source_file = mock_path / 'source.txt' with open ( source_file , 'w' , encoding = 'utf-8' ) as obj : obj . write ( '' . join ( words )) yield source_file def test_read_from_file ( mock_source_file ): \"\"\"Test read_from_file\"\"\" result = read_from_file ( mock_source_file ) assert sum ( 1 for _ in result ) == 2 def test_write_to_file ( mock_path ): \"\"\"Test write_to_file\"\"\" dest_file = mock_path / 'dest.txt' write_to_file ( dest_file , 100 ) with open ( dest_file , 'r' , encoding = 'utf-8' ) as obj : txt = obj . read () assert 'Total count: 100' in txt def test_count ( mocker , mock_path , mock_source_file ): \"\"\"Test count\"\"\" mock_read_from_file = mocker . patch ( 'word_count.counter.read_from_file' , return_value = list ( range ( 10 )) ) mock_write_to_file = mocker . patch ( 'word_count.counter.write_to_file' ) dest_file = mock_path / 'dest.txt' count ( str ( mock_source_file ), str ( dest_file )) mock_read_from_file . assert_called_once_with ( mock_source_file ) mock_write_to_file . assert_called_once_with ( dest_file , 10 ) \u8fd0\u884c pytest \uff0c\u8ba9\u6d4b\u8bd5\u6b63\u786e\u8fd0\u884c\u3002\u5982\u679c\u6d4b\u8bd5\u7528\u4f8b\u5931\u8d25\uff0c\u9700\u8981\u6839\u636e\u51fa\u9519\u5806\u6808\u627e\u5230\u95ee\u9898\u539f\u56e0\uff0c\u89e3\u51b3\u6389\u540e\u518d\u6b21\u8fd0\u884c\u6d4b\u8bd5\u547d\u4ee4\uff0c\u76f4\u5230\u4ee3\u7801\u6d4b\u8bd5\u901a\u8fc7\u3002 \u7136\u540e\u8fd0\u884c isort \u548c pylint \u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u68c0\u67e5\u4ee3\u7801\u98ce\u683c\u3002","title":"2.2.3 \u6d4b\u8bd5"},{"location":"quick_start/#224","text":"\u4e00\u4e2a\u529f\u80fd\u7279\u6027\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u9700\u8981\u63d0\u4ea4\u4ee3\u7801\u6765\u4fdd\u5b58\u8bb0\u5f55\uff0c\u907f\u514d\u610f\u5916\u64cd\u4f5c\u3002 git add . git commit -m \"feat(counter): \u589e\u52a0 Counter \u903b\u8f91\uff0c\u5e76\u5b8c\u6210\u6d4b\u8bd5\u3002\"","title":"2.2.4 \u63d0\u4ea4\u4ee3\u7801"},{"location":"quick_start/#23","text":"\u5728 src/word_count/ \u76ee\u5f55\u4e0b\uff0c\u521b\u5efa cmdline.py \u6587\u4ef6\uff0c\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a \"\"\"Cmdline\"\"\" \"\"\"Cmdline\"\"\" import argparse import sys from word_count.counter import count def init_args () -> argparse . Namespace : \"\"\"Init argument and parse\"\"\" parser = argparse . ArgumentParser () parser . add_argument ( '-s' , '--source' , required = True , help = 'Source file used for count.' ) parser . add_argument ( '-d' , '--dest' , required = True , help = 'Dest file used for count result' ) return parser . parse_args ( sys . argv [ 1 :]) def main (): \"\"\"Execute\"\"\" args = init_args () count ( args . source , args . dest ) if __name__ == '__main__' : main () \u8fd0\u884c isort \u548c pylint \u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u68c0\u67e5\u4ee3\u7801\u98ce\u683c\u3002","title":"2.3 \u7f16\u5199\u547d\u4ee4\u884c\u5165\u53e3"},{"location":"quick_start/#231","text":"\u521b\u5efa tests/test_cmdline.py \u6587\u4ef6\uff0c\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a \"\"\"Test cmdline\"\"\" import sys import pytest from word_count import cmdline def test_help ( mocker , capsys ): \"\"\"test help command\"\"\" args = [ 'word_count' , '-h' ] mocker . patch . object ( sys , 'argv' , args ) with pytest . raises ( SystemExit ) as ex : cmdline . main () assert ex . value . code == 0 outerr = capsys . readouterr () assert '-s SOURCE' in outerr . out assert '-d DEST' in outerr . out def test_only_pass_source ( mocker , capsys ): \"\"\"test only pass -s \"\"\" args = [ 'word_count' , '-s' , 'foo' ] mocker . patch . object ( sys , 'argv' , args ) with pytest . raises ( SystemExit ) as ex : cmdline . main () assert ex . value . code == 2 outerr = capsys . readouterr () assert 'the following arguments are required: -d' in outerr . err def test_only_pass_dest ( mocker , capsys ): \"\"\"test only pass -d\"\"\" args = [ 'word_count' , '-d' , 'foo' ] mocker . patch . object ( sys , 'argv' , args ) with pytest . raises ( SystemExit ) as ex : cmdline . main () assert ex . value . code == 2 outerr = capsys . readouterr () assert 'the following arguments are required: -s' in outerr . err def test_main ( mocker ): \"\"\"test cmdline, and everything is fine.\"\"\" args = [ 'word_count' , '-s' , 'foo' , '-d' , 'bar' ] mocker . patch . object ( sys , 'argv' , args ) mock_count = mocker . patch ( 'word_count.cmdline.count' ) cmdline . main () mock_count . assert_called_once () \u8fd0\u884c pytest \uff0c\u8ba9\u6d4b\u8bd5\u6b63\u786e\u8fd0\u884c\u3002 \u8fd0\u884c isort \u548c pylint \u683c\u5f0f\u5316\u4ee3\u7801\u5e76\u68c0\u67e5\u4ee3\u7801\u98ce\u683c\u3002","title":"2.3.1 \u6d4b\u8bd5"},{"location":"quick_start/#232","text":"git add . git commit -m \"feat(cmdline): \u589e\u52a0 cmdline \u903b\u8f91\uff0c\u5e76\u5b8c\u6210\u6d4b\u8bd5\u3002\"","title":"2.3.2 \u63d0\u4ea4\u4ee3\u7801"},{"location":"quick_start/#24","text":"\u81f3\u6b64\uff0c\u6211\u4eec\u7684\u529f\u80fd\u5df2\u7ecf\u5f00\u53d1\u5b8c\u6210\u3002\u5728\u6574\u4e2a\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u9075\u5faa\u4e86 \u201c\u6dfb\u52a0\u529f\u80fd\u7279\u6027\u201d => \u201c\u4ee3\u7801\u98ce\u683c\u68c0\u67e5\u201d => \u201c\u5355\u5143\u6d4b\u8bd5\u201d \u7684\u5f00\u53d1\u6d41\u7a0b\u3002 \u5982\u679c\u611f\u89c9\u6bcf\u6b21\u8fd0\u884c\u591a\u4e2a\u547d\u4ee4\u6bd4\u8f83\u7e41\u7410\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u6839\u76ee\u5f55\u4e2d\u8fd0\u884c tox \u81ea\u52a8\u5316\u5b8c\u6210\u4ee3\u7801\u6d4b\u8bd5\u3001\u5bfc\u5305\u68c0\u67e5\u548c\u4ee3\u7801\u98ce\u683c\u68c0\u67e5\u3002 tox \u73b0\u5728\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d\u8fd0\u884c\u5355\u8bcd\u7edf\u8ba1\uff1a python src/word_count/cmdline.py -s foo.txt -d bar.txt","title":"2.4 \u603b\u7ed3"},{"location":"quick_start/#25","text":"\u5982\u679c\u5e0c\u671b\u522b\u4eba\u80fd\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u9879\u76ee\uff0c\u53ef\u4ee5\u5c06\u9879\u76ee\u6253\u5305\u53d1\u5e03\u5230 pypi \u4e2d\uff0c\u7136\u540e\u5728\u9700\u8981\u4f7f\u7528\u7684\u5730\u65b9\u8fd0\u884c pip install -U word-count \u3002 \u4f46\u662f\u5b89\u88c5\u5230\u73af\u5883\u540e\u53bb\u8fd0\u884c cmdline.py \u4f1a\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u9700\u8981\u5c06 cmdline.py \u6ce8\u518c\u6210\u53ef\u6267\u884c\u547d\u4ee4\u3002 \u4fee\u6539 pyproject.toml \uff0c\u589e\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a [tool.poetry.plugins.console_scripts] word_count = \"word_count.cmdline:main\" \u5f53\u4f7f\u7528 pip \u547d\u4ee4\u5c06\u9879\u76ee\u5305\u5b89\u88c5\u5230\u73af\u5883\u540e\uff0c\u4f1a\u81ea\u52a8\u6ce8\u518c\u4e00\u4e2a word_count \u7684\u53ef\u6267\u884c\u547d\u4ee4\u3002 \u518d\u6b21\u5c06\u672c\u5730\u9879\u76ee\u4ee5\u53ef\u7f16\u8f91\u65b9\u5f0f\u5b89\u88c5\u5230\u5f53\u524d Python \u73af\u5883\uff1a pip install -e . \u7136\u540e\u5c31\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528 word_count \u547d\u4ee4\uff1a $ word_count -h usage: word_count [-h] -s SOURCE -d DEST optional arguments: -h, --help show this help message and exit -s SOURCE, --source SOURCE Source file used for count. -d DEST, --dest DEST Dest file used for count result","title":"2.5 \u6253\u5305\u53d1\u5e03"},{"location":"quick_start/#251","text":"\u8fd0\u884c\u6253\u5305\u547d\u4ee4\uff1a poetry build sdist \u4f1a\u5c06\u9879\u76ee\u6253\u5305\u6210\u6e90\u7801\u5305\uff0c bdist_wheel \u4f1a\u5c06\u9879\u76ee\u6253\u5305\u6210\u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u5305\u3002 \u6253\u5305\u540e\u7684\u6587\u4ef6\u5728 dist \u76ee\u5f55\u4e2d\u3002\u53ef\u4ee5\u76f4\u63a5\u5728\u5176\u4ed6\u5730\u65b9\u8fd0\u884c pip install word_count.wheel \u5b89\u88c5\u3002","title":"2.5.1 \u6253\u5305"},{"location":"quick_start/#252","text":"\u5c06\u5f00\u53d1\u597d\u7684\u9879\u76ee\u53d1\u5e03\u5230\u7d22\u5f15\u4ed3\u5e93\uff0c\u6216\u5185\u7f51\u7684\u79c1\u6709\u4ed3\u5e93\u3002 poetry publish \u9ed8\u8ba4\u4f1a\u5c06\u9879\u76ee\u53d1\u5e03\u5230 pypi \u4e2d\uff0c\u6240\u4ee5\u9700\u8981\u6709\u5bf9\u5e94\u7684\u767b\u5f55\u8d26\u53f7\u3002","title":"2.5.2 \u53d1\u5e03"},{"location":"guidelines/advanced/configuration/","text":"\u914d\u7f6e \u914d\u7f6e\u662f\u4e00\u4e2a\u9879\u76ee\u7684\u6838\u5fc3\u9a71\u52a8\uff0c\u53ef\u4ee5\u5728\u4e0d\u66f4\u6539\u6e90\u4ee3\u7801\u6216\u51cf\u5c11\u6e90\u4ee3\u7801\u4fee\u6539\u7684\u60c5\u51b5\u4e0b\u5feb\u901f\u8c03\u6574\u9879\u76ee\u7684\u8fd0\u884c\u3002 \u4f7f\u7528\u4e2d\u5fc3\u914d\u7f6e\u9a71\u52a8\u9879\u76ee\uff0c\u80fd\u8ba9\u9879\u76ee\u7684\u4f7f\u7528\u66f4\u52a0\u7075\u6d3b\uff0c\u8fd0\u7ef4\u5de5\u4f5c\u66f4\u8f7b\u677e\u3002 \u4f8b\u5982 Django \u6846\u67b6\u4f1a\u81ea\u5e26\u4e00\u4e2a settings.py \u6587\u4ef6\uff0c\u5728 settings.py \u4e2d\u7684\u914d\u7f6e\u9879\u90fd\u4f1a\u8986\u76d6\u6846\u67b6 \u7ea7\u522b\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u65b9\u4fbf\u7528\u6237\u81ea\u5b9a\u4e49\u4fee\u6539\u3002\u5728\u4ee3\u7801\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 django.settings \u5bf9\u8c61\u83b7\u53d6\u6240\u6709 \u914d\u7f6e\u9879\u3002 Scrapy \u6846\u67b6\u540c\u6837\u4e5f\u6709\u8fd9\u79cd\u673a\u5236\u3002 \u8fd9\u4e9b\u6210\u719f\u7684\u6846\u67b6\u589e\u52a0\u4e86\u4e2d\u5fc3\u914d\u7f6e\uff0c\u5c31\u662f\u4e3a\u4e86\u901a\u8fc7\u5f00\u653e\u51fa\u6765\u7684\u914d\u7f6e\u9879\u6765\u7075\u6d3b\u63a7\u5236\u6846\u67b6\u6240\u652f\u6301\u7684\u5185\u5bb9\u3002 \u800c\u5728\u4e00\u822c\u9879\u76ee\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u53c2\u7167\u8fd9\u79cd\u8bbe\u8ba1\uff0c\u8ba9\u9879\u76ee\u90e8\u7f72\u66f4\u52a0\u7075\u6d3b\u3002 1. \u4e00\u822c\u505a\u6cd5 \u5e38\u89c1\u589e\u52a0\u4e2d\u5fc3\u914d\u7f6e\u7684\u505a\u6cd5\u662f\u5728\u9879\u76ee\u4e2d\u589e\u52a0\u4e00\u4e2a settings.py \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u4e2d\u6a21\u5757\u7ea7\u522b\u5e38\u91cf\u5b9a\u4e49\u914d\u7f6e\u9879\u3002 \u5728\u4f7f\u7528\u65f6\uff0c\u901a\u8fc7\u5bfc\u5165\u6a21\u5757\u4e2d\u7684\u5185\u5bb9\u4f7f\u7528\u3002 \u4f8b\u5982\uff1a \u5728\u9879\u76ee\u4e2d\u521b\u5efa\u4e00\u4e2a settings.py \u6587\u4ef6\uff0c\u5728\u6587\u4ef6\u4e2d\u5b9a\u4e49\u6a21\u5757\u7ea7\u5e38\u91cf ## Settings # File config SOURCE_FILE = '/tmp/foo.txt' # Log config LOG_LEVEL = 'DEBUG' LOG_FORMAT = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' \u521b\u5efa app.py \u6587\u4ef6\uff0c\u5728\u6587\u4ef6\u4e2d\u5bfc\u5165 settings \u6a21\u5757\uff0c\u5e76\u4f7f\u7528\u8be5\u6a21\u5757\u4e2d\u7684\u5e38\u91cf\u3002 \"\"\"Count a file \"\"\" import logging from pathlib import Path import settings # Config root logger logging . basicConfig ( level = settings . LOG_LEVEL , format = settings . LOG_FORMAT , ) def count_word ( source_file : Path ) -> None : \"\"\" :param source_file: :return: None \"\"\" total_words = 0 # Read source_file logging . debug ( 'Read file: %s ' , source_file ) with open ( source_file , mode = 'r' , encoding = 'utf-8' ) as source_obj : for line in source_obj . readlines (): total_words += len ( line . split ( ' ' )) logging . info ( 'File has %s words' , total_words ) def main (): count_word ( Path ( settings . SOURCE_FILE )) if __name__ == '__main__' : main () 2. \u52a8\u6001\u914d\u7f6e\u793a\u4f8b Dynaconf \u662f\u4e00\u4e2a\u7075\u6d3b\u7684\u4e2d\u5fc3\u914d\u7f6e\u7ba1\u7406\u5de5\u5177\uff0c\u5e95\u5c42\u8bbe\u8ba1\u548c Django \u4e00\u81f4\uff0c\u4f1a\u5ef6\u8fdf\u52a0\u8f7d\u914d\u7f6e\u3002 \u5176\u5177\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u52a0\u8f7d\u591a\u4e2a\u914d\u7f6e\u6e90 \u914d\u7f6e\u5206\u5c42 Django Flask \u6269\u5c55 \u652f\u6301 Redis \u548c Vault \u5728\u9879\u76ee\u4e2d\u65b0\u5efa\u914d\u7f6e\u6587\u4ef6 settings.yml settings.yml \uff1a foo : 1 bar : 2 \u65b0\u5efa\u914d\u7f6e\u6a21\u5757 config.py config.py \uff1a from dynaconf import Dynaconf settings = Dynaconf ( settings_files = [ 'settings.yml' ], ) \u65b0\u5efa\u4e00\u4e2a app.py \u6587\u4ef6\uff0c\u4f7f\u7528\u914d\u7f6e app.py \uff1a from config import settings print ( settings . FOO ) print ( settings . BAR ) \u7136\u540e\u8fd0\u884c python app.py \u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u80fd\u591f\u81ea\u52a8\u83b7\u53d6 settings.yml \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u503c\u3002 \u589e\u52a0\u672c\u5730\u914d\u7f6e\u6587\u4ef6 settings.local.yml settings.local.yml : foo: 10 bar: 20 \u518d\u6b21\u8fd0\u884c python app.py \uff0c\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u83b7\u53d6 settings.local.yml \u3002 \u8fd9\u662f\u56e0\u4e3a Dynaconf \u5728\u521d\u59cb\u5316\u662f\u4f20\u5165\u4e86\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\u4e3a settings.yml \uff0c\u5728\u52a0\u8f7d\u914d\u7f6e\u65f6\uff0c\u4f1a\u540c\u65f6\u67e5\u627e settings.local.yml \u7684\u914d\u7f6e\u6587\u4ef6\u3002 \u5e76\u5c06\u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9\u5408\u5e76\uff0c\u5982\u679c\u5b58\u5728\u76f8\u540c\u53d8\u91cf\uff0c settings.local.yml \u4f1a\u8986\u76d6 settings.yml \u4e2d\u7684\u914d\u7f6e\u3002 \u9879\u76ee\u5b9e\u8df5 Django \u9879\u76ee Dynaconf \u53ef\u4ee5\u642d\u914d Django \u4e00\u8d77\u4f7f\u7528\u3002\u867d\u7136 Django \u6709\u81ea\u5df1\u7684\u914d\u7f6e\u6a21\u5757\uff0c\u4f46\u662f\u5e76\u4e0d\u7075\u6d3b\u3002 \u642d\u914d Dynaconf \uff0c\u53ef\u4ee5\u542f\u52a8\u5c42\u7ea7\u914d\u7f6e\uff0c\u4f8b\u5982\u652f\u6301 Dev \u3001 prod \u548c test \u591a\u79cd\u73af\u5883\u7684\u914d\u7f6e\uff0c\u800c\u4e14\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u5f88\u65b9\u4fbf\u7684 \u4fee\u6539\u914d\u7f6e\uff0c\u5305\u62ec\u52a0\u8f7d\u5176\u4ed6\u5730\u65b9\u7684\u914d\u7f6e\u3002 \u5728 Django \u9879\u76ee\u7684 settings.py \u6587\u4ef6\u6700\u540e\u6dfb\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a import dynaconf # pylint: disable=wrong-import-position settings = dynaconf . DjangoDynaconf ( __name__ , envvar_prefix = 'BLOG' , settings_files = [ BASE_DIR / 'settings.local.yml' ], environments = False , load_dotenv = True , ENVVAR_FOR_DYNACONF = 'BLOG_SETTINGS' , includes = [ Path ( sys . prefix , 'etc' , 'blog' , 'settings.yml' ), ] ) \u5f53 Django \u52a0\u8f7d settings.py \u6a21\u5757\u7684\u65f6\u5019\uff0c\u4f1a\u521d\u59cb\u5316 Dynaconf \u3002 Dynaconf \u4f1a\u5c06 Django \u7684 settings \u5bf9\u8c61\u4e2d\u7684\u914d\u7f6e\u52a0\u8f7d\u5230 Dynaconf \u4e2d\uff0c \u7136\u540e\u5c06\u81ea\u8eab\u7684\u6240\u6709\u914d\u7f6e\u518d\u91cd\u65b0\u52a0\u8f7d\u5230 Django \u7684 settings \u5bf9\u8c61\u4e2d\u3002 Dynaconf \u4e0d\u4ec5\u4f1a\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\uff0c\u4e5f\u4f1a\u52a0\u8f7d\u4ee5 BLOG_ \u5f00\u5934\u7684\u73af\u5883\u53d8\u91cf\u3002 \u4f7f\u7528\u914d\u7f6e\u6587\u4ef6 \u5728\u521d\u59cb\u5316 Dynaconf \u65f6\uff0c\u4f1a\u52a0\u8f7d\u9879\u76ee\u6839\u76ee\u5f55\u7684 settings.local.yml \u914d\u7f6e\u6587\u4ef6\uff0c\u6b64\u6587\u4ef6\u4e00\u822c\u662f\u5f00\u53d1\u65f6\u4f7f\u7528\u7684\u672c\u5730\u914d\u7f6e\uff0c\u5e76\u4e14\u4e0d\u5e94\u8be5\u88ab Git \u8ffd\u8e2a\u3002 \u5728\u4e0d\u540c\u7684\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u6216\u8005\u4e0d\u540c\u7684\u73af\u5883\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u6837\u5316\u7684\u672c\u5730\u914d\u7f6e\u3002\u5bf9\u4e8e\u9700\u8981\u7edf\u4e00\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u76f4\u63a5\u653e\u5728 settings.py \u4e2d\u5c31\u53ef\u4ee5\u4e86\u3002 \u540c\u65f6\u8fd8\u4f1a\u8bfb\u53d6 <sys.prefix>/etc/blog/settings.yml \u3002\u8fd9\u4e2a\u4e00\u822c\u4f5c\u4e3a\u751f\u4ea7\u73af\u5883\u7684\u7cfb\u7edf\u914d\u7f6e\u3002\u5982\u679c\u4f7f\u7528\u7684\u662f\u7cfb\u7edf Python \u73af\u5883\uff0c\u53ef\u80fd\u76ee\u5f55\u662f\u5728 /usr/local/etc/blog/settings.yml \uff0c\u5982\u679c\u662f\u865a\u62df\u73af\u5883\uff0c\u5219\u53ef\u80fd\u662f /home/foo/.virtualenvs/blog-fxage/etc/blog/settings.yml \u3002 \u5982\u679c\u60f3\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf BLOG_SETTINGS=/tmp/settings.yml \u6307\u5b9a Dynaconf \u52a0\u8f7d\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 DEBUG : true ALLOWED_HOSTS : - '*' INSTALLED_APPS : - dynaconf_merge_unique # \u6307\u793a Dynaconf \u5c06 INSTALLED_APPS \u4e0e\u9ed8\u8ba4\u914d\u7f6e\u5408\u5e76\u800c\u4e0d\u662f\u8986\u76d6\uff0c\u5e76\u4e14\u8fdb\u884c\u53bb\u91cd - debug_toolbar # \u6307\u793a Dynaconf \u5c06 debug_toolbar \u6dfb\u52a0\u5230 INSTALLED_APPS \u5217\u8868\u4e2d MIDDLEWARE : - dynaconf_merge_unique - debug_toolbar.middleware.DebugToolbarMiddleware DATABASES : default : ENGINE : 'django.db.backends.mysql' NAME : blo USER : root PASSWORD : '000000' HOST : 127.0.0.1 PORT : 3306 REST_FRAMEWORK : # \u6307\u793a Dynaconf \u5c06 REST_FRAMEWORK \u4e0e\u9ed8\u8ba4\u914d\u7f6e\u5408\u5e76\uff0c\u800c\u4e0d\u662f\u8986\u76d6 dynaconf_merge_unique : true # \u6307\u793a Dynaconf \u53ea\u4fee\u6539 PAGE_SIZE \u7684\u503c\uff0c\u5176\u4ed6\u4e0d\u53d8 PAGE_SIZE : 10 } \u4e0a\u8ff0\u914d\u7f6e\u5728 Dynaconf \u8bfb\u53d6\u540e\uff0c\u53ef\u4ee5\u8986\u76d6 settings.py \u4e2d\u7684\u9ed8\u8ba4\u914d\u7f6e\u3002\u5176\u4e2d\u6709\u51e0\u4e2a\u70b9\u9700\u8981\u6ce8\u610f\uff1a \u5982\u679c\u76f4\u63a5\u6587\u4ef6\u4e2d\u5b9a\u4e49\u914d\u7f6e\uff0c\u4f1a\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e\u3002 \u5982\u679c\u9700\u8981\u548c\u9ed8\u8ba4\u914d\u7f6e\u5408\u5e76\uff0c\u53ef\u4ee5\u4f7f\u7528 dynaconf_merge \u3002 \u4f7f\u7528\u73af\u5883\u53d8\u91cf Dynaconf \u652f\u6301\u52a0\u8f7d\u73af\u5883\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 .env \u6587\u4ef6\u3002 \u5728\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u65f6\uff0c\u540c\u6837\u548c\u914d\u7f6e\u6587\u4ef6\u4e00\u6837\uff0c\u652f\u6301\u5b8c\u5168\u8986\u76d6\uff0c\u548c\u81ea\u52a8\u5408\u5e76\u3002 \u9700\u8981\u989d\u5916\u5f3a\u8c03\u4e00\u70b9\u7684\u662f\uff0c Dynaconf \u521d\u59cb\u5316\u7684\u65f6\uff0c\u4f7f\u7528\u4e86 envvar_prefix=BLOG \u3002 Dynaconf \u4f1a\u81ea\u52a8\u52a0\u8f7d\u4ee5 BLOG_ \u5f00\u5934\u7684 \u73af\u5883\u53d8\u91cf\u3002\u5305\u62ec ENVVAR_FOR_DYNACONF='BLOG_SETTINGS' \u914d\u7f6e\u7684 Dynaconf \u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u7684\u73af\u5883\u53d8\u91cf BLOG_SETTINGS \u3002 \u6240\u4ee5\u5728\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u9519\u8bef\u7684\u5c06 BLOG_SETTINGS \u73af\u5883\u53d8\u91cf\u6307\u5b9a\u5176\u4ed6\u5185\u5bb9\uff0c\u800c\u9020\u6210\u4e0d\u5fc5\u8981\u7684\u9519\u8bef\u3002 # \u4f7f\u7528\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5355\u503c export BLOG_DEBUG = 'True' # \u4f7f\u7528\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5bf9\u8c61 export BLOG_DATABASES = \"{'default'={'ENGINE'='django.db.backends.mysql', 'NAME'='blog', 'USER'='root', 'PASSWORD'='000000', 'HOST'='localhost', 'POST'=3306}}\" # \u4f7f\u7528\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5408\u5e76\u5185\u5bb9 export BLOG_MIDDLEWARE = '[\"dynaconf_merge_unique\", \"debug_toolbar.middleware.DebugToolbarMiddleware\"]' # \u4f7f\u7528 dynaconf_merge_unique \u5408\u5e76\u5e76\u53bb\u91cd export BLOG_MIDDLEWARE = '@merge [\"debug_toolbar.middleware.DebugToolbarMiddleware\"]' # \u4f7f\u7528 merge \u5173\u952e\u5b57 export BLOG_MIDDLEWARE = '@merge debug_toolbar.middleware.DebugToolbarMiddleware' # \u7b80\u5199 export BLOG_REST_FRAMEWORK = '{PAGE_SIZE=10, dynaconf_merge=true}' # \u4f7f\u7528 dynaconf_merge \u5408\u5e76 export BLOG_REST_FRAMEWORK = '@merge {PAGE_SIZE=10}' # \u4f7f\u7528 merge \u5173\u952e\u5b57 export BLOG_REST_FRAMEWORK = '@merge PAGE_SIZE=10' # \u7b80\u5199 export BLOG_DATABASES__default__PASSWORD = '123456' # \u4f7f\u7528\u4e24\u4e2a\u4e0b\u5212\u7ebf (__) \u4f5c\u4e3a\u5b50\u7ea7","title":"\u914d\u7f6e"},{"location":"guidelines/advanced/configuration/#_1","text":"\u914d\u7f6e\u662f\u4e00\u4e2a\u9879\u76ee\u7684\u6838\u5fc3\u9a71\u52a8\uff0c\u53ef\u4ee5\u5728\u4e0d\u66f4\u6539\u6e90\u4ee3\u7801\u6216\u51cf\u5c11\u6e90\u4ee3\u7801\u4fee\u6539\u7684\u60c5\u51b5\u4e0b\u5feb\u901f\u8c03\u6574\u9879\u76ee\u7684\u8fd0\u884c\u3002 \u4f7f\u7528\u4e2d\u5fc3\u914d\u7f6e\u9a71\u52a8\u9879\u76ee\uff0c\u80fd\u8ba9\u9879\u76ee\u7684\u4f7f\u7528\u66f4\u52a0\u7075\u6d3b\uff0c\u8fd0\u7ef4\u5de5\u4f5c\u66f4\u8f7b\u677e\u3002 \u4f8b\u5982 Django \u6846\u67b6\u4f1a\u81ea\u5e26\u4e00\u4e2a settings.py \u6587\u4ef6\uff0c\u5728 settings.py \u4e2d\u7684\u914d\u7f6e\u9879\u90fd\u4f1a\u8986\u76d6\u6846\u67b6 \u7ea7\u522b\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u65b9\u4fbf\u7528\u6237\u81ea\u5b9a\u4e49\u4fee\u6539\u3002\u5728\u4ee3\u7801\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 django.settings \u5bf9\u8c61\u83b7\u53d6\u6240\u6709 \u914d\u7f6e\u9879\u3002 Scrapy \u6846\u67b6\u540c\u6837\u4e5f\u6709\u8fd9\u79cd\u673a\u5236\u3002 \u8fd9\u4e9b\u6210\u719f\u7684\u6846\u67b6\u589e\u52a0\u4e86\u4e2d\u5fc3\u914d\u7f6e\uff0c\u5c31\u662f\u4e3a\u4e86\u901a\u8fc7\u5f00\u653e\u51fa\u6765\u7684\u914d\u7f6e\u9879\u6765\u7075\u6d3b\u63a7\u5236\u6846\u67b6\u6240\u652f\u6301\u7684\u5185\u5bb9\u3002 \u800c\u5728\u4e00\u822c\u9879\u76ee\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u53c2\u7167\u8fd9\u79cd\u8bbe\u8ba1\uff0c\u8ba9\u9879\u76ee\u90e8\u7f72\u66f4\u52a0\u7075\u6d3b\u3002","title":"\u914d\u7f6e"},{"location":"guidelines/advanced/configuration/#1","text":"\u5e38\u89c1\u589e\u52a0\u4e2d\u5fc3\u914d\u7f6e\u7684\u505a\u6cd5\u662f\u5728\u9879\u76ee\u4e2d\u589e\u52a0\u4e00\u4e2a settings.py \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u4e2d\u6a21\u5757\u7ea7\u522b\u5e38\u91cf\u5b9a\u4e49\u914d\u7f6e\u9879\u3002 \u5728\u4f7f\u7528\u65f6\uff0c\u901a\u8fc7\u5bfc\u5165\u6a21\u5757\u4e2d\u7684\u5185\u5bb9\u4f7f\u7528\u3002 \u4f8b\u5982\uff1a \u5728\u9879\u76ee\u4e2d\u521b\u5efa\u4e00\u4e2a settings.py \u6587\u4ef6\uff0c\u5728\u6587\u4ef6\u4e2d\u5b9a\u4e49\u6a21\u5757\u7ea7\u5e38\u91cf ## Settings # File config SOURCE_FILE = '/tmp/foo.txt' # Log config LOG_LEVEL = 'DEBUG' LOG_FORMAT = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' \u521b\u5efa app.py \u6587\u4ef6\uff0c\u5728\u6587\u4ef6\u4e2d\u5bfc\u5165 settings \u6a21\u5757\uff0c\u5e76\u4f7f\u7528\u8be5\u6a21\u5757\u4e2d\u7684\u5e38\u91cf\u3002 \"\"\"Count a file \"\"\" import logging from pathlib import Path import settings # Config root logger logging . basicConfig ( level = settings . LOG_LEVEL , format = settings . LOG_FORMAT , ) def count_word ( source_file : Path ) -> None : \"\"\" :param source_file: :return: None \"\"\" total_words = 0 # Read source_file logging . debug ( 'Read file: %s ' , source_file ) with open ( source_file , mode = 'r' , encoding = 'utf-8' ) as source_obj : for line in source_obj . readlines (): total_words += len ( line . split ( ' ' )) logging . info ( 'File has %s words' , total_words ) def main (): count_word ( Path ( settings . SOURCE_FILE )) if __name__ == '__main__' : main ()","title":"1. \u4e00\u822c\u505a\u6cd5"},{"location":"guidelines/advanced/configuration/#2","text":"Dynaconf \u662f\u4e00\u4e2a\u7075\u6d3b\u7684\u4e2d\u5fc3\u914d\u7f6e\u7ba1\u7406\u5de5\u5177\uff0c\u5e95\u5c42\u8bbe\u8ba1\u548c Django \u4e00\u81f4\uff0c\u4f1a\u5ef6\u8fdf\u52a0\u8f7d\u914d\u7f6e\u3002 \u5176\u5177\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u52a0\u8f7d\u591a\u4e2a\u914d\u7f6e\u6e90 \u914d\u7f6e\u5206\u5c42 Django Flask \u6269\u5c55 \u652f\u6301 Redis \u548c Vault \u5728\u9879\u76ee\u4e2d\u65b0\u5efa\u914d\u7f6e\u6587\u4ef6 settings.yml settings.yml \uff1a foo : 1 bar : 2 \u65b0\u5efa\u914d\u7f6e\u6a21\u5757 config.py config.py \uff1a from dynaconf import Dynaconf settings = Dynaconf ( settings_files = [ 'settings.yml' ], ) \u65b0\u5efa\u4e00\u4e2a app.py \u6587\u4ef6\uff0c\u4f7f\u7528\u914d\u7f6e app.py \uff1a from config import settings print ( settings . FOO ) print ( settings . BAR ) \u7136\u540e\u8fd0\u884c python app.py \u53ef\u4ee5\u770b\u5230\u5df2\u7ecf\u80fd\u591f\u81ea\u52a8\u83b7\u53d6 settings.yml \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u503c\u3002 \u589e\u52a0\u672c\u5730\u914d\u7f6e\u6587\u4ef6 settings.local.yml settings.local.yml : foo: 10 bar: 20 \u518d\u6b21\u8fd0\u884c python app.py \uff0c\u7a0b\u5e8f\u4f1a\u81ea\u52a8\u83b7\u53d6 settings.local.yml \u3002 \u8fd9\u662f\u56e0\u4e3a Dynaconf \u5728\u521d\u59cb\u5316\u662f\u4f20\u5165\u4e86\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f\u4e3a settings.yml \uff0c\u5728\u52a0\u8f7d\u914d\u7f6e\u65f6\uff0c\u4f1a\u540c\u65f6\u67e5\u627e settings.local.yml \u7684\u914d\u7f6e\u6587\u4ef6\u3002 \u5e76\u5c06\u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9\u5408\u5e76\uff0c\u5982\u679c\u5b58\u5728\u76f8\u540c\u53d8\u91cf\uff0c settings.local.yml \u4f1a\u8986\u76d6 settings.yml \u4e2d\u7684\u914d\u7f6e\u3002","title":"2. \u52a8\u6001\u914d\u7f6e\u793a\u4f8b"},{"location":"guidelines/advanced/configuration/#_2","text":"","title":"\u9879\u76ee\u5b9e\u8df5"},{"location":"guidelines/advanced/configuration/#django","text":"Dynaconf \u53ef\u4ee5\u642d\u914d Django \u4e00\u8d77\u4f7f\u7528\u3002\u867d\u7136 Django \u6709\u81ea\u5df1\u7684\u914d\u7f6e\u6a21\u5757\uff0c\u4f46\u662f\u5e76\u4e0d\u7075\u6d3b\u3002 \u642d\u914d Dynaconf \uff0c\u53ef\u4ee5\u542f\u52a8\u5c42\u7ea7\u914d\u7f6e\uff0c\u4f8b\u5982\u652f\u6301 Dev \u3001 prod \u548c test \u591a\u79cd\u73af\u5883\u7684\u914d\u7f6e\uff0c\u800c\u4e14\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u5f88\u65b9\u4fbf\u7684 \u4fee\u6539\u914d\u7f6e\uff0c\u5305\u62ec\u52a0\u8f7d\u5176\u4ed6\u5730\u65b9\u7684\u914d\u7f6e\u3002 \u5728 Django \u9879\u76ee\u7684 settings.py \u6587\u4ef6\u6700\u540e\u6dfb\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a import dynaconf # pylint: disable=wrong-import-position settings = dynaconf . DjangoDynaconf ( __name__ , envvar_prefix = 'BLOG' , settings_files = [ BASE_DIR / 'settings.local.yml' ], environments = False , load_dotenv = True , ENVVAR_FOR_DYNACONF = 'BLOG_SETTINGS' , includes = [ Path ( sys . prefix , 'etc' , 'blog' , 'settings.yml' ), ] ) \u5f53 Django \u52a0\u8f7d settings.py \u6a21\u5757\u7684\u65f6\u5019\uff0c\u4f1a\u521d\u59cb\u5316 Dynaconf \u3002 Dynaconf \u4f1a\u5c06 Django \u7684 settings \u5bf9\u8c61\u4e2d\u7684\u914d\u7f6e\u52a0\u8f7d\u5230 Dynaconf \u4e2d\uff0c \u7136\u540e\u5c06\u81ea\u8eab\u7684\u6240\u6709\u914d\u7f6e\u518d\u91cd\u65b0\u52a0\u8f7d\u5230 Django \u7684 settings \u5bf9\u8c61\u4e2d\u3002 Dynaconf \u4e0d\u4ec5\u4f1a\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\uff0c\u4e5f\u4f1a\u52a0\u8f7d\u4ee5 BLOG_ \u5f00\u5934\u7684\u73af\u5883\u53d8\u91cf\u3002","title":"Django \u9879\u76ee"},{"location":"guidelines/advanced/configuration/#_3","text":"\u5728\u521d\u59cb\u5316 Dynaconf \u65f6\uff0c\u4f1a\u52a0\u8f7d\u9879\u76ee\u6839\u76ee\u5f55\u7684 settings.local.yml \u914d\u7f6e\u6587\u4ef6\uff0c\u6b64\u6587\u4ef6\u4e00\u822c\u662f\u5f00\u53d1\u65f6\u4f7f\u7528\u7684\u672c\u5730\u914d\u7f6e\uff0c\u5e76\u4e14\u4e0d\u5e94\u8be5\u88ab Git \u8ffd\u8e2a\u3002 \u5728\u4e0d\u540c\u7684\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u6216\u8005\u4e0d\u540c\u7684\u73af\u5883\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u591a\u6837\u5316\u7684\u672c\u5730\u914d\u7f6e\u3002\u5bf9\u4e8e\u9700\u8981\u7edf\u4e00\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c\u76f4\u63a5\u653e\u5728 settings.py \u4e2d\u5c31\u53ef\u4ee5\u4e86\u3002 \u540c\u65f6\u8fd8\u4f1a\u8bfb\u53d6 <sys.prefix>/etc/blog/settings.yml \u3002\u8fd9\u4e2a\u4e00\u822c\u4f5c\u4e3a\u751f\u4ea7\u73af\u5883\u7684\u7cfb\u7edf\u914d\u7f6e\u3002\u5982\u679c\u4f7f\u7528\u7684\u662f\u7cfb\u7edf Python \u73af\u5883\uff0c\u53ef\u80fd\u76ee\u5f55\u662f\u5728 /usr/local/etc/blog/settings.yml \uff0c\u5982\u679c\u662f\u865a\u62df\u73af\u5883\uff0c\u5219\u53ef\u80fd\u662f /home/foo/.virtualenvs/blog-fxage/etc/blog/settings.yml \u3002 \u5982\u679c\u60f3\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf BLOG_SETTINGS=/tmp/settings.yml \u6307\u5b9a Dynaconf \u52a0\u8f7d\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 DEBUG : true ALLOWED_HOSTS : - '*' INSTALLED_APPS : - dynaconf_merge_unique # \u6307\u793a Dynaconf \u5c06 INSTALLED_APPS \u4e0e\u9ed8\u8ba4\u914d\u7f6e\u5408\u5e76\u800c\u4e0d\u662f\u8986\u76d6\uff0c\u5e76\u4e14\u8fdb\u884c\u53bb\u91cd - debug_toolbar # \u6307\u793a Dynaconf \u5c06 debug_toolbar \u6dfb\u52a0\u5230 INSTALLED_APPS \u5217\u8868\u4e2d MIDDLEWARE : - dynaconf_merge_unique - debug_toolbar.middleware.DebugToolbarMiddleware DATABASES : default : ENGINE : 'django.db.backends.mysql' NAME : blo USER : root PASSWORD : '000000' HOST : 127.0.0.1 PORT : 3306 REST_FRAMEWORK : # \u6307\u793a Dynaconf \u5c06 REST_FRAMEWORK \u4e0e\u9ed8\u8ba4\u914d\u7f6e\u5408\u5e76\uff0c\u800c\u4e0d\u662f\u8986\u76d6 dynaconf_merge_unique : true # \u6307\u793a Dynaconf \u53ea\u4fee\u6539 PAGE_SIZE \u7684\u503c\uff0c\u5176\u4ed6\u4e0d\u53d8 PAGE_SIZE : 10 } \u4e0a\u8ff0\u914d\u7f6e\u5728 Dynaconf \u8bfb\u53d6\u540e\uff0c\u53ef\u4ee5\u8986\u76d6 settings.py \u4e2d\u7684\u9ed8\u8ba4\u914d\u7f6e\u3002\u5176\u4e2d\u6709\u51e0\u4e2a\u70b9\u9700\u8981\u6ce8\u610f\uff1a \u5982\u679c\u76f4\u63a5\u6587\u4ef6\u4e2d\u5b9a\u4e49\u914d\u7f6e\uff0c\u4f1a\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e\u3002 \u5982\u679c\u9700\u8981\u548c\u9ed8\u8ba4\u914d\u7f6e\u5408\u5e76\uff0c\u53ef\u4ee5\u4f7f\u7528 dynaconf_merge \u3002","title":"\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6"},{"location":"guidelines/advanced/configuration/#_4","text":"Dynaconf \u652f\u6301\u52a0\u8f7d\u73af\u5883\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 .env \u6587\u4ef6\u3002 \u5728\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u65f6\uff0c\u540c\u6837\u548c\u914d\u7f6e\u6587\u4ef6\u4e00\u6837\uff0c\u652f\u6301\u5b8c\u5168\u8986\u76d6\uff0c\u548c\u81ea\u52a8\u5408\u5e76\u3002 \u9700\u8981\u989d\u5916\u5f3a\u8c03\u4e00\u70b9\u7684\u662f\uff0c Dynaconf \u521d\u59cb\u5316\u7684\u65f6\uff0c\u4f7f\u7528\u4e86 envvar_prefix=BLOG \u3002 Dynaconf \u4f1a\u81ea\u52a8\u52a0\u8f7d\u4ee5 BLOG_ \u5f00\u5934\u7684 \u73af\u5883\u53d8\u91cf\u3002\u5305\u62ec ENVVAR_FOR_DYNACONF='BLOG_SETTINGS' \u914d\u7f6e\u7684 Dynaconf \u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u7684\u73af\u5883\u53d8\u91cf BLOG_SETTINGS \u3002 \u6240\u4ee5\u5728\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u4e0d\u8981\u9519\u8bef\u7684\u5c06 BLOG_SETTINGS \u73af\u5883\u53d8\u91cf\u6307\u5b9a\u5176\u4ed6\u5185\u5bb9\uff0c\u800c\u9020\u6210\u4e0d\u5fc5\u8981\u7684\u9519\u8bef\u3002 # \u4f7f\u7528\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5355\u503c export BLOG_DEBUG = 'True' # \u4f7f\u7528\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5bf9\u8c61 export BLOG_DATABASES = \"{'default'={'ENGINE'='django.db.backends.mysql', 'NAME'='blog', 'USER'='root', 'PASSWORD'='000000', 'HOST'='localhost', 'POST'=3306}}\" # \u4f7f\u7528\u73af\u5883\u53d8\u91cf\u914d\u7f6e\u5408\u5e76\u5185\u5bb9 export BLOG_MIDDLEWARE = '[\"dynaconf_merge_unique\", \"debug_toolbar.middleware.DebugToolbarMiddleware\"]' # \u4f7f\u7528 dynaconf_merge_unique \u5408\u5e76\u5e76\u53bb\u91cd export BLOG_MIDDLEWARE = '@merge [\"debug_toolbar.middleware.DebugToolbarMiddleware\"]' # \u4f7f\u7528 merge \u5173\u952e\u5b57 export BLOG_MIDDLEWARE = '@merge debug_toolbar.middleware.DebugToolbarMiddleware' # \u7b80\u5199 export BLOG_REST_FRAMEWORK = '{PAGE_SIZE=10, dynaconf_merge=true}' # \u4f7f\u7528 dynaconf_merge \u5408\u5e76 export BLOG_REST_FRAMEWORK = '@merge {PAGE_SIZE=10}' # \u4f7f\u7528 merge \u5173\u952e\u5b57 export BLOG_REST_FRAMEWORK = '@merge PAGE_SIZE=10' # \u7b80\u5199 export BLOG_DATABASES__default__PASSWORD = '123456' # \u4f7f\u7528\u4e24\u4e2a\u4e0b\u5212\u7ebf (__) \u4f5c\u4e3a\u5b50\u7ea7","title":"\u4f7f\u7528\u73af\u5883\u53d8\u91cf"},{"location":"guidelines/advanced/exception/","text":"\u5f02\u5e38\u7ba1\u7406 \u51e0\u4e4e\u6240\u6709\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u6709\u5f02\u5e38\u3002\u5f02\u5e38\u53ef\u4ee5\u5feb\u901f\u6307\u51fa\u7a0b\u5e8f\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u4fbf\u4e8e\u6392\u67e5\u3002\u5f00\u53d1\u4eba\u5458\u4e5f\u53ef\u4ee5\u6839\u636e\u60c5\u51b5\u629b\u51fa\u81ea\u5b9a\u4e49\u5f02\u5e38\uff0c \u4ee5\u6307\u793a\u671f\u671b\u7684\u5185\u5bb9\u548c\u5b9e\u9645\u4e0d\u76f8\u7b26\u3002\u826f\u597d\u7684\u5f02\u5e38\u8bbe\u8ba1\u548c\u4f7f\u7528\u4e60\u60ef\uff0c\u53ef\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u7684\u8d28\u91cf\u3002 \u4ecb\u7ecd Python \u4e2d\u7684\u5f02\u5e38\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u662f\u53e5\u6cd5\u9519\u8bef\uff0c\u4e00\u7c7b\u662f\u5f02\u5e38\u3002 \u53e5\u6cd5\u9519\u8bef \u53e5\u6cd5\u9519\u8bef\u662f\u7528\u6765\u6307\u793a Python \u7f16\u7801\u4e0d\u7b26\u5408\u53e5\u6cd5\u89c4\u8303\u7684\uff1a >>> while True print ( 'Hello world' ) File \"<stdin>\" , line 1 while True print ( 'Hello world' ) ^ SyntaxError : invalid syntax \u5982\u4e0a\u6240\u793a\uff0c\u4f7f\u7528 ^ \u6307\u793a\u9519\u8bef\u7684\u4f4d\u7f6e\u3002 \u5f02\u5e38 \u5373\u4f7f\u8bed\u53e5\u6216\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86\u6b63\u786e\u7684\u8bed\u6cd5\uff0c\u6267\u884c\u65f6\u4ecd\u53ef\u80fd\u89e6\u53d1\u9519\u8bef\u3002\u6267\u884c\u65f6\u68c0\u6d4b\u5230\u7684\u9519\u8bef\u79f0\u4e3a \u5f02\u5e38\uff0c \u5f02\u5e38\u4e0d\u4e00\u5b9a\u5bfc\u81f4\u4e25\u91cd\u7684\u540e\u679c\uff1a\u5f88\u5feb\u6211\u4eec\u5c31\u80fd\u5b66\u4f1a\u5982\u4f55\u5904\u7406 Python \u7684\u5f02\u5e38\u3002\u5927\u591a\u6570\u5f02\u5e38\u4e0d\u4f1a\u88ab\u7a0b\u5e8f\u5904\u7406\uff0c \u800c\u662f\u663e\u793a\u4e0b\u5217\u9519\u8bef\u4fe1\u606f\uff1a >>> 10 * ( 1 / 0 ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ZeroDivisionError : division by zero >>> 4 + spam * 3 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : name 'spam' is not defined >>> '2' + 2 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : can only concatenate str ( not \"int\" ) to str \u5185\u7f6e\u5f02\u5e38\u7ed3\u6784\u5982\u4e0b\uff1a BaseException +-- SystemExit +-- KeyboardInterrupt +-- GeneratorExit +-- Exception +-- StopIteration +-- StopAsyncIteration +-- ArithmeticError | +-- FloatingPointError | +-- OverflowError | +-- ZeroDivisionError +-- AssertionError +-- AttributeError +-- BufferError +-- EOFError +-- ImportError | +-- ModuleNotFoundError +-- LookupError | +-- IndexError | +-- KeyError +-- MemoryError +-- NameError | +-- UnboundLocalError +-- OSError | +-- BlockingIOError | +-- ChildProcessError | +-- ConnectionError | | +-- BrokenPipeError | | +-- ConnectionAbortedError | | +-- ConnectionRefusedError | | +-- ConnectionResetError | +-- FileExistsError | +-- FileNotFoundError | +-- InterruptedError | +-- IsADirectoryError | +-- NotADirectoryError | +-- PermissionError | +-- ProcessLookupError | +-- TimeoutError +-- ReferenceError +-- RuntimeError | +-- NotImplementedError | +-- RecursionError +-- SyntaxError | +-- IndentationError | +-- TabError +-- SystemError +-- TypeError +-- ValueError | +-- UnicodeError | +-- UnicodeDecodeError | +-- UnicodeEncodeError | +-- UnicodeTranslateError +-- Warning +-- DeprecationWarning +-- PendingDeprecationWarning +-- RuntimeWarning +-- SyntaxWarning +-- UserWarning +-- FutureWarning +-- ImportWarning +-- UnicodeWarning +-- BytesWarning +-- EncodingWarning +-- ResourceWarning \u4f7f\u7528 \u6355\u83b7\u5f02\u5e38 \u5728\u903b\u8f91\u4e2d\uff0c\u53ef\u80fd\u51fa\u73b0\u4e0d\u7b26\u5408\u9884\u671f\u7684\u903b\u8f91\uff0c\u4f1a\u629b\u51fa\u76f8\u5173\u5f02\u5e38\u3002\u6b64\u65f6\u5728\u7f16\u7801\u65f6\uff0c\u4e3a\u4e86\u903b\u8f91\u7684\u6b63\u5e38\u8fd0\u884c\uff0c\u9700\u8981\u5bf9\u903b\u8f91\u8fdb\u884c\u5904\u7406\uff1a import sys try : f = open ( 'myfile.txt' ) s = f . readline () i = int ( s . strip ()) except OSError as err : print ( \"OS error: {0} \" . format ( err )) except ValueError : print ( \"Could not convert data to an integer.\" ) except BaseException as err : print ( f \"Unexpected { err =} , { type ( err ) =} \" ) raise \u5982\u4e0a\u8ff0\u903b\u8f91\uff0c\u5bf9\u4e8e\u5df2\u77e5\u80fd\u5224\u65ad\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7\u65e5\u5fd7\u8f93\u51fa\u663e\u793a\u53cb\u597d\u4fe1\u606f\uff0c\u907f\u514d\u7a0b\u5e8f\u7acb\u5373\u505c\u6b62\u3002\u5f53\u65e0\u6cd5\u5224\u65ad\u5f02\u5e38\u65f6\uff0c\u5219 \u7ee7\u7eed\u629b\u51fa\u5f02\u5e38\u3002 \u6355\u83b7\u5f02\u5e38\u662f\uff0c\u4f7f\u7528 try...except \u4ee3\u7801\u5757\u5305\u88f9\u9700\u8981\u5904\u7406\u5f02\u5e38\u7684\u4ee3\u7801\u3002 expect \u6355\u83b7\u6307\u5b9a\u7684\u5f02\u5e38\u7c7b\u578b\uff0c\u5982\u679c\u51fa\u73b0\uff0c\u8fdb\u5165 \u5bf9\u5e94\u7684\u4ee3\u7801\u903b\u8f91\u3002\u5bf9\u4e8e\u4e00\u4e9b\u4e0d\u60f3\u5904\u7406\u7684\uff0c\u901a\u8fc7 raise \u629b\u51fa\u5f02\u5e38\u3002 \u5f02\u5e38\u94fe \u5f53\u629b\u51fa\u5f02\u5e38\u65f6\uff0c raise \u8bed\u53e5\u652f\u6301 from \u5b50\u53e5\u542f\u7528\u94fe\u5f0f\u5f02\u5e38\u3002 >>> def func (): ... raise ConnectionError ... >>> try : ... func () ... except ConnectionError as exc : ... raise RuntimeError ( 'Failed to open database' ) from exc ... Traceback ( most recent call last ): File \"<stdin>\" , line 2 , in < module > File \"<stdin>\" , line 2 , in func ConnectionError The above exception was the direct cause of the following exception : Traceback ( most recent call last ): File \"<stdin>\" , line 4 , in < module > RuntimeError : Failed to open database \u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c\u5f02\u5e38\u4fe1\u606f\u4e2d\u542b\u6709\u4e24\u6b21\u629b\u51fa\u7684\u5f02\u5e38\u3002\u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u5f88\u6709\u5e2e\u52a9\u3002 \u5982\u679c\u4e0d\u60f3\u629b\u51fa\u94fe\u5f0f\u5f02\u5e38\uff0c\u53ef\u4ee5\u4f7f\u7528 from None \uff1a >>> try : ... open ( 'database.sqlite' ) ... except OSError : ... raise RuntimeError from None ... Traceback ( most recent call last ): File \"<stdin>\" , line 4 , in < module > RuntimeError \u81ea\u5b9a\u4e49\u5f02\u5e38 \u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u65b0\u7684\u5f02\u5e38\u7c7b\u547d\u540d\u81ea\u5df1\u7684\u5f02\u5e38\uff08Python \u7c7b\u7684\u5185\u5bb9\u8be6\u89c1 \u7c7b\uff09\u3002\u4e0d\u8bba\u662f\u4ee5\u76f4\u63a5\u8fd8\u662f\u95f4\u63a5\u7684\u65b9\u5f0f\uff0c\u5f02\u5e38\u90fd\u5e94\u4ece Exception \u7c7b\u6d3e\u751f\u3002 \u5f02\u5e38\u7c7b\u548c\u5176\u4ed6\u7c7b\u4e00\u6837\uff0c\u53ef\u4ee5\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\u4f46\u901a\u5e38\u4f1a\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u63d0\u4f9b\u8ba9\u5904\u7406\u5f02\u5e38\u7684\u7a0b\u5e8f\u63d0\u53d6\u9519\u8bef\u4fe1\u606f\u7684\u4e00\u4e9b\u5c5e\u6027\u3002 \u521b\u5efa\u80fd\u89e6\u53d1\u591a\u4e2a\u4e0d\u540c\u9519\u8bef\u7684\u6a21\u5757\u65f6\uff0c\u4e00\u822c\u53ea\u4e3a\u8be5\u6a21\u5757\u5b9a\u4e49\u5f02\u5e38\u57fa\u7c7b\uff0c\u7136\u540e\u518d\u6839\u636e\u4e0d\u540c\u7684\u9519\u8bef\u6761\u4ef6\uff0c\u521b\u5efa\u6307\u5b9a\u5f02\u5e38\u7c7b\u7684\u5b50\u7c7b\uff1a class Error ( Exception ): \"\"\"Base class for exceptions in this module.\"\"\" pass class InputError ( Error ): \"\"\"Exception raised for errors in the input. Attributes: expression -- input expression in which the error occurred message -- explanation of the error \"\"\" def __init__ ( self , expression , message ): self . expression = expression self . message = message class TransitionError ( Error ): \"\"\"Raised when an operation attempts a state transition that's not allowed. Attributes: previous -- state at beginning of transition next -- attempted new state message -- explanation of why the specific transition is not allowed \"\"\" def __init__ ( self , previous , next , message ): self . previous = previous self . next = next self . message = message \u5927\u591a\u6570\u5f02\u5e38\u547d\u540d\u90fd\u4ee5 \u201cError\u201d \u7ed3\u5c3e\uff0c\u7c7b\u4f3c\u6807\u51c6\u5f02\u5e38\u7684\u547d\u540d\u3002 \u8bb8\u591a\u6807\u51c6\u6a21\u5757\u90fd\u9700\u8981\u81ea\u5b9a\u4e49\u5f02\u5e38\uff0c\u4ee5\u62a5\u544a\u7531\u5176\u5b9a\u4e49\u7684\u51fd\u6570\u4e2d\u51fa\u73b0\u7684\u9519\u8bef\u3002 \u5f02\u5e38\u6e05\u7406 \u5bf9\u4e8e\u50cf\u6587\u4ef6\u6216\u8005\u8fde\u63a5\u5bf9\u8c61\u7684\u64cd\u4f5c\uff0c\u5728\u6253\u5f00\u540e\uff0c\u9700\u8981\u5728\u5f02\u5e38\u6700\u540e\u5173\u95ed\uff0c\u5c31\u9700\u8981\u7528\u5230\u5f02\u5e38\u6e05\u7406\u3002 import sys try : f = open ( 'myfile.txt' ) s = f . readline () i = int ( s . strip ()) except OSError as err : print ( \"OS error: {0} \" . format ( err )) raise finally : f . close () \u4e0a\u8ff0\u903b\u8f91\u4e2d\uff0c\u4f7f\u7528 try...expect...finally \u505a\u629b\u51fa\u5f02\u5e38\u540e\u7684\u6e05\u7406\u5de5\u4f5c\u3002\u5176\u4e2d finally \u4ee3\u7801\u5757\u4e2d\uff0c\u5173\u95ed\u4e86\u524d\u9762 \u6253\u5f00\u7684\u6587\u4ef6\u5bf9\u8c61\u3002 def divide ( x , y ): try : result = x / y except ZeroDivisionError : print ( \"division by zero!\" ) else : print ( \"result is\" , result ) finally : print ( \"executing finally clause\" ) \u4e0a\u8ff0\u793a\u4f8b\u4ee3\u7801\u901a\u8fc7 else \u903b\u8f91\u5757\u6267\u884c\u6ca1\u6709\u89e6\u53d1\u5f02\u5e38\u65f6\u7684\u903b\u8f91\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u6e05\u7406\u6027\u7684\u5de5\u4f5c\uff0c\u63a8\u8350\u4f7f\u7528 with \u8bed\u53e5\u81ea\u52a8\u7ba1\u7406\u4e0a\u4e0b\u6587\u3002 \u5b9e\u8df5 \u5f00\u53d1\u5b9e\u8df5\u4e2d\uff0c\u5f02\u5e38\u4fe1\u606f\u5bf9\u8bca\u65ad\u7a0b\u5e8f\u975e\u5e38\u91cd\u8981\u3002\u6240\u4ee5\u5728\u4f7f\u7528\u548c\u5904\u7406\u5f02\u5e38\u65f6\uff0c\u8bf7\u9075\u5faa\u5982\u4e0b\u51e0\u70b9\uff1a \u9700\u8981\u5904\u7406\u5f02\u5e38\u65f6\u4f7f\u7528 try...except...finally \u6355\u83b7 \u5904\u7406\u5f02\u5e38\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u7ee7\u7eed\u629b\u51fa\u5f02\u5e38\uff0c\u9700\u8981\u8f93\u5165\u65e5\u5fd7\u4fe1\u606f\u3002\u9664\u975e\u4f60\u77e5\u9053\u4e0d\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\u4e0d\u4f1a\u9020\u6210\u62cd\u9519\u56f0\u96be\u3002 \u9879\u76ee\u7ea7\u522b\uff0c\u4e00\u5b9a\u8981\u5b9a\u4e49\u4e00\u4e2a\u9879\u76ee\u7684\u57fa\u7c7b\u5f02\u5e38\u3002\u9879\u76ee\u4e2d\u5176\u4ed6\u81ea\u5b9a\u4e49\u5f02\u5e38\u5fc5\u987b\u7ee7\u627f\u8be5\u57fa\u7c7b\u5f02\u5e38\u3002\u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u53ef\u4ee5\u5728\u5916\u5c42\u903b\u8f91\u901a\u8fc7\u6355\u83b7\u57fa\u7c7b \u5f02\u5e38\u6765\u53ea\u6355\u83b7\u629b\u51fa\u7684\u81ea\u5b9a\u4e49\u5f02\u5e38\u3002 \u9879\u76ee\u5f02\u5e38\u8981\u4ee5 ERROR \u7ed3\u5c3e\u3002\u548c\u6807\u51c6\u5f02\u5e38\u547d\u540d\u7c7b\u4f3c\u3002","title":"\u5f02\u5e38"},{"location":"guidelines/advanced/exception/#_1","text":"\u51e0\u4e4e\u6240\u6709\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u6709\u5f02\u5e38\u3002\u5f02\u5e38\u53ef\u4ee5\u5feb\u901f\u6307\u51fa\u7a0b\u5e8f\u51fa\u73b0\u7684\u95ee\u9898\uff0c\u4fbf\u4e8e\u6392\u67e5\u3002\u5f00\u53d1\u4eba\u5458\u4e5f\u53ef\u4ee5\u6839\u636e\u60c5\u51b5\u629b\u51fa\u81ea\u5b9a\u4e49\u5f02\u5e38\uff0c \u4ee5\u6307\u793a\u671f\u671b\u7684\u5185\u5bb9\u548c\u5b9e\u9645\u4e0d\u76f8\u7b26\u3002\u826f\u597d\u7684\u5f02\u5e38\u8bbe\u8ba1\u548c\u4f7f\u7528\u4e60\u60ef\uff0c\u53ef\u4ee5\u63d0\u9ad8\u7a0b\u5e8f\u7684\u8d28\u91cf\u3002","title":"\u5f02\u5e38\u7ba1\u7406"},{"location":"guidelines/advanced/exception/#_2","text":"Python \u4e2d\u7684\u5f02\u5e38\u5206\u4e3a\u4e24\u7c7b\uff0c\u4e00\u662f\u53e5\u6cd5\u9519\u8bef\uff0c\u4e00\u7c7b\u662f\u5f02\u5e38\u3002","title":"\u4ecb\u7ecd"},{"location":"guidelines/advanced/exception/#_3","text":"\u53e5\u6cd5\u9519\u8bef\u662f\u7528\u6765\u6307\u793a Python \u7f16\u7801\u4e0d\u7b26\u5408\u53e5\u6cd5\u89c4\u8303\u7684\uff1a >>> while True print ( 'Hello world' ) File \"<stdin>\" , line 1 while True print ( 'Hello world' ) ^ SyntaxError : invalid syntax \u5982\u4e0a\u6240\u793a\uff0c\u4f7f\u7528 ^ \u6307\u793a\u9519\u8bef\u7684\u4f4d\u7f6e\u3002","title":"\u53e5\u6cd5\u9519\u8bef"},{"location":"guidelines/advanced/exception/#_4","text":"\u5373\u4f7f\u8bed\u53e5\u6216\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86\u6b63\u786e\u7684\u8bed\u6cd5\uff0c\u6267\u884c\u65f6\u4ecd\u53ef\u80fd\u89e6\u53d1\u9519\u8bef\u3002\u6267\u884c\u65f6\u68c0\u6d4b\u5230\u7684\u9519\u8bef\u79f0\u4e3a \u5f02\u5e38\uff0c \u5f02\u5e38\u4e0d\u4e00\u5b9a\u5bfc\u81f4\u4e25\u91cd\u7684\u540e\u679c\uff1a\u5f88\u5feb\u6211\u4eec\u5c31\u80fd\u5b66\u4f1a\u5982\u4f55\u5904\u7406 Python \u7684\u5f02\u5e38\u3002\u5927\u591a\u6570\u5f02\u5e38\u4e0d\u4f1a\u88ab\u7a0b\u5e8f\u5904\u7406\uff0c \u800c\u662f\u663e\u793a\u4e0b\u5217\u9519\u8bef\u4fe1\u606f\uff1a >>> 10 * ( 1 / 0 ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > ZeroDivisionError : division by zero >>> 4 + spam * 3 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > NameError : name 'spam' is not defined >>> '2' + 2 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > TypeError : can only concatenate str ( not \"int\" ) to str \u5185\u7f6e\u5f02\u5e38\u7ed3\u6784\u5982\u4e0b\uff1a BaseException +-- SystemExit +-- KeyboardInterrupt +-- GeneratorExit +-- Exception +-- StopIteration +-- StopAsyncIteration +-- ArithmeticError | +-- FloatingPointError | +-- OverflowError | +-- ZeroDivisionError +-- AssertionError +-- AttributeError +-- BufferError +-- EOFError +-- ImportError | +-- ModuleNotFoundError +-- LookupError | +-- IndexError | +-- KeyError +-- MemoryError +-- NameError | +-- UnboundLocalError +-- OSError | +-- BlockingIOError | +-- ChildProcessError | +-- ConnectionError | | +-- BrokenPipeError | | +-- ConnectionAbortedError | | +-- ConnectionRefusedError | | +-- ConnectionResetError | +-- FileExistsError | +-- FileNotFoundError | +-- InterruptedError | +-- IsADirectoryError | +-- NotADirectoryError | +-- PermissionError | +-- ProcessLookupError | +-- TimeoutError +-- ReferenceError +-- RuntimeError | +-- NotImplementedError | +-- RecursionError +-- SyntaxError | +-- IndentationError | +-- TabError +-- SystemError +-- TypeError +-- ValueError | +-- UnicodeError | +-- UnicodeDecodeError | +-- UnicodeEncodeError | +-- UnicodeTranslateError +-- Warning +-- DeprecationWarning +-- PendingDeprecationWarning +-- RuntimeWarning +-- SyntaxWarning +-- UserWarning +-- FutureWarning +-- ImportWarning +-- UnicodeWarning +-- BytesWarning +-- EncodingWarning +-- ResourceWarning","title":"\u5f02\u5e38"},{"location":"guidelines/advanced/exception/#_5","text":"","title":"\u4f7f\u7528"},{"location":"guidelines/advanced/exception/#_6","text":"\u5728\u903b\u8f91\u4e2d\uff0c\u53ef\u80fd\u51fa\u73b0\u4e0d\u7b26\u5408\u9884\u671f\u7684\u903b\u8f91\uff0c\u4f1a\u629b\u51fa\u76f8\u5173\u5f02\u5e38\u3002\u6b64\u65f6\u5728\u7f16\u7801\u65f6\uff0c\u4e3a\u4e86\u903b\u8f91\u7684\u6b63\u5e38\u8fd0\u884c\uff0c\u9700\u8981\u5bf9\u903b\u8f91\u8fdb\u884c\u5904\u7406\uff1a import sys try : f = open ( 'myfile.txt' ) s = f . readline () i = int ( s . strip ()) except OSError as err : print ( \"OS error: {0} \" . format ( err )) except ValueError : print ( \"Could not convert data to an integer.\" ) except BaseException as err : print ( f \"Unexpected { err =} , { type ( err ) =} \" ) raise \u5982\u4e0a\u8ff0\u903b\u8f91\uff0c\u5bf9\u4e8e\u5df2\u77e5\u80fd\u5224\u65ad\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u901a\u8fc7\u65e5\u5fd7\u8f93\u51fa\u663e\u793a\u53cb\u597d\u4fe1\u606f\uff0c\u907f\u514d\u7a0b\u5e8f\u7acb\u5373\u505c\u6b62\u3002\u5f53\u65e0\u6cd5\u5224\u65ad\u5f02\u5e38\u65f6\uff0c\u5219 \u7ee7\u7eed\u629b\u51fa\u5f02\u5e38\u3002 \u6355\u83b7\u5f02\u5e38\u662f\uff0c\u4f7f\u7528 try...except \u4ee3\u7801\u5757\u5305\u88f9\u9700\u8981\u5904\u7406\u5f02\u5e38\u7684\u4ee3\u7801\u3002 expect \u6355\u83b7\u6307\u5b9a\u7684\u5f02\u5e38\u7c7b\u578b\uff0c\u5982\u679c\u51fa\u73b0\uff0c\u8fdb\u5165 \u5bf9\u5e94\u7684\u4ee3\u7801\u903b\u8f91\u3002\u5bf9\u4e8e\u4e00\u4e9b\u4e0d\u60f3\u5904\u7406\u7684\uff0c\u901a\u8fc7 raise \u629b\u51fa\u5f02\u5e38\u3002","title":"\u6355\u83b7\u5f02\u5e38"},{"location":"guidelines/advanced/exception/#_7","text":"\u5f53\u629b\u51fa\u5f02\u5e38\u65f6\uff0c raise \u8bed\u53e5\u652f\u6301 from \u5b50\u53e5\u542f\u7528\u94fe\u5f0f\u5f02\u5e38\u3002 >>> def func (): ... raise ConnectionError ... >>> try : ... func () ... except ConnectionError as exc : ... raise RuntimeError ( 'Failed to open database' ) from exc ... Traceback ( most recent call last ): File \"<stdin>\" , line 2 , in < module > File \"<stdin>\" , line 2 , in func ConnectionError The above exception was the direct cause of the following exception : Traceback ( most recent call last ): File \"<stdin>\" , line 4 , in < module > RuntimeError : Failed to open database \u4e0a\u8ff0\u793a\u4f8b\u4e2d\uff0c\u5f02\u5e38\u4fe1\u606f\u4e2d\u542b\u6709\u4e24\u6b21\u629b\u51fa\u7684\u5f02\u5e38\u3002\u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u5f88\u6709\u5e2e\u52a9\u3002 \u5982\u679c\u4e0d\u60f3\u629b\u51fa\u94fe\u5f0f\u5f02\u5e38\uff0c\u53ef\u4ee5\u4f7f\u7528 from None \uff1a >>> try : ... open ( 'database.sqlite' ) ... except OSError : ... raise RuntimeError from None ... Traceback ( most recent call last ): File \"<stdin>\" , line 4 , in < module > RuntimeError","title":"\u5f02\u5e38\u94fe"},{"location":"guidelines/advanced/exception/#_8","text":"\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u65b0\u7684\u5f02\u5e38\u7c7b\u547d\u540d\u81ea\u5df1\u7684\u5f02\u5e38\uff08Python \u7c7b\u7684\u5185\u5bb9\u8be6\u89c1 \u7c7b\uff09\u3002\u4e0d\u8bba\u662f\u4ee5\u76f4\u63a5\u8fd8\u662f\u95f4\u63a5\u7684\u65b9\u5f0f\uff0c\u5f02\u5e38\u90fd\u5e94\u4ece Exception \u7c7b\u6d3e\u751f\u3002 \u5f02\u5e38\u7c7b\u548c\u5176\u4ed6\u7c7b\u4e00\u6837\uff0c\u53ef\u4ee5\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\u4f46\u901a\u5e38\u4f1a\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u63d0\u4f9b\u8ba9\u5904\u7406\u5f02\u5e38\u7684\u7a0b\u5e8f\u63d0\u53d6\u9519\u8bef\u4fe1\u606f\u7684\u4e00\u4e9b\u5c5e\u6027\u3002 \u521b\u5efa\u80fd\u89e6\u53d1\u591a\u4e2a\u4e0d\u540c\u9519\u8bef\u7684\u6a21\u5757\u65f6\uff0c\u4e00\u822c\u53ea\u4e3a\u8be5\u6a21\u5757\u5b9a\u4e49\u5f02\u5e38\u57fa\u7c7b\uff0c\u7136\u540e\u518d\u6839\u636e\u4e0d\u540c\u7684\u9519\u8bef\u6761\u4ef6\uff0c\u521b\u5efa\u6307\u5b9a\u5f02\u5e38\u7c7b\u7684\u5b50\u7c7b\uff1a class Error ( Exception ): \"\"\"Base class for exceptions in this module.\"\"\" pass class InputError ( Error ): \"\"\"Exception raised for errors in the input. Attributes: expression -- input expression in which the error occurred message -- explanation of the error \"\"\" def __init__ ( self , expression , message ): self . expression = expression self . message = message class TransitionError ( Error ): \"\"\"Raised when an operation attempts a state transition that's not allowed. Attributes: previous -- state at beginning of transition next -- attempted new state message -- explanation of why the specific transition is not allowed \"\"\" def __init__ ( self , previous , next , message ): self . previous = previous self . next = next self . message = message \u5927\u591a\u6570\u5f02\u5e38\u547d\u540d\u90fd\u4ee5 \u201cError\u201d \u7ed3\u5c3e\uff0c\u7c7b\u4f3c\u6807\u51c6\u5f02\u5e38\u7684\u547d\u540d\u3002 \u8bb8\u591a\u6807\u51c6\u6a21\u5757\u90fd\u9700\u8981\u81ea\u5b9a\u4e49\u5f02\u5e38\uff0c\u4ee5\u62a5\u544a\u7531\u5176\u5b9a\u4e49\u7684\u51fd\u6570\u4e2d\u51fa\u73b0\u7684\u9519\u8bef\u3002","title":"\u81ea\u5b9a\u4e49\u5f02\u5e38"},{"location":"guidelines/advanced/exception/#_9","text":"\u5bf9\u4e8e\u50cf\u6587\u4ef6\u6216\u8005\u8fde\u63a5\u5bf9\u8c61\u7684\u64cd\u4f5c\uff0c\u5728\u6253\u5f00\u540e\uff0c\u9700\u8981\u5728\u5f02\u5e38\u6700\u540e\u5173\u95ed\uff0c\u5c31\u9700\u8981\u7528\u5230\u5f02\u5e38\u6e05\u7406\u3002 import sys try : f = open ( 'myfile.txt' ) s = f . readline () i = int ( s . strip ()) except OSError as err : print ( \"OS error: {0} \" . format ( err )) raise finally : f . close () \u4e0a\u8ff0\u903b\u8f91\u4e2d\uff0c\u4f7f\u7528 try...expect...finally \u505a\u629b\u51fa\u5f02\u5e38\u540e\u7684\u6e05\u7406\u5de5\u4f5c\u3002\u5176\u4e2d finally \u4ee3\u7801\u5757\u4e2d\uff0c\u5173\u95ed\u4e86\u524d\u9762 \u6253\u5f00\u7684\u6587\u4ef6\u5bf9\u8c61\u3002 def divide ( x , y ): try : result = x / y except ZeroDivisionError : print ( \"division by zero!\" ) else : print ( \"result is\" , result ) finally : print ( \"executing finally clause\" ) \u4e0a\u8ff0\u793a\u4f8b\u4ee3\u7801\u901a\u8fc7 else \u903b\u8f91\u5757\u6267\u884c\u6ca1\u6709\u89e6\u53d1\u5f02\u5e38\u65f6\u7684\u903b\u8f91\u3002 \u5bf9\u4e8e\u4e00\u4e9b\u6e05\u7406\u6027\u7684\u5de5\u4f5c\uff0c\u63a8\u8350\u4f7f\u7528 with \u8bed\u53e5\u81ea\u52a8\u7ba1\u7406\u4e0a\u4e0b\u6587\u3002","title":"\u5f02\u5e38\u6e05\u7406"},{"location":"guidelines/advanced/exception/#_10","text":"\u5f00\u53d1\u5b9e\u8df5\u4e2d\uff0c\u5f02\u5e38\u4fe1\u606f\u5bf9\u8bca\u65ad\u7a0b\u5e8f\u975e\u5e38\u91cd\u8981\u3002\u6240\u4ee5\u5728\u4f7f\u7528\u548c\u5904\u7406\u5f02\u5e38\u65f6\uff0c\u8bf7\u9075\u5faa\u5982\u4e0b\u51e0\u70b9\uff1a \u9700\u8981\u5904\u7406\u5f02\u5e38\u65f6\u4f7f\u7528 try...except...finally \u6355\u83b7 \u5904\u7406\u5f02\u5e38\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u7ee7\u7eed\u629b\u51fa\u5f02\u5e38\uff0c\u9700\u8981\u8f93\u5165\u65e5\u5fd7\u4fe1\u606f\u3002\u9664\u975e\u4f60\u77e5\u9053\u4e0d\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\u4e0d\u4f1a\u9020\u6210\u62cd\u9519\u56f0\u96be\u3002 \u9879\u76ee\u7ea7\u522b\uff0c\u4e00\u5b9a\u8981\u5b9a\u4e49\u4e00\u4e2a\u9879\u76ee\u7684\u57fa\u7c7b\u5f02\u5e38\u3002\u9879\u76ee\u4e2d\u5176\u4ed6\u81ea\u5b9a\u4e49\u5f02\u5e38\u5fc5\u987b\u7ee7\u627f\u8be5\u57fa\u7c7b\u5f02\u5e38\u3002\u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u53ef\u4ee5\u5728\u5916\u5c42\u903b\u8f91\u901a\u8fc7\u6355\u83b7\u57fa\u7c7b \u5f02\u5e38\u6765\u53ea\u6355\u83b7\u629b\u51fa\u7684\u81ea\u5b9a\u4e49\u5f02\u5e38\u3002 \u9879\u76ee\u5f02\u5e38\u8981\u4ee5 ERROR \u7ed3\u5c3e\u3002\u548c\u6807\u51c6\u5f02\u5e38\u547d\u540d\u7c7b\u4f3c\u3002","title":"\u5b9e\u8df5"},{"location":"guidelines/advanced/logging/","text":"Logging \u5728\u5f00\u53d1\u4e2d\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528 print \u8f93\u51fa\u4e00\u4e9b\u4fe1\u606f\uff0c\u6216\u8005\u8bca\u65ad\u4fe1\u606f\u3002\u5728\u4fe1\u606f\u7684\u5b8c\u6574\u6027\u548c\u4fe1\u606f\u683c\u5f0f\u4e0a\u90fd\u4e0d\u80fd\u7b80\u4fbf\u4e14\u7075\u6d3b\u63a7\u5236\u3002\u6b64\u65f6\u4f7f\u7528 logging \u662f\u4e2a\u66f4\u597d\u7684\u9009\u62e9\uff0c \u800c\u4e14\u4e5f\u9f13\u52b1\u5f00\u53d1\u4eba\u5458\u5c3d\u53ef\u80fd\u7684\u4f18\u5148\u9009\u7528\u6253\u5370\u65e5\u5fd7\u7684\u65b9\u5f0f\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u4fe1\u606f\u3002 \u65e5\u5fd7\u662f\u5bf9\u8f6f\u4ef6\u6267\u884c\u65f6\u6240\u53d1\u751f\u4e8b\u4ef6\u7684\u4e00\u79cd\u8ffd\u8e2a\u65b9\u5f0f\u3002\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u5bf9\u4ed6\u4eec\u7684\u4ee3\u7801\u6dfb\u52a0\u65e5\u5fd7\u8c03\u7528\uff0c\u501f\u6b64\u6765\u6307\u793a\u67d0\u4e8b\u4ef6\u7684\u53d1\u751f\u3002 \u4e00\u4e2a\u4e8b\u4ef6\u901a\u8fc7\u4e00\u4e9b\u5305\u542b\u53d8\u91cf\u6570\u636e\u7684\u63cf\u8ff0\u4fe1\u606f\u6765\u63cf\u8ff0\uff08\u6bd4\u5982\uff1a\u6bcf\u4e2a\u4e8b\u4ef6\u53d1\u751f\u65f6\u7684\u6570\u636e\u90fd\u662f\u4e0d\u540c\u7684\uff09\u3002\u5f00\u53d1\u8005\u8fd8\u4f1a\u533a\u5206\u4e8b\u4ef6\u7684\u91cd\u8981\u6027\uff0c \u91cd\u8981\u6027\u4e5f\u88ab\u79f0\u4e3a \u7b49\u7ea7 \u6216 \u4e25\u91cd\u6027 \u3002\u6709\u4e00\u4e2a\u597d\u7684\u65e5\u5fd7\u5b9e\u8df5\uff0c\u80fd\u8ba9\u5f00\u53d1\u8c03\u8bd5\u6d41\u7a0b\u66f4\u987a\u7545\uff0c\u51fa\u73b0\u95ee\u9898\u80fd\u66f4\u5feb\u901f\u7cbe\u51c6\u5b9a\u4f4d\u3002 \u672c\u6587\u4e0d\u4f1a\u4ee5\u6700\u57fa\u7840\u7684\u65b9\u5f0f\u8bb2\u8ff0 Python logging \u7684\u4f7f\u7528\uff0c\u800c\u662f\u4ee5\u5f53\u524d\u603b\u7ed3\u7684\u5b9e\u8df5\u65b9\u5f0f\u7ed3\u5408\u5b9e\u9645\u64cd\u4f5c\u6848\u4f8b\u5c55\u793a Logging \u7684\u4f7f\u7528\uff0c\u6240\u4ee5\u5728\u9605\u8bfb\u6587\u7ae0\u94b1\uff0c \u4f60\u5e94\u8be5\u63d0\u524d\u4e86\u89e3 \u65e5\u5fd7 HOWTO \u548c Python \u7684\u65e5\u5fd7\u8bb0\u5f55\u5de5\u5177 \u4e24\u7bc7\u6587\u6863\u3002 1. \u7b80\u5355\u4f7f\u7528 \u5728\u4e00\u822c\u5f00\u53d1\u4e2d\uff0c\u5bf9\u4e8e\u4e34\u65f6\u5f00\u53d1\u7684\u9879\u76ee\uff0c\u53ef\u80fd\u4e3a\u4e86\u5feb\u901f\u5b8c\u6210\u4efb\u52a1\uff0c\u9879\u76ee\u4e2d\u5927\u91cf\u4f7f\u7528\u4e86 print \u5c06\u8c03\u8bd5\u4fe1\u606f\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002 \u9879\u76ee\u540e\u671f\u5c31\u4f1a\u51fa\u73b0\u8c03\u8bd5\u56f0\u96be\u7b49\u95ee\u9898\u3002\u672c\u8282\u4f1a\u63d0\u4f9b\u5728\u7b80\u5355\u73af\u5883\u4e0b\u5feb\u901f\u4f7f\u7528\u65e5\u5fd7\u65b9\u5f0f\u3002 1.1 \u5355\u6587\u4ef6\u4f7f\u7528 \u5bf9\u4e8e\u5355\u6587\u4ef6\u7684\u4f7f\u7528\uff0c\u76f4\u63a5\u4f7f\u7528\u6839\u65e5\u5fd7\u5bf9\u8c61\u5373\u53ef\u3002\u7531\u4e8e\u9ed8\u8ba4\u7684\u65e5\u5fd7\u7ea7\u522b\u4e3a WARNING \uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u66f4\u4f4e\u7ea7\u522b\u7684\u65e5\u5fd7\u662f\u65e0\u6cd5\u663e\u793a\u7684\u3002 \"\"\"Simple logging\"\"\" import logging logging . warning ( 'I love you ~' ) \u5982\u679c\u540e\u7eed\u5f00\u53d1\u6709\u8981\u63a7\u5236\u65e5\u5fd7\u7ea7\u522b\u7684\u9700\u6c42\uff0c\u76f4\u63a5\u5728\u5f00\u59cb\u521d\u59cb\u5316\u65e5\u5fd7\u914d\u7f6e\u5c31\u53ef\u4ee5\u4e86\uff1b \"\"\"Simple logging\"\"\" import logging logging . basicConfig ( level = logging . DEBUG ) logging . warning ( 'I love you ~' ) logging . debug ( 'I love you too ~' ) \u5f53\u9700\u8981\u8f93\u51fa\u66f4\u8be6\u7ec6\u7684\u65e5\u5fd7\u4fe1\u606f\uff0c\u5982\u6267\u884c\u65f6\u95f4 \u3001 \u65e5\u5fd7\u7ea7\u522b \u3001 \u7ebf\u7a0b\u6216\u8fdb\u7a0b\u4fe1\u606f\uff0c\u90fd\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u63a7\u5236\u3002 \"\"\"Simple logging\"\"\" import logging logging . basicConfig ( level = logging . DEBUG , # format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', # format='%(asctime)s - %(name)s - %(levelname)s - %(module)s - %(process)d %(thread)d - %(message)s', format = ' %(asctime)s - %(name)s - %(levelname)s - %(module)s - %(process)d %(thread)d - %(pathname)s : %(lineno)d %(message)s ' , datefmt = '%Y-%m- %d T%H:%M:%S. %s +0800' , ) logging . warning ( 'I love you ~' ) logging . debug ( 'I love you too ~' ) \u867d\u7136\u4f7f\u7528 print \u80fd\u66f4\u5feb\u901f\u7684\u5728\u63a7\u5236\u592a\u8f93\u51fa\u60f3\u8981\u770b\u5230\u7684\u5185\u5bb9\uff0c\u4f46\u4ece\u4e0a\u9762\u7684\u793a\u4f8b\u6765\u770b\uff0c\u76f4\u63a5\u4f7f\u7528\u9ed8\u8ba4\u7684\u65e5\u5fd7\u8f93\u51fa\u4e5f\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u552f\u4e00\u7684\u533a\u522b\u53ef\u80fd \u5c31\u662f\u9700\u8981\u5bfc\u5165\u4e86\u3002\u800c\u4f7f\u7528\u65e5\u5fd7\u7684\u8bdd\uff0c\u60f3\u8981\u5728\u540e\u7eed\u589e\u52a0\u8f93\u51fa\u66f4\u7cbe\u786e\u7684\u4fe1\u606f\u5c31\u663e\u5f97\u6bd4\u8f83\u7075\u6d3b\u3002 \u65e5\u5fd7\u683c\u5f0f\u6240\u652f\u6301\u7684\u5b57\u6bb5\u8bf7\u53c2\u8003 LogRecord \u5c5e\u6027 \u3002 \u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5efa\u8bae\u4f18\u5148\u4f7f\u7528\u65e5\u5fd7\u7684\u539f\u56e0\u3002 1.2 \u4e00\u822c\u9879\u76ee\u4e2d\u4f7f\u7528 \u5bf9\u4e8e\u4e00\u822c\u7684\u9879\u76ee\uff0c\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6a21\u5757\u6216\u8005\u5305\uff0c\u5728\u6bcf\u4e2a\u6a21\u5757\u4e2d\u90fd\u521d\u59cb\u5316\u4e00\u4e0b\u65e5\u5fd7\u914d\u7f6e\u663e\u7136\u8fdd\u53cd\u4e86 DRY \u539f\u5219\u3002 \u6240\u4ee5\u6700\u597d\u662f\u6709\u4e00\u4e2a\u516c\u5171\u7684\u65e5\u5fd7\u6a21\u5757\uff0c\u5728\u8be5\u6a21\u5757\u4e2d\u521d\u59cb\u5316\u65e5\u5fd7\u3002 log.py \uff1a \"\"\"Log config\"\"\" import logging logging . basicConfig ( level = logging . DEBUG , format = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' , datefmt = '%Y-%m- %d T%H:%M:%S. %s +0800' , ) logger = logging . getLogger () \u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u76f4\u63a5\u5bfc\u5165 from log import logger \u5373\u53ef\u4f7f\u7528\u3002 \u63d0\u793a \u5728 log.py \u4e2d\u521d\u59cb\u5316\u65e5\u5fd7\u914d\u7f6e\u540e\uff0c\u867d\u7136\u53ef\u4ee5\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u76f4\u63a5\u4f7f\u7528 logging \u6253\u5370\u65e5\u5fd7\uff0c\u4f46\u5982\u679c\u542f\u52a8\u811a\u672c\u7684\u65f6\u5019\u6ca1\u6709\u5bfc\u5165\u8be5\u6a21\u5757\uff0c \u8be5\u6a21\u5757\u4e2d\u7684\u5185\u5bb9\u662f\u4e0d\u4f1a\u52a0\u8f7d\u7684\uff0c\u4e5f\u5c31\u662f\u6240\u65e5\u5fd7\u914d\u7f6e\u5e76\u6ca1\u6709\u5b9e\u9645\u6267\u884c\u3002 \u6b64\u65f6\u53ef\u4ee5\u91cd\u6784\u4ee3\u7801\uff1a \"\"\"Log config\"\"\" import logging def config_logging () -> None : \"\"\"Config logging\"\"\" logging . basicConfig ( level = logging . DEBUG , format = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' , datefmt = '%Y-%m- %d T%H:%M:%S. %s +0800' , ) \u7136\u540e\u5728\u9879\u76ee\u5b9e\u9645\u6267\u884c\u4e4b\u524d\u8c03\u7528\u65b9\u6cd5\u521d\u59cb\u5316\u914d\u7f6e\u5c31\u53ef\u4ee5\u4e86\u3002 \u5bf9\u4e8e\u9700\u8981\u7075\u6d3b\u63a7\u5236\u65e5\u5fd7\u914d\u7f6e\u7684\uff0c\u53ef\u4ee5\u5c06\u65e5\u5fd7\u7ea7\u522b\u653e\u5230\u914d\u7f6e\u4e2d\uff0c\u901a\u8fc7\u5de5\u5382\u65b9\u5f0f\u521d\u59cb\u5316\uff1a \"\"\"Log config\"\"\" import logging from typing import Optional def config_logging ( level : Optional [ int , str ] = logging . DEBUG , log_format : Optional [ str ] = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' ) -> None : \"\"\" Config logging :param level: :param log_format: :return: \"\"\" logging . basicConfig ( level = level , format = log_format , datefmt = '%Y-%m- %d T%H:%M:%S. %s +0800' , ) \u5728\u903b\u8f91\u6267\u884c\u4e4b\u524d\u8c03\u7528\u65b9\u6cd5\u901a\u8fc7\u53c2\u6570\u5de5\u5382\u5316\u65e5\u5fd7\u914d\u7f6e\u3002 2. \u901a\u7528\u5b9e\u8df5 \u672c\u8282\u5185\u5bb9\u662f\u5728\u901a\u7528\u9879\u76ee\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7684\u4e00\u822c\u5b9e\u8df5\u65b9\u6cd5\u3002 2.1 \u4f7f\u7528 ini \u683c\u5f0f\u6587\u4ef6\u914d\u7f6e\u65e5\u5fd7 \u5728\u9879\u76ee\u4e2d\u65b0\u5efa\u4e00\u4e2a log.ini \u7684\u914d\u7f6e\u6587\u4ef6\uff1a log.ini \uff1a [loggers] keys = root,simpleExample [handlers] keys = consoleHandler [formatters] keys = simpleFormatter [logger_root] level = DEBUG handlers = consoleHandler [logger_simpleExample] level = DEBUG handlers = consoleHandler qualname = simpleExample propagate = 0 [handler_consoleHandler] class = StreamHandler level = DEBUG formatter = simpleFormatter args = (sys.stdout,) [formatter_simpleFormatter] format = %(asctime)s - %(name)s - %(levelname)s - %(message)s datefmt = \u65b0\u5efa\u4e00\u4e2a log.py \u7684\u5305\uff1a log.py \uff1a from logging.config import fileConfig def init_ini_log () -> None : fileConfig ( 'log.ini' ) \u6700\u540e\u5728\u7a0b\u5e8f\u6267\u884c\u524d\uff0c\u521d\u59cb\u5316\u65e5\u5fd7\u914d\u7f6e\u3002 logging \u9ed8\u8ba4\u4f7f\u7528 configparser \u89e3\u6790 ini \u683c\u5f0f\u6587\u4ef6\u3002 \u5982\u679c\u4f60\u60f3\u4f7f\u7528\u5176\u4ed6\u683c\u5f0f\uff0c\u5982 toml \u6216\u8005 yaml \uff0c\u5219\u9700\u8981\u81ea\u5df1\u624b\u52a8\u8bfb\u53d6\u5e76\u89e3\u6790\u6587\u4ef6\u5185\u5bb9\u4e3a Dict \u5373\u53ef\u3002 2.2 \u4f7f\u7528 yaml \u683c\u5f0f\u6587\u4ef6\u914d\u7f6e\u65e5\u5fd7 \u65b0\u5efa log.yml \u6587\u4ef6\uff1a log.yml \uff1a version : 1 formatters : simple : format : '%(asctime)s - %(name)s - %(levelname)s - %(message)s' handlers : console : class : logging.StreamHandler level : DEBUG formatter : simple stream : ext://sys.stdout loggers : simpleExample : level : DEBUG handlers : - console propagate : false root : level : DEBUG handlers : - console YAML \u683c\u5f0f\u89e3\u6790\u5de5\u5177\u6709\u4e09\u4e2a\uff0c\u90fd\u5728\u6587\u6863\u4e2d\u6709\u76f8\u5e94\u5730\u5740\u3002\u5728\u8fd9\u91cc\u9009\u7528 PyYAML \u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pip install pyyaml \u65b0\u5efa log.py \u6a21\u5757\uff1a log.py \uff1a from logging.config import dictConfig from yaml import load try : from yaml import CLoader as Loader , CDumper as Dumper except ImportError : from yaml import Loader , Dumper def init_yml_log () -> None : with open ( 'log.yml' , mode = 'r' ) as obj : logging_config = load ( obj , Loader = Loader ) dictConfig ( logging_config ) \u6700\u540e\u5728\u7a0b\u5e8f\u6267\u884c\u524d\uff0c\u521d\u59cb\u5316\u65e5\u5fd7\u914d\u7f6e\u3002 2.3 \u6ce8\u610f\u4e8b\u9879 2.3.1 \u4f18\u5316 \u6839\u636e\u6587\u6863\u4e2d \u4f18\u5316 \u4e00\u8282\u5185\u5bb9\u63cf\u8ff0\uff0c\u65e5\u5fd7\u4e2d\u7684\u53c2\u6570\u5316\u6d88\u606f\uff0c \u5e94\u8be5\u5ef6\u8fdf\u52a0\u8f7d\u3002\u8fd9\u4e48\u505a\u662f\u4e3a\u4e86\u51cf\u5c11\u5728\u8ba1\u7b97\u65e5\u5fd7\u53c2\u6570\u662f\u6240\u6d88\u8017\u7684\u8d44\u6e90\uff0c\u56e0\u4e3a\u5982\u679c\u65e5\u5fd7\u8bb0\u5f55\u975e\u4e22\u5f03\uff0c\u5219\u4e0d\u9700\u8981\u6d88\u8017\u8fd9\u90e8\u5206\u8d44\u6e90\u3002\u6240\u4ee5\u5728 \u65e5\u5fd7\u8bb0\u5f55\u4e0a\uff0c\u5e94\u91c7\u7528 % \u7684\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u3002 \u5173\u4e8e\u6027\u80fd\u7684\u8ba8\u8bba\u53ef\u4ee5\u53c2\u8003 W1202 - logging-fstring-interpolation is not useful \u3002","title":"\u65e5\u5fd7"},{"location":"guidelines/advanced/logging/#logging","text":"\u5728\u5f00\u53d1\u4e2d\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528 print \u8f93\u51fa\u4e00\u4e9b\u4fe1\u606f\uff0c\u6216\u8005\u8bca\u65ad\u4fe1\u606f\u3002\u5728\u4fe1\u606f\u7684\u5b8c\u6574\u6027\u548c\u4fe1\u606f\u683c\u5f0f\u4e0a\u90fd\u4e0d\u80fd\u7b80\u4fbf\u4e14\u7075\u6d3b\u63a7\u5236\u3002\u6b64\u65f6\u4f7f\u7528 logging \u662f\u4e2a\u66f4\u597d\u7684\u9009\u62e9\uff0c \u800c\u4e14\u4e5f\u9f13\u52b1\u5f00\u53d1\u4eba\u5458\u5c3d\u53ef\u80fd\u7684\u4f18\u5148\u9009\u7528\u6253\u5370\u65e5\u5fd7\u7684\u65b9\u5f0f\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u4fe1\u606f\u3002 \u65e5\u5fd7\u662f\u5bf9\u8f6f\u4ef6\u6267\u884c\u65f6\u6240\u53d1\u751f\u4e8b\u4ef6\u7684\u4e00\u79cd\u8ffd\u8e2a\u65b9\u5f0f\u3002\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u5bf9\u4ed6\u4eec\u7684\u4ee3\u7801\u6dfb\u52a0\u65e5\u5fd7\u8c03\u7528\uff0c\u501f\u6b64\u6765\u6307\u793a\u67d0\u4e8b\u4ef6\u7684\u53d1\u751f\u3002 \u4e00\u4e2a\u4e8b\u4ef6\u901a\u8fc7\u4e00\u4e9b\u5305\u542b\u53d8\u91cf\u6570\u636e\u7684\u63cf\u8ff0\u4fe1\u606f\u6765\u63cf\u8ff0\uff08\u6bd4\u5982\uff1a\u6bcf\u4e2a\u4e8b\u4ef6\u53d1\u751f\u65f6\u7684\u6570\u636e\u90fd\u662f\u4e0d\u540c\u7684\uff09\u3002\u5f00\u53d1\u8005\u8fd8\u4f1a\u533a\u5206\u4e8b\u4ef6\u7684\u91cd\u8981\u6027\uff0c \u91cd\u8981\u6027\u4e5f\u88ab\u79f0\u4e3a \u7b49\u7ea7 \u6216 \u4e25\u91cd\u6027 \u3002\u6709\u4e00\u4e2a\u597d\u7684\u65e5\u5fd7\u5b9e\u8df5\uff0c\u80fd\u8ba9\u5f00\u53d1\u8c03\u8bd5\u6d41\u7a0b\u66f4\u987a\u7545\uff0c\u51fa\u73b0\u95ee\u9898\u80fd\u66f4\u5feb\u901f\u7cbe\u51c6\u5b9a\u4f4d\u3002 \u672c\u6587\u4e0d\u4f1a\u4ee5\u6700\u57fa\u7840\u7684\u65b9\u5f0f\u8bb2\u8ff0 Python logging \u7684\u4f7f\u7528\uff0c\u800c\u662f\u4ee5\u5f53\u524d\u603b\u7ed3\u7684\u5b9e\u8df5\u65b9\u5f0f\u7ed3\u5408\u5b9e\u9645\u64cd\u4f5c\u6848\u4f8b\u5c55\u793a Logging \u7684\u4f7f\u7528\uff0c\u6240\u4ee5\u5728\u9605\u8bfb\u6587\u7ae0\u94b1\uff0c \u4f60\u5e94\u8be5\u63d0\u524d\u4e86\u89e3 \u65e5\u5fd7 HOWTO \u548c Python \u7684\u65e5\u5fd7\u8bb0\u5f55\u5de5\u5177 \u4e24\u7bc7\u6587\u6863\u3002","title":"Logging"},{"location":"guidelines/advanced/logging/#1","text":"\u5728\u4e00\u822c\u5f00\u53d1\u4e2d\uff0c\u5bf9\u4e8e\u4e34\u65f6\u5f00\u53d1\u7684\u9879\u76ee\uff0c\u53ef\u80fd\u4e3a\u4e86\u5feb\u901f\u5b8c\u6210\u4efb\u52a1\uff0c\u9879\u76ee\u4e2d\u5927\u91cf\u4f7f\u7528\u4e86 print \u5c06\u8c03\u8bd5\u4fe1\u606f\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002 \u9879\u76ee\u540e\u671f\u5c31\u4f1a\u51fa\u73b0\u8c03\u8bd5\u56f0\u96be\u7b49\u95ee\u9898\u3002\u672c\u8282\u4f1a\u63d0\u4f9b\u5728\u7b80\u5355\u73af\u5883\u4e0b\u5feb\u901f\u4f7f\u7528\u65e5\u5fd7\u65b9\u5f0f\u3002","title":"1. \u7b80\u5355\u4f7f\u7528"},{"location":"guidelines/advanced/logging/#11","text":"\u5bf9\u4e8e\u5355\u6587\u4ef6\u7684\u4f7f\u7528\uff0c\u76f4\u63a5\u4f7f\u7528\u6839\u65e5\u5fd7\u5bf9\u8c61\u5373\u53ef\u3002\u7531\u4e8e\u9ed8\u8ba4\u7684\u65e5\u5fd7\u7ea7\u522b\u4e3a WARNING \uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u66f4\u4f4e\u7ea7\u522b\u7684\u65e5\u5fd7\u662f\u65e0\u6cd5\u663e\u793a\u7684\u3002 \"\"\"Simple logging\"\"\" import logging logging . warning ( 'I love you ~' ) \u5982\u679c\u540e\u7eed\u5f00\u53d1\u6709\u8981\u63a7\u5236\u65e5\u5fd7\u7ea7\u522b\u7684\u9700\u6c42\uff0c\u76f4\u63a5\u5728\u5f00\u59cb\u521d\u59cb\u5316\u65e5\u5fd7\u914d\u7f6e\u5c31\u53ef\u4ee5\u4e86\uff1b \"\"\"Simple logging\"\"\" import logging logging . basicConfig ( level = logging . DEBUG ) logging . warning ( 'I love you ~' ) logging . debug ( 'I love you too ~' ) \u5f53\u9700\u8981\u8f93\u51fa\u66f4\u8be6\u7ec6\u7684\u65e5\u5fd7\u4fe1\u606f\uff0c\u5982\u6267\u884c\u65f6\u95f4 \u3001 \u65e5\u5fd7\u7ea7\u522b \u3001 \u7ebf\u7a0b\u6216\u8fdb\u7a0b\u4fe1\u606f\uff0c\u90fd\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u63a7\u5236\u3002 \"\"\"Simple logging\"\"\" import logging logging . basicConfig ( level = logging . DEBUG , # format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', # format='%(asctime)s - %(name)s - %(levelname)s - %(module)s - %(process)d %(thread)d - %(message)s', format = ' %(asctime)s - %(name)s - %(levelname)s - %(module)s - %(process)d %(thread)d - %(pathname)s : %(lineno)d %(message)s ' , datefmt = '%Y-%m- %d T%H:%M:%S. %s +0800' , ) logging . warning ( 'I love you ~' ) logging . debug ( 'I love you too ~' ) \u867d\u7136\u4f7f\u7528 print \u80fd\u66f4\u5feb\u901f\u7684\u5728\u63a7\u5236\u592a\u8f93\u51fa\u60f3\u8981\u770b\u5230\u7684\u5185\u5bb9\uff0c\u4f46\u4ece\u4e0a\u9762\u7684\u793a\u4f8b\u6765\u770b\uff0c\u76f4\u63a5\u4f7f\u7528\u9ed8\u8ba4\u7684\u65e5\u5fd7\u8f93\u51fa\u4e5f\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u552f\u4e00\u7684\u533a\u522b\u53ef\u80fd \u5c31\u662f\u9700\u8981\u5bfc\u5165\u4e86\u3002\u800c\u4f7f\u7528\u65e5\u5fd7\u7684\u8bdd\uff0c\u60f3\u8981\u5728\u540e\u7eed\u589e\u52a0\u8f93\u51fa\u66f4\u7cbe\u786e\u7684\u4fe1\u606f\u5c31\u663e\u5f97\u6bd4\u8f83\u7075\u6d3b\u3002 \u65e5\u5fd7\u683c\u5f0f\u6240\u652f\u6301\u7684\u5b57\u6bb5\u8bf7\u53c2\u8003 LogRecord \u5c5e\u6027 \u3002 \u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5efa\u8bae\u4f18\u5148\u4f7f\u7528\u65e5\u5fd7\u7684\u539f\u56e0\u3002","title":"1.1 \u5355\u6587\u4ef6\u4f7f\u7528"},{"location":"guidelines/advanced/logging/#12","text":"\u5bf9\u4e8e\u4e00\u822c\u7684\u9879\u76ee\uff0c\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6a21\u5757\u6216\u8005\u5305\uff0c\u5728\u6bcf\u4e2a\u6a21\u5757\u4e2d\u90fd\u521d\u59cb\u5316\u4e00\u4e0b\u65e5\u5fd7\u914d\u7f6e\u663e\u7136\u8fdd\u53cd\u4e86 DRY \u539f\u5219\u3002 \u6240\u4ee5\u6700\u597d\u662f\u6709\u4e00\u4e2a\u516c\u5171\u7684\u65e5\u5fd7\u6a21\u5757\uff0c\u5728\u8be5\u6a21\u5757\u4e2d\u521d\u59cb\u5316\u65e5\u5fd7\u3002 log.py \uff1a \"\"\"Log config\"\"\" import logging logging . basicConfig ( level = logging . DEBUG , format = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' , datefmt = '%Y-%m- %d T%H:%M:%S. %s +0800' , ) logger = logging . getLogger () \u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u76f4\u63a5\u5bfc\u5165 from log import logger \u5373\u53ef\u4f7f\u7528\u3002 \u63d0\u793a \u5728 log.py \u4e2d\u521d\u59cb\u5316\u65e5\u5fd7\u914d\u7f6e\u540e\uff0c\u867d\u7136\u53ef\u4ee5\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u76f4\u63a5\u4f7f\u7528 logging \u6253\u5370\u65e5\u5fd7\uff0c\u4f46\u5982\u679c\u542f\u52a8\u811a\u672c\u7684\u65f6\u5019\u6ca1\u6709\u5bfc\u5165\u8be5\u6a21\u5757\uff0c \u8be5\u6a21\u5757\u4e2d\u7684\u5185\u5bb9\u662f\u4e0d\u4f1a\u52a0\u8f7d\u7684\uff0c\u4e5f\u5c31\u662f\u6240\u65e5\u5fd7\u914d\u7f6e\u5e76\u6ca1\u6709\u5b9e\u9645\u6267\u884c\u3002 \u6b64\u65f6\u53ef\u4ee5\u91cd\u6784\u4ee3\u7801\uff1a \"\"\"Log config\"\"\" import logging def config_logging () -> None : \"\"\"Config logging\"\"\" logging . basicConfig ( level = logging . DEBUG , format = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' , datefmt = '%Y-%m- %d T%H:%M:%S. %s +0800' , ) \u7136\u540e\u5728\u9879\u76ee\u5b9e\u9645\u6267\u884c\u4e4b\u524d\u8c03\u7528\u65b9\u6cd5\u521d\u59cb\u5316\u914d\u7f6e\u5c31\u53ef\u4ee5\u4e86\u3002 \u5bf9\u4e8e\u9700\u8981\u7075\u6d3b\u63a7\u5236\u65e5\u5fd7\u914d\u7f6e\u7684\uff0c\u53ef\u4ee5\u5c06\u65e5\u5fd7\u7ea7\u522b\u653e\u5230\u914d\u7f6e\u4e2d\uff0c\u901a\u8fc7\u5de5\u5382\u65b9\u5f0f\u521d\u59cb\u5316\uff1a \"\"\"Log config\"\"\" import logging from typing import Optional def config_logging ( level : Optional [ int , str ] = logging . DEBUG , log_format : Optional [ str ] = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' ) -> None : \"\"\" Config logging :param level: :param log_format: :return: \"\"\" logging . basicConfig ( level = level , format = log_format , datefmt = '%Y-%m- %d T%H:%M:%S. %s +0800' , ) \u5728\u903b\u8f91\u6267\u884c\u4e4b\u524d\u8c03\u7528\u65b9\u6cd5\u901a\u8fc7\u53c2\u6570\u5de5\u5382\u5316\u65e5\u5fd7\u914d\u7f6e\u3002","title":"1.2 \u4e00\u822c\u9879\u76ee\u4e2d\u4f7f\u7528"},{"location":"guidelines/advanced/logging/#2","text":"\u672c\u8282\u5185\u5bb9\u662f\u5728\u901a\u7528\u9879\u76ee\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7684\u4e00\u822c\u5b9e\u8df5\u65b9\u6cd5\u3002","title":"2. \u901a\u7528\u5b9e\u8df5"},{"location":"guidelines/advanced/logging/#21-ini","text":"\u5728\u9879\u76ee\u4e2d\u65b0\u5efa\u4e00\u4e2a log.ini \u7684\u914d\u7f6e\u6587\u4ef6\uff1a log.ini \uff1a [loggers] keys = root,simpleExample [handlers] keys = consoleHandler [formatters] keys = simpleFormatter [logger_root] level = DEBUG handlers = consoleHandler [logger_simpleExample] level = DEBUG handlers = consoleHandler qualname = simpleExample propagate = 0 [handler_consoleHandler] class = StreamHandler level = DEBUG formatter = simpleFormatter args = (sys.stdout,) [formatter_simpleFormatter] format = %(asctime)s - %(name)s - %(levelname)s - %(message)s datefmt = \u65b0\u5efa\u4e00\u4e2a log.py \u7684\u5305\uff1a log.py \uff1a from logging.config import fileConfig def init_ini_log () -> None : fileConfig ( 'log.ini' ) \u6700\u540e\u5728\u7a0b\u5e8f\u6267\u884c\u524d\uff0c\u521d\u59cb\u5316\u65e5\u5fd7\u914d\u7f6e\u3002 logging \u9ed8\u8ba4\u4f7f\u7528 configparser \u89e3\u6790 ini \u683c\u5f0f\u6587\u4ef6\u3002 \u5982\u679c\u4f60\u60f3\u4f7f\u7528\u5176\u4ed6\u683c\u5f0f\uff0c\u5982 toml \u6216\u8005 yaml \uff0c\u5219\u9700\u8981\u81ea\u5df1\u624b\u52a8\u8bfb\u53d6\u5e76\u89e3\u6790\u6587\u4ef6\u5185\u5bb9\u4e3a Dict \u5373\u53ef\u3002","title":"2.1 \u4f7f\u7528 ini \u683c\u5f0f\u6587\u4ef6\u914d\u7f6e\u65e5\u5fd7"},{"location":"guidelines/advanced/logging/#22-yaml","text":"\u65b0\u5efa log.yml \u6587\u4ef6\uff1a log.yml \uff1a version : 1 formatters : simple : format : '%(asctime)s - %(name)s - %(levelname)s - %(message)s' handlers : console : class : logging.StreamHandler level : DEBUG formatter : simple stream : ext://sys.stdout loggers : simpleExample : level : DEBUG handlers : - console propagate : false root : level : DEBUG handlers : - console YAML \u683c\u5f0f\u89e3\u6790\u5de5\u5177\u6709\u4e09\u4e2a\uff0c\u90fd\u5728\u6587\u6863\u4e2d\u6709\u76f8\u5e94\u5730\u5740\u3002\u5728\u8fd9\u91cc\u9009\u7528 PyYAML \u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pip install pyyaml \u65b0\u5efa log.py \u6a21\u5757\uff1a log.py \uff1a from logging.config import dictConfig from yaml import load try : from yaml import CLoader as Loader , CDumper as Dumper except ImportError : from yaml import Loader , Dumper def init_yml_log () -> None : with open ( 'log.yml' , mode = 'r' ) as obj : logging_config = load ( obj , Loader = Loader ) dictConfig ( logging_config ) \u6700\u540e\u5728\u7a0b\u5e8f\u6267\u884c\u524d\uff0c\u521d\u59cb\u5316\u65e5\u5fd7\u914d\u7f6e\u3002","title":"2.2 \u4f7f\u7528 yaml \u683c\u5f0f\u6587\u4ef6\u914d\u7f6e\u65e5\u5fd7"},{"location":"guidelines/advanced/logging/#23","text":"","title":"2.3 \u6ce8\u610f\u4e8b\u9879"},{"location":"guidelines/advanced/logging/#231","text":"\u6839\u636e\u6587\u6863\u4e2d \u4f18\u5316 \u4e00\u8282\u5185\u5bb9\u63cf\u8ff0\uff0c\u65e5\u5fd7\u4e2d\u7684\u53c2\u6570\u5316\u6d88\u606f\uff0c \u5e94\u8be5\u5ef6\u8fdf\u52a0\u8f7d\u3002\u8fd9\u4e48\u505a\u662f\u4e3a\u4e86\u51cf\u5c11\u5728\u8ba1\u7b97\u65e5\u5fd7\u53c2\u6570\u662f\u6240\u6d88\u8017\u7684\u8d44\u6e90\uff0c\u56e0\u4e3a\u5982\u679c\u65e5\u5fd7\u8bb0\u5f55\u975e\u4e22\u5f03\uff0c\u5219\u4e0d\u9700\u8981\u6d88\u8017\u8fd9\u90e8\u5206\u8d44\u6e90\u3002\u6240\u4ee5\u5728 \u65e5\u5fd7\u8bb0\u5f55\u4e0a\uff0c\u5e94\u91c7\u7528 % \u7684\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u5176\u4ed6\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u3002 \u5173\u4e8e\u6027\u80fd\u7684\u8ba8\u8bba\u53ef\u4ee5\u53c2\u8003 W1202 - logging-fstring-interpolation is not useful \u3002","title":"2.3.1 \u4f18\u5316"},{"location":"guidelines/advanced/plugin/","text":"\u63d2\u4ef6 plug-in \u5728\u7ef4\u57fa\u767e\u79d1\u4e2d\u662f\u8fd9\u4e48\u5b9a\u4e49\u7684\uff1a\u201c\u5728\u8ba1\u7b97\u4e2d\uff0c\u63d2\u4ef6\u662f\u8f6f\u4ef6\u7ec4\u4ef6\uff0c\u4e3a\u73b0\u6709\u8ba1\u7b97\u673a\u7a0b\u5e8f\u589e\u52a0\u4e00\u4e2a\u7279\u5b9a\u7684\u7279\u5f81\u3002\u201d \u6240\u4ee5\u63d2\u4ef6\u5e94\u8be5\u662f\u4e00\u4e2a\u80fd\u591f\u7075\u6d3b\u914d\u7f6e\uff0c\u5e76\u5f88\u65b9\u4fbf\u7684\u8f7d\u5165\u914d\u7f6e\u4e2d\u7684\u5185\u5bb9\u3002 \u7531\u4e8e Python \u672c\u8eab\u7684\u52a8\u6001\u7279\u6027\uff0c\u63d2\u4ef6\u5316\u7684\u5b9e\u73b0\u5c31\u66f4\u7075\u6d3b\u3002\u73b0\u6709\u7684\u52a8\u6001\u63d2\u4ef6\u90fd\u662f\u57fa\u4e8e Python \u7684\u547d\u540d\u7a7a\u95f4\u548c\u52a8\u6001\u5bfc\u5165\u529f\u80fd\u6765\u67e5\u627e\u5e76\u5bfc\u5165\u5916\u90e8\u4f9d\u8d56\u3002 \u5177\u4f53\u539f\u7406\u53ef\u4ee5\u67e5\u770b Creating and discovering plugins \u3002 \u63d2\u4ef6\u6846\u67b6 pluggy pluggy \u662f\u4ece pytest \u4e2d\u6f14\u5316\u51fa\u6765\u7684\u4e00\u4e2a\u63d2\u4ef6\u5de5\u5177\u3002\u5b83\u4e3a pytest \u63d0\u4f9b\u5916\u56f4\u63d2\u4ef6\u652f\u6301\uff0c\u5f53\u5f00\u53d1\u4eba\u5458\u9700\u8981\u6269\u5c55 pytest \u7684\u529f\u80fd\u65f6\uff0c\u57fa\u4e8e pytest \u7684\u89c4\u8303\u505a\u51fa\u5bf9\u5e94\u7684\u63d2\u4ef6\u7136\u540e\u5c06\u5176\u5b89\u88c5\u5230\u73af\u5883\u4e2d\u540e\uff0c pytest \u5c31\u53ef\u4ee5\u81ea\u52a8\u8bc6\u522b\u5df2\u6709\u63d2\u4ef6\u3002 \u5176\u5177\u4f53\u539f\u7406\u662f\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a hookspec = pluggy.HookspecMarker(\"eggsample\") \u6765\u6807\u8bb0\u63d2\u4ef6\u4e8b\u5148\u7684\u89c4\u8303\uff0c\u7136\u540e\u4f7f\u7528 hookimpl = pluggy.HookimplMarker(\"eggsample\") \u6807\u8bb0 \u63d2\u4ef6\u7684\u5b9e\u73b0\u3002 \u89c4\u8303\uff1a import pluggy hookspec = pluggy . HookspecMarker ( \"eggsample\" ) @hookspec def eggsample_add_ingredients ( ingredients : tuple ): \"\"\"Have a look at the ingredients and offer your own. :param ingredients: the ingredients, don't touch them! :return: a list of ingredients \"\"\" @hookspec def eggsample_prep_condiments ( condiments : dict ): \"\"\"Reorganize the condiments tray to your heart's content. :param condiments: some sauces and stuff :return: a witty comment about your activity \u5b9e\u73b0\uff1a import pluggy hookimpl = pluggy . HookimplMarker ( \"eggsample\" ) \"\"\"Marker to be imported and used in plugins (and for own implementations)\"\"\" class ExamplePluggy : @hookimpl def eggsample_add_ingredients ( self ): spices = [ \"salt\" , \"pepper\" ] you_can_never_have_enough_eggs = [ \"egg\" , \"egg\" ] ingredients = spices + you_can_never_have_enough_eggs return ingredients @hookimpl def eggsample_prep_condiments ( self , condiments ): condiments [ \"mint sauce\" ] = 1 \u7136\u540e\u5c06\u63d2\u4ef6\u89c4\u8303\u548c\u5b9e\u73b0\u88c5\u8f7d\u5230\u63d2\u4ef6\u7ba1\u7406\u7c7b\u4e2d\uff0c\u4e3a\u4e86\u53ef\u4ee5\u627e\u5230\u5176\u4ed6\u4eba\u5f00\u53d1\u7684\u63d2\u4ef6\uff0c\u9700\u8981\u8c03\u7528 load_setuptools_entrypoints \u65b9\u6cd5\u4ece\u547d\u540d\u7a7a\u95f4 \u67e5\u627e\u5df2\u7ecf\u5728\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u5176\u4ed6\u63d2\u4ef6\u3002 import itertools import random import pluggy def get_plugin_manager (): pm = pluggy . PluginManager ( \"eggsample\" ) pm . add_hookspecs ( hookspecs ) pm . load_setuptools_entrypoints ( \"eggsample\" ) pm . register ( ExamplePluggy ) return pm \u5728\u4f7f\u7528\u65f6\uff0c\u8c03\u7528 pm.hook.eggsample_add_ingredients \u4f20\u9012\u53c2\u6570\u5373\u53ef\u3002 \u5916\u90e8\u5f00\u53d1\u7684\u63d2\u4ef6\uff0c\u53ea\u9700\u8981\u9075\u5faa\u63d2\u4ef6\u89c4\u8303\u505a\u5b9e\u73b0\uff1a import eggsample @eggsample . hookimpl def eggsample_add_ingredients ( ingredients ): \"\"\"Here the caller expects us to return a list.\"\"\" if \"egg\" in ingredients : spam = [ \"lovely spam\" , \"wonderous spam\" ] else : spam = [ \"splendiferous spam\" , \"magnificent spam\" ] return spam @eggsample . hookimpl def eggsample_prep_condiments ( condiments ): \"\"\"Here the caller passes a mutable object, so we mess with it directly.\"\"\" try : del condiments [ \"steak sauce\" ] except KeyError : pass condiments [ \"spam sauce\" ] = 42 return \"Now this is what I call a condiments tray!\" \u5e76\u5728\u6253\u5305\u4fe1\u606f\u4e2d\u6807\u6ce8\u76f8\u540c\u7684\u547d\u540d\u7a7a\u95f4\uff1a from setuptools import setup setup ( name = \"eggsample-spam\" , install_requires = \"eggsample\" , entry_points = { \"eggsample\" : [ \"spam = eggsample_spam\" ]}, py_modules = [ \"eggsample_spam\" ], ) \u5176\u539f\u7406\u4e5f\u662f\u901a\u8fc7 Python \u7684 from importlib.metadata import entry_points \u627e\u5230\u6ce8\u518c\u5230 Python \u89e3\u91ca\u5668 entry_points \u4e2d\u7684\u5305\uff0c\u5e76 \u6839\u636e\u547d\u540d\u7a7a\u95f4\u83b7\u53d6\u9700\u8981\u7684\u5185\u5bb9\u3002 stevedore stevedore \u662f Openstack \u5f00\u53d1\u548c\u7ef4\u62a4\u7684\u4e00\u4e2a\u63d2\u4ef6\u5de5\u5177\u3002\u8be5 \u63d2\u4ef6\u4e3a Openstack \u7684 ceilometer \u63d0\u4f9b\u63d2\u4ef6\u529f\u80fd\u3002 stevedore \u5219\u662f\u63a8\u8350\u4f7f\u7528\u7ee7\u627f\u7684\u65b9\u5f0f\u89c4\u8303\u63d2\u4ef6\u63a5\u53e3\u3002 \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u63d2\u4ef6\u57fa\u7c7b\uff1a # stevedore/example/base.py # -*- coding: utf-8 -*- # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. # See the License for the specific language governing permissions and # limitations under the License. import abc class FormatterBase ( metaclass = abc . ABCMeta ): \"\"\"Base class for example plugin used in the tutorial. \"\"\" def __init__ ( self , max_width = 60 ): self . max_width = max_width @abc . abstractmethod def format ( self , data ): \"\"\"Format the data and return unicode text. :param data: A dictionary with string keys and simple types as values. :type data: dict(str:?) :returns: Iterable producing the formatted text. \"\"\" \u7136\u540e\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u63d2\u4ef6\uff1a # stevedore/example/simple.py # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); you may # not use this file except in compliance with the License. You may obtain # a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the # License for the specific language governing permissions and limitations # under the License. from stevedore.example import base class Simple ( base . FormatterBase ): \"\"\"A very basic formatter.\"\"\" def format ( self , data ): \"\"\"Format the data and return unicode text. :param data: A dictionary with string keys and simple types as values. :type data: dict(str:?) \"\"\" for name , value in sorted ( data . items ()): line = ' {name} = {value} \\n ' . format ( name = name , value = value , ) yield line \u6700\u540e\u6253\u5305\u3002\u6253\u5305\u7684\u65f6\u5019\uff0c\u5c06\u63d2\u4ef6\u6ce8\u518c\u5230 entry_points \u4e2d\u3002 # stevedore/example/setup.py # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. # See the License for the specific language governing permissions and # limitations under the License. from setuptools import find_packages from setuptools import setup setup ( name = 'stevedore-examples' , version = '1.0' , description = 'Demonstration package for stevedore' , author = 'Doug Hellmann' , author_email = 'doug@doughellmann.com' , url = 'http://opendev.org/openstack/stevedore' , classifiers = [ 'Development Status :: 3 - Alpha' , 'License :: OSI Approved :: Apache Software License' , 'Programming Language :: Python' , 'Programming Language :: Python :: 2' , 'Programming Language :: Python :: 2.7' , 'Programming Language :: Python :: 3' , 'Programming Language :: Python :: 3.5' , 'Intended Audience :: Developers' , 'Environment :: Console' , ], platforms = [ 'Any' ], scripts = [], provides = [ 'stevedore.examples' , ], packages = find_packages (), include_package_data = True , entry_points = { 'stevedore.example.formatter' : [ 'simple = stevedore.example.simple:Simple' , 'plain = stevedore.example.simple:Simple' , ], }, zip_safe = False , ) \u521b\u5efa\u4e00\u4e2a\u63d2\u4ef6\u9879\u76ee\uff0c\u5e76\u5b9e\u73b0\u63d2\u4ef6\uff1a # stevedore/example2/fields.py # -*- coding: utf-8 -*- # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. # See the License for the specific language governing permissions and # limitations under the License. import textwrap from stevedore.example import base class FieldList ( base . FormatterBase ): \"\"\"Format values as a reStructuredText field list. For example:: : name1 : value : name2 : value : name3 : a long value will be wrapped with a hanging indent \"\"\" def format ( self , data ): \"\"\"Format the data and return unicode text. :param data: A dictionary with string keys and simple types as values. :type data: dict(str:?) \"\"\" for name , value in sorted ( data . items ()): full_text = ': {name} : {value} ' . format ( name = name , value = value , ) wrapped_text = textwrap . fill ( full_text , initial_indent = '' , subsequent_indent = ' ' , width = self . max_width , ) yield wrapped_text + ' \\n ' \u540c\u6837\u6253\u5305\uff0c\u5e76\u914d\u7f6e\u6ce8\u518c\u4fe1\u606f\uff0c\u5c06\u63d2\u4ef6\u6ce8\u518c\u5230\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\uff1a # stevedore/example2/setup.py # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. # See the License for the specific language governing permissions and # limitations under the License. from setuptools import find_packages from setuptools import setup setup ( name = 'stevedore-examples2' , version = '1.0' , description = 'Demonstration package for stevedore' , author = 'Doug Hellmann' , author_email = 'doug@doughellmann.com' , url = 'http://opendev.org/openstack/stevedore' , classifiers = [ 'Development Status :: 3 - Alpha' , 'License :: OSI Approved :: Apache Software License' , 'Programming Language :: Python' , 'Programming Language :: Python :: 2' , 'Programming Language :: Python :: 2.7' , 'Programming Language :: Python :: 3' , 'Programming Language :: Python :: 3.5' , 'Intended Audience :: Developers' , 'Environment :: Console' , ], platforms = [ 'Any' ], scripts = [], provides = [ 'stevedore.examples2' , ], packages = find_packages (), include_package_data = True , entry_points = { 'stevedore.example.formatter' : [ 'field = stevedore.example2.fields:FieldList' , ], }, zip_safe = False , ) \u5728\u4f7f\u7528\u662f\uff0c\u53ef\u4ee5\u901a\u8fc7 driver \u65b9\u5f0f\u8c03\u7528\uff1a # stevedore/example/load_as_driver.py # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. # See the License for the specific language governing permissions and # limitations under the License. import argparse from stevedore import driver if __name__ == '__main__' : parser = argparse . ArgumentParser () parser . add_argument ( 'format' , nargs = '?' , default = 'simple' , help = 'the output format' , ) parser . add_argument ( '--width' , default = 60 , type = int , help = 'maximum output width for text' , ) parsed_args = parser . parse_args () data = { 'a' : 'A' , 'b' : 'B' , 'long' : 'word ' * 80 , } mgr = driver . DriverManager ( namespace = 'stevedore.example.formatter' , name = parsed_args . format , invoke_on_load = True , invoke_args = ( parsed_args . width ,), ) for chunk in mgr . driver . format ( data ): print ( chunk , end = '' ) \u6216\u8005\u901a\u8fc7 extensions \u7684\u65b9\u5f0f\u8c03\u7528\uff1a # stevedore/example/load_as_extension.py # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. # See the License for the specific language governing permissions and # limitations under the License. import argparse from stevedore import extension if __name__ == '__main__' : parser = argparse . ArgumentParser () parser . add_argument ( '--width' , default = 60 , type = int , help = 'maximum output width for text' , ) parsed_args = parser . parse_args () data = { 'a' : 'A' , 'b' : 'B' , 'long' : 'word ' * 80 , } mgr = extension . ExtensionManager ( namespace = 'stevedore.example.formatter' , invoke_on_load = True , invoke_args = ( parsed_args . width ,), ) def format_data ( ext , data ): return ( ext . name , ext . obj . format ( data )) results = mgr . map ( format_data , data ) for name , result in results : print ( 'Formatter: {0} ' . format ( name )) for chunk in result : print ( chunk , end = '' ) print ( '' ) \u5b9e\u8df5 \u901a\u8fc7\u5b9e\u9645\u5f00\u53d1\u4f53\u9a8c\uff0c\u63a8\u8350\u4f7f\u7528 stevedore \u3002\u603b\u7ed3\u4f18\u70b9\u5982\u4e0b\uff1a \u901a\u8fc7\u8bbe\u8ba1\u57fa\u7c7b\u5b9a\u4e49\u63a5\u53e3\u89c4\u8303 \u63d2\u4ef6\u8c03\u7528\u66f4\u52a0\u7075\u6d3b\u3002 \u4f7f\u7528\u590d\u6742\u5ea6\u4e0a stevedore \u66f4\u80dc\u4e00\u7b79","title":"\u63d2\u4ef6\u5316"},{"location":"guidelines/advanced/plugin/#_1","text":"plug-in \u5728\u7ef4\u57fa\u767e\u79d1\u4e2d\u662f\u8fd9\u4e48\u5b9a\u4e49\u7684\uff1a\u201c\u5728\u8ba1\u7b97\u4e2d\uff0c\u63d2\u4ef6\u662f\u8f6f\u4ef6\u7ec4\u4ef6\uff0c\u4e3a\u73b0\u6709\u8ba1\u7b97\u673a\u7a0b\u5e8f\u589e\u52a0\u4e00\u4e2a\u7279\u5b9a\u7684\u7279\u5f81\u3002\u201d \u6240\u4ee5\u63d2\u4ef6\u5e94\u8be5\u662f\u4e00\u4e2a\u80fd\u591f\u7075\u6d3b\u914d\u7f6e\uff0c\u5e76\u5f88\u65b9\u4fbf\u7684\u8f7d\u5165\u914d\u7f6e\u4e2d\u7684\u5185\u5bb9\u3002 \u7531\u4e8e Python \u672c\u8eab\u7684\u52a8\u6001\u7279\u6027\uff0c\u63d2\u4ef6\u5316\u7684\u5b9e\u73b0\u5c31\u66f4\u7075\u6d3b\u3002\u73b0\u6709\u7684\u52a8\u6001\u63d2\u4ef6\u90fd\u662f\u57fa\u4e8e Python \u7684\u547d\u540d\u7a7a\u95f4\u548c\u52a8\u6001\u5bfc\u5165\u529f\u80fd\u6765\u67e5\u627e\u5e76\u5bfc\u5165\u5916\u90e8\u4f9d\u8d56\u3002 \u5177\u4f53\u539f\u7406\u53ef\u4ee5\u67e5\u770b Creating and discovering plugins \u3002","title":"\u63d2\u4ef6"},{"location":"guidelines/advanced/plugin/#_2","text":"","title":"\u63d2\u4ef6\u6846\u67b6"},{"location":"guidelines/advanced/plugin/#pluggy","text":"pluggy \u662f\u4ece pytest \u4e2d\u6f14\u5316\u51fa\u6765\u7684\u4e00\u4e2a\u63d2\u4ef6\u5de5\u5177\u3002\u5b83\u4e3a pytest \u63d0\u4f9b\u5916\u56f4\u63d2\u4ef6\u652f\u6301\uff0c\u5f53\u5f00\u53d1\u4eba\u5458\u9700\u8981\u6269\u5c55 pytest \u7684\u529f\u80fd\u65f6\uff0c\u57fa\u4e8e pytest \u7684\u89c4\u8303\u505a\u51fa\u5bf9\u5e94\u7684\u63d2\u4ef6\u7136\u540e\u5c06\u5176\u5b89\u88c5\u5230\u73af\u5883\u4e2d\u540e\uff0c pytest \u5c31\u53ef\u4ee5\u81ea\u52a8\u8bc6\u522b\u5df2\u6709\u63d2\u4ef6\u3002 \u5176\u5177\u4f53\u539f\u7406\u662f\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a hookspec = pluggy.HookspecMarker(\"eggsample\") \u6765\u6807\u8bb0\u63d2\u4ef6\u4e8b\u5148\u7684\u89c4\u8303\uff0c\u7136\u540e\u4f7f\u7528 hookimpl = pluggy.HookimplMarker(\"eggsample\") \u6807\u8bb0 \u63d2\u4ef6\u7684\u5b9e\u73b0\u3002 \u89c4\u8303\uff1a import pluggy hookspec = pluggy . HookspecMarker ( \"eggsample\" ) @hookspec def eggsample_add_ingredients ( ingredients : tuple ): \"\"\"Have a look at the ingredients and offer your own. :param ingredients: the ingredients, don't touch them! :return: a list of ingredients \"\"\" @hookspec def eggsample_prep_condiments ( condiments : dict ): \"\"\"Reorganize the condiments tray to your heart's content. :param condiments: some sauces and stuff :return: a witty comment about your activity \u5b9e\u73b0\uff1a import pluggy hookimpl = pluggy . HookimplMarker ( \"eggsample\" ) \"\"\"Marker to be imported and used in plugins (and for own implementations)\"\"\" class ExamplePluggy : @hookimpl def eggsample_add_ingredients ( self ): spices = [ \"salt\" , \"pepper\" ] you_can_never_have_enough_eggs = [ \"egg\" , \"egg\" ] ingredients = spices + you_can_never_have_enough_eggs return ingredients @hookimpl def eggsample_prep_condiments ( self , condiments ): condiments [ \"mint sauce\" ] = 1 \u7136\u540e\u5c06\u63d2\u4ef6\u89c4\u8303\u548c\u5b9e\u73b0\u88c5\u8f7d\u5230\u63d2\u4ef6\u7ba1\u7406\u7c7b\u4e2d\uff0c\u4e3a\u4e86\u53ef\u4ee5\u627e\u5230\u5176\u4ed6\u4eba\u5f00\u53d1\u7684\u63d2\u4ef6\uff0c\u9700\u8981\u8c03\u7528 load_setuptools_entrypoints \u65b9\u6cd5\u4ece\u547d\u540d\u7a7a\u95f4 \u67e5\u627e\u5df2\u7ecf\u5728\u6307\u5b9a\u547d\u540d\u7a7a\u95f4\u4e0b\u7684\u5176\u4ed6\u63d2\u4ef6\u3002 import itertools import random import pluggy def get_plugin_manager (): pm = pluggy . PluginManager ( \"eggsample\" ) pm . add_hookspecs ( hookspecs ) pm . load_setuptools_entrypoints ( \"eggsample\" ) pm . register ( ExamplePluggy ) return pm \u5728\u4f7f\u7528\u65f6\uff0c\u8c03\u7528 pm.hook.eggsample_add_ingredients \u4f20\u9012\u53c2\u6570\u5373\u53ef\u3002 \u5916\u90e8\u5f00\u53d1\u7684\u63d2\u4ef6\uff0c\u53ea\u9700\u8981\u9075\u5faa\u63d2\u4ef6\u89c4\u8303\u505a\u5b9e\u73b0\uff1a import eggsample @eggsample . hookimpl def eggsample_add_ingredients ( ingredients ): \"\"\"Here the caller expects us to return a list.\"\"\" if \"egg\" in ingredients : spam = [ \"lovely spam\" , \"wonderous spam\" ] else : spam = [ \"splendiferous spam\" , \"magnificent spam\" ] return spam @eggsample . hookimpl def eggsample_prep_condiments ( condiments ): \"\"\"Here the caller passes a mutable object, so we mess with it directly.\"\"\" try : del condiments [ \"steak sauce\" ] except KeyError : pass condiments [ \"spam sauce\" ] = 42 return \"Now this is what I call a condiments tray!\" \u5e76\u5728\u6253\u5305\u4fe1\u606f\u4e2d\u6807\u6ce8\u76f8\u540c\u7684\u547d\u540d\u7a7a\u95f4\uff1a from setuptools import setup setup ( name = \"eggsample-spam\" , install_requires = \"eggsample\" , entry_points = { \"eggsample\" : [ \"spam = eggsample_spam\" ]}, py_modules = [ \"eggsample_spam\" ], ) \u5176\u539f\u7406\u4e5f\u662f\u901a\u8fc7 Python \u7684 from importlib.metadata import entry_points \u627e\u5230\u6ce8\u518c\u5230 Python \u89e3\u91ca\u5668 entry_points \u4e2d\u7684\u5305\uff0c\u5e76 \u6839\u636e\u547d\u540d\u7a7a\u95f4\u83b7\u53d6\u9700\u8981\u7684\u5185\u5bb9\u3002","title":"pluggy"},{"location":"guidelines/advanced/plugin/#stevedore","text":"stevedore \u662f Openstack \u5f00\u53d1\u548c\u7ef4\u62a4\u7684\u4e00\u4e2a\u63d2\u4ef6\u5de5\u5177\u3002\u8be5 \u63d2\u4ef6\u4e3a Openstack \u7684 ceilometer \u63d0\u4f9b\u63d2\u4ef6\u529f\u80fd\u3002 stevedore \u5219\u662f\u63a8\u8350\u4f7f\u7528\u7ee7\u627f\u7684\u65b9\u5f0f\u89c4\u8303\u63d2\u4ef6\u63a5\u53e3\u3002 \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u63d2\u4ef6\u57fa\u7c7b\uff1a # stevedore/example/base.py # -*- coding: utf-8 -*- # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. # See the License for the specific language governing permissions and # limitations under the License. import abc class FormatterBase ( metaclass = abc . ABCMeta ): \"\"\"Base class for example plugin used in the tutorial. \"\"\" def __init__ ( self , max_width = 60 ): self . max_width = max_width @abc . abstractmethod def format ( self , data ): \"\"\"Format the data and return unicode text. :param data: A dictionary with string keys and simple types as values. :type data: dict(str:?) :returns: Iterable producing the formatted text. \"\"\" \u7136\u540e\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u63d2\u4ef6\uff1a # stevedore/example/simple.py # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); you may # not use this file except in compliance with the License. You may obtain # a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the # License for the specific language governing permissions and limitations # under the License. from stevedore.example import base class Simple ( base . FormatterBase ): \"\"\"A very basic formatter.\"\"\" def format ( self , data ): \"\"\"Format the data and return unicode text. :param data: A dictionary with string keys and simple types as values. :type data: dict(str:?) \"\"\" for name , value in sorted ( data . items ()): line = ' {name} = {value} \\n ' . format ( name = name , value = value , ) yield line \u6700\u540e\u6253\u5305\u3002\u6253\u5305\u7684\u65f6\u5019\uff0c\u5c06\u63d2\u4ef6\u6ce8\u518c\u5230 entry_points \u4e2d\u3002 # stevedore/example/setup.py # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. # See the License for the specific language governing permissions and # limitations under the License. from setuptools import find_packages from setuptools import setup setup ( name = 'stevedore-examples' , version = '1.0' , description = 'Demonstration package for stevedore' , author = 'Doug Hellmann' , author_email = 'doug@doughellmann.com' , url = 'http://opendev.org/openstack/stevedore' , classifiers = [ 'Development Status :: 3 - Alpha' , 'License :: OSI Approved :: Apache Software License' , 'Programming Language :: Python' , 'Programming Language :: Python :: 2' , 'Programming Language :: Python :: 2.7' , 'Programming Language :: Python :: 3' , 'Programming Language :: Python :: 3.5' , 'Intended Audience :: Developers' , 'Environment :: Console' , ], platforms = [ 'Any' ], scripts = [], provides = [ 'stevedore.examples' , ], packages = find_packages (), include_package_data = True , entry_points = { 'stevedore.example.formatter' : [ 'simple = stevedore.example.simple:Simple' , 'plain = stevedore.example.simple:Simple' , ], }, zip_safe = False , ) \u521b\u5efa\u4e00\u4e2a\u63d2\u4ef6\u9879\u76ee\uff0c\u5e76\u5b9e\u73b0\u63d2\u4ef6\uff1a # stevedore/example2/fields.py # -*- coding: utf-8 -*- # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. # See the License for the specific language governing permissions and # limitations under the License. import textwrap from stevedore.example import base class FieldList ( base . FormatterBase ): \"\"\"Format values as a reStructuredText field list. For example:: : name1 : value : name2 : value : name3 : a long value will be wrapped with a hanging indent \"\"\" def format ( self , data ): \"\"\"Format the data and return unicode text. :param data: A dictionary with string keys and simple types as values. :type data: dict(str:?) \"\"\" for name , value in sorted ( data . items ()): full_text = ': {name} : {value} ' . format ( name = name , value = value , ) wrapped_text = textwrap . fill ( full_text , initial_indent = '' , subsequent_indent = ' ' , width = self . max_width , ) yield wrapped_text + ' \\n ' \u540c\u6837\u6253\u5305\uff0c\u5e76\u914d\u7f6e\u6ce8\u518c\u4fe1\u606f\uff0c\u5c06\u63d2\u4ef6\u6ce8\u518c\u5230\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\uff1a # stevedore/example2/setup.py # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. # See the License for the specific language governing permissions and # limitations under the License. from setuptools import find_packages from setuptools import setup setup ( name = 'stevedore-examples2' , version = '1.0' , description = 'Demonstration package for stevedore' , author = 'Doug Hellmann' , author_email = 'doug@doughellmann.com' , url = 'http://opendev.org/openstack/stevedore' , classifiers = [ 'Development Status :: 3 - Alpha' , 'License :: OSI Approved :: Apache Software License' , 'Programming Language :: Python' , 'Programming Language :: Python :: 2' , 'Programming Language :: Python :: 2.7' , 'Programming Language :: Python :: 3' , 'Programming Language :: Python :: 3.5' , 'Intended Audience :: Developers' , 'Environment :: Console' , ], platforms = [ 'Any' ], scripts = [], provides = [ 'stevedore.examples2' , ], packages = find_packages (), include_package_data = True , entry_points = { 'stevedore.example.formatter' : [ 'field = stevedore.example2.fields:FieldList' , ], }, zip_safe = False , ) \u5728\u4f7f\u7528\u662f\uff0c\u53ef\u4ee5\u901a\u8fc7 driver \u65b9\u5f0f\u8c03\u7528\uff1a # stevedore/example/load_as_driver.py # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. # See the License for the specific language governing permissions and # limitations under the License. import argparse from stevedore import driver if __name__ == '__main__' : parser = argparse . ArgumentParser () parser . add_argument ( 'format' , nargs = '?' , default = 'simple' , help = 'the output format' , ) parser . add_argument ( '--width' , default = 60 , type = int , help = 'maximum output width for text' , ) parsed_args = parser . parse_args () data = { 'a' : 'A' , 'b' : 'B' , 'long' : 'word ' * 80 , } mgr = driver . DriverManager ( namespace = 'stevedore.example.formatter' , name = parsed_args . format , invoke_on_load = True , invoke_args = ( parsed_args . width ,), ) for chunk in mgr . driver . format ( data ): print ( chunk , end = '' ) \u6216\u8005\u901a\u8fc7 extensions \u7684\u65b9\u5f0f\u8c03\u7528\uff1a # stevedore/example/load_as_extension.py # Copyright (C) 2020 Red Hat, Inc. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. # See the License for the specific language governing permissions and # limitations under the License. import argparse from stevedore import extension if __name__ == '__main__' : parser = argparse . ArgumentParser () parser . add_argument ( '--width' , default = 60 , type = int , help = 'maximum output width for text' , ) parsed_args = parser . parse_args () data = { 'a' : 'A' , 'b' : 'B' , 'long' : 'word ' * 80 , } mgr = extension . ExtensionManager ( namespace = 'stevedore.example.formatter' , invoke_on_load = True , invoke_args = ( parsed_args . width ,), ) def format_data ( ext , data ): return ( ext . name , ext . obj . format ( data )) results = mgr . map ( format_data , data ) for name , result in results : print ( 'Formatter: {0} ' . format ( name )) for chunk in result : print ( chunk , end = '' ) print ( '' )","title":"stevedore"},{"location":"guidelines/advanced/plugin/#_3","text":"\u901a\u8fc7\u5b9e\u9645\u5f00\u53d1\u4f53\u9a8c\uff0c\u63a8\u8350\u4f7f\u7528 stevedore \u3002\u603b\u7ed3\u4f18\u70b9\u5982\u4e0b\uff1a \u901a\u8fc7\u8bbe\u8ba1\u57fa\u7c7b\u5b9a\u4e49\u63a5\u53e3\u89c4\u8303 \u63d2\u4ef6\u8c03\u7528\u66f4\u52a0\u7075\u6d3b\u3002 \u4f7f\u7528\u590d\u6742\u5ea6\u4e0a stevedore \u66f4\u80dc\u4e00\u7b79","title":"\u5b9e\u8df5"},{"location":"guidelines/advanced/signal_decouple/","text":"\u4fe1\u53f7\u89e3\u8026 \u8fd9\u91cc\u6240\u8bf4\u7684\u4fe1\u53f7\u5e76\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u4fe1\u53f7\uff0c\u800c\u662f \u4e8b\u4ef6\u9a71\u52a8\u67b6\u6784 \u7684\u4e00\u79cd\u7b80\u5355\u5b9e\u73b0\u3002 \u4e8b\u4ef6\u9a71\u52a8\u67b6\u6784\u53ef\u4ee5\u57fa\u4e8e\u53d1\u5e03/\u8ba2\u9605\u6a21\u578b\u6216\u8005\u4e8b\u4ef6\u6d41\u6a21\u578b\u3002 \u540e\u9762\u8c08\u5230\u7684\u90fd\u662f\u57fa\u4e8e\u53d1\u5e03/\u8ba2\u9605\u6a21\u578b\u5b9e\u73b0\u7684\u3002 \u5386\u53f2 Python \u4e2d\u7684\u4fe1\u53f7\u89e3\u8026\u673a\u5236\u53ef\u4ee5\u901a\u8fc7 pydispatcher \u5b9e\u73b0\u3002\u800c\u4e14 Django Web \u6846\u67b6\u4e2d\u7684\u4fe1\u53f7\u673a\u5236\u4e5f\u662f \u57fa\u4e8e\u8fd9\u4e2a\u9879\u76ee\u884d\u751f\u7684\u3002 \u8be5\u9879\u76ee\u7684\u6838\u5fc3\u903b\u8f91 ---- \u5f31\u5f15\u7528\uff0c\u4e5f\u5728\u540e\u6765\u5f15\u5165\u5230 Python \u5b98\u65b9\u5e93\u4e2d\u3002\u6b64\u540e\u8be5\u9879\u76ee\u4e5f\u5728 2015 \u5e74\u4e0d\u518d\u66f4\u65b0\u3002 \u800c\u4e4b\u540e\u793e\u533a\u4e5f\u51fa\u73b0\u4e00\u4e9b\u4fe1\u53f7\u6846\u67b6\uff0c\u548c\u5728\u5e95\u5c42\u5b9e\u73b0\u7c7b\u4f3c\u4e8e pydispatcher \u529f\u80fd\u7684\u903b\u8f91\u3002 \u4fe1\u53f7\u6846\u67b6 pydispatcher pydispatcher \u63d0\u4f9b\u591a\u751f\u4ea7\u8005-\u591a\u6d88\u8d39\u8005\u4fe1\u53f7\u6ce8\u518c\u548c\u8def\u7531\u57fa\u7840\u8bbe\u65bd\uff0c\u4ee5\u5728\u591a\u4e2a\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u3002 pydispatcher \u4f7f\u7528\u793a\u4f8b from pydispatch import dispatcher start_process = 'process' def audit ( name ): print ( f ' { name } processing ......' ) dispatcher . connect ( audit , signal = start_process , sender = dispatcher . Any ) class ETL : name = 'foo' def process ( self ): \"\"\"\"\"\" dispatcher . send ( signal = start_process , sender = self , name = self . name ) if __name__ == '__main__' : ETL () . process () \u4e0a\u8ff0\u793a\u4f8b\u4e2d start_process \u8ba2\u9605\u4e86 audit \u4e8b\u4ef6\uff0c\u7136\u540e\u5728\u6267\u884c ETL.process \u7684\u65f6\u5019\uff0c\u901a\u8fc7 dispatcher.send \u4e00\u6761\u8bb0\u5f55\uff0c \u540c\u65f6\u89e6\u53d1\u8be5\u4e8b\u4ef6\u6267\u884c\u3002 pydispatcher \u652f\u6301\u6307\u5b9a\u7279\u5b9a\u4fe1\u53f7\uff0c\u548c\u53d1\u9001\u8005\u6216\u533f\u540d\u3002\u4fe1\u53f7\u53ef\u4ee5\u662f\u7279\u5b9a\u6216\u8005\u533f\u540d\u3002\u5bf9\u8c61\u7531 Python \u89e3\u91ca\u5668 \u89e3\u91ca\u5668\u7ba1\u7406\uff0c\u5982\u679c\u5bf9\u8c61\u88ab\u56de\u6536\uff0c\u5219\u4e0d\u4f1a\u5728\u89e6\u53d1\u3002 blinker blinker \u4e3aPython\u5bf9\u8c61\u63d0\u4f9b\u5feb\u901f\u548c\u7b80\u5355\u7684\u5bf9\u8c61\u548c\u5e7f\u64ad\u4fe1\u53f7\u3002\u5176\u5185\u90e8\u903b\u8f91\u4f9d\u7136\u4f7f\u7528\u7684\u662f\u5f31\u5f15\u7528\u3002\u4f7f\u7528\u8d77\u6765\u548c pydispatcher \u7c7b\u4f3c\u3002 blinker \u4f7f\u7528\u793a\u4f8b from blinker import Signal class AltProcessor : on_ready = Signal () on_complete = Signal () def __init__ ( self , name ): self . name = name def go ( self ): self . on_ready . send ( self ) print ( \"Alternate processing.\" ) self . on_complete . send ( self ) def __repr__ ( self ): return '<AltProcessor %s >' % self . name apc = AltProcessor ( 'c' ) @apc . on_complete . connect def completed ( sender ): print \"AltProcessor %s completed!\" % sender . name if __name__ == '__main__' : apc . go () blinker \u540c\u6837\u652f\u6301\u533f\u540d\u4fe1\u53f7\uff0c\u5e95\u5c42\u7684\u5f31\u5f15\u7528\u673a\u5236\u53ef\u4ee5\u51cf\u5c11\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u5b83\u6709\u4e00\u4e2a\u597d\u5904\u662f\u652f\u6301 \u88c5\u9970\u5668\u8ba2\u9605\u4e8b\u4ef6\uff0c\u4f7f\u7528\u8d77\u6765\u6bd4\u8f83\u65b9\u4fbf\u3002 aiosignal aiosignal \u662f\u4ece aiohttp \u4e2d\u72ec\u7acb\u51fa\u6765\u7684\u5f02\u6b65\u4fe1\u53f7\u6846\u67b6\u3002 \u5b83\u548c\u4e0a\u8ff0\u4e24\u4e2a\u4fe1\u53f7\u6846\u67b6\u533a\u522b\u6709\uff1a\u4e00\uff0c\u5b83\u662f\u4e00\u4e2a\u5f02\u6b65\u4fe1\u53f7\u6846\u67b6\uff0c\u53ef\u4ee5\u8ba2\u9605\u5f02\u6b65\u4e8b\u4ef6\uff1b\u4e8c\uff0c\u5728\u8ba2\u9605\u4e8b\u4ef6\u65f6\uff0c\u5c5e\u4e8e\u5f3a\u5f15\u7528\u3002 aiosignal \u4f7f\u7528\u793a\u4f8b import asyncio from aiosignal import Signal signal = Signal ( 'signal' ) async def receiver ( message : str ): print ( f 'I receive message: { message } ' ) signal . append ( receiver ) signal . freeze () async def main (): await signal . send ( 'I am god!' ) if __name__ == '__main__' : asyncio . run ( main ()) \u5728\u5e95\u5c42\uff0c Signal \u662f\u7ee7\u627f\u4e86 MutableSequence \u7c7b\uff0c\u4f7f\u7528 Signal.append \u65b9\u6cd5\u5c06\u8ba2\u9605\u7684\u4e8b\u4ef6\u4fdd\u5b58\u5728\u5bf9\u8c61\u7684\u5c5e\u6027\u4e2d\u3002 \u5f53\u8c03\u7528 Signal.send \u65b9\u6cd5\u65f6\uff0c\u4f1a\u904d\u5386\u8ba2\u9605\u7684\u4e8b\u4ef6\u5217\u8868\uff0c\u7136\u540e\u6267\u884c\u3002 \u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u5f02\u6b65\u4fe1\u53f7 aio-pydispatch \u6e90\u4ee3\u7801 aio_signal.signal.py \"\"\" Asyncio pydispatch (Signal Manager) This is based on [pyDispatcher](http://pydispatcher.sourceforge.net/) reference [scrapy SignalManager](https://docs.scrapy.org/en/latest/topics/signals.html) implementation on [Asyncio](https://docs.python.org/3/library/asyncio.html) \"\"\" import asyncio import functools import logging import threading import weakref from typing import ( Any , Awaitable , Callable , List , Optional , Tuple , TypeVar , Union ) from aio_pydispatch.utils import id_maker , safe_ref T = TypeVar ( 'T' ) # pylint: disable=invalid-name logger = logging . getLogger ( __name__ ) class _IgnoredException ( Exception ): \"\"\"Ignore exception\"\"\" class Signal : \"\"\" The signal manager, you can register functions to a signal, and store in it. Then you can touch off all function that registered on the signal where you want. example: import asyncio from aio_pydispatch import Signal server_start = Signal('server_start') server_stop = Signal('server_stop') def ppp(value: str) -> None: print(value) async def main(): server_start.connect(ppp) server_stop.connect(ppp) await server_start.send('server start') await asyncio.sleep(1) await server_stop.send('server stop') if __name__ == '__main__': asyncio.run(main()) \"\"\" def __init__ ( self , name : Optional [ str ] = None , doc : Optional [ str ] = None , ): self . _name = name self . _doc = doc self . __lock = threading . Lock () self . __should_clear_receiver = False self . _receivers = {} @property def receivers ( self ): \"\"\"Receivers\"\"\" return self . _receivers def connect ( self , receiver : Callable [ ... , Union [ T , Awaitable ]], ) -> Callable [ ... , Union [ T , Awaitable ]]: \"\"\" Connect a receiver on this signal. :param receiver: :return: \"\"\" assert callable ( receiver ), \"Signal receivers must be callable.\" referenced_receiver = safe_ref ( receiver , self . _set_should_clear_receiver , value = True ) lookup_key = id_maker ( receiver ) with self . __lock : self . _clear_dead_receivers () if lookup_key not in self . _receivers : self . _receivers . setdefault ( lookup_key , referenced_receiver ) self . _set_should_clear_receiver ( False ) return receiver async def send ( self , * args , ** kwargs ) -> List [ Tuple [ Any , Any ]]: \"\"\"Send signal, touch off all registered function.\"\"\" _dont_log = kwargs . pop ( '_ignored_exception' , _IgnoredException ) responses = [] loop = asyncio . get_running_loop () for receiver in self . live_receivers : func = functools . partial ( receiver , * args , ** kwargs ) try : if asyncio . iscoroutinefunction ( receiver ): response = await func () else : response = await loop . run_in_executor ( None , func ) except _dont_log as ex : response = ex except Exception as ex : # pylint: disable=broad-except response = ex logger . error ( 'Caught an error on %s ' , receiver , exc_info = True ) responses . append (( receiver , response )) return responses def sync_send ( self , * args , ** kwargs ) -> List [ Tuple [ Any , Any ]]: \"\"\" Can only trigger sync func. If func is coroutine function, it will return a awaitable object. :param args: :param kwargs: :return: \"\"\" _dont_log = kwargs . pop ( '_ignored_exception' , _IgnoredException ) responses = [] for receiver in self . live_receivers : try : if asyncio . iscoroutinefunction ( receiver ): logger . warning ( ' %s is coroutine, but it not awaited' , receiver ) response = receiver ( * args , ** kwargs ) except _dont_log as ex : response = ex except Exception as ex : # pylint: disable=broad-except response = ex logger . error ( 'Caught an error on %s ' , receiver , exc_info = True ) responses . append (( receiver , response )) return responses @property def live_receivers ( self ) -> List [ Callable [ ... , Union [ T , Awaitable ]]]: \"\"\"Get all live receiver.\"\"\" with self . __lock : receivers = [] _receiver = self . _receivers . copy () for lookup_key , receiver in _receiver . items (): if isinstance ( receiver , weakref . ReferenceType ): real_receiver = receiver () if real_receiver is None : self . _receivers . pop ( lookup_key ) else : receivers . append ( real_receiver ) return receivers def _set_should_clear_receiver ( self , value : bool ) -> None : \"\"\"Register to the receiver weakerf finalize callback\"\"\" self . __should_clear_receiver = value def _clear_dead_receivers ( self ) -> None : if self . __should_clear_receiver : _receiver = self . _receivers . copy () for lookup_key , receiver in _receiver . items (): if isinstance ( receiver , weakref . ReferenceType ) and receiver () is not None : continue self . _receivers . pop ( lookup_key ) def disconnect ( self , receiver ) -> None : \"\"\"clean a receiver\"\"\" self . _receivers . pop ( id_maker ( receiver )) def disconnect_all ( self ) -> None : \"\"\"Clean all receiver.\"\"\" self . _receivers . clear () aio_signal.utils.py \"\"\"Utils\"\"\" import weakref from typing import Any , Callable , Tuple from weakref import ReferenceType , WeakMethod def ref_adapter ( receiver : Any ) -> Tuple [ Any , ReferenceType ]: \"\"\" Adapt a receiver to ref object. :param receiver: :return: \"\"\" ref = weakref . ref receiver_obj = receiver # Check if receiver is a ref. if hasattr ( receiver , '__self__' ) and hasattr ( receiver , '__func__' ): ref = WeakMethod receiver_obj = receiver . __self__ referenced_receiver = ref ( receiver ) return receiver_obj , referenced_receiver def safe_ref ( receiver : Any , callback : Callable [ ... , None ], * args , ** kwargs ) -> ReferenceType : \"\"\" Save ref a receiver. Register a callback function to the object finalizer :param receiver: A ref object :param callback: Register the callback function to the object finalizer :param args: Callback args :param kwargs: Callback kwargs :return: \"\"\" receiver_obj , receiver = ref_adapter ( receiver ) weakref . finalize ( receiver_obj , callback , * args , ** kwargs ) return receiver def id_maker ( receiver : Any ) -> int : \"\"\" Get receiver id. If receiver is ref object, will return a ref object id. :param receiver: :return: Any \"\"\" if not isinstance ( receiver , ReferenceType ): _ , receiver = ref_adapter ( receiver ) return id ( receiver ) \u81ea\u5b9a\u4e49\u7684 aio_signal \u652f\u6301\u8ba2\u9605\u540c\u6b65\u4e8b\u4ef6\u548c\u5f02\u6b65\u4e8b\u4ef6\u3002\u53d1\u5e03\u65f6\u652f\u6301\u540c\u6b65\u53d1\u5e03\u548c\u5f02\u6b65\u53d1\u5e03\u3002\u5f02\u6b65\u53d1\u5e03\u652f\u6301\u89e6\u53d1\u540c\u6b65\u4e8b\u4ef6\u548c \u5f02\u6b65\u4e8b\u4ef6\uff0c\u540c\u6b65\u53d1\u5e03\u53ea\u652f\u6301\u89e6\u53d1\u540c\u6b65\u4e8b\u4ef6\u3002 \u4f7f\u7528 import asyncio from aio_signal import Signal server_start = Signal ( 'server_start' ) server_stop = Signal ( 'server_stop' ) def ppp ( value : str ) -> None : print ( value ) async def main (): server_start . connect ( ppp ) server_stop . connect ( ppp ) await server_start . send ( 'server start' ) await asyncio . sleep ( 1 ) await server_stop . send ( 'server stop' ) if __name__ == '__main__' : asyncio . run ( main ()) \u5b9e\u8df5 \u5728\u5f00\u53d1\u5b9e\u8df5\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528\u5e26\u6709\u5f31\u5f15\u7528\u7684\u4fe1\u53f7\u5e93\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8d44\u6e90\u5360\u7528\u3002","title":"\u4fe1\u53f7"},{"location":"guidelines/advanced/signal_decouple/#_1","text":"\u8fd9\u91cc\u6240\u8bf4\u7684\u4fe1\u53f7\u5e76\u4e0d\u662f\u64cd\u4f5c\u7cfb\u7edf\u7684\u4fe1\u53f7\uff0c\u800c\u662f \u4e8b\u4ef6\u9a71\u52a8\u67b6\u6784 \u7684\u4e00\u79cd\u7b80\u5355\u5b9e\u73b0\u3002 \u4e8b\u4ef6\u9a71\u52a8\u67b6\u6784\u53ef\u4ee5\u57fa\u4e8e\u53d1\u5e03/\u8ba2\u9605\u6a21\u578b\u6216\u8005\u4e8b\u4ef6\u6d41\u6a21\u578b\u3002 \u540e\u9762\u8c08\u5230\u7684\u90fd\u662f\u57fa\u4e8e\u53d1\u5e03/\u8ba2\u9605\u6a21\u578b\u5b9e\u73b0\u7684\u3002","title":"\u4fe1\u53f7\u89e3\u8026"},{"location":"guidelines/advanced/signal_decouple/#_2","text":"Python \u4e2d\u7684\u4fe1\u53f7\u89e3\u8026\u673a\u5236\u53ef\u4ee5\u901a\u8fc7 pydispatcher \u5b9e\u73b0\u3002\u800c\u4e14 Django Web \u6846\u67b6\u4e2d\u7684\u4fe1\u53f7\u673a\u5236\u4e5f\u662f \u57fa\u4e8e\u8fd9\u4e2a\u9879\u76ee\u884d\u751f\u7684\u3002 \u8be5\u9879\u76ee\u7684\u6838\u5fc3\u903b\u8f91 ---- \u5f31\u5f15\u7528\uff0c\u4e5f\u5728\u540e\u6765\u5f15\u5165\u5230 Python \u5b98\u65b9\u5e93\u4e2d\u3002\u6b64\u540e\u8be5\u9879\u76ee\u4e5f\u5728 2015 \u5e74\u4e0d\u518d\u66f4\u65b0\u3002 \u800c\u4e4b\u540e\u793e\u533a\u4e5f\u51fa\u73b0\u4e00\u4e9b\u4fe1\u53f7\u6846\u67b6\uff0c\u548c\u5728\u5e95\u5c42\u5b9e\u73b0\u7c7b\u4f3c\u4e8e pydispatcher \u529f\u80fd\u7684\u903b\u8f91\u3002","title":"\u5386\u53f2"},{"location":"guidelines/advanced/signal_decouple/#_3","text":"","title":"\u4fe1\u53f7\u6846\u67b6"},{"location":"guidelines/advanced/signal_decouple/#pydispatcher","text":"pydispatcher \u63d0\u4f9b\u591a\u751f\u4ea7\u8005-\u591a\u6d88\u8d39\u8005\u4fe1\u53f7\u6ce8\u518c\u548c\u8def\u7531\u57fa\u7840\u8bbe\u65bd\uff0c\u4ee5\u5728\u591a\u4e2a\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u3002","title":"pydispatcher"},{"location":"guidelines/advanced/signal_decouple/#pydispatcher_1","text":"from pydispatch import dispatcher start_process = 'process' def audit ( name ): print ( f ' { name } processing ......' ) dispatcher . connect ( audit , signal = start_process , sender = dispatcher . Any ) class ETL : name = 'foo' def process ( self ): \"\"\"\"\"\" dispatcher . send ( signal = start_process , sender = self , name = self . name ) if __name__ == '__main__' : ETL () . process () \u4e0a\u8ff0\u793a\u4f8b\u4e2d start_process \u8ba2\u9605\u4e86 audit \u4e8b\u4ef6\uff0c\u7136\u540e\u5728\u6267\u884c ETL.process \u7684\u65f6\u5019\uff0c\u901a\u8fc7 dispatcher.send \u4e00\u6761\u8bb0\u5f55\uff0c \u540c\u65f6\u89e6\u53d1\u8be5\u4e8b\u4ef6\u6267\u884c\u3002 pydispatcher \u652f\u6301\u6307\u5b9a\u7279\u5b9a\u4fe1\u53f7\uff0c\u548c\u53d1\u9001\u8005\u6216\u533f\u540d\u3002\u4fe1\u53f7\u53ef\u4ee5\u662f\u7279\u5b9a\u6216\u8005\u533f\u540d\u3002\u5bf9\u8c61\u7531 Python \u89e3\u91ca\u5668 \u89e3\u91ca\u5668\u7ba1\u7406\uff0c\u5982\u679c\u5bf9\u8c61\u88ab\u56de\u6536\uff0c\u5219\u4e0d\u4f1a\u5728\u89e6\u53d1\u3002","title":"pydispatcher \u4f7f\u7528\u793a\u4f8b"},{"location":"guidelines/advanced/signal_decouple/#blinker","text":"blinker \u4e3aPython\u5bf9\u8c61\u63d0\u4f9b\u5feb\u901f\u548c\u7b80\u5355\u7684\u5bf9\u8c61\u548c\u5e7f\u64ad\u4fe1\u53f7\u3002\u5176\u5185\u90e8\u903b\u8f91\u4f9d\u7136\u4f7f\u7528\u7684\u662f\u5f31\u5f15\u7528\u3002\u4f7f\u7528\u8d77\u6765\u548c pydispatcher \u7c7b\u4f3c\u3002","title":"blinker"},{"location":"guidelines/advanced/signal_decouple/#blinker_1","text":"from blinker import Signal class AltProcessor : on_ready = Signal () on_complete = Signal () def __init__ ( self , name ): self . name = name def go ( self ): self . on_ready . send ( self ) print ( \"Alternate processing.\" ) self . on_complete . send ( self ) def __repr__ ( self ): return '<AltProcessor %s >' % self . name apc = AltProcessor ( 'c' ) @apc . on_complete . connect def completed ( sender ): print \"AltProcessor %s completed!\" % sender . name if __name__ == '__main__' : apc . go () blinker \u540c\u6837\u652f\u6301\u533f\u540d\u4fe1\u53f7\uff0c\u5e95\u5c42\u7684\u5f31\u5f15\u7528\u673a\u5236\u53ef\u4ee5\u51cf\u5c11\u5bf9\u8c61\u7684\u5f15\u7528\u3002\u5b83\u6709\u4e00\u4e2a\u597d\u5904\u662f\u652f\u6301 \u88c5\u9970\u5668\u8ba2\u9605\u4e8b\u4ef6\uff0c\u4f7f\u7528\u8d77\u6765\u6bd4\u8f83\u65b9\u4fbf\u3002","title":"blinker \u4f7f\u7528\u793a\u4f8b"},{"location":"guidelines/advanced/signal_decouple/#aiosignal","text":"aiosignal \u662f\u4ece aiohttp \u4e2d\u72ec\u7acb\u51fa\u6765\u7684\u5f02\u6b65\u4fe1\u53f7\u6846\u67b6\u3002 \u5b83\u548c\u4e0a\u8ff0\u4e24\u4e2a\u4fe1\u53f7\u6846\u67b6\u533a\u522b\u6709\uff1a\u4e00\uff0c\u5b83\u662f\u4e00\u4e2a\u5f02\u6b65\u4fe1\u53f7\u6846\u67b6\uff0c\u53ef\u4ee5\u8ba2\u9605\u5f02\u6b65\u4e8b\u4ef6\uff1b\u4e8c\uff0c\u5728\u8ba2\u9605\u4e8b\u4ef6\u65f6\uff0c\u5c5e\u4e8e\u5f3a\u5f15\u7528\u3002","title":"aiosignal"},{"location":"guidelines/advanced/signal_decouple/#aiosignal_1","text":"import asyncio from aiosignal import Signal signal = Signal ( 'signal' ) async def receiver ( message : str ): print ( f 'I receive message: { message } ' ) signal . append ( receiver ) signal . freeze () async def main (): await signal . send ( 'I am god!' ) if __name__ == '__main__' : asyncio . run ( main ()) \u5728\u5e95\u5c42\uff0c Signal \u662f\u7ee7\u627f\u4e86 MutableSequence \u7c7b\uff0c\u4f7f\u7528 Signal.append \u65b9\u6cd5\u5c06\u8ba2\u9605\u7684\u4e8b\u4ef6\u4fdd\u5b58\u5728\u5bf9\u8c61\u7684\u5c5e\u6027\u4e2d\u3002 \u5f53\u8c03\u7528 Signal.send \u65b9\u6cd5\u65f6\uff0c\u4f1a\u904d\u5386\u8ba2\u9605\u7684\u4e8b\u4ef6\u5217\u8868\uff0c\u7136\u540e\u6267\u884c\u3002","title":"aiosignal \u4f7f\u7528\u793a\u4f8b"},{"location":"guidelines/advanced/signal_decouple/#_4","text":"aio-pydispatch","title":"\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684\u5f02\u6b65\u4fe1\u53f7"},{"location":"guidelines/advanced/signal_decouple/#_5","text":"aio_signal.signal.py \"\"\" Asyncio pydispatch (Signal Manager) This is based on [pyDispatcher](http://pydispatcher.sourceforge.net/) reference [scrapy SignalManager](https://docs.scrapy.org/en/latest/topics/signals.html) implementation on [Asyncio](https://docs.python.org/3/library/asyncio.html) \"\"\" import asyncio import functools import logging import threading import weakref from typing import ( Any , Awaitable , Callable , List , Optional , Tuple , TypeVar , Union ) from aio_pydispatch.utils import id_maker , safe_ref T = TypeVar ( 'T' ) # pylint: disable=invalid-name logger = logging . getLogger ( __name__ ) class _IgnoredException ( Exception ): \"\"\"Ignore exception\"\"\" class Signal : \"\"\" The signal manager, you can register functions to a signal, and store in it. Then you can touch off all function that registered on the signal where you want. example: import asyncio from aio_pydispatch import Signal server_start = Signal('server_start') server_stop = Signal('server_stop') def ppp(value: str) -> None: print(value) async def main(): server_start.connect(ppp) server_stop.connect(ppp) await server_start.send('server start') await asyncio.sleep(1) await server_stop.send('server stop') if __name__ == '__main__': asyncio.run(main()) \"\"\" def __init__ ( self , name : Optional [ str ] = None , doc : Optional [ str ] = None , ): self . _name = name self . _doc = doc self . __lock = threading . Lock () self . __should_clear_receiver = False self . _receivers = {} @property def receivers ( self ): \"\"\"Receivers\"\"\" return self . _receivers def connect ( self , receiver : Callable [ ... , Union [ T , Awaitable ]], ) -> Callable [ ... , Union [ T , Awaitable ]]: \"\"\" Connect a receiver on this signal. :param receiver: :return: \"\"\" assert callable ( receiver ), \"Signal receivers must be callable.\" referenced_receiver = safe_ref ( receiver , self . _set_should_clear_receiver , value = True ) lookup_key = id_maker ( receiver ) with self . __lock : self . _clear_dead_receivers () if lookup_key not in self . _receivers : self . _receivers . setdefault ( lookup_key , referenced_receiver ) self . _set_should_clear_receiver ( False ) return receiver async def send ( self , * args , ** kwargs ) -> List [ Tuple [ Any , Any ]]: \"\"\"Send signal, touch off all registered function.\"\"\" _dont_log = kwargs . pop ( '_ignored_exception' , _IgnoredException ) responses = [] loop = asyncio . get_running_loop () for receiver in self . live_receivers : func = functools . partial ( receiver , * args , ** kwargs ) try : if asyncio . iscoroutinefunction ( receiver ): response = await func () else : response = await loop . run_in_executor ( None , func ) except _dont_log as ex : response = ex except Exception as ex : # pylint: disable=broad-except response = ex logger . error ( 'Caught an error on %s ' , receiver , exc_info = True ) responses . append (( receiver , response )) return responses def sync_send ( self , * args , ** kwargs ) -> List [ Tuple [ Any , Any ]]: \"\"\" Can only trigger sync func. If func is coroutine function, it will return a awaitable object. :param args: :param kwargs: :return: \"\"\" _dont_log = kwargs . pop ( '_ignored_exception' , _IgnoredException ) responses = [] for receiver in self . live_receivers : try : if asyncio . iscoroutinefunction ( receiver ): logger . warning ( ' %s is coroutine, but it not awaited' , receiver ) response = receiver ( * args , ** kwargs ) except _dont_log as ex : response = ex except Exception as ex : # pylint: disable=broad-except response = ex logger . error ( 'Caught an error on %s ' , receiver , exc_info = True ) responses . append (( receiver , response )) return responses @property def live_receivers ( self ) -> List [ Callable [ ... , Union [ T , Awaitable ]]]: \"\"\"Get all live receiver.\"\"\" with self . __lock : receivers = [] _receiver = self . _receivers . copy () for lookup_key , receiver in _receiver . items (): if isinstance ( receiver , weakref . ReferenceType ): real_receiver = receiver () if real_receiver is None : self . _receivers . pop ( lookup_key ) else : receivers . append ( real_receiver ) return receivers def _set_should_clear_receiver ( self , value : bool ) -> None : \"\"\"Register to the receiver weakerf finalize callback\"\"\" self . __should_clear_receiver = value def _clear_dead_receivers ( self ) -> None : if self . __should_clear_receiver : _receiver = self . _receivers . copy () for lookup_key , receiver in _receiver . items (): if isinstance ( receiver , weakref . ReferenceType ) and receiver () is not None : continue self . _receivers . pop ( lookup_key ) def disconnect ( self , receiver ) -> None : \"\"\"clean a receiver\"\"\" self . _receivers . pop ( id_maker ( receiver )) def disconnect_all ( self ) -> None : \"\"\"Clean all receiver.\"\"\" self . _receivers . clear () aio_signal.utils.py \"\"\"Utils\"\"\" import weakref from typing import Any , Callable , Tuple from weakref import ReferenceType , WeakMethod def ref_adapter ( receiver : Any ) -> Tuple [ Any , ReferenceType ]: \"\"\" Adapt a receiver to ref object. :param receiver: :return: \"\"\" ref = weakref . ref receiver_obj = receiver # Check if receiver is a ref. if hasattr ( receiver , '__self__' ) and hasattr ( receiver , '__func__' ): ref = WeakMethod receiver_obj = receiver . __self__ referenced_receiver = ref ( receiver ) return receiver_obj , referenced_receiver def safe_ref ( receiver : Any , callback : Callable [ ... , None ], * args , ** kwargs ) -> ReferenceType : \"\"\" Save ref a receiver. Register a callback function to the object finalizer :param receiver: A ref object :param callback: Register the callback function to the object finalizer :param args: Callback args :param kwargs: Callback kwargs :return: \"\"\" receiver_obj , receiver = ref_adapter ( receiver ) weakref . finalize ( receiver_obj , callback , * args , ** kwargs ) return receiver def id_maker ( receiver : Any ) -> int : \"\"\" Get receiver id. If receiver is ref object, will return a ref object id. :param receiver: :return: Any \"\"\" if not isinstance ( receiver , ReferenceType ): _ , receiver = ref_adapter ( receiver ) return id ( receiver ) \u81ea\u5b9a\u4e49\u7684 aio_signal \u652f\u6301\u8ba2\u9605\u540c\u6b65\u4e8b\u4ef6\u548c\u5f02\u6b65\u4e8b\u4ef6\u3002\u53d1\u5e03\u65f6\u652f\u6301\u540c\u6b65\u53d1\u5e03\u548c\u5f02\u6b65\u53d1\u5e03\u3002\u5f02\u6b65\u53d1\u5e03\u652f\u6301\u89e6\u53d1\u540c\u6b65\u4e8b\u4ef6\u548c \u5f02\u6b65\u4e8b\u4ef6\uff0c\u540c\u6b65\u53d1\u5e03\u53ea\u652f\u6301\u89e6\u53d1\u540c\u6b65\u4e8b\u4ef6\u3002","title":"\u6e90\u4ee3\u7801"},{"location":"guidelines/advanced/signal_decouple/#_6","text":"import asyncio from aio_signal import Signal server_start = Signal ( 'server_start' ) server_stop = Signal ( 'server_stop' ) def ppp ( value : str ) -> None : print ( value ) async def main (): server_start . connect ( ppp ) server_stop . connect ( ppp ) await server_start . send ( 'server start' ) await asyncio . sleep ( 1 ) await server_stop . send ( 'server stop' ) if __name__ == '__main__' : asyncio . run ( main ())","title":"\u4f7f\u7528"},{"location":"guidelines/advanced/signal_decouple/#_7","text":"\u5728\u5f00\u53d1\u5b9e\u8df5\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528\u5e26\u6709\u5f31\u5f15\u7528\u7684\u4fe1\u53f7\u5e93\u3002\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u8d44\u6e90\u5360\u7528\u3002","title":"\u5b9e\u8df5"},{"location":"guidelines/advanced/test/","text":"Test - \u6d4b\u8bd5 \u6d4b\u8bd5\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u4e00\u4e2a\u4e0d\u53ef\u907f\u514d\u7684\u73af\u8282\uff0c\u5728\u4ee3\u7801\u7ea7\u522b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u80fd\u591f\u5728\u90e8\u7f72\u94b1\u5c3d\u65e9\u53d1\u73b0\u7a0b\u5e8f\u4e2d\u7684\u5f02\u5e38\uff0c\u589e\u5f3a\u8f6f\u4ef6\u7684\u5065\u58ee\u6027\u3002 \u5728\u9075\u5faa TDD \u539f\u5219\u6765\u5f00\u53d1\uff0c\u80fd\u6709\u6548\u63d0\u9ad8\u4ee3\u7801\u7684\u8bbe\u8ba1\u3002 1. \u6d4b\u8bd5\u5de5\u5177 \u5728 Python \u4e2d\u9664\u4e86\u6709\u8bed\u8a00\u5185\u7f6e\u7684\u6d4b\u8bd5\u6846\u67b6\u4e4b\u5916\uff0c\u8fd8\u6709\u8bb8\u591a\u7b2c\u4e09\u65b9\u6d4b\u8bd5\u6846\u67b6\uff0c\u4e00\u4e9b\u975e\u6d4b\u8bd5\u6846\u67b6\u5185\u90e8\u4e5f\u4f1a\u5185\u7f6e\u6d4b\u8bd5\u6846\u67b6\u3002\u5176\u76ee\u7684\u90fd\u662f\u5728\u5185\u7f6e\u6d4b\u8bd5\u6846\u67b6\u7684\u57fa\u7840\u4e0a \u589e\u52a0\u4e86\u4e00\u4e9b\u7279\u6027\uff0c\u8ba9\u7f16\u5199\u6d4b\u8bd5\u66f4\u52a0\u65b9\u4fbf\uff0c\u6d4b\u8bd5\u8fc7\u7a0b\u66f4\u52a0\u987a\u7545\u3002 \u4e3a\u4e86\u65b9\u4fbf\u6d4b\u8bd5\u6846\u67b6\u67e5\u627e\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5728\u7f16\u5199\u6d4b\u8bd5\u65f6\u5e94\u9075\u5faa\u4e00\u5b9a\u7684\u89c4\u8303\uff1a \u6d4b\u8bd5\u6a21\u5757\u8981\u4ee5 test_ \u5f00\u5934 \u6d4b\u8bd5\u65b9\u6cd5\u8981\u4ee5 test_ \u5f00\u5934 \u6d4b\u8bd5\u7c7b\u540d\u8981\u4ee5 Test \u5f00\u5934 1.1 \u5185\u7f6e\u6d4b\u8bd5\u6846\u67b6 Python \u5185\u7f6e\u6d4b\u8bd5\u6846\u67b6\u662f unittest \uff0c\u662f\u53d7\u5230\u4e86 JUnit \u7684\u542f\u53d1\uff0c\u5e76\u4e14\u5728\u4f7f\u7528\u4e0a\u4e0e\u5176\u4ed6\u8bed\u8a00\u7684 \u5355\u5143\u6d4b\u8bd5\u6846\u67b6\u7c7b\u4f3c\u3002 \u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u6240\u652f\u6301\u7684\u51e0\u4e2a\u6982\u5ff5\uff1a \u6d4b\u8bd5\u811a\u624b\u67b6\uff1a test fixture \u8868\u793a\u4e3a\u4e86\u5c55\u5f00\u610f\u5411\u6216\u591a\u60f3\u6d4b\u8bd5\u6240\u9700\u8981\u51c6\u5907\u7684\u5de5\u4f5c\uff0c\u4ee5\u53ca\u76f8\u5173\u7684\u6e05\u7406\u5de5\u4f5c \u6d4b\u8bd5\u7528\u4f8b\uff1a\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u5355\u5143\u6d4b\u8bd5\u3002 \u6d4b\u8bd5\u5957\u4ef6\uff1a\u662f\u4e00\u7cfb\u5217\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6216\u6d4b\u8bd5\u5957\u4ef6\u3002 \u6d4b\u8bd5\u8fd0\u884c\u5668\uff1a\u7528\u4e8e\u6267\u884c\u548c\u8f93\u51fa\u6d4b\u8bd5\u7ed3\u679c\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1a # Test import unittest from unittest import TestCase class TestSum ( TestCase ): def test_sum ( self ): \"\"\"Test sum\"\"\" assert sum ([ 1 , 1 ]) == 2 if __name__ == '__main__' : unittest . main () \u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c\u8be5\u6587\u4ef6\u8fd0\u884c\u6d4b\u8bd5\uff0c\u4e5f\u53ef\u4ee5\u7528 python -m test_xxx.py \u8fd0\u884c\u6d4b\u8bd5\u6a21\u5757\u3002 \u7ec4\u7ec7\u6d4b\u8bd5\u7684\u6d4b\u8bd5\u4ee3\u7801\uff1a # Test from csv import DictReader import unittest from unittest import TestCase from tempfile import NamedTemporaryFile class TestSum ( TestCase ): def test_sum ( self ): \"\"\"Test sum\"\"\" assert sum ([ 1 , 1 ]) == 2 class TestCsv ( TestCase ): def setUp ( self ) -> None : self . temp_file = NamedTemporaryFile ( suffix = 'csv' ) self . filename = self . temp_file . name with open ( self . filename , 'w' ) as obj : obj . writelines ([ 'name,age \\n ' , 'foo,12 \\n ' , 'bar,15 \\n ' ]) def test_csv ( self ): with open ( self . filename , 'r' ) as obj : reader = DictReader ( obj ) data = list ( reader ) self . assertEqual ( len ( data ), 2 ) def tearDown ( self ) -> None : self . temp_file . close () def suite (): _suite = unittest . TestSuite () _suite . addTest ( TestSum ()) _suite . addTest ( TestCsv ()) return _suite if __name__ == '__main__' : runner = unittest . TextTestRunner () runner . run ( suite ()) \u4f7f\u7528 TestSuite \u548c TextTestRunner \u7ec4\u7ec7\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u8ba9\u4ee3\u7801\u7684\u903b\u8f91\u66f4\u52a0\u6e05\u6670\u3002 1.1.1 Mock \u5bf9\u8c61 \u5728\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u96be\u514d\u4f1a\u9047\u5230\u4f9d\u8d56\u5177\u4f53\u7684\u5bf9\u8c61\u6216\u8d44\u6e90\u7684\u60c5\u51b5\u3002\u4e3a\u4e86\u53ea\u6d4b\u8bd5\u5177\u4f53\u5355\u5143\u7684\u903b\u8f91\uff0c\u5c31\u9700\u8981\u6a21\u62df\u5355\u5143\u903b\u8f91\u6240\u4f9d\u8d56\u7684\u5185\u5bb9\u3002 \u4f7f\u7528 unittest.mock \u53ef\u4ee5\u5f88\u597d\u89e3\u51b3\u8fd9\u4e2d\u95ee\u9898\u3002 \u5982\u4e0b\u4f8b\u5b50\uff1a # Test import unittest from typing import Any from unittest import TestCase from unittest.mock import Mock class Session : def close ( self , connection : Any ): connection . close () class TestSession ( TestCase ): def setUp ( self ) -> None : self . session = Session () def test_close ( self ): mock = Mock () self . session . close ( mock ) mock . close . assert_called_with () if __name__ == '__main__' : unittest . main () \u5728\u6d4b\u8bd5 Session.close \u8fd9\u4e2a\u5355\u5143\u903b\u8f91\u7684\u65f6\u5019\uff0c\u4f9d\u8d56\u4e00\u4e2a connection \u5bf9\u8c61\u3002\u56e0\u4e3a\u5355\u5143\u6d4b\u8bd5\u4ec5\u5173\u6ce8\u5355\u5143\u5185\u90e8\u903b\u8f91\u662f\u5426\u6b63\u786e\uff0c\u5373\u7ed9\u5b9a\u8f93\u5165\uff0c\u6d4b\u8bd5\u5176\u5185\u90e8\u903b\u8f91\u3002 \u6240\u4ee5\u4f7f\u7528\u4e00\u4e2a Mock \u5bf9\u8c61\u6a21\u62df\u5165\u53c2\uff0c\u7136\u540e\u5224\u65ad\u5165\u53c2\u662f\u5426\u5728\u903b\u8f91\u5185\u88ab\u8c03\u7528\u3002 \u9664\u4e86\u6a21\u62df\u5bf9\u8c61\uff0c\u8fd8\u53ef\u4ee5\u6a21\u62df\u7c7b\uff1a # Test import unittest from unittest import TestCase from unittest.mock import patch class Session : def exist ( self ): \"\"\"\"\"\" def delete ( self ): if self . exist (): return True return False class TestSession ( TestCase ): def setUp ( self ) -> None : self . session = Session () def test_delete ( self ): with patch . object ( Session , 'exist' , return_value = True ) as mock_session : session = Session () self . assertTrue ( session . delete ()) mock_session . assert_called_once () if __name__ == '__main__' : unittest . main () \u6848\u4f8b\u4e2d\uff0c\u6d4b\u8bd5\u7684\u662f Session.delete \u65b9\u6cd5\uff0c\u5185\u90e8\u903b\u8f91\u4f9d\u8d56 Session.exist \u3002\u56e0\u4e3a\u4ec5\u6d4b\u8bd5\u5355\u5143\u903b\u8f91\u6240\u4ee5\u5c06\u5b83\u4f9d\u8d56 \u8c03\u7528\u7684 Session.exist \u6a21\u62df\u6389\u3002 1.2 Pytest Pytest \u662f\u5728 unittest \u7684\u57fa\u7840\u4e0a \u589e\u52a0\u4e86\u5927\u91cf\u8bed\u6cd5\u7cd6\uff0c\u8ba9\u6d4b\u8bd5\u66f4\u52a0\u7b80\u4fbf\u548c\u7075\u6d3b\u3002\u5e76\u4e14\u5e26\u6709\u63d2\u4ef6\u529f\u80fd\uff0c\u65b9\u4fbf\u96c6\u6210\u5176\u4ed6\u529f\u80fd\u3002 \u7531\u4e8e Pytest \u80fd\u517c\u5bb9\u5176\u4ed6\u5927\u591a\u6570\u6d4b\u8bd5\u6846\u67b6\uff0c\u800c\u4e14\u5b83\u4e5f\u5177\u6709\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u63a8\u8350\u4f7f\u7528 Pytest \u4f5c\u4e3a\u4e3b\u8981\u6d4b\u8bd5\u6846\u67b6\u4f7f\u7528\u3002 \u5b89\u88c5\uff1a pip install pytest \u7f16\u5199\u6d4b\u8bd5\u6587\u4ef6\uff1a # content of test_sample.py def inc ( x ): return x + 1 def test_answer (): assert inc ( 3 ) == 5 \u5728\u7ec8\u7aef\u8fd0\u884c pytest \u5373\u53ef\u81ea\u52a8\u53d1\u73b0\u6d4b\u8bd5\uff0c\u5e76\u8fd0\u884c\u3002 \u63d0\u793a pytest \u4f1a\u81ea\u52a8\u53d1\u73b0\u6240\u6709\u4ee5 test_ \u5f00\u5934\u548c _test.py \u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5e76\u52a0\u8f7d\u6240\u6709\u4ee5 test_ \u5f00\u5934\u7684\u65b9\u6cd5\u548c Test \u5f00\u5934\u7684\u7c7b\u3002 1.2.2 \u76ee\u5f55\u7ed3\u6784\u7684\u9009\u62e9 \u5728\u9879\u76ee\u7ed3\u6784\u4e0a\uff0c\u63a8\u8350\u4f7f\u7528 src \u76ee\u5f55\u653e\u6e90\u4ee3\u7801\uff0c\u540c\u7ea7\u7684 tests \u653e\u6d4b\u8bd5\u6a21\u5757\uff0c\u6d4b\u8bd5\u6a21\u5757\u7684\u7ec4\u7ec7\u548c src \u7684\u5305\u7ed3\u6784\u4e00\u81f4\uff0c\u6d4b\u8bd5\u7684\u529f\u80fd \u76f8\u5bf9\u5e94\u3002 setup.py src/ mypkg/ __init__.py app.py view.py tests/ __init__.py foo/ __init__.py test_view.py bar/ __init__.py test_view.py \u5176\u4ed6\u98ce\u683c\u7684\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003 Choosing a test layout / import rules 1.2.1 fixture Pytest \u7684 fixture \u53ef\u4ee5\u4e3a\u6d4b\u8bd5\u63d0\u4f9b\u4e00\u5b9a\u7684\u73af\u5883\u3002 import pytest class Fruit : def __init__ ( self , name ): self . name = name def __eq__ ( self , other ): return self . name == other . name @pytest . fixture def my_fruit (): return Fruit ( \"apple\" ) @pytest . fixture def fruit_basket ( my_fruit ): return [ Fruit ( \"banana\" ), my_fruit ] def test_my_fruit_in_basket ( my_fruit , fruit_basket ): assert my_fruit in fruit_basket \u5728\u6d4b\u8bd5\u662f\uff0c\u516c\u5171\u7684 fixture \u4e00\u822c\u63a8\u8350\u653e\u5728 conftest.py \u4e2d\u3002 \u66f4\u590d\u6742\u7684 fixture \uff1a import pytest @pytest . fixture def order (): return [] @pytest . fixture def a ( order ): order . append ( \"a\" ) @pytest . fixture def b ( a , order ): order . append ( \"b\" ) @pytest . fixture def c ( a , b , order ): order . append ( \"c\" ) @pytest . fixture def d ( c , b , order ): order . append ( \"d\" ) @pytest . fixture def e ( d , b , order ): order . append ( \"e\" ) @pytest . fixture def f ( e , order ): order . append ( \"f\" ) @pytest . fixture def g ( f , c , order ): order . append ( \"g\" ) def test_order ( g , order ): assert order == [ \"a\" , \"b\" , \"c\" , \"d\" , \"e\" , \"f\" , \"g\" ] 1.2.3 \u53c2\u6570\u5316\u6d4b\u8bd5 \u5728\u9488\u5bf9\u540c\u4e00\u4e2a\u903b\u8f91\u6709\u591a\u79cd\u4e0d\u540c\u8f93\u5165\u8fdb\u884c\u6d4b\u8bd5\u65f6\uff0c\u76f4\u63a5\u60f3\u5230\u7684\u5904\u7406\u65b9\u5f0f\u5c31\u662f\u505a\u6210\u5de5\u5382\uff0c\u7136\u540e\u5728\u6d4b\u8bd5\u65b9\u6cd5\u4e2d \u6784\u9020\u53c2\u6570\u5217\u8868\u4f20\u9012\u7ed9\u5de5\u5382\u3002\u8fd9\u5728 unittest \u4e2d\u79f0\u4f5c\u590d\u7528\u6d4b\u8bd5\u903b\u8f91\u3002\u5426\u5219\u5c31\u9700\u8981\u4e3a\u6d4b\u8bd5\u903b\u8f91\u7f16\u5199\u4e0d\u540c\u53c2\u6570 \u7684\u6d4b\u8bd5\u65b9\u6cd5\u3002 \u4f46\u5728 Pytest \u4e2d\u53ef\u4ee5\u4f7f\u7528 \u53c2\u6570\u5316\u6d4b\u8bd5 \uff0c \u8f7b\u677e\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\u3002 \"\"\"Test log\"\"\" import pytest def update_log_level ( debug : bool , level : str ) -> str : if debug : return 'DEBUG' return level @pytest . mark . parametrize ( [ 'debug' , 'level' , 'expect_value' ], [ ( True , '' , 'DEBUG' ), ( True , 'INFO' , 'DEBUG' ), ( False , 'DEBUG' , 'DEBUG' ), ( False , 'INFO' , 'INFO' ), ] ) def test_log_level ( debug : bool , level : str , expect_value ): \"\"\"Test log level\"\"\" log_level_name = update_log_level ( debug , level ) assert log_level_name == expect_value \u53c2\u6570\u5316\u6d4b\u8bd5\u5e26\u6765\u7684\u597d\u5904\u975e\u5e38\u76f4\u89c2\uff0c\u800c\u4e14\u6d4b\u8bd5\u7f16\u5199\u4e5f\u53d8\u5f97\u7b80\u5355\u3002 1.2.4 \u63d2\u4ef6 Pytest \u62e5\u6709\u5927\u91cf\u7684 \u63d2\u4ef6 \uff0c\u800c\u4e14\u57fa\u672c\u4e0a\u662f\u5b89\u88c5\u5373\u53ef\u548c Pytest \u65e0\u7f1d \u96c6\u6210\uff0c\u8f7b\u677e\u4f7f\u7528\u3002 \u4e0b\u9762\u5217\u4e3e\u51e0\u4e2a\u5e38\u7528\u7684\u63d2\u4ef6 1.2.4.1 pytest-asyncio pytest-asyncio \u53ef\u4ee5\u8f7b\u677e\u6d4b\u8bd5 asyncio \u65b9\u6cd5 @pytest . mark . asyncio async def test_some_asyncio_code (): res = await library . do_something () assert b 'expected result' == res 1.2.4.2 pytest-mock pytest-mock \u53ef\u4ee5\u50cf\u4f7f\u7528 fixture \u4e00\u6837\u4f7f\u7528 mock \uff0c\u800c\u4e0d\u5fc5\u5bfc\u5165 unittest.mock import os class UnixFS : @staticmethod def rm ( filename ): os . remove ( filename ) def test_unix_fs ( mocker ): mocker . patch ( 'os.remove' ) UnixFS . rm ( 'file' ) os . remove . assert_called_once_with ( 'file' ) 1.2.4.3 pytest-cov pytest-cov \u8ba9 coverage \u548c Pytest \u96c6\u6210\uff0c \u65b9\u4fbf\u4f7f\u7528\u3002 1.3 \u6846\u67b6\u81ea\u5e26\u6d4b\u8bd5 \u672c\u8282\u5185\u5bb9\u4e3b\u8981\u7b80\u5355\u63cf\u8ff0\u4e00\u4e9b\u6846\u67b6\u81ea\u5e26\u7684\u6d4b\u8bd5\u7684\u4f7f\u7528\u3002 Pytest \u4e5f\u90fd\u80fd\u517c\u5bb9\u8fd9\u4e9b\u6d4b\u8bd5\u3002\u6240\u4ee5\u5982\u679c\u4f7f\u7528\u6846\u67b6\u63a8\u8350\u7684\u5199\u6cd5\u6765\u5199\u6d4b\u8bd5\uff0c\u5728\u4f7f\u7528 Pytest \u8fd0\u884c \u4e5f\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002 1.3.1 Django Django \u7684 \u5355\u5143\u6d4b\u8bd5 \u4e5f\u662f\u57fa\u4e8e unittest \u6765\u505a\u7684\uff0c \u53ea\u4e0d\u8fc7\u589e\u52a0\u4e86\u4e00\u4e9b\u6846\u67b6\u4e0a\u7684\u5185\u5bb9\uff0c\u4fbf\u4e8e\u5728\u6d4b\u8bd5\u65f6\uff0c\u9644\u5e26\u6846\u67b6\u529f\u80fd\u3002 \u6d4b\u8bd5\u7528\u4f8b\uff1a from django.test import TestCase from myapp.models import Animal class AnimalTestCase ( TestCase ): def setUp ( self ): Animal . objects . create ( name = \"lion\" , sound = \"roar\" ) Animal . objects . create ( name = \"cat\" , sound = \"meow\" ) def test_animals_can_speak ( self ): \"\"\"Animals that can speak are correctly identified\"\"\" lion = Animal . objects . get ( name = \"lion\" ) cat = Animal . objects . get ( name = \"cat\" ) self . assertEqual ( lion . speak (), 'The lion says \"roar\"' ) self . assertEqual ( cat . speak (), 'The cat says \"meow\"' ) \u8fd0\u884c\u6d4b\u8bd5 ./manage.py test \u3002 \u5728\u8fd0\u884c\u65f6\uff0c\u5185\u90e8\u903b\u8f91\u4f9d\u7136\u662f\u901a\u8fc7 unittest \u6765\u81ea\u52a8\u67e5\u627e\u6d4b\u8bd5\u7c7b\u3002 1.3.2 Fastapi Fastapi \u4ec5\u4ec5\u63d0\u4f9b\u4e86\u5e26\u6709\u6846\u67b6\u529f\u80fd\u7684 TestClient \u3002\u521d\u59cb\u5316\u7684\u5b9e\u4f8b \u65b9\u4fbf\u6d4b\u8bd5 API \u63a5\u53e3\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u542f\u52a8\u4e00\u4e2a Web \u670d\u52a1\u3002 from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } \u8fd0\u884c pytest \u3002","title":"\u6d4b\u8bd5"},{"location":"guidelines/advanced/test/#test-","text":"\u6d4b\u8bd5\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u4e00\u4e2a\u4e0d\u53ef\u907f\u514d\u7684\u73af\u8282\uff0c\u5728\u4ee3\u7801\u7ea7\u522b\u8fdb\u884c\u6d4b\u8bd5\uff0c\u80fd\u591f\u5728\u90e8\u7f72\u94b1\u5c3d\u65e9\u53d1\u73b0\u7a0b\u5e8f\u4e2d\u7684\u5f02\u5e38\uff0c\u589e\u5f3a\u8f6f\u4ef6\u7684\u5065\u58ee\u6027\u3002 \u5728\u9075\u5faa TDD \u539f\u5219\u6765\u5f00\u53d1\uff0c\u80fd\u6709\u6548\u63d0\u9ad8\u4ee3\u7801\u7684\u8bbe\u8ba1\u3002","title":"Test - \u6d4b\u8bd5"},{"location":"guidelines/advanced/test/#1","text":"\u5728 Python \u4e2d\u9664\u4e86\u6709\u8bed\u8a00\u5185\u7f6e\u7684\u6d4b\u8bd5\u6846\u67b6\u4e4b\u5916\uff0c\u8fd8\u6709\u8bb8\u591a\u7b2c\u4e09\u65b9\u6d4b\u8bd5\u6846\u67b6\uff0c\u4e00\u4e9b\u975e\u6d4b\u8bd5\u6846\u67b6\u5185\u90e8\u4e5f\u4f1a\u5185\u7f6e\u6d4b\u8bd5\u6846\u67b6\u3002\u5176\u76ee\u7684\u90fd\u662f\u5728\u5185\u7f6e\u6d4b\u8bd5\u6846\u67b6\u7684\u57fa\u7840\u4e0a \u589e\u52a0\u4e86\u4e00\u4e9b\u7279\u6027\uff0c\u8ba9\u7f16\u5199\u6d4b\u8bd5\u66f4\u52a0\u65b9\u4fbf\uff0c\u6d4b\u8bd5\u8fc7\u7a0b\u66f4\u52a0\u987a\u7545\u3002 \u4e3a\u4e86\u65b9\u4fbf\u6d4b\u8bd5\u6846\u67b6\u67e5\u627e\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5728\u7f16\u5199\u6d4b\u8bd5\u65f6\u5e94\u9075\u5faa\u4e00\u5b9a\u7684\u89c4\u8303\uff1a \u6d4b\u8bd5\u6a21\u5757\u8981\u4ee5 test_ \u5f00\u5934 \u6d4b\u8bd5\u65b9\u6cd5\u8981\u4ee5 test_ \u5f00\u5934 \u6d4b\u8bd5\u7c7b\u540d\u8981\u4ee5 Test \u5f00\u5934","title":"1. \u6d4b\u8bd5\u5de5\u5177"},{"location":"guidelines/advanced/test/#11","text":"Python \u5185\u7f6e\u6d4b\u8bd5\u6846\u67b6\u662f unittest \uff0c\u662f\u53d7\u5230\u4e86 JUnit \u7684\u542f\u53d1\uff0c\u5e76\u4e14\u5728\u4f7f\u7528\u4e0a\u4e0e\u5176\u4ed6\u8bed\u8a00\u7684 \u5355\u5143\u6d4b\u8bd5\u6846\u67b6\u7c7b\u4f3c\u3002 \u9762\u5411\u5bf9\u8c61\u7684\u65b9\u5f0f\u6240\u652f\u6301\u7684\u51e0\u4e2a\u6982\u5ff5\uff1a \u6d4b\u8bd5\u811a\u624b\u67b6\uff1a test fixture \u8868\u793a\u4e3a\u4e86\u5c55\u5f00\u610f\u5411\u6216\u591a\u60f3\u6d4b\u8bd5\u6240\u9700\u8981\u51c6\u5907\u7684\u5de5\u4f5c\uff0c\u4ee5\u53ca\u76f8\u5173\u7684\u6e05\u7406\u5de5\u4f5c \u6d4b\u8bd5\u7528\u4f8b\uff1a\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u5355\u5143\u6d4b\u8bd5\u3002 \u6d4b\u8bd5\u5957\u4ef6\uff1a\u662f\u4e00\u7cfb\u5217\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6216\u6d4b\u8bd5\u5957\u4ef6\u3002 \u6d4b\u8bd5\u8fd0\u884c\u5668\uff1a\u7528\u4e8e\u6267\u884c\u548c\u8f93\u51fa\u6d4b\u8bd5\u7ed3\u679c\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u6700\u7b80\u5355\u7684\u6d4b\u8bd5\u7528\u4f8b\uff1a # Test import unittest from unittest import TestCase class TestSum ( TestCase ): def test_sum ( self ): \"\"\"Test sum\"\"\" assert sum ([ 1 , 1 ]) == 2 if __name__ == '__main__' : unittest . main () \u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c\u8be5\u6587\u4ef6\u8fd0\u884c\u6d4b\u8bd5\uff0c\u4e5f\u53ef\u4ee5\u7528 python -m test_xxx.py \u8fd0\u884c\u6d4b\u8bd5\u6a21\u5757\u3002 \u7ec4\u7ec7\u6d4b\u8bd5\u7684\u6d4b\u8bd5\u4ee3\u7801\uff1a # Test from csv import DictReader import unittest from unittest import TestCase from tempfile import NamedTemporaryFile class TestSum ( TestCase ): def test_sum ( self ): \"\"\"Test sum\"\"\" assert sum ([ 1 , 1 ]) == 2 class TestCsv ( TestCase ): def setUp ( self ) -> None : self . temp_file = NamedTemporaryFile ( suffix = 'csv' ) self . filename = self . temp_file . name with open ( self . filename , 'w' ) as obj : obj . writelines ([ 'name,age \\n ' , 'foo,12 \\n ' , 'bar,15 \\n ' ]) def test_csv ( self ): with open ( self . filename , 'r' ) as obj : reader = DictReader ( obj ) data = list ( reader ) self . assertEqual ( len ( data ), 2 ) def tearDown ( self ) -> None : self . temp_file . close () def suite (): _suite = unittest . TestSuite () _suite . addTest ( TestSum ()) _suite . addTest ( TestCsv ()) return _suite if __name__ == '__main__' : runner = unittest . TextTestRunner () runner . run ( suite ()) \u4f7f\u7528 TestSuite \u548c TextTestRunner \u7ec4\u7ec7\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u8ba9\u4ee3\u7801\u7684\u903b\u8f91\u66f4\u52a0\u6e05\u6670\u3002","title":"1.1 \u5185\u7f6e\u6d4b\u8bd5\u6846\u67b6"},{"location":"guidelines/advanced/test/#111-mock","text":"\u5728\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u96be\u514d\u4f1a\u9047\u5230\u4f9d\u8d56\u5177\u4f53\u7684\u5bf9\u8c61\u6216\u8d44\u6e90\u7684\u60c5\u51b5\u3002\u4e3a\u4e86\u53ea\u6d4b\u8bd5\u5177\u4f53\u5355\u5143\u7684\u903b\u8f91\uff0c\u5c31\u9700\u8981\u6a21\u62df\u5355\u5143\u903b\u8f91\u6240\u4f9d\u8d56\u7684\u5185\u5bb9\u3002 \u4f7f\u7528 unittest.mock \u53ef\u4ee5\u5f88\u597d\u89e3\u51b3\u8fd9\u4e2d\u95ee\u9898\u3002 \u5982\u4e0b\u4f8b\u5b50\uff1a # Test import unittest from typing import Any from unittest import TestCase from unittest.mock import Mock class Session : def close ( self , connection : Any ): connection . close () class TestSession ( TestCase ): def setUp ( self ) -> None : self . session = Session () def test_close ( self ): mock = Mock () self . session . close ( mock ) mock . close . assert_called_with () if __name__ == '__main__' : unittest . main () \u5728\u6d4b\u8bd5 Session.close \u8fd9\u4e2a\u5355\u5143\u903b\u8f91\u7684\u65f6\u5019\uff0c\u4f9d\u8d56\u4e00\u4e2a connection \u5bf9\u8c61\u3002\u56e0\u4e3a\u5355\u5143\u6d4b\u8bd5\u4ec5\u5173\u6ce8\u5355\u5143\u5185\u90e8\u903b\u8f91\u662f\u5426\u6b63\u786e\uff0c\u5373\u7ed9\u5b9a\u8f93\u5165\uff0c\u6d4b\u8bd5\u5176\u5185\u90e8\u903b\u8f91\u3002 \u6240\u4ee5\u4f7f\u7528\u4e00\u4e2a Mock \u5bf9\u8c61\u6a21\u62df\u5165\u53c2\uff0c\u7136\u540e\u5224\u65ad\u5165\u53c2\u662f\u5426\u5728\u903b\u8f91\u5185\u88ab\u8c03\u7528\u3002 \u9664\u4e86\u6a21\u62df\u5bf9\u8c61\uff0c\u8fd8\u53ef\u4ee5\u6a21\u62df\u7c7b\uff1a # Test import unittest from unittest import TestCase from unittest.mock import patch class Session : def exist ( self ): \"\"\"\"\"\" def delete ( self ): if self . exist (): return True return False class TestSession ( TestCase ): def setUp ( self ) -> None : self . session = Session () def test_delete ( self ): with patch . object ( Session , 'exist' , return_value = True ) as mock_session : session = Session () self . assertTrue ( session . delete ()) mock_session . assert_called_once () if __name__ == '__main__' : unittest . main () \u6848\u4f8b\u4e2d\uff0c\u6d4b\u8bd5\u7684\u662f Session.delete \u65b9\u6cd5\uff0c\u5185\u90e8\u903b\u8f91\u4f9d\u8d56 Session.exist \u3002\u56e0\u4e3a\u4ec5\u6d4b\u8bd5\u5355\u5143\u903b\u8f91\u6240\u4ee5\u5c06\u5b83\u4f9d\u8d56 \u8c03\u7528\u7684 Session.exist \u6a21\u62df\u6389\u3002","title":"1.1.1 Mock \u5bf9\u8c61"},{"location":"guidelines/advanced/test/#12-pytest","text":"Pytest \u662f\u5728 unittest \u7684\u57fa\u7840\u4e0a \u589e\u52a0\u4e86\u5927\u91cf\u8bed\u6cd5\u7cd6\uff0c\u8ba9\u6d4b\u8bd5\u66f4\u52a0\u7b80\u4fbf\u548c\u7075\u6d3b\u3002\u5e76\u4e14\u5e26\u6709\u63d2\u4ef6\u529f\u80fd\uff0c\u65b9\u4fbf\u96c6\u6210\u5176\u4ed6\u529f\u80fd\u3002 \u7531\u4e8e Pytest \u80fd\u517c\u5bb9\u5176\u4ed6\u5927\u591a\u6570\u6d4b\u8bd5\u6846\u67b6\uff0c\u800c\u4e14\u5b83\u4e5f\u5177\u6709\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u63a8\u8350\u4f7f\u7528 Pytest \u4f5c\u4e3a\u4e3b\u8981\u6d4b\u8bd5\u6846\u67b6\u4f7f\u7528\u3002 \u5b89\u88c5\uff1a pip install pytest \u7f16\u5199\u6d4b\u8bd5\u6587\u4ef6\uff1a # content of test_sample.py def inc ( x ): return x + 1 def test_answer (): assert inc ( 3 ) == 5 \u5728\u7ec8\u7aef\u8fd0\u884c pytest \u5373\u53ef\u81ea\u52a8\u53d1\u73b0\u6d4b\u8bd5\uff0c\u5e76\u8fd0\u884c\u3002 \u63d0\u793a pytest \u4f1a\u81ea\u52a8\u53d1\u73b0\u6240\u6709\u4ee5 test_ \u5f00\u5934\u548c _test.py \u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5e76\u52a0\u8f7d\u6240\u6709\u4ee5 test_ \u5f00\u5934\u7684\u65b9\u6cd5\u548c Test \u5f00\u5934\u7684\u7c7b\u3002","title":"1.2 Pytest"},{"location":"guidelines/advanced/test/#122","text":"\u5728\u9879\u76ee\u7ed3\u6784\u4e0a\uff0c\u63a8\u8350\u4f7f\u7528 src \u76ee\u5f55\u653e\u6e90\u4ee3\u7801\uff0c\u540c\u7ea7\u7684 tests \u653e\u6d4b\u8bd5\u6a21\u5757\uff0c\u6d4b\u8bd5\u6a21\u5757\u7684\u7ec4\u7ec7\u548c src \u7684\u5305\u7ed3\u6784\u4e00\u81f4\uff0c\u6d4b\u8bd5\u7684\u529f\u80fd \u76f8\u5bf9\u5e94\u3002 setup.py src/ mypkg/ __init__.py app.py view.py tests/ __init__.py foo/ __init__.py test_view.py bar/ __init__.py test_view.py \u5176\u4ed6\u98ce\u683c\u7684\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003 Choosing a test layout / import rules","title":"1.2.2 \u76ee\u5f55\u7ed3\u6784\u7684\u9009\u62e9"},{"location":"guidelines/advanced/test/#121-fixture","text":"Pytest \u7684 fixture \u53ef\u4ee5\u4e3a\u6d4b\u8bd5\u63d0\u4f9b\u4e00\u5b9a\u7684\u73af\u5883\u3002 import pytest class Fruit : def __init__ ( self , name ): self . name = name def __eq__ ( self , other ): return self . name == other . name @pytest . fixture def my_fruit (): return Fruit ( \"apple\" ) @pytest . fixture def fruit_basket ( my_fruit ): return [ Fruit ( \"banana\" ), my_fruit ] def test_my_fruit_in_basket ( my_fruit , fruit_basket ): assert my_fruit in fruit_basket \u5728\u6d4b\u8bd5\u662f\uff0c\u516c\u5171\u7684 fixture \u4e00\u822c\u63a8\u8350\u653e\u5728 conftest.py \u4e2d\u3002 \u66f4\u590d\u6742\u7684 fixture \uff1a import pytest @pytest . fixture def order (): return [] @pytest . fixture def a ( order ): order . append ( \"a\" ) @pytest . fixture def b ( a , order ): order . append ( \"b\" ) @pytest . fixture def c ( a , b , order ): order . append ( \"c\" ) @pytest . fixture def d ( c , b , order ): order . append ( \"d\" ) @pytest . fixture def e ( d , b , order ): order . append ( \"e\" ) @pytest . fixture def f ( e , order ): order . append ( \"f\" ) @pytest . fixture def g ( f , c , order ): order . append ( \"g\" ) def test_order ( g , order ): assert order == [ \"a\" , \"b\" , \"c\" , \"d\" , \"e\" , \"f\" , \"g\" ]","title":"1.2.1 fixture"},{"location":"guidelines/advanced/test/#123","text":"\u5728\u9488\u5bf9\u540c\u4e00\u4e2a\u903b\u8f91\u6709\u591a\u79cd\u4e0d\u540c\u8f93\u5165\u8fdb\u884c\u6d4b\u8bd5\u65f6\uff0c\u76f4\u63a5\u60f3\u5230\u7684\u5904\u7406\u65b9\u5f0f\u5c31\u662f\u505a\u6210\u5de5\u5382\uff0c\u7136\u540e\u5728\u6d4b\u8bd5\u65b9\u6cd5\u4e2d \u6784\u9020\u53c2\u6570\u5217\u8868\u4f20\u9012\u7ed9\u5de5\u5382\u3002\u8fd9\u5728 unittest \u4e2d\u79f0\u4f5c\u590d\u7528\u6d4b\u8bd5\u903b\u8f91\u3002\u5426\u5219\u5c31\u9700\u8981\u4e3a\u6d4b\u8bd5\u903b\u8f91\u7f16\u5199\u4e0d\u540c\u53c2\u6570 \u7684\u6d4b\u8bd5\u65b9\u6cd5\u3002 \u4f46\u5728 Pytest \u4e2d\u53ef\u4ee5\u4f7f\u7528 \u53c2\u6570\u5316\u6d4b\u8bd5 \uff0c \u8f7b\u677e\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\u3002 \"\"\"Test log\"\"\" import pytest def update_log_level ( debug : bool , level : str ) -> str : if debug : return 'DEBUG' return level @pytest . mark . parametrize ( [ 'debug' , 'level' , 'expect_value' ], [ ( True , '' , 'DEBUG' ), ( True , 'INFO' , 'DEBUG' ), ( False , 'DEBUG' , 'DEBUG' ), ( False , 'INFO' , 'INFO' ), ] ) def test_log_level ( debug : bool , level : str , expect_value ): \"\"\"Test log level\"\"\" log_level_name = update_log_level ( debug , level ) assert log_level_name == expect_value \u53c2\u6570\u5316\u6d4b\u8bd5\u5e26\u6765\u7684\u597d\u5904\u975e\u5e38\u76f4\u89c2\uff0c\u800c\u4e14\u6d4b\u8bd5\u7f16\u5199\u4e5f\u53d8\u5f97\u7b80\u5355\u3002","title":"1.2.3 \u53c2\u6570\u5316\u6d4b\u8bd5"},{"location":"guidelines/advanced/test/#124","text":"Pytest \u62e5\u6709\u5927\u91cf\u7684 \u63d2\u4ef6 \uff0c\u800c\u4e14\u57fa\u672c\u4e0a\u662f\u5b89\u88c5\u5373\u53ef\u548c Pytest \u65e0\u7f1d \u96c6\u6210\uff0c\u8f7b\u677e\u4f7f\u7528\u3002 \u4e0b\u9762\u5217\u4e3e\u51e0\u4e2a\u5e38\u7528\u7684\u63d2\u4ef6","title":"1.2.4 \u63d2\u4ef6"},{"location":"guidelines/advanced/test/#1241-pytest-asyncio","text":"pytest-asyncio \u53ef\u4ee5\u8f7b\u677e\u6d4b\u8bd5 asyncio \u65b9\u6cd5 @pytest . mark . asyncio async def test_some_asyncio_code (): res = await library . do_something () assert b 'expected result' == res","title":"1.2.4.1 pytest-asyncio"},{"location":"guidelines/advanced/test/#1242-pytest-mock","text":"pytest-mock \u53ef\u4ee5\u50cf\u4f7f\u7528 fixture \u4e00\u6837\u4f7f\u7528 mock \uff0c\u800c\u4e0d\u5fc5\u5bfc\u5165 unittest.mock import os class UnixFS : @staticmethod def rm ( filename ): os . remove ( filename ) def test_unix_fs ( mocker ): mocker . patch ( 'os.remove' ) UnixFS . rm ( 'file' ) os . remove . assert_called_once_with ( 'file' )","title":"1.2.4.2 pytest-mock"},{"location":"guidelines/advanced/test/#1243-pytest-cov","text":"pytest-cov \u8ba9 coverage \u548c Pytest \u96c6\u6210\uff0c \u65b9\u4fbf\u4f7f\u7528\u3002","title":"1.2.4.3 pytest-cov"},{"location":"guidelines/advanced/test/#13","text":"\u672c\u8282\u5185\u5bb9\u4e3b\u8981\u7b80\u5355\u63cf\u8ff0\u4e00\u4e9b\u6846\u67b6\u81ea\u5e26\u7684\u6d4b\u8bd5\u7684\u4f7f\u7528\u3002 Pytest \u4e5f\u90fd\u80fd\u517c\u5bb9\u8fd9\u4e9b\u6d4b\u8bd5\u3002\u6240\u4ee5\u5982\u679c\u4f7f\u7528\u6846\u67b6\u63a8\u8350\u7684\u5199\u6cd5\u6765\u5199\u6d4b\u8bd5\uff0c\u5728\u4f7f\u7528 Pytest \u8fd0\u884c \u4e5f\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002","title":"1.3 \u6846\u67b6\u81ea\u5e26\u6d4b\u8bd5"},{"location":"guidelines/advanced/test/#131-django","text":"Django \u7684 \u5355\u5143\u6d4b\u8bd5 \u4e5f\u662f\u57fa\u4e8e unittest \u6765\u505a\u7684\uff0c \u53ea\u4e0d\u8fc7\u589e\u52a0\u4e86\u4e00\u4e9b\u6846\u67b6\u4e0a\u7684\u5185\u5bb9\uff0c\u4fbf\u4e8e\u5728\u6d4b\u8bd5\u65f6\uff0c\u9644\u5e26\u6846\u67b6\u529f\u80fd\u3002 \u6d4b\u8bd5\u7528\u4f8b\uff1a from django.test import TestCase from myapp.models import Animal class AnimalTestCase ( TestCase ): def setUp ( self ): Animal . objects . create ( name = \"lion\" , sound = \"roar\" ) Animal . objects . create ( name = \"cat\" , sound = \"meow\" ) def test_animals_can_speak ( self ): \"\"\"Animals that can speak are correctly identified\"\"\" lion = Animal . objects . get ( name = \"lion\" ) cat = Animal . objects . get ( name = \"cat\" ) self . assertEqual ( lion . speak (), 'The lion says \"roar\"' ) self . assertEqual ( cat . speak (), 'The cat says \"meow\"' ) \u8fd0\u884c\u6d4b\u8bd5 ./manage.py test \u3002 \u5728\u8fd0\u884c\u65f6\uff0c\u5185\u90e8\u903b\u8f91\u4f9d\u7136\u662f\u901a\u8fc7 unittest \u6765\u81ea\u52a8\u67e5\u627e\u6d4b\u8bd5\u7c7b\u3002","title":"1.3.1 Django"},{"location":"guidelines/advanced/test/#132-fastapi","text":"Fastapi \u4ec5\u4ec5\u63d0\u4f9b\u4e86\u5e26\u6709\u6846\u67b6\u529f\u80fd\u7684 TestClient \u3002\u521d\u59cb\u5316\u7684\u5b9e\u4f8b \u65b9\u4fbf\u6d4b\u8bd5 API \u63a5\u53e3\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u542f\u52a8\u4e00\u4e2a Web \u670d\u52a1\u3002 from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } \u8fd0\u884c pytest \u3002","title":"1.3.2 Fastapi"},{"location":"guidelines/advanced/type_hint/","text":"\u7c7b\u578b\u63d0\u793a Python \u4f5c\u4e3a\u4e00\u4e2a\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\uff0c\u5728\u7f16\u7801\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u4e00\u4e9b\u5c0f\u95ee\u9898\uff0c\u76f4\u5230\u8fd0\u884c\u65f6\u624d\u88ab\u53d1\u73b0\u3002\u76f8\u6bd4\u4e8e\u9759\u6001\u8bed\u8a00\uff0c \u50cf Java \u3001 C/C++ \u7b49\uff0c\u5728\u7f16\u8bd1\u671f\u95f4\u5c31\u80fd\u53d1\u73b0\u5e76\u6539\u8fdb\u4ee3\u7801\u95ee\u9898\u3002 \u6240\u4ee5\u4e3a\u4e86\u5728\u8fd0\u884c\u65f6\u4e4b\u524d\u5c3d\u53ef\u80fd\u907f\u514d\u51fa\u95ee\u9898\uff0c \u5728 2014 \u5e74 Guido van Rossum \u7b49\u4eba\u4e3a Python \u63d0\u51fa\u4e86 \u7c7b\u578b\u63d0\u793a\u7406\u8bba \u3002 \u5728 2015 \u5e74\u7684 Pycon \u505a\u4e86\u8be5\u4e3b\u9898\u7684\u6f14\u8bb2\u3002 \u76f4\u5230\u73b0\u5728\uff0c\u5173\u4e8e\u9759\u6001\u7c7b\u578b\u76f8\u5173\u7684 PEP \u6709\uff1a PEP 484 -- Type Hints PEP 526 -- Syntax for Variable Annotations PEP 544 -- Protocols: Structural subtyping (static duck typing) PEP 586 -- Literal Types PEP 589 -- TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys PEP 591 -- Adding a final qualifier to typing \u5230\u73b0\u5728\u7684 python 3.9 \u7248\u672c\uff0c\u7c7b\u578b\u63d0\u793a\u7684\u652f\u6301\u5df2\u7ecf\u5f88\u4e30\u5bcc\u4e86\u3002\u540c\u65f6\u4e0e\u7c7b\u578b\u63d0\u793a\u76f8\u5173\u7684\u68c0\u6d4b\u5de5\u5177\uff0c\u5de5\u5177\u5728 IDE \u4e0a\u7684\u96c6\u6210\u529f\u80fd\u4e5f\u5f88\u5b8c\u5584\uff0c \u5728\u5f00\u53d1\u4f53\u9a8c\u4e0a\u6709\u4e86\u5f88\u5927\u7684\u63d0\u5347\u3002\u540c\u65f6\u7c7b\u578b\u68c0\u67e5\u4e5f\u6210\u4e3a\u4e86 CI \u7684\u91cd\u8981\u73af\u8282\uff0c\u6709\u52a9\u4e8e\u66f4\u65e9\u66f4\u53ca\u65f6\u7684\u89c4\u907f Bug \u7684\u51fa\u73b0\u3002 1. \u521d\u8bc6\u7c7b\u578b\u63d0\u793a \u7c7b\u578b\u63d0\u793a\u53ef\u4ee5\u5728\u7c7b\u3001\u65b9\u6cd5\u6216\u53d8\u91cf\u4e0a\u6807\u6ce8\u76f8\u5e94\u7684\u7c7b\u578b\uff0c\u5728\u8c03\u7528\u7684\u65f6\u5019\u901a\u8fc7\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u5de5\u5177\u68c0\u6d4b\u8c03\u7528\u662f\u5426\u5b58\u5728\u95ee\u9898\u3002 \u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a def greeting ( name : str ) -> str : return f 'Hello { name } ' \u5728\u5b9a\u4e49\u65b9\u6cd5 greeting \u7684\u65f6\u5019\uff0c\u58f0\u660e\u53c2\u6570 name \u662f str \u7c7b\u578b\uff0c\u8fd4\u56de\u503c\u662f str \u7c7b\u578b\u3002\u5f53\u8c03\u7528 greeting \u51fd\u6570\u65f6\uff0c\u5982\u679c\u4f20\u9012\u4e00\u4e2a int \u7c7b\u578b \u7684\u503c\uff0c \u8fd0\u884c\u7c7b\u578b\u68c0\u67e5\u4f1a\u5931\u8d25\uff0c\u540c\u65f6\u53d1\u51fa\u8b66\u544a\u63d0\u793a\u3002\u5982\u679c IDE \u5df2\u7ecf\u652f\u6301\u7c7b\u578b\u68c0\u67e5\uff0c\u5219\u5728\u8c03\u7528\u7684\u65f6\u5019\uff0c\u4f1a\u63d0\u793a\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\uff0c \u5982\u679c\u4f20\u9012\u9519\u8bef\u7c7b\u578b\u7684\u53c2\u6570 IDE \u4f1a\u53ca\u65f6\u53d1\u51fa\u8b66\u544a\uff0c\u63d0\u793a\u6211\u4eec\u4fee\u590d\u3002 import logging from pathlib import Path # Config root logger logging . basicConfig ( level = logging . DEBUG , format = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' ) def count ( source_file : str , dest_file : str ) -> None : \"\"\" Count source :param source_file: :param dest_file: :return: \"\"\" total = read_from_file ( Path ( source_file )) write_to_file ( Path ( dest_file ), total ) def read_from_file ( source_file : Path ) -> int : \"\"\" Read file :param source_file: :return: \"\"\" total_words = 0 # Read source_file logging . debug ( 'Read file: %s ' , source_file ) with open ( source_file , 'r' ) as source_obj : for line in source_obj . readlines (): total_words += len ( line . split ( ' ' )) return total_words def write_to_file ( dest_file : Path , total_words : int ) -> None : \"\"\" Write result to file :param dest_file: :param total_words: :return: \"\"\" logging . debug ( 'Count %s words, write to %d ' , dest_file , total_words ) with open ( dest_file , 'w' ) as dest_obj : dest_obj . write ( f 'Total count: { total_words } ' ) \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c\u6240\u6709\u65b9\u6cd5\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u8fdb\u884c\u4e86\u7c7b\u578b\u6807\u6ce8\u3002 2. \u4f7f\u7528\u7c7b\u578b\u63d0\u793a 2.1 \u4e00\u822c\u7c7b\u578b\u63d0\u793a \u5728\u8fdb\u884c\u7c7b\u578b\u6807\u6ce8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u822c\u76f4\u63a5\u901a\u8fc7\u6807\u6ce8\u53d8\u91cf\u672c\u8eab\u7684\u7c7b\u578b\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f8b\u5982\uff1a \"\"\"Example\"\"\" import logging logging . basicConfig ( level = logging . DEBUG ) class User : \"\"\"User\"\"\" def __init__ ( self , name : str ): self . _name = name @property def name ( self ) -> str : \"\"\"User's name\"\"\" return self . _name def __repr__ ( self ): \"\"\"repr\"\"\" return f '<User(name=\" { self . name } \")>' def save ( user : User ): \"\"\"Mock to save a user\"\"\" logging . info ( 'Save object: %s ' , user ) if __name__ == '__main__' : save ( User ( 'Jim' )) \u5982\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c save \u65b9\u6cd5\u4f20\u5165\u4e00\u4e2a User \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u76f4\u63a5\u4f7f\u7528\u8be5\u7c7b\u6807\u6ce8\u5c31\u53ef\u4ee5\u4e86\u3002 \u9488\u5bf9\u4e00\u822c\u6570\u636e\u7c7b\u578b\uff0c\u5982 int \u3001 str \u3001 float \u3001 bytes \u7b49\uff0c\u53ef\u4ee5\u76f4\u63a5\u6807\u6ce8\u3002 2.2 \u6cdb\u578b\u5177\u8c61\u5bb9\u5668 \"\"\"Example\"\"\" from typing import Dict , List def count_words ( records : List [ str ]) -> Dict [ str , int ]: \"\"\"Count word of all lines.\"\"\" result : Dict [ str , int ] = {} for record in records : for word in record . split ( ' ' ): count = result . get ( word , 0 ) result . update ({ word : count + 1 }) return result count_words \u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a\u5185\u542b str \u7684 list \u53c2\u6570\uff0c\u540c\u65f6\u8fd4\u56de dict \u3002 \u8fd9\u4e9b typing.Dict \u3001 typing.List \u3001 typing.Set \u7b49\u90fd\u662f\u5bf9\u5e94\u57fa\u672c\u6570\u636e\u7ed3\u6784\u7684\u6cdb\u578b\u7248\u672c\u3002 \u6ce8\u610f\uff1a \u6839\u636e\u6587\u6863 \u6a21\u5757\u5185\u5bb9 \u4e00\u8282\u63cf\u8ff0\uff0c \u5728 Python 3.9 \u5df2\u7ecf\u5bf9\u4e00\u4e9b\u57fa\u672c\u6570\u636e \u63a5\u53e3\u505a\u4e86\u6cdb\u578b\u9002\u914d\uff0c\u8fd9\u548c\u73b0\u6709 typing \u4e0b\u7684\u6cdb\u578b\u7c7b\u578b\u91cd\u590d\uff0c \u6240\u4ee5\u4f1a\u5f03\u7528\u8fd9\u4e9b\u6cdb\u578b\u5bb9\u5668\u7c7b\u578b\uff0c\u5177\u4f53\u8bf7\u53c2\u8003\u4f53\u5305\u542b\u54ea\u4e9b\u8bf7\u53c2\u8003 PEP 585 \u3002 \u5982\u679c\u9700\u8981\u63d0\u524d\u4f7f\u7528\u65b0\u7279\u6027\uff0c\u5728 Python 3.7 \u5f00\u59cb\uff0c\u53ef\u4ee5\u5bfc\u5165 from __future__ import annotations \u6765\u4f7f\u7528\u65b0\u7684\u6cdb\u578b\u7c7b\u578b\u3002 \u5b98\u65b9\u4f1a\u5728 Python 3.9 \u53d1\u5e03\u4e94\u5e74\u540e\u7684\u6536\u4e2a Python \u53d1\u884c\u7248\uff0c\u53732025\u5e7410\u67085\u65e5\u4e4b\u540e\u7684\u6536\u4e2a\u53d1\u884c\u7248\u4f1a\u79fb\u9664 PEP 585 \u4e2d\u5f03\u7528\u7684\u6cdb\u578b\u5bb9\u5668\u7c7b\u578b\u3002 2.3 \u7279\u6b8a\u7c7b\u578b \"\"\"Example\"\"\" import asyncio from typing import Callable , Any , Type , Tuple , Dict , Optional from functools import partial class BaseTask : \"\"\"base Task\"\"\" def run ( self ) -> bool : \"\"\"Run task\"\"\" raise NotImplementedError def stop ( self ) -> None : \"\"\"Stop task\"\"\" raise NotImplementedError class FileTask ( BaseTask ): \"\"\"File task\"\"\" def run ( self ) -> bool : pass def stop ( self ) -> None : pass class NetworkTask ( BaseTask ): \"\"\"Network task\"\"\" def run ( self ) -> bool : pass def stop ( self ) -> None : pass KwargsType = Dict [ str , Any ] ArgsType = Tuple [ Any ] async def run_in_executor ( func : Callable [ ... , Any ], args : Optional [ ArgsType ] = (), kwargs : Optional [ KwargsType ] = None ) -> Any : \"\"\"Wrap a func in a threading executor \"\"\" if kwargs : func = partial ( func , ** kwargs ) loop = asyncio . get_running_loop () return await loop . run_in_executor ( None , func , * args ) def task_runner ( task_kls : Type [ BaseTask ]) -> None : \"\"\"Task runner\"\"\" task = task_kls () asyncio . run ( run_in_executor ( task . run )) \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528\u4e86\u4e00\u4e9b\u65b0\u7684\u7c7b\u578b\u6807\u6ce8\u65b9\u5f0f\u3002 \u5728 run_in_executor \u65b9\u6cd5\u4e4b\u524d\uff0c\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7c7b\u578b\uff0c\u5e76\u8d4b\u4e88\u5176\u522b\u540d\uff0c\u65b9\u4fbf\u540e\u9762\u4f7f\u7528\u3002 \u5728 run_in_executor \u65b9\u6cd5\u4e2d\u4f7f\u7528\u4e86 typing.Callable \u3001 typing.Optional \u3001 typing.Any \u7279\u6b8a\u7c7b\u578b\u3002 \u5728 task_runner \u4e2d\u4f7f\u7528 typing.Type \u7c7b\u578b\uff0c\u8868\u660e task_kls \u53c2\u6570\u662f\u4e00\u4e2a BaseTask \u7c7b\u81ea\u8eab\uff0c \u800c\u4e0d\u662f\u5b83\u7684\u5bf9\u8c61\uff0c\u51c6\u786e\u8bf4\u662f\u5b83\u7684\u7c7b\u5bf9\u8c61\u3002 \u5982 a = int \u548c b = type(a) \u4e2d\uff0c a \u548c b \u6240\u6807\u6ce8\u7684\u7c7b\u578b\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f int \u7c7b\u578b\u3002 3. \u9ad8\u9636\u4f7f\u7528 3.1 \u53ef\u8c03\u5bf9\u8c61(Callable) \u4e0a\u4e00\u7ae0\u5df2\u7ecf\u63d0\u5230\u4e86\u53ef\u8c03\u5bf9\u8c61( Callable ) \u7684\u4f7f\u7528\uff0c\u8fd9\u91cc\u9700\u8981\u5728\u8be6\u7ec6\u8bf4\u660e\u4e00\u8d77\u5b83\u7684\u7528\u6cd5\u3002 from typing import Callable , Tuple def task_a ( name : str ) -> str : return name def task_sum ( a : int , b : int ) -> int : return a + b def task_a_executor ( func : Callable [[ str ], str ], args : Tuple [ str ]) -> str : return func ( * args ) def task_sum_executor ( func : Callable [[ int , int ], int ], args : Tuple [ int ]) -> int : return func ( * args ) \u9488\u5bf9\u53ef\u8c03\u5bf9\u8c61\u4e2d\u9700\u8981\u4f20\u9012\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u5728 Callable \u4e2d\u6807\u6ce8\u3002 \u4ece\u4e0a\u9762\u793a\u4f8b\uff0c\u5305\u62ec Callable \u7684\u4f7f\u7528\u65b9\u6cd5\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u90fd\u662f\u5728\u6807\u6ce8\u5217\u8868\u53c2\u6570( args ) \uff0c\u4f46\u5982\u679c\u9700\u8981\u6807\u6ce8\u5b57\u5178\u53c2\u6570 \u5374\u65e0\u6cd5\u6807\u6ce8\u3002 \u4f8b\u5982\u4e00\u4e2a\u65b9\u6cd5 def foo(a: Optional[int] = None, *, b: Optional[int] = None) -> None: ... \uff0c \u5b83\u5728\u65b9\u6cd5\u5b9a\u4e49\u9636\u6bb5\u5df2\u7ecf\u58f0\u660e\u4e86\u63a5\u6536 b \u53c2\u6570\u65f6\uff0c \u5fc5\u987b\u4e3a\u5b57\u5178\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u4f60\u4e0d\u4f20\u9012 a \u53c2\u6570\uff0c\u4f46\u53c8\u9700\u8981\u4f20\u9012 b \u53c2\u6570\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u8fd9\u4e48\u8c03\u7528 foo(b=3) \uff0c\u5426\u5219\u4f20\u9012\u7684\u503c\uff0c\u53ea\u4f1a\u8d4b\u503c\u5230 a \u4e0a\u9762\u3002 \u800c\u8fd9\u79cd\u7c7b\u578b\u7684\u8c03\u7528\u5bf9\u8c61\u5374\u65e0\u6cd5\u4f7f\u7528\u6b63\u5e38\u64cd\u4f5c\u7684 \u6807\u6ce8\u4e3a Callable[[int, \"b\": int], int] \u3002 \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u867d\u7136\u5b98\u65b9\u6587\u6863\u4e2d\u6ca1\u6709\u5bf9\u6b64\u8bf4\u660e\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u7ed3\u6784\u5b50\u7c7b\u578b\u5b9a\u4e49\u8c03\u7528\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 \u4e86\u89e3 \u540d\u4e49\u5b50\u7c7b\u578b vs \u7ed3\u6784\u5b50\u7c7b\u578b \u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u5b9a\u4e49\uff1a from typing import Optional , Protocol def foo ( a : Optional [ int ], * , b : Optional [ int ] ) -> None : ... class FooCallableType ( Protocol ): def __call__ ( self , a : Optional [ int ] = None , * , b : Optional [ int ] = None ) -> None : ... def foo_executor ( func : FooCallableType ) -> None : ... \u53c2\u8003\uff1a python typing signature (typing.Callable) for function with kwargs 3.2 \u5f02\u6b65\u7f16\u7a0b import asyncio from typing import Tuple , Any , Awaitable , Union , Callable , AsyncGenerator from asyncio import iscoroutinefunction async def func ( length : int ) -> AsyncGenerator : for i in range ( length ): yield i async def run_in_executor ( func : Union [ Callable [ ... , Any ], Awaitable [ ... , Any ]], args : Tuple [ ... ] ) -> Any : if iscoroutinefunction ( func ): return await func ( * args ) else : loop = asyncio . get_running_loop () return await loop . run_in_executor ( None , func , * args , ) \u9488\u5bf9\u5f02\u6b65\u7f16\u7a0b\u7684\u7684\u6240\u6709\u7c7b\u578b\uff0c\u90fd\u5df2\u7ecf\u5728 typing \u4e0b\u5b9a\u4e49\u4e86\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u53bb\u4f7f\u7528\u3002","title":"\u7c7b\u578b\u6807\u6ce8"},{"location":"guidelines/advanced/type_hint/#_1","text":"Python \u4f5c\u4e3a\u4e00\u4e2a\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\uff0c\u5728\u7f16\u7801\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u7684\u4e00\u4e9b\u5c0f\u95ee\u9898\uff0c\u76f4\u5230\u8fd0\u884c\u65f6\u624d\u88ab\u53d1\u73b0\u3002\u76f8\u6bd4\u4e8e\u9759\u6001\u8bed\u8a00\uff0c \u50cf Java \u3001 C/C++ \u7b49\uff0c\u5728\u7f16\u8bd1\u671f\u95f4\u5c31\u80fd\u53d1\u73b0\u5e76\u6539\u8fdb\u4ee3\u7801\u95ee\u9898\u3002 \u6240\u4ee5\u4e3a\u4e86\u5728\u8fd0\u884c\u65f6\u4e4b\u524d\u5c3d\u53ef\u80fd\u907f\u514d\u51fa\u95ee\u9898\uff0c \u5728 2014 \u5e74 Guido van Rossum \u7b49\u4eba\u4e3a Python \u63d0\u51fa\u4e86 \u7c7b\u578b\u63d0\u793a\u7406\u8bba \u3002 \u5728 2015 \u5e74\u7684 Pycon \u505a\u4e86\u8be5\u4e3b\u9898\u7684\u6f14\u8bb2\u3002 \u76f4\u5230\u73b0\u5728\uff0c\u5173\u4e8e\u9759\u6001\u7c7b\u578b\u76f8\u5173\u7684 PEP \u6709\uff1a PEP 484 -- Type Hints PEP 526 -- Syntax for Variable Annotations PEP 544 -- Protocols: Structural subtyping (static duck typing) PEP 586 -- Literal Types PEP 589 -- TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys PEP 591 -- Adding a final qualifier to typing \u5230\u73b0\u5728\u7684 python 3.9 \u7248\u672c\uff0c\u7c7b\u578b\u63d0\u793a\u7684\u652f\u6301\u5df2\u7ecf\u5f88\u4e30\u5bcc\u4e86\u3002\u540c\u65f6\u4e0e\u7c7b\u578b\u63d0\u793a\u76f8\u5173\u7684\u68c0\u6d4b\u5de5\u5177\uff0c\u5de5\u5177\u5728 IDE \u4e0a\u7684\u96c6\u6210\u529f\u80fd\u4e5f\u5f88\u5b8c\u5584\uff0c \u5728\u5f00\u53d1\u4f53\u9a8c\u4e0a\u6709\u4e86\u5f88\u5927\u7684\u63d0\u5347\u3002\u540c\u65f6\u7c7b\u578b\u68c0\u67e5\u4e5f\u6210\u4e3a\u4e86 CI \u7684\u91cd\u8981\u73af\u8282\uff0c\u6709\u52a9\u4e8e\u66f4\u65e9\u66f4\u53ca\u65f6\u7684\u89c4\u907f Bug \u7684\u51fa\u73b0\u3002","title":"\u7c7b\u578b\u63d0\u793a"},{"location":"guidelines/advanced/type_hint/#1","text":"\u7c7b\u578b\u63d0\u793a\u53ef\u4ee5\u5728\u7c7b\u3001\u65b9\u6cd5\u6216\u53d8\u91cf\u4e0a\u6807\u6ce8\u76f8\u5e94\u7684\u7c7b\u578b\uff0c\u5728\u8c03\u7528\u7684\u65f6\u5019\u901a\u8fc7\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u5de5\u5177\u68c0\u6d4b\u8c03\u7528\u662f\u5426\u5b58\u5728\u95ee\u9898\u3002 \u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a def greeting ( name : str ) -> str : return f 'Hello { name } ' \u5728\u5b9a\u4e49\u65b9\u6cd5 greeting \u7684\u65f6\u5019\uff0c\u58f0\u660e\u53c2\u6570 name \u662f str \u7c7b\u578b\uff0c\u8fd4\u56de\u503c\u662f str \u7c7b\u578b\u3002\u5f53\u8c03\u7528 greeting \u51fd\u6570\u65f6\uff0c\u5982\u679c\u4f20\u9012\u4e00\u4e2a int \u7c7b\u578b \u7684\u503c\uff0c \u8fd0\u884c\u7c7b\u578b\u68c0\u67e5\u4f1a\u5931\u8d25\uff0c\u540c\u65f6\u53d1\u51fa\u8b66\u544a\u63d0\u793a\u3002\u5982\u679c IDE \u5df2\u7ecf\u652f\u6301\u7c7b\u578b\u68c0\u67e5\uff0c\u5219\u5728\u8c03\u7528\u7684\u65f6\u5019\uff0c\u4f1a\u63d0\u793a\u8be5\u65b9\u6cd5\u7684\u53c2\u6570\u7c7b\u578b\uff0c \u5982\u679c\u4f20\u9012\u9519\u8bef\u7c7b\u578b\u7684\u53c2\u6570 IDE \u4f1a\u53ca\u65f6\u53d1\u51fa\u8b66\u544a\uff0c\u63d0\u793a\u6211\u4eec\u4fee\u590d\u3002 import logging from pathlib import Path # Config root logger logging . basicConfig ( level = logging . DEBUG , format = ' %(asctime)s - %(name)s - %(levelname)s - %(message)s ' ) def count ( source_file : str , dest_file : str ) -> None : \"\"\" Count source :param source_file: :param dest_file: :return: \"\"\" total = read_from_file ( Path ( source_file )) write_to_file ( Path ( dest_file ), total ) def read_from_file ( source_file : Path ) -> int : \"\"\" Read file :param source_file: :return: \"\"\" total_words = 0 # Read source_file logging . debug ( 'Read file: %s ' , source_file ) with open ( source_file , 'r' ) as source_obj : for line in source_obj . readlines (): total_words += len ( line . split ( ' ' )) return total_words def write_to_file ( dest_file : Path , total_words : int ) -> None : \"\"\" Write result to file :param dest_file: :param total_words: :return: \"\"\" logging . debug ( 'Count %s words, write to %d ' , dest_file , total_words ) with open ( dest_file , 'w' ) as dest_obj : dest_obj . write ( f 'Total count: { total_words } ' ) \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c\u6240\u6709\u65b9\u6cd5\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u8fdb\u884c\u4e86\u7c7b\u578b\u6807\u6ce8\u3002","title":"1. \u521d\u8bc6\u7c7b\u578b\u63d0\u793a"},{"location":"guidelines/advanced/type_hint/#2","text":"","title":"2. \u4f7f\u7528\u7c7b\u578b\u63d0\u793a"},{"location":"guidelines/advanced/type_hint/#21","text":"\u5728\u8fdb\u884c\u7c7b\u578b\u6807\u6ce8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u822c\u76f4\u63a5\u901a\u8fc7\u6807\u6ce8\u53d8\u91cf\u672c\u8eab\u7684\u7c7b\u578b\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f8b\u5982\uff1a \"\"\"Example\"\"\" import logging logging . basicConfig ( level = logging . DEBUG ) class User : \"\"\"User\"\"\" def __init__ ( self , name : str ): self . _name = name @property def name ( self ) -> str : \"\"\"User's name\"\"\" return self . _name def __repr__ ( self ): \"\"\"repr\"\"\" return f '<User(name=\" { self . name } \")>' def save ( user : User ): \"\"\"Mock to save a user\"\"\" logging . info ( 'Save object: %s ' , user ) if __name__ == '__main__' : save ( User ( 'Jim' )) \u5982\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c save \u65b9\u6cd5\u4f20\u5165\u4e00\u4e2a User \u7c7b\u578b\u7684\u53c2\u6570\uff0c\u76f4\u63a5\u4f7f\u7528\u8be5\u7c7b\u6807\u6ce8\u5c31\u53ef\u4ee5\u4e86\u3002 \u9488\u5bf9\u4e00\u822c\u6570\u636e\u7c7b\u578b\uff0c\u5982 int \u3001 str \u3001 float \u3001 bytes \u7b49\uff0c\u53ef\u4ee5\u76f4\u63a5\u6807\u6ce8\u3002","title":"2.1 \u4e00\u822c\u7c7b\u578b\u63d0\u793a"},{"location":"guidelines/advanced/type_hint/#22","text":"\"\"\"Example\"\"\" from typing import Dict , List def count_words ( records : List [ str ]) -> Dict [ str , int ]: \"\"\"Count word of all lines.\"\"\" result : Dict [ str , int ] = {} for record in records : for word in record . split ( ' ' ): count = result . get ( word , 0 ) result . update ({ word : count + 1 }) return result count_words \u65b9\u6cd5\u63a5\u6536\u4e00\u4e2a\u5185\u542b str \u7684 list \u53c2\u6570\uff0c\u540c\u65f6\u8fd4\u56de dict \u3002 \u8fd9\u4e9b typing.Dict \u3001 typing.List \u3001 typing.Set \u7b49\u90fd\u662f\u5bf9\u5e94\u57fa\u672c\u6570\u636e\u7ed3\u6784\u7684\u6cdb\u578b\u7248\u672c\u3002 \u6ce8\u610f\uff1a \u6839\u636e\u6587\u6863 \u6a21\u5757\u5185\u5bb9 \u4e00\u8282\u63cf\u8ff0\uff0c \u5728 Python 3.9 \u5df2\u7ecf\u5bf9\u4e00\u4e9b\u57fa\u672c\u6570\u636e \u63a5\u53e3\u505a\u4e86\u6cdb\u578b\u9002\u914d\uff0c\u8fd9\u548c\u73b0\u6709 typing \u4e0b\u7684\u6cdb\u578b\u7c7b\u578b\u91cd\u590d\uff0c \u6240\u4ee5\u4f1a\u5f03\u7528\u8fd9\u4e9b\u6cdb\u578b\u5bb9\u5668\u7c7b\u578b\uff0c\u5177\u4f53\u8bf7\u53c2\u8003\u4f53\u5305\u542b\u54ea\u4e9b\u8bf7\u53c2\u8003 PEP 585 \u3002 \u5982\u679c\u9700\u8981\u63d0\u524d\u4f7f\u7528\u65b0\u7279\u6027\uff0c\u5728 Python 3.7 \u5f00\u59cb\uff0c\u53ef\u4ee5\u5bfc\u5165 from __future__ import annotations \u6765\u4f7f\u7528\u65b0\u7684\u6cdb\u578b\u7c7b\u578b\u3002 \u5b98\u65b9\u4f1a\u5728 Python 3.9 \u53d1\u5e03\u4e94\u5e74\u540e\u7684\u6536\u4e2a Python \u53d1\u884c\u7248\uff0c\u53732025\u5e7410\u67085\u65e5\u4e4b\u540e\u7684\u6536\u4e2a\u53d1\u884c\u7248\u4f1a\u79fb\u9664 PEP 585 \u4e2d\u5f03\u7528\u7684\u6cdb\u578b\u5bb9\u5668\u7c7b\u578b\u3002","title":"2.2 \u6cdb\u578b\u5177\u8c61\u5bb9\u5668"},{"location":"guidelines/advanced/type_hint/#23","text":"\"\"\"Example\"\"\" import asyncio from typing import Callable , Any , Type , Tuple , Dict , Optional from functools import partial class BaseTask : \"\"\"base Task\"\"\" def run ( self ) -> bool : \"\"\"Run task\"\"\" raise NotImplementedError def stop ( self ) -> None : \"\"\"Stop task\"\"\" raise NotImplementedError class FileTask ( BaseTask ): \"\"\"File task\"\"\" def run ( self ) -> bool : pass def stop ( self ) -> None : pass class NetworkTask ( BaseTask ): \"\"\"Network task\"\"\" def run ( self ) -> bool : pass def stop ( self ) -> None : pass KwargsType = Dict [ str , Any ] ArgsType = Tuple [ Any ] async def run_in_executor ( func : Callable [ ... , Any ], args : Optional [ ArgsType ] = (), kwargs : Optional [ KwargsType ] = None ) -> Any : \"\"\"Wrap a func in a threading executor \"\"\" if kwargs : func = partial ( func , ** kwargs ) loop = asyncio . get_running_loop () return await loop . run_in_executor ( None , func , * args ) def task_runner ( task_kls : Type [ BaseTask ]) -> None : \"\"\"Task runner\"\"\" task = task_kls () asyncio . run ( run_in_executor ( task . run )) \u4ece\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528\u4e86\u4e00\u4e9b\u65b0\u7684\u7c7b\u578b\u6807\u6ce8\u65b9\u5f0f\u3002 \u5728 run_in_executor \u65b9\u6cd5\u4e4b\u524d\uff0c\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7c7b\u578b\uff0c\u5e76\u8d4b\u4e88\u5176\u522b\u540d\uff0c\u65b9\u4fbf\u540e\u9762\u4f7f\u7528\u3002 \u5728 run_in_executor \u65b9\u6cd5\u4e2d\u4f7f\u7528\u4e86 typing.Callable \u3001 typing.Optional \u3001 typing.Any \u7279\u6b8a\u7c7b\u578b\u3002 \u5728 task_runner \u4e2d\u4f7f\u7528 typing.Type \u7c7b\u578b\uff0c\u8868\u660e task_kls \u53c2\u6570\u662f\u4e00\u4e2a BaseTask \u7c7b\u81ea\u8eab\uff0c \u800c\u4e0d\u662f\u5b83\u7684\u5bf9\u8c61\uff0c\u51c6\u786e\u8bf4\u662f\u5b83\u7684\u7c7b\u5bf9\u8c61\u3002 \u5982 a = int \u548c b = type(a) \u4e2d\uff0c a \u548c b \u6240\u6807\u6ce8\u7684\u7c7b\u578b\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f int \u7c7b\u578b\u3002","title":"2.3 \u7279\u6b8a\u7c7b\u578b"},{"location":"guidelines/advanced/type_hint/#3","text":"","title":"3. \u9ad8\u9636\u4f7f\u7528"},{"location":"guidelines/advanced/type_hint/#31-callable","text":"\u4e0a\u4e00\u7ae0\u5df2\u7ecf\u63d0\u5230\u4e86\u53ef\u8c03\u5bf9\u8c61( Callable ) \u7684\u4f7f\u7528\uff0c\u8fd9\u91cc\u9700\u8981\u5728\u8be6\u7ec6\u8bf4\u660e\u4e00\u8d77\u5b83\u7684\u7528\u6cd5\u3002 from typing import Callable , Tuple def task_a ( name : str ) -> str : return name def task_sum ( a : int , b : int ) -> int : return a + b def task_a_executor ( func : Callable [[ str ], str ], args : Tuple [ str ]) -> str : return func ( * args ) def task_sum_executor ( func : Callable [[ int , int ], int ], args : Tuple [ int ]) -> int : return func ( * args ) \u9488\u5bf9\u53ef\u8c03\u5bf9\u8c61\u4e2d\u9700\u8981\u4f20\u9012\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u5728 Callable \u4e2d\u6807\u6ce8\u3002 \u4ece\u4e0a\u9762\u793a\u4f8b\uff0c\u5305\u62ec Callable \u7684\u4f7f\u7528\u65b9\u6cd5\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u90fd\u662f\u5728\u6807\u6ce8\u5217\u8868\u53c2\u6570( args ) \uff0c\u4f46\u5982\u679c\u9700\u8981\u6807\u6ce8\u5b57\u5178\u53c2\u6570 \u5374\u65e0\u6cd5\u6807\u6ce8\u3002 \u4f8b\u5982\u4e00\u4e2a\u65b9\u6cd5 def foo(a: Optional[int] = None, *, b: Optional[int] = None) -> None: ... \uff0c \u5b83\u5728\u65b9\u6cd5\u5b9a\u4e49\u9636\u6bb5\u5df2\u7ecf\u58f0\u660e\u4e86\u63a5\u6536 b \u53c2\u6570\u65f6\uff0c \u5fc5\u987b\u4e3a\u5b57\u5178\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u4f60\u4e0d\u4f20\u9012 a \u53c2\u6570\uff0c\u4f46\u53c8\u9700\u8981\u4f20\u9012 b \u53c2\u6570\u7684\u65f6\u5019\uff0c\u5fc5\u987b\u8fd9\u4e48\u8c03\u7528 foo(b=3) \uff0c\u5426\u5219\u4f20\u9012\u7684\u503c\uff0c\u53ea\u4f1a\u8d4b\u503c\u5230 a \u4e0a\u9762\u3002 \u800c\u8fd9\u79cd\u7c7b\u578b\u7684\u8c03\u7528\u5bf9\u8c61\u5374\u65e0\u6cd5\u4f7f\u7528\u6b63\u5e38\u64cd\u4f5c\u7684 \u6807\u6ce8\u4e3a Callable[[int, \"b\": int], int] \u3002 \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u867d\u7136\u5b98\u65b9\u6587\u6863\u4e2d\u6ca1\u6709\u5bf9\u6b64\u8bf4\u660e\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u7ed3\u6784\u5b50\u7c7b\u578b\u5b9a\u4e49\u8c03\u7528\u5bf9\u8c61\u7684\u7c7b\u578b\u3002 \u4e86\u89e3 \u540d\u4e49\u5b50\u7c7b\u578b vs \u7ed3\u6784\u5b50\u7c7b\u578b \u6240\u4ee5\u53ef\u4ee5\u8fd9\u4e48\u5b9a\u4e49\uff1a from typing import Optional , Protocol def foo ( a : Optional [ int ], * , b : Optional [ int ] ) -> None : ... class FooCallableType ( Protocol ): def __call__ ( self , a : Optional [ int ] = None , * , b : Optional [ int ] = None ) -> None : ... def foo_executor ( func : FooCallableType ) -> None : ... \u53c2\u8003\uff1a python typing signature (typing.Callable) for function with kwargs","title":"3.1 \u53ef\u8c03\u5bf9\u8c61(Callable)"},{"location":"guidelines/advanced/type_hint/#32","text":"import asyncio from typing import Tuple , Any , Awaitable , Union , Callable , AsyncGenerator from asyncio import iscoroutinefunction async def func ( length : int ) -> AsyncGenerator : for i in range ( length ): yield i async def run_in_executor ( func : Union [ Callable [ ... , Any ], Awaitable [ ... , Any ]], args : Tuple [ ... ] ) -> Any : if iscoroutinefunction ( func ): return await func ( * args ) else : loop = asyncio . get_running_loop () return await loop . run_in_executor ( None , func , * args , ) \u9488\u5bf9\u5f02\u6b65\u7f16\u7a0b\u7684\u7684\u6240\u6709\u7c7b\u578b\uff0c\u90fd\u5df2\u7ecf\u5728 typing \u4e0b\u5b9a\u4e49\u4e86\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u53bb\u4f7f\u7528\u3002","title":"3.2 \u5f02\u6b65\u7f16\u7a0b"},{"location":"guidelines/project_management/code_lint/","text":"\u4ee3\u7801\u68c0\u6d4b \u4ee3\u7801\u68c0\u6d4b\u662f\u4f7f\u7528\u4e00\u4e9b\u5de5\u5177\u68c0\u67e5\u4ee3\u7801\u77e5\u5426\u7b26\u5408 Python \u76f8\u5173\u89c4\u8303\u3002 \u5f53\u524d\u4e3b\u6d41\u7684\u4ee3\u7801\u68c0\u6d4b\u89c4\u8303\u5305\u62ec black flake8 pylint yapf \u4ee3\u7801\u68c0\u6d4b\u5de5\u5177 black black \u662f PSF \u7ec4\u7ec7\u4e0b\u7684\u4e00\u4e2a\u4ee3\u7801\u683c\u5f0f\u5316\u5de5\u5177\u3002 \u5176\u7279\u70b9\u662f\u5f3a\u5236\u683c\u5f0f\u5316\u4ee3\u7801\uff0c\u4f7f\u4ee3\u7801\u4fdd\u6301\u4e00\u81f4\u6027\u3002\u4f46\u7f3a\u70b9\u662f\u4f1a\u81ea\u52a8\u8c03\u6574\u4ee3\u7801\u683c\u5f0f\u3002 \u7279\u70b9\uff1a \u7b26\u5408 PEP 8 \u6807\u51c6 \u652f\u6301\u81ea\u5b9a\u4e49\u89c4\u5219 \u81ea\u52a8\u683c\u5f0f\u5316\u4ee3\u7801 IDE \u63d2\u4ef6 psf \u793e\u533a\u7ef4\u62a4 flake8 flake8 \u662f pycqa \u7ec4\u7ec7\u4e0b\u7684\u4e00\u4e2a\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u3002\u5b83\u9075\u5faa PEP 8 \u89c4\u8303\uff0c \u6307\u793a\u51fa\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u4ee3\u7801\u3002 \u7279\u70b9\uff1a \u7b26\u5408 PEP 8 \u89c4\u8303 \u96c6\u5408\u4f7f\u7528 pycodestyle \uff0c pyflakes \uff0c mccabe \u7b49\u7b2c\u4e09\u65b9\u63d2\u4ef6\u3002 \u652f\u6301\u81ea\u5b9a\u4e49\u89c4\u5219 \u63d0\u793a\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u5185\u5bb9 IDE \u63d2\u4ef6 git \u6216 Mercurial \u6269\u5c55 pycoa \u793e\u533a\u7ef4\u62a4 pylint pylint \u662f pycqa \u7ec4\u7ec7\u4e0b\u7ef4\u62a4\u7684\u5de5\u5177\u3002\u5b83\u4e0d\u4ec5\u4ec5\u662f\u4e00\u6b3e\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\uff0c\u8fd8\u53ef\u4ee5\u53d1\u73b0\u53d8\u6210\u9519\u8bef\uff0c\u4ee3\u7801\u5f02\u5e38\uff0c\u5e76\u63d0\u4f9b\u7b80\u5355\u7684\u91cd\u6784\u5efa\u8bae\u3002 \u7279\u70b9\uff1a \u7b26\u5408 PEP 8 \u89c4\u8303 \u652f\u6301\u81ea\u5b9a\u4e49\u89c4\u5219 \u9519\u8bef\u68c0\u6d4b \u91cd\u6784\u5efa\u8bae IDE \u63d2\u4ef6 pycoa \u793e\u533a\u7ef4\u62a4 yapf yapf \u662f Google \u7ef4\u62a4\u7684\u4e00\u4e2a\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u3002\u5b83\u548c\u4e0a\u8ff0\u5de5\u5177\u4e0d\u540c\uff0c \u4f7f\u7528\u57fa\u4e8e clang-format \u7684\u7b97\u6cd5\u5c06\u4ee3\u7801\u91cd\u65b0\u683c\u5f0f\u5316\u4e3a\u590d\u5408\u98ce\u683c\u6307\u5357\u7684\u6700\u4f73\u683c\u5f0f\u3002\u7c7b\u4f3c\u4e8e Golang \u7684 gofmt \u5de5\u5177\u3002 \u6240\u4ee5\u5b83\u548c black \u5de5\u5177\u6709\u70b9\u7c7b\u4f3c\u3002 \u7279\u70b9\uff1a \u7b26\u5408 PEP 8 \u89c4\u8303 \u652f\u6301\u81ea\u5b9a\u4e49\u89c4\u5219 \u81ea\u52a8\u683c\u5f0f\u5316\u4ee3\u7801 IDE \u63d2\u4ef6 google \u793e\u533a\u7ef4\u62a4 \u4f7f\u7528\u5b9e\u8df5 \u867d\u7136\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u6709\u5f88\u591a\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u521d\u8877\u90fd\u662f\u4e3a\u4e86\u8ba9 Python \u4ee3\u7801\u7b26\u5408\u4e00\u81f4\u7684\u98ce\u683c\u548c\u89c4\u8303\u3002\u53ea\u4e0d\u8fc7\u662f\u6709\u7684\u5de5\u5177\u66f4\u6fc0\u8fdb\u800c\u5df2\u3002\u5177\u6709\u826f\u597d\u7f16\u7801\u4e60\u60ef\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u5199\u51fa\u7684\u4ee3\u7801\uff0c \u65e0\u8bba\u4f7f\u7528\u54ea\u79cd\u5de5\u5177\uff0c\u90fd\u80fd\u8f7b\u677e\u901a\u8fc7\u3002\u6240\u4ee5\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u7684\u6700\u7ec8\u76ee\u7684\u662f\u544a\u77e5\u5f00\u53d1\u4eba\u5458\u5c3d\u53ef\u80fd\u9075\u5b88\u4e00\u81f4\u7684\u98ce\u683c\u6765\u7f16\u5199\u4ee3\u7801\u3002 \u8003\u8651\u5230\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u7684\u6307\u5bfc\u6027\uff0c\u548c\u529f\u80fd\u6027\uff0c\u63a8\u8350\u4f7f\u7528 pylint \u4f5c\u4e3a\u9996\u9009\u68c0\u6d4b\u5de5\u5177\u3002\u5728\u5b9e\u8df5\u4e2d\u53d1\u73b0\u7531\u4e8e\u67d0\u4e9b\u5e93\u548c pylint \u7684\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u5f53 \u4f7f\u7528 pylint \u6709\u95ee\u9898\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 flake8 \u4f5c\u4e3a\u66ff\u4ee3\u7684\u68c0\u6d4b\u5de5\u5177\u3002 \u4f7f\u7528 \u5728\u5b9e\u9645\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u5c06\u4ee3\u7801\u68c0\u6d4b\u903b\u8f91\u653e\u5728\u81ea\u52a8\u5316\u5de5\u5177\u4e2d\u8fd0\u884c\u3002\u5c06\u903b\u8f91\u653e\u5728 tox \u4e2d\uff0c\u53ef\u4ee5\u5728\u672c\u5730\u5f00\u53d1\u65f6\u65b9\u4fbf\u4f7f\u7528\u3002\u5728 CI \u9636\u6bb5\u53ea\u9700\u8981\u8c03\u7528 tox \u5c31\u53ef\u4ee5\u4e86\u3002 tox # tox (https://tox.readthedocs.io/) is a tool for running tests # in multiple virtualenvs. This configuration file will run the # test suite on all supported python versions. To use it, \"pip install tox\" # and then run \"tox\" from this directory. [tox] isolated_build = True envlist = py{37,38,39,310} isort lint [testenv] deps = pipenv usedevelop = true commands = pipenv sync -d pytest --cov = src [testenv:isort] deps = isort commands = isort . --check-only --diff [testenv:lint] deps = pipenv changedir = {toxinidir} commands = pipenv sync -d pylint src tests github action # This workflow will install Python dependencies, run tests and lint with a single version of Python # For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions name : main on : [ push , pull_request ] jobs : test : runs-on : ${{ matrix.os }} strategy : fail-fast : false matrix : os : [ ubuntu-20.04 ] python : [ \"3.7\" , \"3.8\" , \"3.9\" , \"3.10\" ] steps : - uses : actions/checkout@v2 - name : Set up Python ${{ matrix.python }} on ${{ matrix.os }} uses : actions/setup-python@v2 with : python-version : ${{ matrix.python }} - name : Install dependencies run : | python -m pip install --upgrade pip pip install tox - name : Test with tox run : | tox -e py linting : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 - run : pip install tox - run : | tox -e isort tox -e lint gitlab-ci default : image : python:3.9 before_script : - pip install -U pip .base_test : stage : test script : - pip install -U tox - tox -e py stages : - test - build - upload # Due to gitlab ci not support matrix build. So use YAML anchors: # https://forum.gitlab.com/t/matrix-builds-in-ci/9629 test:py37 : image : python:3.7 extends : - .base_test test:py38 : image : python:3.8 extends : - .base_test test:py39 : image : python:3.9 extends : - .base_test test:py310 : image : python:3.10 extends : - .base_test test:lint : stage : test script : - pip install -U tox - tox -e isort - tox -e lint","title":"\u4ee3\u7801\u68c0\u6d4b"},{"location":"guidelines/project_management/code_lint/#_1","text":"\u4ee3\u7801\u68c0\u6d4b\u662f\u4f7f\u7528\u4e00\u4e9b\u5de5\u5177\u68c0\u67e5\u4ee3\u7801\u77e5\u5426\u7b26\u5408 Python \u76f8\u5173\u89c4\u8303\u3002 \u5f53\u524d\u4e3b\u6d41\u7684\u4ee3\u7801\u68c0\u6d4b\u89c4\u8303\u5305\u62ec black flake8 pylint yapf","title":"\u4ee3\u7801\u68c0\u6d4b"},{"location":"guidelines/project_management/code_lint/#_2","text":"","title":"\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177"},{"location":"guidelines/project_management/code_lint/#black","text":"black \u662f PSF \u7ec4\u7ec7\u4e0b\u7684\u4e00\u4e2a\u4ee3\u7801\u683c\u5f0f\u5316\u5de5\u5177\u3002 \u5176\u7279\u70b9\u662f\u5f3a\u5236\u683c\u5f0f\u5316\u4ee3\u7801\uff0c\u4f7f\u4ee3\u7801\u4fdd\u6301\u4e00\u81f4\u6027\u3002\u4f46\u7f3a\u70b9\u662f\u4f1a\u81ea\u52a8\u8c03\u6574\u4ee3\u7801\u683c\u5f0f\u3002 \u7279\u70b9\uff1a \u7b26\u5408 PEP 8 \u6807\u51c6 \u652f\u6301\u81ea\u5b9a\u4e49\u89c4\u5219 \u81ea\u52a8\u683c\u5f0f\u5316\u4ee3\u7801 IDE \u63d2\u4ef6 psf \u793e\u533a\u7ef4\u62a4","title":"black"},{"location":"guidelines/project_management/code_lint/#flake8","text":"flake8 \u662f pycqa \u7ec4\u7ec7\u4e0b\u7684\u4e00\u4e2a\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u3002\u5b83\u9075\u5faa PEP 8 \u89c4\u8303\uff0c \u6307\u793a\u51fa\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u4ee3\u7801\u3002 \u7279\u70b9\uff1a \u7b26\u5408 PEP 8 \u89c4\u8303 \u96c6\u5408\u4f7f\u7528 pycodestyle \uff0c pyflakes \uff0c mccabe \u7b49\u7b2c\u4e09\u65b9\u63d2\u4ef6\u3002 \u652f\u6301\u81ea\u5b9a\u4e49\u89c4\u5219 \u63d0\u793a\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u5185\u5bb9 IDE \u63d2\u4ef6 git \u6216 Mercurial \u6269\u5c55 pycoa \u793e\u533a\u7ef4\u62a4","title":"flake8"},{"location":"guidelines/project_management/code_lint/#pylint","text":"pylint \u662f pycqa \u7ec4\u7ec7\u4e0b\u7ef4\u62a4\u7684\u5de5\u5177\u3002\u5b83\u4e0d\u4ec5\u4ec5\u662f\u4e00\u6b3e\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\uff0c\u8fd8\u53ef\u4ee5\u53d1\u73b0\u53d8\u6210\u9519\u8bef\uff0c\u4ee3\u7801\u5f02\u5e38\uff0c\u5e76\u63d0\u4f9b\u7b80\u5355\u7684\u91cd\u6784\u5efa\u8bae\u3002 \u7279\u70b9\uff1a \u7b26\u5408 PEP 8 \u89c4\u8303 \u652f\u6301\u81ea\u5b9a\u4e49\u89c4\u5219 \u9519\u8bef\u68c0\u6d4b \u91cd\u6784\u5efa\u8bae IDE \u63d2\u4ef6 pycoa \u793e\u533a\u7ef4\u62a4","title":"pylint"},{"location":"guidelines/project_management/code_lint/#yapf","text":"yapf \u662f Google \u7ef4\u62a4\u7684\u4e00\u4e2a\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u3002\u5b83\u548c\u4e0a\u8ff0\u5de5\u5177\u4e0d\u540c\uff0c \u4f7f\u7528\u57fa\u4e8e clang-format \u7684\u7b97\u6cd5\u5c06\u4ee3\u7801\u91cd\u65b0\u683c\u5f0f\u5316\u4e3a\u590d\u5408\u98ce\u683c\u6307\u5357\u7684\u6700\u4f73\u683c\u5f0f\u3002\u7c7b\u4f3c\u4e8e Golang \u7684 gofmt \u5de5\u5177\u3002 \u6240\u4ee5\u5b83\u548c black \u5de5\u5177\u6709\u70b9\u7c7b\u4f3c\u3002 \u7279\u70b9\uff1a \u7b26\u5408 PEP 8 \u89c4\u8303 \u652f\u6301\u81ea\u5b9a\u4e49\u89c4\u5219 \u81ea\u52a8\u683c\u5f0f\u5316\u4ee3\u7801 IDE \u63d2\u4ef6 google \u793e\u533a\u7ef4\u62a4","title":"yapf"},{"location":"guidelines/project_management/code_lint/#_3","text":"\u867d\u7136\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u6709\u5f88\u591a\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u521d\u8877\u90fd\u662f\u4e3a\u4e86\u8ba9 Python \u4ee3\u7801\u7b26\u5408\u4e00\u81f4\u7684\u98ce\u683c\u548c\u89c4\u8303\u3002\u53ea\u4e0d\u8fc7\u662f\u6709\u7684\u5de5\u5177\u66f4\u6fc0\u8fdb\u800c\u5df2\u3002\u5177\u6709\u826f\u597d\u7f16\u7801\u4e60\u60ef\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u5199\u51fa\u7684\u4ee3\u7801\uff0c \u65e0\u8bba\u4f7f\u7528\u54ea\u79cd\u5de5\u5177\uff0c\u90fd\u80fd\u8f7b\u677e\u901a\u8fc7\u3002\u6240\u4ee5\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u7684\u6700\u7ec8\u76ee\u7684\u662f\u544a\u77e5\u5f00\u53d1\u4eba\u5458\u5c3d\u53ef\u80fd\u9075\u5b88\u4e00\u81f4\u7684\u98ce\u683c\u6765\u7f16\u5199\u4ee3\u7801\u3002 \u8003\u8651\u5230\u4ee3\u7801\u68c0\u6d4b\u5de5\u5177\u7684\u6307\u5bfc\u6027\uff0c\u548c\u529f\u80fd\u6027\uff0c\u63a8\u8350\u4f7f\u7528 pylint \u4f5c\u4e3a\u9996\u9009\u68c0\u6d4b\u5de5\u5177\u3002\u5728\u5b9e\u8df5\u4e2d\u53d1\u73b0\u7531\u4e8e\u67d0\u4e9b\u5e93\u548c pylint \u7684\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u5f53 \u4f7f\u7528 pylint \u6709\u95ee\u9898\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 flake8 \u4f5c\u4e3a\u66ff\u4ee3\u7684\u68c0\u6d4b\u5de5\u5177\u3002","title":"\u4f7f\u7528\u5b9e\u8df5"},{"location":"guidelines/project_management/code_lint/#_4","text":"\u5728\u5b9e\u9645\u4f7f\u7528\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u5c06\u4ee3\u7801\u68c0\u6d4b\u903b\u8f91\u653e\u5728\u81ea\u52a8\u5316\u5de5\u5177\u4e2d\u8fd0\u884c\u3002\u5c06\u903b\u8f91\u653e\u5728 tox \u4e2d\uff0c\u53ef\u4ee5\u5728\u672c\u5730\u5f00\u53d1\u65f6\u65b9\u4fbf\u4f7f\u7528\u3002\u5728 CI \u9636\u6bb5\u53ea\u9700\u8981\u8c03\u7528 tox \u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u4f7f\u7528"},{"location":"guidelines/project_management/code_lint/#tox","text":"# tox (https://tox.readthedocs.io/) is a tool for running tests # in multiple virtualenvs. This configuration file will run the # test suite on all supported python versions. To use it, \"pip install tox\" # and then run \"tox\" from this directory. [tox] isolated_build = True envlist = py{37,38,39,310} isort lint [testenv] deps = pipenv usedevelop = true commands = pipenv sync -d pytest --cov = src [testenv:isort] deps = isort commands = isort . --check-only --diff [testenv:lint] deps = pipenv changedir = {toxinidir} commands = pipenv sync -d pylint src tests","title":"tox"},{"location":"guidelines/project_management/code_lint/#github-action","text":"# This workflow will install Python dependencies, run tests and lint with a single version of Python # For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions name : main on : [ push , pull_request ] jobs : test : runs-on : ${{ matrix.os }} strategy : fail-fast : false matrix : os : [ ubuntu-20.04 ] python : [ \"3.7\" , \"3.8\" , \"3.9\" , \"3.10\" ] steps : - uses : actions/checkout@v2 - name : Set up Python ${{ matrix.python }} on ${{ matrix.os }} uses : actions/setup-python@v2 with : python-version : ${{ matrix.python }} - name : Install dependencies run : | python -m pip install --upgrade pip pip install tox - name : Test with tox run : | tox -e py linting : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 - run : pip install tox - run : | tox -e isort tox -e lint","title":"github action"},{"location":"guidelines/project_management/code_lint/#gitlab-ci","text":"default : image : python:3.9 before_script : - pip install -U pip .base_test : stage : test script : - pip install -U tox - tox -e py stages : - test - build - upload # Due to gitlab ci not support matrix build. So use YAML anchors: # https://forum.gitlab.com/t/matrix-builds-in-ci/9629 test:py37 : image : python:3.7 extends : - .base_test test:py38 : image : python:3.8 extends : - .base_test test:py39 : image : python:3.9 extends : - .base_test test:py310 : image : python:3.10 extends : - .base_test test:lint : stage : test script : - pip install -U tox - tox -e isort - tox -e lint","title":"gitlab-ci"},{"location":"guidelines/project_management/distribution/","text":"\u6784\u5efa\u4e0e\u53d1\u5e03 \u4f5c\u4e3a\u9879\u76ee\u7684\u6700\u540e\u4e00\u73af\uff0c\u5206\u53d1\u81f3\u5173\u91cd\u8981\u3002\u6709\u826f\u597d\u7684\u5206\u53d1\u6d41\u7a0b\uff0c\u4fbf\u4e8e\u4f7f\u7528\u3002\u57fa\u4e8e Python \u81ea\u5e26\u7684\u5206\u53d1\u673a\u5236\u663e\u7136\u662f \u66f4\u597d\u7684\u9009\u62e9\u3002 \u672c\u6587\u5c06\u4ee5\u4e00\u4e2a\u6570\u636e\u5bfc\u51fa\u7684\u9879\u76ee\u8bb2\u8ff0\u3002 1. \u9879\u76ee\u51c6\u5907 \u56e0\u4e3a\u672c\u6587\u7684\u91cd\u70b9\u662f\u5bf9\u6253\u5305\u5206\u53d1\uff0c\u6240\u4ee5\u9879\u76ee\u7684\u529f\u80fd\u5f00\u53d1\u5c31\u4e0d\u4f5c\u4e3a\u91cd\u70b9\u3002 \u9879\u76ee\u6e90\u4ee3\u7801\u53ef\u4ee5\u5728 pythonic-project-samples \u4e2d\u83b7\u53d6\u3002 \u9879\u76ee\u91c7\u7528 src \u76ee\u5f55\u7ed3\u6784\uff0c\u9879\u76ee\u63cf\u8ff0\u4fe1\u606f\u90fd\u5728 setup.cfg \u4e2d\u5b9a\u4e49\u3002 2. \u9879\u76ee\u6253\u5305 2.1 \u6253\u5305\u5de5\u5177 \u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0c Python \u7684\u6253\u5305\u8d70\u4e86\u5f88\u957f\u4e00\u6bb5\u8def\u4e86\uff0c\u4f46\u548c\u5176\u4ed6\u8bed\u8a00\u7684\u6253\u5305\u5de5\u5177\u76f8\u6bd4\uff0c\u4e3a\u4e86\u8fd8\u662f\u6709\u5f88\u957f\u4e00\u6bb5\u8def\u8981\u8d70\u3002 \u5728 PEP-517 \u4e2d\uff0c\u63d0\u5230\u4e86\u5f53\u524d Python \u6784\u5efa\u7cfb\u7edf\u7684\u4e0d\u8db3\u548c\u54cd\u5e94\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5176\u4e3b\u8981\u5c31\u662f\u89e3\u51b3\u8ba9 Python \u652f\u6301\u66f4\u52a0\u7075\u6d3b\u7684\u6784\u5efa\u7cfb\u7edf\u3002 PEP-518 \u5219\u63d0\u51fa\u4e3a\u9879\u76ee\u6307\u5b9a\u4e00\u4e2a\u6700\u5c0f\u7684\u6784\u5efa\u7cfb\u7edf\u3002 2.1.1 setuptools Setuptools \u662f\u5f53\u524d\u4f7f\u7528\u6700\u4e3a\u5e7f\u6cdb\u7684\u6784\u5efa\u5de5\u5177\uff0c\u73b0\u5728\u7edd\u5927\u591a\u6570\u5de5\u5177 \u90fd\u5728\u4f7f\u7528 setuptools \u6784\u5efa\u9879\u76ee\u3002\u5b83\u662f disutils \u7684\u589e\u5f3a\u7248\u3002 Setuptools \u53ef\u4ee5\u8bf4\u662f\u73b0\u5728\u6700\u6210\u719f\u7684\u6784\u5efa\u5de5\u5177\u4e86\uff0c\u652f\u6301\u5e38\u7528\u7279\u6027\u5982\u4e0b\uff1a \u652f\u6301\u6253\u5305\u8d44\u6e90\u6587\u4ef6 \u652f\u6301\u6253\u5305\u6570\u636e\u6587\u4ef6 \u652f\u6301 CPython \u7f16\u8bd1\u5668 \u652f\u6301 zip \u538b\u7f29\u9009\u9879 \u652f\u6301\u5305\u547d\u540d\u7a7a\u95f4 \u652f\u6301\u5b89\u88c5\u4f9d\u8d56 \u652f\u6301\u53ef\u9009\u5b89\u88c5\u4f9d\u8d56 \u652f\u6301\u6307\u5b9a Python \u7248\u672c \u652f\u6301\u6ce8\u518c Setuptools \u5b50\u547d\u4ee4 \u652f\u6301\u5165\u53e3\u70b9\uff08Entry Points\uff09 \u7531\u4e8e Setuptools \u662f\u6700\u6210\u719f\u7684\u6784\u5efa\u5de5\u5177\uff0c\u6240\u4ee5\u4e0e\u5176\u5b83\u6784\u5efa\u5de5\u5177\u5bf9\u6bd4\u6765\u770b\uff0c\u5b83\u7684\u7f3a\u70b9\u53ef\u80fd\u5c31\u662f\u73b0\u5728\u7684\u914d\u7f6e\u4ecd\u9700\u8981\u5b9a\u4e49\u5728 setup.cfg \u6216\u8005 setup.py \u6587\u4ef6\u4e2d\uff0c\u800c\u4e0d\u662f\u5b9a\u4e49\u5728 pyproject.toml \u6587\u4ef6\u4e2d\u3002 \u7f3a\u70b9\uff1a \u4e0d\u652f\u6301\u5728 pyproject.toml \u4e2d\u5b9a\u4e49\u914d\u7f6e \u4e0d\u652f\u6301\u53d1\u5e03\uff0c\u9700\u8981\u914d\u5408 twine \u3002 2.1.1.1 \u793a\u4f8b\u914d\u7f6e pyproject.toml : [build-system] requires = [ \"setuptools\" , \"wheel\" ] build-backend = \"setuptools.build_meta\" \u589e\u52a0 setup.py \u6216\u8005 setup.cfg \u4e24\u79cd\u6709\u5176\u4e00\u5373\u53ef\u3002\u7136\u540e\u5728\u6587\u4ef6\u4e2d\u5b9a\u4e49\u914d\u7f6e\u3002 \u63a8\u8350\u4f7f\u7528 setup.cfg \u3002 setup.cfg [metadata] name = mypackage version = 0.0.1 [options] packages = mypackage install_requires = requests importlib; python_version = = \"3.7\" setup.py from setuptools import setup setup ( name = 'mypackage' , version = '0.0.1' , packages = [ 'mypackage' ], install_requires = [ 'requests' , 'importlib; python_version == \"2.6\"' , ], ) \u6b64\u65f6\u4f60\u7684\u9879\u76ee\u7ed3\u6784\u5e94\u5728\u662f\u8fd9\u6837\u7684\uff1a ~/mypackage/ pyproject.toml setup.cfg # or setup.py mypackage/__init__.py 2.1.1.2 \u901a\u7528\u65b9\u5f0f\u6784\u5efa \u5b89\u88c5 PEP-517 \u89c4\u8303\u7684\u5305\u751f\u6210\u5668 build \u548c setuptools \uff0c pip install build setuptools \u3002 \u7136\u540e\u5f00\u59cb\u6784\u5efa python -m build wheel \u3002 2.1.1.3 Setuptools \u6784\u5efa \u6b64\u65b9\u6cd5\u662f\u5728\u4e0d\u5b89\u88c5 build \u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u3002 \u5982\u679c\u4f60\u53ea\u662f\u7528\u4e86 setup.cfg \u914d\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u8fd8\u9700\u8981\u589e\u52a0\u4e00\u4e2a setup.py \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a setup.py \uff1a from setuptools import setup setup () \u5982\u679c\u4f60\u4ec5\u4f7f\u7528\u4e86 setup.py \u914d\u7f6e Setuptools \u7684\u8bdd\uff0c\u53ef\u4ee5\u4e0d\u9700\u8981 setup.cfg \u6587\u4ef6\u3002 \u5b89\u88c5\u4f9d\u8d56 pip install setuptools \uff0c\u7136\u540e\u8fdb\u884c\u6784\u5efa python setup.py bdist_wheel \u3002 2.1.1.4 twine \u53d1\u5e03 \u7531\u4e8e setuptools \u4e0d\u652f\u6301\u53d1\u5e03\u529f\u80fd\uff0c\u6240\u4ee5\u9700\u8981\u501f\u52a9\u5176\u4ed6\u5de5\u5177\u5c06\u5305\u53d1\u5e03\u4e2d\u592e\u4ed3\u5e93\u3002 Twine \u662f Pypa \u56e2\u961f\u7ef4\u62a4\u7684\u4e00\u4e2a\u5c06 Python \u5305\u53d1\u5e03\u5230 Pypi \u7684\u5de5\u5177\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pip install twine \u3002 \u4f7f\u7528 Setuptools \u6784\u5efa\u9879\u76ee\uff0c\u6784\u5efa\u7ed3\u679c\u9ed8\u8ba4\u662f\u653e\u5728\u9879\u76ee\u6839\u76ee\u5f55\u7684 ./dist \u4e0b\u9762 \u3002 \u53d1\u5e03\u9879\u76ee\u5230 Pypi \uff1a twine upload dist/* 2.1.2 flit Flit \u662f\u4e00\u4e2a\u8f7b\u91cf\u7b80\u5355\u7684 Python \u6784\u5efa\u5de5\u5177\uff0c\u5b83\u7684\u51fa\u73b0\u4e5f\u53ef\u4ee5\u8bf4\u662f\u5212\u65f6\u4ee3\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u51fa\u73b0\u4fc3\u8fdb\u4e86\u65b0\u6807\u51c6\u7684\u53d1\u73b0\uff0c \u5982 PEP-517 \u548c PEP-518 \u3002 Flit \u5177\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u7b80\u5355\u8f7b\u91cf \u652f\u6301\u53d1\u5e03 \u652f\u6301\u6253\u5305\u6570\u636e\u6587\u4ef6 \u652f\u6301\u5b50\u5305 \u652f\u6301\u590d\u5236\u6784\u5efa \u652f\u6301\u5b89\u88c5\u4f9d\u8d56 \u652f\u6301\u53ef\u9009\u5b89\u88c5\u4f9d\u8d56 \u652f\u6301\u6307\u5b9a Python \u7248\u672c \u652f\u6301\u6ce8\u518c Flit \u5b50\u547d\u4ee4 \u652f\u6301\u5165\u53e3\u70b9\uff08Entry Points\uff09 \u652f\u6301 pyproject.toml \u6587\u4ef6\u5b9a\u4e49\u914d\u7f6e \u7f3a\u70b9\uff1a \u4e0d\u652f\u6301 CPython \u7f16\u8bd1 \u4e0d\u652f\u6301 zip \u538b\u7f29\u9009\u9879 2.1.2.1 \u793a\u4f8b\u914d\u7f6e pyproject.toml \uff1a [build-system] requires = [ \"flit_core >=2,<4\" ] build-backend = \"flit_core.buildapi\" [tool.flit.metadata] module = \"foobar\" author = \"Sir Robin\" author-email = \"robin@camelot.uk\" home-page = \"https://github.com/sirrobin/foobar\" 2.1.2.2 \u901a\u7528\u65b9\u5f0f\u6784\u5efa \u5b89\u88c5 PEP-517 \u89c4\u8303\u7684\u5305\u751f\u6210\u5668 build \u548c flit \uff0c pip install build flit \u3002 \u7136\u540e\u5f00\u59cb\u6784\u5efa python -m build wheel \u3002 2.1.2.3 flit \u6784\u5efa \u6b64\u65b9\u6cd5\u662f\u5728\u4e0d\u5b89\u88c5 build \u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pip install flit \uff0c\u7136\u540e\u8fdb\u884c\u6784\u5efa flit build --format wheel \u3002 2.1.2.4 flit \u53d1\u5e03 flit \u7684\u53d1\u5e03\u547d\u4ee4\u4f1a\u81ea\u884c\u5148\u6784\u5efa wheel \u548c sdist \u5305\uff0c\u7136\u540e\u4e0a\u4f20\u5230 Pypi \u6216\u8005\u5176\u4ed6\u4ed3\u5e93\u3002 flit build --format wheel 2.1.3 poetry python-poetry \u662f\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684\u5de5\u5177\u3002\u5b83\u662f\u4e00\u4e2a\u6784\u5efa\u5de5\u5177\u7684\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u4f9d\u8d56\u7ba1\u7406\u5de5\u5177\u3002 \u5728\u6784\u5efa\u4e0a\uff0c\u540c\u6837\u9075\u5faa\u4e86 PEP-517 \u89c4\u8303\uff0c\u5728\u4f9d\u8d56\u7ba1\u7406\u4e0a\uff0c\u6709\u70b9\u7c7b\u4f3c\u4e8e Pipenv \u3002 python-poetry \u5177\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u652f\u6301\u73af\u5883\u7ba1\u7406 \u652f\u6301\u53d1\u5e03 \u652f\u6301 shell \u63d2\u4ef6\uff0c\u5982 bash \u3001 Fish \u3001 Zsh \u652f\u6301\u6253\u5305\u6570\u636e\u6587\u4ef6 \u652f\u6301\u6ce8\u518c poetry \u5b50\u547d\u4ee4 \u652f\u6301 Setuptools \u7684\u5165\u53e3\u70b9\uff08Entry Points\uff09 \u652f\u6301\u5305\u547d\u540d\u7a7a\u95f4 \u652f\u6301\u5b89\u88c5\u4f9d\u8d56 \u652f\u6301\u53ef\u9009\u5b89\u88c5\u4f9d\u8d56 \u652f\u6301\u5728 pyproject.toml \u4e2d\u5b9a\u4e49\u914d\u7f6e \u7f3a\u70b9\uff1a \u4e0d\u652f\u6301 CPython \u7f16\u8bd1 \u4e0d\u652f\u6301 zip \u538b\u7f29\u9009\u9879 2.1.3.1 \u793a\u4f8b\u914d\u7f6e [build-system] requires = [ \"poetry_core>=1.0.0\" ] build-backend = \"poetry.core.masonry.api\" [tool.poetry] name = \"poetry-demo\" version = \"0.1.0\" description = \"\" authors = [ \"S\u00e9bastien Eustace <sebastien@eustace.io>\" ] [tool.poetry.dependencies] python = \"*\" [tool.poetry.dev-dependencies] pytest = \"^3.4\" 2.2 \u6253\u5305\u6784\u5efa \u8003\u8651\u5230\u65b0\u5de5\u5177\u7684\u529f\u80fd\u6027\uff0c\u73b0\u9636\u6bb5\u4ecd\u7136\u9009\u7528 setuptools \u4f5c\u4e3a\u6784\u5efa\u5de5\u5177\u3002 \u4e3a\u9879\u76ee\u6307\u5b9a\u6240\u9700\u8981\u4f7f\u7528\u7684\u6784\u5efa\u5de5\u5177\u3002\u521b\u5efa pyproject.toml \u6587\u4ef6\uff0c\u589e\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a [build-system] requires = [ \"setuptools\" , \"wheel\" ] build-backend = \"setuptools.build_meta\" \u521b\u5efa setup.cfg \u6587\u4ef6\uff0c\u589e\u52a0 Setuptools \u914d\u7f6e\u3002 [metadata] name = file2mongo version = attr: file2mongo.__version__ author = demo author_email = demo@example.com description = File data to MongoDB keywords = file2mongo long_description = file: README.md long_description_content_type = text/markdown classifiers = Operating System :: OS Independent Programming Language :: Python :: 3.7 [options] python_requires > = 3.7 include_package_data = True packages = find: package_dir = = src install_requires = dynaconf click pymongo [options.packages.find] where = src exclude = tests* docs # https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html [options.entry_points] console_scripts = file2mongo = file2mongo.cmdline:main # Packaging project data in module file2mongo. # https://setuptools.readthedocs.io/en/latest/userguide/datafiles.html?highlight=package_data [options.package_data] file2mongo.config = settings.yml # Copy data for user from project when pip install. # The relative path is prefix `sys.prefix` . eg: `/usr/local/`. # Path and data will remove When pip uninstall. # https://docs.python.org/3/distutils/setupscript.html#installing-additional-files [options.data_files] etc/file2mongo = src/file2mongo/config/settings.yml 2.2.1 metadata metadata \u662f\u9879\u76ee\u57fa\u672c\u63cf\u8ff0\u4fe1\u606f\uff0c\u6709\u9879\u76ee\u540d\u79f0\uff0c\u7248\u672c\u53f7\uff0c\u4f5c\u8005\u76f8\u5173\u4fe1\u606f\uff0c\u8bc1\u4e66\u7b49\u3002 \u4e3a\u4e86\u8ba9\u522b\u4eba\u66f4\u7cbe\u51c6\u7684\u83b7\u53d6\u4f60\u7684\u5305\u7684\u4fe1\u606f\uff0c\u5e94\u8be5\u81f3\u5c11\u5305\u542b\u5982\u4e0b\uff1a name \uff1a \u9879\u76ee\u540d\u79f0 version \uff1a \u7248\u672c\u53f7\uff0c\u652f\u6301\u5b57\u7b26\u4e32\uff0c\u6587\u4ef6\u5185\u5bb9\uff0c\u6216\u8005\u9879\u76ee\u5305\u4e2d\u7684\u53d8\u91cf\u3002\u5982\u679c\u9700\u8981\u4f7f\u7528\u5305\u4e2d\u7684\u53d8\u91cf\uff0c\u5219 Setuptools \u7684\u7248\u672c\u53f7\u9700\u8981\u5927\u4e8e\u7b49\u4e8e 39.2.0 url \uff1a \u9879\u76ee\u5730\u5740 author \uff1a \u9879\u76ee\u4f5c\u8005 author_email \uff1a \u4f5c\u8005\u90ae\u7bb1 classifiers \uff1a \u5206\u7c7b\u3002\u6709\u52a9\u4e8e\u5728 Pypi \u4e2d\u4f7f\u7528\u6761\u4ef6\u8fc7\u6ee4\u67e5\u627e\u9879\u76ee\u3002 license \uff1a \u8bb8\u53ef\u8bc1\u3002\u53ef\u4ee5\u4fdd\u62a4\u4f60\u7684\u77e5\u8bc6\u4ea7\u6743\u3002 description \uff1a \u9879\u76ee\u7b80\u8981\u63cf\u8ff0\u3002 long_description \uff1a \u9879\u76ee\u63cf\u8ff0\uff0c\u652f\u6301\u5b57\u7b26\u4e32\u548c\u6587\u4ef6(Markdown \u6587\u4ef6\u6216 RST \u6587\u4ef6) keywords \uff1a \u9879\u76ee\u5173\u952e\u5b57\uff0c\u6709\u52a9\u4e8e\u6a21\u7cca\u641c\u7d22\u5339\u914d\u3002 2.2.1.1 \u7248\u672c\u53f7 Python \u9879\u76ee\u7248\u672c\u89c4\u8303\u53ef\u4ee5\u53c2\u8003 PEP 440 -- Version Identification and Dependency Specification \uff0c Setuptools \u672c\u8eab\u5df2\u7ecf\u652f\u6301\u591a\u79cd\u7248\u672c\u53f7\u63a7\u5236\u65b9\u6848\u3002\u4f46\u63a8\u8350\u4f7f\u7528 \u8bed\u4e49\u5316\u7248\u672c\u65b9\u6848 \u3002 \u5bf9\u4e8e Setuptools \u652f\u6301\u7684\u7248\u672c\u65b9\u6848\u53ef\u4ee5\u53c2\u8003 Specifying Your Project\u2019s Version \u3002 \u6807\u8bb0\u548c \u201d\u6bcf\u65e5\u6784\u5efa\u201c \u6216 \u201d\u5feb\u7167\u201c \u7248\u672c \uff1a \u5f53\u4e00\u7ec4\u76f8\u5173\u7684\u9879\u76ee\u6b63\u5728\u5f00\u53d1\u65f6\uff0c\u8ddf\u8e2a\u6bd4\u901a\u5e38\u7528\u4e8e\u201c\u7a33\u5b9a\u201d\u53d1\u884c\u7248\u7684\u66f4\u7ec6\u7c92\u5ea6\u7248\u672c\u589e\u91cf\u53ef\u80fd\u5f88\u91cd\u8981\u3002\u800c\u7a33\u5b9a\u7248\u672c\u53ef\u4ee5\u7528\u5e26\u70b9\u94fe\u63a5\u7684\u6570\u5b57\u548c alpha/beta/etc \u6765\u8868\u793a\u3002 \u72b6\u6001\u4ee3\u7801\u3001\u9879\u76ee\u7684\u5f00\u53d1\u7248\u672c\u901a\u5e38\u9700\u8981\u901a\u8fc7\u4fee\u8ba2\u3001\u6784\u5efa\u53f7\u751a\u81f3\u6784\u5efa\u65e5\u671f\u6765\u8ddf\u8e2a\u3002\u5f53\u5f00\u53d1\u4e2d\u7684\u9879\u76ee\u9700\u8981\u76f8\u4e92\u5f15\u7528\u65f6\uff0c\u8fd9\u4e00\u70b9\u5c24\u5176\u6b63\u786e\uff0c\u56e0\u6b64\u53ef\u80fd\u786e\u5b9e\u9700\u8981\u67d0\u4e2a\u4e1c\u897f\u7684\u6700\u65b0\u7248\u672c! \u4e3a\u4e86\u652f\u6301\u8fd9\u4e9b\u573a\u666f\uff0cSetuptools \u5141\u8bb8\u60a8\u901a\u8fc7\u5728\u9879\u76ee\u7684\u201c\u5b98\u65b9\u201d\u7248\u672c\u6807\u8bc6\u7b26\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a\u4ee5\u4e0b\u5185\u5bb9\u6765\u201c\u6807\u8bb0\u201d\u6e90\u4ee3\u7801\u548cegg\u53d1\u884c\u7248: \u624b\u52a8\u6307\u5b9a\u7684\u9884\u53d1\u5e03\u6807\u8bb0\uff0c\u4f8b\u5982\u201cbuild\u201d\u6216\u201cdev\u201d\uff0c\u6216\u624b\u52a8\u6307\u5b9a\u7684\u53d1\u5e03\u540e\u6807\u8bb0\uff0c\u4f8b\u5982\u6784\u5efa\u6216\u4fee\u8ba2\u53f7\uff08 --tag-build=STRING , -bSTRING \uff09 \u7528 8 \u4e2a\u5b57\u7b26\u8868\u793a\u7684\u6784\u5efa\u65e5\u671f\uff08 --tag-date \uff0c -d \uff09\u4f5c\u4e3a postrelease \u6807\u8bb0 \u53ef\u4ee5\u5728\u751f\u6210\u6bcf\u65e5\u6784\u5efa\u6216\u5feb\u7167\u7684sdist\u6216bdist\u547d\u4ee4\u4e4b\u524d\u6dfb\u52a0egg_info\u548c\u6240\u9700\u7684\u9009\u9879\u6765\u6dfb\u52a0\u8fd9\u4e9b\u6807\u7b7e\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 egg_info \u547d\u4ee4\u7684\u4ee5\u4e0b\u90e8\u5206\u3002 \uff08\u53e6\u5916\uff0c\u4e3a\u4e86\u786e\u4fdd\u4f9d\u8d56\u9879\u5904\u7406\u5de5\u5177\u5c06\u77e5\u9053\u60a8\u9879\u76ee\u7684\u54ea\u4e2a\u7248\u672c\u6bd4\u5176\u4ed6\u7248\u672c\u65b0\uff0c\u5728\u53d1\u5e03\u9879\u76ee\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u53c2\u9605\u4e0a\u9762\u7684 \u6307\u5b9a\u9879\u76ee\u7684\u7248\u672c \u90e8\u5206\u3002\uff09 \u6700\u540e\uff0c\u5982\u679c\u60a8\u7ecf\u5e38\u521b\u5efa\u6784\u5efa\uff0c\u5e76\u4e14\u5728\u53ef\u4e0b\u8f7d\u7684\u4f4d\u7f6e\u6784\u5efa\u5b83\u4eec\uff0c\u6216\u8005\u5c06\u5b83\u4eec\u590d\u5236\u5230\u5206\u53d1\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u8fd8\u5e94\u8be5\u68c0\u6267\u884c rotate \u547d\u4ee4\uff0c\u8be5\u547d\u4ee4\u4f1a\u81ea\u52a8\u5220\u9664\u9664 N \u4e2a\u6700\u8fd1\u4fee\u6539\u7684\u4e0e glob \u6a21\u5f0f\u5339\u914d\u7684\u53d1\u884c\u7248\u4e4b\u5916\u7684\u6240\u6709\u53d1\u884c\u7248\u3002\u64cd\u4f5c\u5982\u4e0b: setup.py egg_info -rbDEV bdist_egg rotate -m.egg -k3 \u6784\u5efa\u4e00\u4e2a egg \uff0c\u5176\u7248\u672c\u4fe1\u606f\u5305\u62ec\u201cDEV-rNNNN\u201d(\u5176\u4e2dNNNN\u662f\u8d44\u6e90\u6811\u7684\u6700\u65b0\u4fee\u8ba2)\uff0c\u7136\u540e\u4ece\u53d1\u884c\u76ee\u5f55\u4e2d\u5220\u9664\u9664\u6700\u8fd1\u6784\u5efa\u7684\u4e09\u4e2aegg\u6587\u4ef6\u4e4b\u5916\u7684\u6240\u6709egg\u6587\u4ef6\u3002 \u5982\u679c\u60a8\u5fc5\u987b\u7ba1\u7406\u591a\u4e2a\u5305\u7684\u81ea\u52a8\u5316\u6784\u5efa\uff0c\u6bcf\u4e2a\u5305\u90fd\u6709\u4e0d\u540c\u7684\u6807\u8bb0\u548c\u6eda\u52a8\u7b56\u7565\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u8fd8\u9700\u8981\u8fd0\u884c alias \u547d\u4ee4\uff0c \u8be5\u547d\u4ee4\u5141\u8bb8\u6bcf\u4e2a\u5305\u5b9a\u4e49\u4e00\u4e2a\u522b\u540d\uff0c\u5c31\u50cfdaily \u4e00\u6837\uff0c\u5b83\u5c06\u6267\u884c\u5fc5\u8981\u7684\u6807\u8bb0\u3001\u6784\u5efa\u548c\u6eda\u52a8\u547d\u4ee4\u3002\u7136\u540e\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6216 cron \u4f5c\u4e1a\u5c31\u53ef\u4ee5\u6bcf\u5929\u5728\u6bcf\u4e2a\u9879\u76ee\u76ee\u5f55\u4e2d\u8fd0\u884c setup.py \u3002 (\u60a8\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u7ad9\u70b9\u8303\u56f4\u6216\u6bcf\u4e2a\u7528\u6237\u7684\u6bcf\u65e5\u522b\u540d\u7684\u9ed8\u8ba4\u7248\u672c\uff0c\u8fd9\u6837\u6ca1\u6709\u5b9a\u4e49\u81ea\u5df1\u7684\u9879\u76ee\u5c31\u53ef\u4ee5\u4f7f\u7528\u9002\u5f53\u7684\u9ed8\u8ba4\u503c\u3002) \u5236\u4f5c\u5b98\u65b9\uff08\u975e\u5feb\u7167\uff09\u7248\u672c \uff1a \u5f53\u60a8\u53d1\u5e03\u6b63\u5f0f\u7248\u672c\uff0c\u521b\u5efa\u6e90\u4ee3\u7801\u6216\u4e8c\u8fdb\u5236\u53d1\u884c\u7248\u65f6\uff0c\u9700\u8981\u8986\u76d6setup\u4e2d\u7684\u6807\u8bb0\u8bbe\u7f6e\u3002\u8fd9\u6837\u5c31\u4e0d\u7528\u6ce8\u518c\u50cf foobar-0.7a1.dev-r34832 \u8fd9\u6837\u7684\u7248\u672c\u4e86\u3002\u5982\u679c\u4e3b\u5206\u652f\u4e0a\u8fdb\u884c\u5f00\u53d1\uff0c \u5e76\u4e14\u4e3a\u53d1\u884c\u7248\u4f7f\u7528\u6807\u8bb0\u6216\u5206\u652f\uff0c\u90a3\u4e48\u5c31\u5f88\u5bb9\u6613\u505a\u5230\u53ea\u5728\u5206\u652f\u6216\u6807\u8bb0\u53d1\u884c\u7248\u4e4b\u540e\u66f4\u6539 setup.cfg\uff0c\u8fd9\u6837\u4e3b\u5206\u652f\u4ecd\u7136\u4f1a\u751f\u6210\u5f00\u53d1\u5feb\u7167\u3002 \u53e6\u5916\uff0c\u5982\u679c\u6ca1\u6709\u4e3a\u53d1\u5e03\u7248\u672c\u8fdb\u884c\u5206\u652f\uff0c\u60a8\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e0a\u8986\u76d6\u9ed8\u8ba4\u7684\u7248\u672c\u9009\u9879\uff0c\u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5: python setup.py egg_info -Db \"\" sdist bdist_egg \u8be5\u547d\u4ee4\u7684\u7b2c\u4e00\u90e8\u5206( egg_info -Db \"\" )\u5c06\u5728\u521b\u5efa\u6e90\u548c\u4e8c\u8fdb\u5236 egg \u4e4b\u524d\u8986\u76d6\u5df2\u914d\u7f6e\u7684\u6807\u8bb0\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u547d\u4ee4\u5c06\u4f7f\u7528 setup.py \u4e2d\u7684\u666e\u901a\u7248\u672c\uff0c\u800c\u4e0d\u6dfb\u52a0\u6784\u5efa\u6307\u5b9a\u5b57\u7b26\u4e32\u3002 \u5f53\u7136\uff0c\u5982\u679c\u60a8\u7ecf\u5e38\u8fd9\u6837\u505a\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u4e3a\u8fd9\u4e2a\u64cd\u4f5c\u521b\u5efa\u4e00\u4e2a\u4e2a\u4eba\u522b\u540d\uff0c\u4f8b\u5982: python setup.py alias -u release egg_info -Db \"\" \u7136\u540e\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528\u5b83\uff1a python setup.py release sdist bdist_egg \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u521b\u5efa\u66f4\u590d\u6742\u7684\u522b\u540d\u6765\u5b8c\u6210\u4e0a\u8ff0\u6240\u6709\u64cd\u4f5c\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 egg_info \u548c alias \u547d\u4ee4\u4e0b\u9762\u7684\u90e8\u5206\u3002 2.2.2 options \u6b64\u8282\u70b9\u5185\u5bb9\u867d\u7136\u4e3a\u53ef\u9009\uff0c\u4f46\u4e3a\u4e86\u9879\u76ee\u7684\u5b8c\u6574\u6027\uff0c\u6709\u4e9b\u5185\u5bb9\u8fd8\u662f\u9700\u8981\u7684\u3002 install_requires \uff1a \u4f7f\u7528 Pip \u5b89\u88c5\u65f6\u9700\u8981\u7684\u4f9d\u8d56\uff0c\u5373\u9879\u76ee\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u4f9d\u8d56\u7684\u5305 extras_require \uff1a \u4f7f\u7528 Pip \u5b89\u88c5\u65f6\u7684\u53ef\u9009\u4f9d\u8d56\uff0c\u4e00\u822c\u662f\u5728\u63d0\u4f9b\u6269\u5c55\u6216\u8005\u53ef\u9009\u529f\u80fd\u6240\u6b32\u8981\u7684\u5305 python_requires \uff1a \u9879\u76ee\u4f7f\u7528\u65f6\u6240\u9700\u8981\u7684 Python \u7248\u672c\u3002 entry_points \uff1a \u5165\u53e3\u70b9\u5185\u5bb9\uff0c\u5982\u751f\u6210\u547d\u4ee4\u884c\u811a\u672c\uff0c\u6216\u8005\u6ce8\u518c\u6a21\u5757 packages \uff1a \u9879\u76ee\u7684\u5305\uff0c\u6216\u8005\u4f7f\u7528 find: \u5728 package_dir \u4e2d\u81ea\u52a8\u52a0\u8f7d package_dir \uff1a \u9879\u76ee\u5305\u6240\u5728\u7684\u4f4d\u7f6e include_package_data \uff1a \u662f\u5426\u6253\u5305\u6570\u636e\u6587\u4ef6 package_dir \uff1a \u5305\u542b\u6570\u636e\u6587\u4ef6\u7684\u5305\u6240\u5728\u4f4d\u7f6e data_files \uff1a \u5728\u5b89\u88c5\u65f6\uff0c\u5199\u5165\u5230\u7cfb\u7edf\u5176\u4ed6\u4f4d\u7f6e\u7684\u6570\u636e\u6587\u4ef6 exclude_package_data \uff1a \u6392\u9664\u7684\u6570\u636e\u6587\u4ef6 2.2.2.1 \u5165\u53e3\u70b9 EntryPoints Entry-points \u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u6ce8\u518c\u547d\u4ee4\u884c\u811a\u672c\uff0c\u6216\u8005\u63d0\u4f9b\u4e00\u79cd\u63d2\u4ef6\u52a0\u8f7d\u673a\u5236\u3002 \u6ce8\u518c\u547d\u4ee4\u884c \uff1a Setuptools \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u6b63\u786e\u7684\u6269\u5c55\u540d\u81ea\u52a8\u751f\u6210\u811a\u672c\uff0c\u751a\u81f3\u4f1a\u5728 Windows \u4e0a\u521b\u5efa\u4e00\u4e2a .exe \u6587\u4ef6\u3002\u4f7f\u7528\u6b64\u7279\u6027\u7684\u65b9\u6cd5\u662f\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49 entry points \uff0c \u6307\u51fa\u751f\u6210\u7684\u811a\u672c\u5e94\u8be5\u5bfc\u5165\u548c\u8fd0\u884c\u4ec0\u4e48\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e24\u4e2a\u540d\u4e3a foo \u548c bar \u7684\u63a7\u5236\u53f0\u811a\u672c\u548c\u4e00\u4e2a\u540d\u4e3a baz \u7684 GUI \u811a\u672c\uff0c \u5982\u4e0b\u793a\u4f8b\uff1a setup ( # other arguments here... entry_points = { 'console_scripts' : [ 'foo = my_package.some_module:main_func' , 'bar = other_module:some_func' , ], 'gui_scripts' : [ 'baz = my_package_gui:start_func' , ] } ) \u5f53\u8be5\u9879\u76ee\u5b89\u88c5\u5728\u975e Windows \u5e73\u53f0\u4e0a(\u4f7f\u7528 setup.py install \u3001 setup.py develop \u6216\u4f7f\u7528 pip install )\u65f6\uff0c\u5c06\u5b89\u88c5\u4e00\u7ec4 foo \u3001 bar \u548c baz \u811a\u672c\uff0c \u4ece\u6307\u5b9a\u7684\u6a21\u5757\u5bfc\u5165 main_func \u548c some_func \u3002\u6307\u5b9a\u7684\u51fd\u6570\u5728\u6ca1\u6709\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u88ab\u8c03\u7528\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u88ab\u4f20\u9012\u7ed9 sys.exit() \uff0c\u56e0\u6b64\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u7ea7\u522b\u65e5\u5fd7\u6216\u4e00\u6761\u6d88\u606f\u6765\u6253\u5370\u5230 stderr \u3002 \u5728 Windows \u5e73\u53f0\u4e0a\uff0c\u5c06\u521b\u5efa foo.exe \uff0c bar.exe \u548c baz.exe \u542f\u52a8\u7a0b\u5e8f\uff0c\u548c foo.py \uff0c bar.py \u548c baz.pyw \u6587\u4ef6\u3002 .exe \u7a0b\u5e8f\u901a\u8fc7\u67e5\u627e\u6b63\u786e\u7248\u672c\u7684 Python \u6765\u8fd0\u884c .py \u548c .pyw \u6587\u4ef6\u3002 \u53ef\u4ee5\u6839\u636e\u9700\u6c42\u5b9a\u4e49\u4efb\u610f\u6570\u91cf\u7684 console script \u548c gui script \u5165\u53e3\u70b9\uff0c\u6bcf\u4e2a\u5165\u53e3\u70b9\u90fd\u53ef\u4ee5\u6307\u5b9a\u6240\u4f9d\u8d56\u7684 \u201c\u9644\u52a0\u529f\u80fd\u201d \uff0c\u8fd9\u4e9b\u4f9d\u8d56\u4f1a\u5728\u8fd0\u884c\u65f6\u6dfb\u52a0\u5230 sys.path \u4e2d\u3002 \u66f4\u591a \u201c\u9644\u52a0\u529f\u80fd\u201d \u4fe1\u606f\u8bf7\u53c2\u8003 \u58f0\u660e\u9644\u52a0\u5185\u5bb9 \u90e8\u5206\u3002 entry points \u7684\u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u8003 \u670d\u52a1\u548c\u63d2\u4ef6\u7684\u52a8\u6001\u53d1\u73b0 \u7684\u90e8\u5206\u3002 2.2.2.2 \u6253\u5305\u6570\u636e\u6587\u4ef6 Setuptools \u652f\u6301 \u6253\u5305\u6570\u636e\u6587\u4ef6 \uff0c\u8fd9\u6837\u53ef\u4ee5 \u5f88\u65b9\u4fbf\u7684\u628a\u5305\u4e2d\u7684\u6570\u636e\u6587\u4ef6\u9884\u5148\u6253\u5305\uff0c\u5728\u5206\u53d1\u7684\u65f6\u5019\u76f4\u63a5\u4f7f\u7528\u3002\u5e38\u89c1\u7684\u6587\u4ef6\u5c31\u662f\u914d\u7f6e\u4e86\u3002 \u65b9\u6cd5\u4e00 \uff1a [options] include_package_data = True include_package_data \u4f1a\u544a\u8bc9 Setuptools \u901a\u8fc7 distutils \u7684 MANIFEST.in \u6587\u4ef6\u6307\u5b9a\u6570\u636e\u6587\u4ef6\u3002 \u65b9\u6cd5\u4e8c \uff1a [options.package_data] \"\" = \"*.txt\" \"*.rst\" \"hello\" = \"*.msg\" \u4f7f\u7528 package_data \u53ef\u4ee5\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u7d22\u8981\u5305\u542b\u7684\u6570\u636e\u6587\u4ef6\u3002\u7b2c\u4e00\u4e2a\u914d\u7f6e\u662f\u544a\u8bc9 Setuptools \u5728\u901a\u8fc7\u5168\u5c40\u6a21\u5f0f\u9012\u5f52\u5339\u914d\u4ee5 .txt \u548c .rst \u7ed3\u5c3e \u7684\u6240\u6709\u6587\u4ef6\uff0c\u7b2c\u4e8c\u4e2a\u914d\u7f6e\u662f\u67e5\u627e hello \u4e0b\u6240\u6709 .msg \u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5e76\u5728\u6253\u5305\u662f\u5305\u542b\u5339\u914d\u5230\u7684\u6240\u6709\u6570\u636e\u6587\u4ef6\u3002 \u65b9\u6cd5\u4e09\uff08SRC \u6a21\u5f0f\uff09 \uff1a [options] packages = find: package_dir = = src [options.packages.find] where = src [options.package_data] \"\" = \"*.txt\" \"*.rst\" \"hello\" = \"*.msg\" \u5f53\u4f7f\u7528 SRC \u9879\u76ee\u7ed3\u6784 \u65f6\uff0c\u9700\u8981\u91c7\u7528\u4e0a\u8ff0\u914d\u7f6e\u3002 packages = find: \u4e2d\u544a\u8bc9 Setuptools \u91c7\u7528 setuptools.find_packages \u65b9\u6cd5\u67e5\u627e\u9879\u76ee\u5305\u7ed3\u6784\u6240\u5728\u4f4d\u7f6e\uff0c options.packages.find \u4e2d\u4f1a\u914d\u7f6e setuptools.find_packages \u65b9\u6cd5\u7684\u53c2\u6570\uff0c where = src \u5219\u6307\u5b9a\u9879\u76ee\u7684\u5305\u5728 src \u4e0b\u3002 package_dir \u544a\u8bc9 distutils \u5305\u5728 src \u4e0b\uff0c\u56e0\u6b64 options.package_data \u4e2d\u7684\u914d\u7f6e\u90fd\u4f1a\u5728 src \u4e0b\u7684\u5305\u4e2d\u67e5\u627e\u3002 2.2.2.3 \u5b89\u88c5\u9644\u52a0\u6587\u4ef6 data_files \u53ef\u4ee5\u6307\u5b9a\u9700\u8981\u5b89\u88c5\u5230\u7cfb\u7edf\u4e2d\u7684\u5176\u4ed6\u6587\u4ef6\uff0c\u5982\u914d\u7f6e\u6587\u4ef6\u3001\u6d88\u606f\u76ee\u5f55\uff0c\u6570\u636e\u6587\u4ef6\u7b49\u3002 [options] packages = find: package_dir = = src [options.packages.find] where = src [options.package_data] my_package.config = settings.yml my_package.data = users.csv [options.data_files] /etc/my_package = src/my_package/config/settings.yml share/my_package/data = src/my_package/data/users.csv options.data_files \u4e4b\u524d\u7684\u51e0\u9879\u914d\u7f6e\u544a\u8bc9 Setuptools \u5728\u6784\u5efa\u7684\u65f6\u5019\uff0c\u5c06\u9700\u8981\u7684\u6570\u636e\u6587\u4ef6\u6253\u5305\u3002 \u5b83\u672c\u8eab\u7684\u914d\u7f6e\u5185\u5bb9\u662f\u6307\u5b9a\u9879\u76ee\u5728\u4f7f\u7528 Pip \u5b89\u88c5\u65f6\uff0c\u5c06\u9879\u76ee\u5305\u4e2d src/my_package/config/settings.yml \u590d\u5236\u5230\u7cfb\u7edf\u76ee\u5f55 /etc/my_package/settings.yml \u4f4d\u7f6e\u3002 \u5e76\u5c06\u9879\u76ee\u5305\u4e2d src/my_package/data/users.csv \u590d\u5236\u5230\u76f8\u5bf9\u4e8e\u89e3\u91ca\u5668\u7684 <sys.preifox>/share/my_package/data \u76ee\u5f55\u4e2d\u3002\u5982\u679c\u662f\u7cfb\u7edf\u7684 Python \u89e3\u91ca\u5668\uff0c\u5219\u662f\u76f8\u5bf9\u4e8e sys.prefix \u4e00\u822c\u662f /usr \u6216\u8005 /usr/local \uff0c\u5982\u679c\u662f\u7528\u6237\u5b89\u88c5\uff0c\u5219\u4e00\u822c\u662f ~/.local \u3002 \u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \u5b89\u88c5\u9644\u52a0\u6587\u4ef6 \u3002 2.2.3 \u6784\u5efa \u5f53\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u6784\u5efa\u4e86\u3002 \u8fd0\u884c\u547d\u4ee4\uff1a python -m build \u8fd0\u884c\u5b8c\u6210\u540e\uff0c\u4f1a\u5728\u9879\u76ee\u6839\u76ee\u5f55\u7684 ./dist \u4e2d\u751f\u6210\u4e24\u4e2a\u5206\u53d1\u6587\u4ef6\u3002\u4e00\u4e2a\u662f .tar.gz \u7ed3\u5c3e\u7684\u6e90\u7801\u538b\u7f29\u5305\uff0c\u4e00\u4e2a\u662f .whl \u7ed3\u5c3e\u7684\u4e8c\u8fdb\u5236\u5305\u3002 3 \u5206\u53d1 \u6253\u5305\u540e\u7684\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7\u5206\u53d1\u624b\u6bb5\u7ed9\u5176\u4ed6\u4eba\u4f7f\u7528\u3002 3.1 \u624b\u52a8\u5206\u53d1 \u624b\u52a8\u5206\u53d1\uff0c\u5373\u81ea\u5df1\u7ba1\u7406\u8fd9\u4e9b\u8f6f\u4ef6\u5305\uff0c\u5982\u901a\u8fc7\u590d\u5236\u3001 ftp \u6216\u8005\u7f51\u7edc\u53d1\u9001\u7b49\u65b9\u5f0f\u3002 \u4f7f\u7528\u65f6\uff0c\u4e0b\u8f7d\u6240\u9700\u8981\u7684\u7248\u672c\u5206\u53d1\u5305\uff0c\u7136\u540e\u4f7f\u7528 Pip \u5b89\u88c5 pip install foo.whl \u5373\u53ef\u3002 3.2 \u4f7f\u7528\u4ed3\u5e93\u5206\u53d1 Python \u6240\u7528\u516c\u5f00\u5305\u90fd\u5b58\u653e\u5728 Pypi \uff0c\u5f53\u6211\u4eec\u4f7f\u7528 pip install requests \u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u4f1a\u4ece Pypi \u4e2d\u67e5\u627e\u6700\u65b0\u7248\u672c\u7684\u5206\u53d1\u5305\uff0c\u627e\u5230\u4e86\u5c31\u5148\u4e0b\u8f7d\u5230\u672c\u5730\uff0c\u7136\u540e\u5b89\u88c5\u5230\u73af\u5883\u4e2d\u3002\u9664\u4e86\u5b98\u65b9\u4ed3\u5e93\uff0c\u8fd8\u652f\u6301\u79c1\u6709\u4ed3\u5e93\u3002 \u8981\u53d1\u5e03\u5230 Pypi \uff0c\u9996\u5148\u9700\u8981\u6ce8\u518c\u8d26\u53f7\uff0c\u5982\u679c\u662f\u8981\u6d4b\u8bd5\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u6d4b\u8bd5\u4ed3\u5e93 Test-Pypi \u3002\u5bf9\u4e8e\u79c1\u6709\u4ed3\u5e93\uff0c\u53ef\u4ee5\u53c2\u8003\u5177\u4f53\u6587\u6863\uff0c\u4f46\u4f7f\u7528\u65b9\u6cd5\u57fa\u672c\u4e00\u81f4\uff0c \u53ea\u9700\u8981\u66ff\u6362\u4e00\u4e0b\u4ed3\u5e93\u5730\u5740\u3002 \u5b89\u88c5 Twine \u5de5\u5177\u3002 pip install twine \u4e0a\u4f20\u5230 Test-Pypi \uff1a twine upload -r testpypi dist/* \u586b\u5199\u7528\u6237\u540d\u548c\u5bc6\u7801\u5373\u53ef\u4e0a\u4f20\u3002 \u4e0a\u4f20\u5230 Pypi \uff1a twine upload dist/* 3.2.1 Twine \u914d\u7f6e Twine \u63d0\u4f9b\u4e86\u914d\u7f6e\uff0c\u53ef\u4ee5\u907f\u514d\u6bcf\u6b21\u8f93\u5bc6\u7801\u6216\u8005\u4ed3\u5e93\u5730\u5740\u7684\u9ebb\u70e6\u3002 \u914d\u7f6e\u6587\u4ef6 \uff1a Twine \u53ef\u4ee5\u4f7f\u7528 .pypirc \u4e2d\u7684\u914d\u7f6e\u3002\u9ed8\u8ba4\u8bfb\u53d6\u4f4d\u7f6e\u662f ~/.pypirc [distutils] index-servers = pypi testpypi private-repository [pypi] username = __token__ password = <PyPI token> [testpypi] username = __token__ password = <TestPyPI token> [private-repository] repository = <private-repository URL> username = <private-repository username> password = <private-repository password> \u4e0a\u8ff0\u914d\u7f6e\u4e2d\u6709\u4e09\u4e2a\u4ed3\u5e93\uff0c\u5206\u522b\u4e3a pypi \u3001 test-pypi \u3001 private-repository \u3002\u5728\u4f7f\u7528\u65f6\uff0c\u9ed8\u8ba4\u662f pypi \uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 -r \u53c2\u6570\u6307\u5b9a\u3002\u5176\u4e2d username \u3001 password \u4e3a\u5bf9\u5e94\u4ed3\u5e93\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u8b66\u544a \u914d\u7f6e\u6587\u4ef6\u4e2d\u4ee5\u6587\u672c\u5f62\u5f0f\u5b58\u50a8\u4e86\u5bc6\u7801\uff0c\u5e94\u6ce8\u610f\u5b89\u5168\u9690\u60a3\u3002 \u53ef\u4ee5\u4f7f\u7528 keyring \u6216\u8c03\u6574\u6587\u4ef6\u6743\u9650 chmod 600 ~/.pypirc \u3002 \u4f7f\u7528\u73af\u5883\u53d8\u91cf \uff1a TWINE_USERNAME \uff1a \u4ed3\u5e93\u7528\u6237\u540d TWINE_PASSWORD \uff1a \u4ed3\u5e93\u5bc6\u7801 TWINE_REPOSITORY \uff1a \u4ed3\u5e93\u5730\u5740\u3002\u65e2\u53ef\u4ee5\u662f\u5b8c\u6574\u5730\u5740\uff0c\u4e5f\u53ef\u4ee5\u662f .pypirc \u4e2d\u7684\u4ed3\u5e93\u540d\u79f0\u3002 \u4f7f\u7528 keyring \u7ba1\u7406\u5bc6\u7801 \uff1a \u4f7f\u7528 keyring \u53ef\u4ee5\u5f88\u5b89\u5168\u7684\u7ba1\u7406\u5bc6\u7801\uff0c\u5728\u4e0a\u4f20\u5305\u7684\u65f6\u5019\uff0c\u8f93\u5165\u7528\u6237\u540d\u540e\u5373\u53ef\u4ece keyring \u4e2d\u8bfb\u53d6\u914d\u7f6e\u7684\u5bc6\u7801\u3002 keyring set https://upload.pypi.org/legacy/ your-username \u6ce8\u610f keyring \u5728\u6ca1\u6709\u684c\u9762\u73af\u5883\u7684\u5730\u65b9\u4f7f\u7528\u8d77\u6765\u4f1a\u590d\u6742\u4e00\u70b9\u3002\u5177\u4f53\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003 Using Keyring on headless Linux systems \u548c Using Keyring on headless Linux systems in a Docker container \u7981\u7528 Keyring \uff1a \u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u5e76\u4e0d\u60f3\u4f7f\u7528 keyring \uff0c\u6216\u8005 keyring \u7684\u63d0\u793a\u4f1a\u9020\u6210\u7cfb\u7edf\u6d41\u7a0b\u51fa\u73b0\u610f\u5916\uff0c\u6bd4\u5982 CI \u60c5\u51b5\u4e0b\u3002\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u7981\u7528\uff1a keyring --disable","title":"\u6784\u5efa\u4e0e\u53d1\u5e03"},{"location":"guidelines/project_management/distribution/#_1","text":"\u4f5c\u4e3a\u9879\u76ee\u7684\u6700\u540e\u4e00\u73af\uff0c\u5206\u53d1\u81f3\u5173\u91cd\u8981\u3002\u6709\u826f\u597d\u7684\u5206\u53d1\u6d41\u7a0b\uff0c\u4fbf\u4e8e\u4f7f\u7528\u3002\u57fa\u4e8e Python \u81ea\u5e26\u7684\u5206\u53d1\u673a\u5236\u663e\u7136\u662f \u66f4\u597d\u7684\u9009\u62e9\u3002 \u672c\u6587\u5c06\u4ee5\u4e00\u4e2a\u6570\u636e\u5bfc\u51fa\u7684\u9879\u76ee\u8bb2\u8ff0\u3002","title":"\u6784\u5efa\u4e0e\u53d1\u5e03"},{"location":"guidelines/project_management/distribution/#1","text":"\u56e0\u4e3a\u672c\u6587\u7684\u91cd\u70b9\u662f\u5bf9\u6253\u5305\u5206\u53d1\uff0c\u6240\u4ee5\u9879\u76ee\u7684\u529f\u80fd\u5f00\u53d1\u5c31\u4e0d\u4f5c\u4e3a\u91cd\u70b9\u3002 \u9879\u76ee\u6e90\u4ee3\u7801\u53ef\u4ee5\u5728 pythonic-project-samples \u4e2d\u83b7\u53d6\u3002 \u9879\u76ee\u91c7\u7528 src \u76ee\u5f55\u7ed3\u6784\uff0c\u9879\u76ee\u63cf\u8ff0\u4fe1\u606f\u90fd\u5728 setup.cfg \u4e2d\u5b9a\u4e49\u3002","title":"1. \u9879\u76ee\u51c6\u5907"},{"location":"guidelines/project_management/distribution/#2","text":"","title":"2. \u9879\u76ee\u6253\u5305"},{"location":"guidelines/project_management/distribution/#21","text":"\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0c Python \u7684\u6253\u5305\u8d70\u4e86\u5f88\u957f\u4e00\u6bb5\u8def\u4e86\uff0c\u4f46\u548c\u5176\u4ed6\u8bed\u8a00\u7684\u6253\u5305\u5de5\u5177\u76f8\u6bd4\uff0c\u4e3a\u4e86\u8fd8\u662f\u6709\u5f88\u957f\u4e00\u6bb5\u8def\u8981\u8d70\u3002 \u5728 PEP-517 \u4e2d\uff0c\u63d0\u5230\u4e86\u5f53\u524d Python \u6784\u5efa\u7cfb\u7edf\u7684\u4e0d\u8db3\u548c\u54cd\u5e94\u7684\u89e3\u51b3\u65b9\u6848\u3002 \u5176\u4e3b\u8981\u5c31\u662f\u89e3\u51b3\u8ba9 Python \u652f\u6301\u66f4\u52a0\u7075\u6d3b\u7684\u6784\u5efa\u7cfb\u7edf\u3002 PEP-518 \u5219\u63d0\u51fa\u4e3a\u9879\u76ee\u6307\u5b9a\u4e00\u4e2a\u6700\u5c0f\u7684\u6784\u5efa\u7cfb\u7edf\u3002","title":"2.1 \u6253\u5305\u5de5\u5177"},{"location":"guidelines/project_management/distribution/#211-setuptools","text":"Setuptools \u662f\u5f53\u524d\u4f7f\u7528\u6700\u4e3a\u5e7f\u6cdb\u7684\u6784\u5efa\u5de5\u5177\uff0c\u73b0\u5728\u7edd\u5927\u591a\u6570\u5de5\u5177 \u90fd\u5728\u4f7f\u7528 setuptools \u6784\u5efa\u9879\u76ee\u3002\u5b83\u662f disutils \u7684\u589e\u5f3a\u7248\u3002 Setuptools \u53ef\u4ee5\u8bf4\u662f\u73b0\u5728\u6700\u6210\u719f\u7684\u6784\u5efa\u5de5\u5177\u4e86\uff0c\u652f\u6301\u5e38\u7528\u7279\u6027\u5982\u4e0b\uff1a \u652f\u6301\u6253\u5305\u8d44\u6e90\u6587\u4ef6 \u652f\u6301\u6253\u5305\u6570\u636e\u6587\u4ef6 \u652f\u6301 CPython \u7f16\u8bd1\u5668 \u652f\u6301 zip \u538b\u7f29\u9009\u9879 \u652f\u6301\u5305\u547d\u540d\u7a7a\u95f4 \u652f\u6301\u5b89\u88c5\u4f9d\u8d56 \u652f\u6301\u53ef\u9009\u5b89\u88c5\u4f9d\u8d56 \u652f\u6301\u6307\u5b9a Python \u7248\u672c \u652f\u6301\u6ce8\u518c Setuptools \u5b50\u547d\u4ee4 \u652f\u6301\u5165\u53e3\u70b9\uff08Entry Points\uff09 \u7531\u4e8e Setuptools \u662f\u6700\u6210\u719f\u7684\u6784\u5efa\u5de5\u5177\uff0c\u6240\u4ee5\u4e0e\u5176\u5b83\u6784\u5efa\u5de5\u5177\u5bf9\u6bd4\u6765\u770b\uff0c\u5b83\u7684\u7f3a\u70b9\u53ef\u80fd\u5c31\u662f\u73b0\u5728\u7684\u914d\u7f6e\u4ecd\u9700\u8981\u5b9a\u4e49\u5728 setup.cfg \u6216\u8005 setup.py \u6587\u4ef6\u4e2d\uff0c\u800c\u4e0d\u662f\u5b9a\u4e49\u5728 pyproject.toml \u6587\u4ef6\u4e2d\u3002 \u7f3a\u70b9\uff1a \u4e0d\u652f\u6301\u5728 pyproject.toml \u4e2d\u5b9a\u4e49\u914d\u7f6e \u4e0d\u652f\u6301\u53d1\u5e03\uff0c\u9700\u8981\u914d\u5408 twine \u3002","title":"2.1.1 setuptools"},{"location":"guidelines/project_management/distribution/#2111","text":"pyproject.toml : [build-system] requires = [ \"setuptools\" , \"wheel\" ] build-backend = \"setuptools.build_meta\" \u589e\u52a0 setup.py \u6216\u8005 setup.cfg \u4e24\u79cd\u6709\u5176\u4e00\u5373\u53ef\u3002\u7136\u540e\u5728\u6587\u4ef6\u4e2d\u5b9a\u4e49\u914d\u7f6e\u3002 \u63a8\u8350\u4f7f\u7528 setup.cfg \u3002 setup.cfg [metadata] name = mypackage version = 0.0.1 [options] packages = mypackage install_requires = requests importlib; python_version = = \"3.7\" setup.py from setuptools import setup setup ( name = 'mypackage' , version = '0.0.1' , packages = [ 'mypackage' ], install_requires = [ 'requests' , 'importlib; python_version == \"2.6\"' , ], ) \u6b64\u65f6\u4f60\u7684\u9879\u76ee\u7ed3\u6784\u5e94\u5728\u662f\u8fd9\u6837\u7684\uff1a ~/mypackage/ pyproject.toml setup.cfg # or setup.py mypackage/__init__.py","title":"2.1.1.1 \u793a\u4f8b\u914d\u7f6e"},{"location":"guidelines/project_management/distribution/#2112","text":"\u5b89\u88c5 PEP-517 \u89c4\u8303\u7684\u5305\u751f\u6210\u5668 build \u548c setuptools \uff0c pip install build setuptools \u3002 \u7136\u540e\u5f00\u59cb\u6784\u5efa python -m build wheel \u3002","title":"2.1.1.2 \u901a\u7528\u65b9\u5f0f\u6784\u5efa"},{"location":"guidelines/project_management/distribution/#2113-setuptools","text":"\u6b64\u65b9\u6cd5\u662f\u5728\u4e0d\u5b89\u88c5 build \u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u3002 \u5982\u679c\u4f60\u53ea\u662f\u7528\u4e86 setup.cfg \u914d\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u8fd8\u9700\u8981\u589e\u52a0\u4e00\u4e2a setup.py \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a setup.py \uff1a from setuptools import setup setup () \u5982\u679c\u4f60\u4ec5\u4f7f\u7528\u4e86 setup.py \u914d\u7f6e Setuptools \u7684\u8bdd\uff0c\u53ef\u4ee5\u4e0d\u9700\u8981 setup.cfg \u6587\u4ef6\u3002 \u5b89\u88c5\u4f9d\u8d56 pip install setuptools \uff0c\u7136\u540e\u8fdb\u884c\u6784\u5efa python setup.py bdist_wheel \u3002","title":"2.1.1.3 Setuptools \u6784\u5efa"},{"location":"guidelines/project_management/distribution/#2114-twine","text":"\u7531\u4e8e setuptools \u4e0d\u652f\u6301\u53d1\u5e03\u529f\u80fd\uff0c\u6240\u4ee5\u9700\u8981\u501f\u52a9\u5176\u4ed6\u5de5\u5177\u5c06\u5305\u53d1\u5e03\u4e2d\u592e\u4ed3\u5e93\u3002 Twine \u662f Pypa \u56e2\u961f\u7ef4\u62a4\u7684\u4e00\u4e2a\u5c06 Python \u5305\u53d1\u5e03\u5230 Pypi \u7684\u5de5\u5177\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pip install twine \u3002 \u4f7f\u7528 Setuptools \u6784\u5efa\u9879\u76ee\uff0c\u6784\u5efa\u7ed3\u679c\u9ed8\u8ba4\u662f\u653e\u5728\u9879\u76ee\u6839\u76ee\u5f55\u7684 ./dist \u4e0b\u9762 \u3002 \u53d1\u5e03\u9879\u76ee\u5230 Pypi \uff1a twine upload dist/*","title":"2.1.1.4 twine \u53d1\u5e03"},{"location":"guidelines/project_management/distribution/#212-flit","text":"Flit \u662f\u4e00\u4e2a\u8f7b\u91cf\u7b80\u5355\u7684 Python \u6784\u5efa\u5de5\u5177\uff0c\u5b83\u7684\u51fa\u73b0\u4e5f\u53ef\u4ee5\u8bf4\u662f\u5212\u65f6\u4ee3\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u51fa\u73b0\u4fc3\u8fdb\u4e86\u65b0\u6807\u51c6\u7684\u53d1\u73b0\uff0c \u5982 PEP-517 \u548c PEP-518 \u3002 Flit \u5177\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u7b80\u5355\u8f7b\u91cf \u652f\u6301\u53d1\u5e03 \u652f\u6301\u6253\u5305\u6570\u636e\u6587\u4ef6 \u652f\u6301\u5b50\u5305 \u652f\u6301\u590d\u5236\u6784\u5efa \u652f\u6301\u5b89\u88c5\u4f9d\u8d56 \u652f\u6301\u53ef\u9009\u5b89\u88c5\u4f9d\u8d56 \u652f\u6301\u6307\u5b9a Python \u7248\u672c \u652f\u6301\u6ce8\u518c Flit \u5b50\u547d\u4ee4 \u652f\u6301\u5165\u53e3\u70b9\uff08Entry Points\uff09 \u652f\u6301 pyproject.toml \u6587\u4ef6\u5b9a\u4e49\u914d\u7f6e \u7f3a\u70b9\uff1a \u4e0d\u652f\u6301 CPython \u7f16\u8bd1 \u4e0d\u652f\u6301 zip \u538b\u7f29\u9009\u9879","title":"2.1.2 flit"},{"location":"guidelines/project_management/distribution/#2121","text":"pyproject.toml \uff1a [build-system] requires = [ \"flit_core >=2,<4\" ] build-backend = \"flit_core.buildapi\" [tool.flit.metadata] module = \"foobar\" author = \"Sir Robin\" author-email = \"robin@camelot.uk\" home-page = \"https://github.com/sirrobin/foobar\"","title":"2.1.2.1 \u793a\u4f8b\u914d\u7f6e"},{"location":"guidelines/project_management/distribution/#2122","text":"\u5b89\u88c5 PEP-517 \u89c4\u8303\u7684\u5305\u751f\u6210\u5668 build \u548c flit \uff0c pip install build flit \u3002 \u7136\u540e\u5f00\u59cb\u6784\u5efa python -m build wheel \u3002","title":"2.1.2.2 \u901a\u7528\u65b9\u5f0f\u6784\u5efa"},{"location":"guidelines/project_management/distribution/#2123-flit","text":"\u6b64\u65b9\u6cd5\u662f\u5728\u4e0d\u5b89\u88c5 build \u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u7684\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pip install flit \uff0c\u7136\u540e\u8fdb\u884c\u6784\u5efa flit build --format wheel \u3002","title":"2.1.2.3 flit \u6784\u5efa"},{"location":"guidelines/project_management/distribution/#2124-flit","text":"flit \u7684\u53d1\u5e03\u547d\u4ee4\u4f1a\u81ea\u884c\u5148\u6784\u5efa wheel \u548c sdist \u5305\uff0c\u7136\u540e\u4e0a\u4f20\u5230 Pypi \u6216\u8005\u5176\u4ed6\u4ed3\u5e93\u3002 flit build --format wheel","title":"2.1.2.4 flit \u53d1\u5e03"},{"location":"guidelines/project_management/distribution/#213-poetry","text":"python-poetry \u662f\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684\u5de5\u5177\u3002\u5b83\u662f\u4e00\u4e2a\u6784\u5efa\u5de5\u5177\u7684\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u4f9d\u8d56\u7ba1\u7406\u5de5\u5177\u3002 \u5728\u6784\u5efa\u4e0a\uff0c\u540c\u6837\u9075\u5faa\u4e86 PEP-517 \u89c4\u8303\uff0c\u5728\u4f9d\u8d56\u7ba1\u7406\u4e0a\uff0c\u6709\u70b9\u7c7b\u4f3c\u4e8e Pipenv \u3002 python-poetry \u5177\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u652f\u6301\u73af\u5883\u7ba1\u7406 \u652f\u6301\u53d1\u5e03 \u652f\u6301 shell \u63d2\u4ef6\uff0c\u5982 bash \u3001 Fish \u3001 Zsh \u652f\u6301\u6253\u5305\u6570\u636e\u6587\u4ef6 \u652f\u6301\u6ce8\u518c poetry \u5b50\u547d\u4ee4 \u652f\u6301 Setuptools \u7684\u5165\u53e3\u70b9\uff08Entry Points\uff09 \u652f\u6301\u5305\u547d\u540d\u7a7a\u95f4 \u652f\u6301\u5b89\u88c5\u4f9d\u8d56 \u652f\u6301\u53ef\u9009\u5b89\u88c5\u4f9d\u8d56 \u652f\u6301\u5728 pyproject.toml \u4e2d\u5b9a\u4e49\u914d\u7f6e \u7f3a\u70b9\uff1a \u4e0d\u652f\u6301 CPython \u7f16\u8bd1 \u4e0d\u652f\u6301 zip \u538b\u7f29\u9009\u9879","title":"2.1.3 poetry"},{"location":"guidelines/project_management/distribution/#2131","text":"[build-system] requires = [ \"poetry_core>=1.0.0\" ] build-backend = \"poetry.core.masonry.api\" [tool.poetry] name = \"poetry-demo\" version = \"0.1.0\" description = \"\" authors = [ \"S\u00e9bastien Eustace <sebastien@eustace.io>\" ] [tool.poetry.dependencies] python = \"*\" [tool.poetry.dev-dependencies] pytest = \"^3.4\"","title":"2.1.3.1 \u793a\u4f8b\u914d\u7f6e"},{"location":"guidelines/project_management/distribution/#22","text":"\u8003\u8651\u5230\u65b0\u5de5\u5177\u7684\u529f\u80fd\u6027\uff0c\u73b0\u9636\u6bb5\u4ecd\u7136\u9009\u7528 setuptools \u4f5c\u4e3a\u6784\u5efa\u5de5\u5177\u3002 \u4e3a\u9879\u76ee\u6307\u5b9a\u6240\u9700\u8981\u4f7f\u7528\u7684\u6784\u5efa\u5de5\u5177\u3002\u521b\u5efa pyproject.toml \u6587\u4ef6\uff0c\u589e\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a [build-system] requires = [ \"setuptools\" , \"wheel\" ] build-backend = \"setuptools.build_meta\" \u521b\u5efa setup.cfg \u6587\u4ef6\uff0c\u589e\u52a0 Setuptools \u914d\u7f6e\u3002 [metadata] name = file2mongo version = attr: file2mongo.__version__ author = demo author_email = demo@example.com description = File data to MongoDB keywords = file2mongo long_description = file: README.md long_description_content_type = text/markdown classifiers = Operating System :: OS Independent Programming Language :: Python :: 3.7 [options] python_requires > = 3.7 include_package_data = True packages = find: package_dir = = src install_requires = dynaconf click pymongo [options.packages.find] where = src exclude = tests* docs # https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html [options.entry_points] console_scripts = file2mongo = file2mongo.cmdline:main # Packaging project data in module file2mongo. # https://setuptools.readthedocs.io/en/latest/userguide/datafiles.html?highlight=package_data [options.package_data] file2mongo.config = settings.yml # Copy data for user from project when pip install. # The relative path is prefix `sys.prefix` . eg: `/usr/local/`. # Path and data will remove When pip uninstall. # https://docs.python.org/3/distutils/setupscript.html#installing-additional-files [options.data_files] etc/file2mongo = src/file2mongo/config/settings.yml","title":"2.2 \u6253\u5305\u6784\u5efa"},{"location":"guidelines/project_management/distribution/#221-metadata","text":"metadata \u662f\u9879\u76ee\u57fa\u672c\u63cf\u8ff0\u4fe1\u606f\uff0c\u6709\u9879\u76ee\u540d\u79f0\uff0c\u7248\u672c\u53f7\uff0c\u4f5c\u8005\u76f8\u5173\u4fe1\u606f\uff0c\u8bc1\u4e66\u7b49\u3002 \u4e3a\u4e86\u8ba9\u522b\u4eba\u66f4\u7cbe\u51c6\u7684\u83b7\u53d6\u4f60\u7684\u5305\u7684\u4fe1\u606f\uff0c\u5e94\u8be5\u81f3\u5c11\u5305\u542b\u5982\u4e0b\uff1a name \uff1a \u9879\u76ee\u540d\u79f0 version \uff1a \u7248\u672c\u53f7\uff0c\u652f\u6301\u5b57\u7b26\u4e32\uff0c\u6587\u4ef6\u5185\u5bb9\uff0c\u6216\u8005\u9879\u76ee\u5305\u4e2d\u7684\u53d8\u91cf\u3002\u5982\u679c\u9700\u8981\u4f7f\u7528\u5305\u4e2d\u7684\u53d8\u91cf\uff0c\u5219 Setuptools \u7684\u7248\u672c\u53f7\u9700\u8981\u5927\u4e8e\u7b49\u4e8e 39.2.0 url \uff1a \u9879\u76ee\u5730\u5740 author \uff1a \u9879\u76ee\u4f5c\u8005 author_email \uff1a \u4f5c\u8005\u90ae\u7bb1 classifiers \uff1a \u5206\u7c7b\u3002\u6709\u52a9\u4e8e\u5728 Pypi \u4e2d\u4f7f\u7528\u6761\u4ef6\u8fc7\u6ee4\u67e5\u627e\u9879\u76ee\u3002 license \uff1a \u8bb8\u53ef\u8bc1\u3002\u53ef\u4ee5\u4fdd\u62a4\u4f60\u7684\u77e5\u8bc6\u4ea7\u6743\u3002 description \uff1a \u9879\u76ee\u7b80\u8981\u63cf\u8ff0\u3002 long_description \uff1a \u9879\u76ee\u63cf\u8ff0\uff0c\u652f\u6301\u5b57\u7b26\u4e32\u548c\u6587\u4ef6(Markdown \u6587\u4ef6\u6216 RST \u6587\u4ef6) keywords \uff1a \u9879\u76ee\u5173\u952e\u5b57\uff0c\u6709\u52a9\u4e8e\u6a21\u7cca\u641c\u7d22\u5339\u914d\u3002","title":"2.2.1 metadata"},{"location":"guidelines/project_management/distribution/#2211","text":"Python \u9879\u76ee\u7248\u672c\u89c4\u8303\u53ef\u4ee5\u53c2\u8003 PEP 440 -- Version Identification and Dependency Specification \uff0c Setuptools \u672c\u8eab\u5df2\u7ecf\u652f\u6301\u591a\u79cd\u7248\u672c\u53f7\u63a7\u5236\u65b9\u6848\u3002\u4f46\u63a8\u8350\u4f7f\u7528 \u8bed\u4e49\u5316\u7248\u672c\u65b9\u6848 \u3002 \u5bf9\u4e8e Setuptools \u652f\u6301\u7684\u7248\u672c\u65b9\u6848\u53ef\u4ee5\u53c2\u8003 Specifying Your Project\u2019s Version \u3002 \u6807\u8bb0\u548c \u201d\u6bcf\u65e5\u6784\u5efa\u201c \u6216 \u201d\u5feb\u7167\u201c \u7248\u672c \uff1a \u5f53\u4e00\u7ec4\u76f8\u5173\u7684\u9879\u76ee\u6b63\u5728\u5f00\u53d1\u65f6\uff0c\u8ddf\u8e2a\u6bd4\u901a\u5e38\u7528\u4e8e\u201c\u7a33\u5b9a\u201d\u53d1\u884c\u7248\u7684\u66f4\u7ec6\u7c92\u5ea6\u7248\u672c\u589e\u91cf\u53ef\u80fd\u5f88\u91cd\u8981\u3002\u800c\u7a33\u5b9a\u7248\u672c\u53ef\u4ee5\u7528\u5e26\u70b9\u94fe\u63a5\u7684\u6570\u5b57\u548c alpha/beta/etc \u6765\u8868\u793a\u3002 \u72b6\u6001\u4ee3\u7801\u3001\u9879\u76ee\u7684\u5f00\u53d1\u7248\u672c\u901a\u5e38\u9700\u8981\u901a\u8fc7\u4fee\u8ba2\u3001\u6784\u5efa\u53f7\u751a\u81f3\u6784\u5efa\u65e5\u671f\u6765\u8ddf\u8e2a\u3002\u5f53\u5f00\u53d1\u4e2d\u7684\u9879\u76ee\u9700\u8981\u76f8\u4e92\u5f15\u7528\u65f6\uff0c\u8fd9\u4e00\u70b9\u5c24\u5176\u6b63\u786e\uff0c\u56e0\u6b64\u53ef\u80fd\u786e\u5b9e\u9700\u8981\u67d0\u4e2a\u4e1c\u897f\u7684\u6700\u65b0\u7248\u672c! \u4e3a\u4e86\u652f\u6301\u8fd9\u4e9b\u573a\u666f\uff0cSetuptools \u5141\u8bb8\u60a8\u901a\u8fc7\u5728\u9879\u76ee\u7684\u201c\u5b98\u65b9\u201d\u7248\u672c\u6807\u8bc6\u7b26\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a\u4ee5\u4e0b\u5185\u5bb9\u6765\u201c\u6807\u8bb0\u201d\u6e90\u4ee3\u7801\u548cegg\u53d1\u884c\u7248: \u624b\u52a8\u6307\u5b9a\u7684\u9884\u53d1\u5e03\u6807\u8bb0\uff0c\u4f8b\u5982\u201cbuild\u201d\u6216\u201cdev\u201d\uff0c\u6216\u624b\u52a8\u6307\u5b9a\u7684\u53d1\u5e03\u540e\u6807\u8bb0\uff0c\u4f8b\u5982\u6784\u5efa\u6216\u4fee\u8ba2\u53f7\uff08 --tag-build=STRING , -bSTRING \uff09 \u7528 8 \u4e2a\u5b57\u7b26\u8868\u793a\u7684\u6784\u5efa\u65e5\u671f\uff08 --tag-date \uff0c -d \uff09\u4f5c\u4e3a postrelease \u6807\u8bb0 \u53ef\u4ee5\u5728\u751f\u6210\u6bcf\u65e5\u6784\u5efa\u6216\u5feb\u7167\u7684sdist\u6216bdist\u547d\u4ee4\u4e4b\u524d\u6dfb\u52a0egg_info\u548c\u6240\u9700\u7684\u9009\u9879\u6765\u6dfb\u52a0\u8fd9\u4e9b\u6807\u7b7e\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1 egg_info \u547d\u4ee4\u7684\u4ee5\u4e0b\u90e8\u5206\u3002 \uff08\u53e6\u5916\uff0c\u4e3a\u4e86\u786e\u4fdd\u4f9d\u8d56\u9879\u5904\u7406\u5de5\u5177\u5c06\u77e5\u9053\u60a8\u9879\u76ee\u7684\u54ea\u4e2a\u7248\u672c\u6bd4\u5176\u4ed6\u7248\u672c\u65b0\uff0c\u5728\u53d1\u5e03\u9879\u76ee\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u53c2\u9605\u4e0a\u9762\u7684 \u6307\u5b9a\u9879\u76ee\u7684\u7248\u672c \u90e8\u5206\u3002\uff09 \u6700\u540e\uff0c\u5982\u679c\u60a8\u7ecf\u5e38\u521b\u5efa\u6784\u5efa\uff0c\u5e76\u4e14\u5728\u53ef\u4e0b\u8f7d\u7684\u4f4d\u7f6e\u6784\u5efa\u5b83\u4eec\uff0c\u6216\u8005\u5c06\u5b83\u4eec\u590d\u5236\u5230\u5206\u53d1\u670d\u52a1\u5668\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u8fd8\u5e94\u8be5\u68c0\u6267\u884c rotate \u547d\u4ee4\uff0c\u8be5\u547d\u4ee4\u4f1a\u81ea\u52a8\u5220\u9664\u9664 N \u4e2a\u6700\u8fd1\u4fee\u6539\u7684\u4e0e glob \u6a21\u5f0f\u5339\u914d\u7684\u53d1\u884c\u7248\u4e4b\u5916\u7684\u6240\u6709\u53d1\u884c\u7248\u3002\u64cd\u4f5c\u5982\u4e0b: setup.py egg_info -rbDEV bdist_egg rotate -m.egg -k3 \u6784\u5efa\u4e00\u4e2a egg \uff0c\u5176\u7248\u672c\u4fe1\u606f\u5305\u62ec\u201cDEV-rNNNN\u201d(\u5176\u4e2dNNNN\u662f\u8d44\u6e90\u6811\u7684\u6700\u65b0\u4fee\u8ba2)\uff0c\u7136\u540e\u4ece\u53d1\u884c\u76ee\u5f55\u4e2d\u5220\u9664\u9664\u6700\u8fd1\u6784\u5efa\u7684\u4e09\u4e2aegg\u6587\u4ef6\u4e4b\u5916\u7684\u6240\u6709egg\u6587\u4ef6\u3002 \u5982\u679c\u60a8\u5fc5\u987b\u7ba1\u7406\u591a\u4e2a\u5305\u7684\u81ea\u52a8\u5316\u6784\u5efa\uff0c\u6bcf\u4e2a\u5305\u90fd\u6709\u4e0d\u540c\u7684\u6807\u8bb0\u548c\u6eda\u52a8\u7b56\u7565\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u8fd8\u9700\u8981\u8fd0\u884c alias \u547d\u4ee4\uff0c \u8be5\u547d\u4ee4\u5141\u8bb8\u6bcf\u4e2a\u5305\u5b9a\u4e49\u4e00\u4e2a\u522b\u540d\uff0c\u5c31\u50cfdaily \u4e00\u6837\uff0c\u5b83\u5c06\u6267\u884c\u5fc5\u8981\u7684\u6807\u8bb0\u3001\u6784\u5efa\u548c\u6eda\u52a8\u547d\u4ee4\u3002\u7136\u540e\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6216 cron \u4f5c\u4e1a\u5c31\u53ef\u4ee5\u6bcf\u5929\u5728\u6bcf\u4e2a\u9879\u76ee\u76ee\u5f55\u4e2d\u8fd0\u884c setup.py \u3002 (\u60a8\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u7ad9\u70b9\u8303\u56f4\u6216\u6bcf\u4e2a\u7528\u6237\u7684\u6bcf\u65e5\u522b\u540d\u7684\u9ed8\u8ba4\u7248\u672c\uff0c\u8fd9\u6837\u6ca1\u6709\u5b9a\u4e49\u81ea\u5df1\u7684\u9879\u76ee\u5c31\u53ef\u4ee5\u4f7f\u7528\u9002\u5f53\u7684\u9ed8\u8ba4\u503c\u3002) \u5236\u4f5c\u5b98\u65b9\uff08\u975e\u5feb\u7167\uff09\u7248\u672c \uff1a \u5f53\u60a8\u53d1\u5e03\u6b63\u5f0f\u7248\u672c\uff0c\u521b\u5efa\u6e90\u4ee3\u7801\u6216\u4e8c\u8fdb\u5236\u53d1\u884c\u7248\u65f6\uff0c\u9700\u8981\u8986\u76d6setup\u4e2d\u7684\u6807\u8bb0\u8bbe\u7f6e\u3002\u8fd9\u6837\u5c31\u4e0d\u7528\u6ce8\u518c\u50cf foobar-0.7a1.dev-r34832 \u8fd9\u6837\u7684\u7248\u672c\u4e86\u3002\u5982\u679c\u4e3b\u5206\u652f\u4e0a\u8fdb\u884c\u5f00\u53d1\uff0c \u5e76\u4e14\u4e3a\u53d1\u884c\u7248\u4f7f\u7528\u6807\u8bb0\u6216\u5206\u652f\uff0c\u90a3\u4e48\u5c31\u5f88\u5bb9\u6613\u505a\u5230\u53ea\u5728\u5206\u652f\u6216\u6807\u8bb0\u53d1\u884c\u7248\u4e4b\u540e\u66f4\u6539 setup.cfg\uff0c\u8fd9\u6837\u4e3b\u5206\u652f\u4ecd\u7136\u4f1a\u751f\u6210\u5f00\u53d1\u5feb\u7167\u3002 \u53e6\u5916\uff0c\u5982\u679c\u6ca1\u6709\u4e3a\u53d1\u5e03\u7248\u672c\u8fdb\u884c\u5206\u652f\uff0c\u60a8\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e0a\u8986\u76d6\u9ed8\u8ba4\u7684\u7248\u672c\u9009\u9879\uff0c\u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5: python setup.py egg_info -Db \"\" sdist bdist_egg \u8be5\u547d\u4ee4\u7684\u7b2c\u4e00\u90e8\u5206( egg_info -Db \"\" )\u5c06\u5728\u521b\u5efa\u6e90\u548c\u4e8c\u8fdb\u5236 egg \u4e4b\u524d\u8986\u76d6\u5df2\u914d\u7f6e\u7684\u6807\u8bb0\u4fe1\u606f\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u547d\u4ee4\u5c06\u4f7f\u7528 setup.py \u4e2d\u7684\u666e\u901a\u7248\u672c\uff0c\u800c\u4e0d\u6dfb\u52a0\u6784\u5efa\u6307\u5b9a\u5b57\u7b26\u4e32\u3002 \u5f53\u7136\uff0c\u5982\u679c\u60a8\u7ecf\u5e38\u8fd9\u6837\u505a\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u4e3a\u8fd9\u4e2a\u64cd\u4f5c\u521b\u5efa\u4e00\u4e2a\u4e2a\u4eba\u522b\u540d\uff0c\u4f8b\u5982: python setup.py alias -u release egg_info -Db \"\" \u7136\u540e\u4f60\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528\u5b83\uff1a python setup.py release sdist bdist_egg \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u521b\u5efa\u66f4\u590d\u6742\u7684\u522b\u540d\u6765\u5b8c\u6210\u4e0a\u8ff0\u6240\u6709\u64cd\u4f5c\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 egg_info \u548c alias \u547d\u4ee4\u4e0b\u9762\u7684\u90e8\u5206\u3002","title":"2.2.1.1 \u7248\u672c\u53f7"},{"location":"guidelines/project_management/distribution/#222-options","text":"\u6b64\u8282\u70b9\u5185\u5bb9\u867d\u7136\u4e3a\u53ef\u9009\uff0c\u4f46\u4e3a\u4e86\u9879\u76ee\u7684\u5b8c\u6574\u6027\uff0c\u6709\u4e9b\u5185\u5bb9\u8fd8\u662f\u9700\u8981\u7684\u3002 install_requires \uff1a \u4f7f\u7528 Pip \u5b89\u88c5\u65f6\u9700\u8981\u7684\u4f9d\u8d56\uff0c\u5373\u9879\u76ee\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u4f9d\u8d56\u7684\u5305 extras_require \uff1a \u4f7f\u7528 Pip \u5b89\u88c5\u65f6\u7684\u53ef\u9009\u4f9d\u8d56\uff0c\u4e00\u822c\u662f\u5728\u63d0\u4f9b\u6269\u5c55\u6216\u8005\u53ef\u9009\u529f\u80fd\u6240\u6b32\u8981\u7684\u5305 python_requires \uff1a \u9879\u76ee\u4f7f\u7528\u65f6\u6240\u9700\u8981\u7684 Python \u7248\u672c\u3002 entry_points \uff1a \u5165\u53e3\u70b9\u5185\u5bb9\uff0c\u5982\u751f\u6210\u547d\u4ee4\u884c\u811a\u672c\uff0c\u6216\u8005\u6ce8\u518c\u6a21\u5757 packages \uff1a \u9879\u76ee\u7684\u5305\uff0c\u6216\u8005\u4f7f\u7528 find: \u5728 package_dir \u4e2d\u81ea\u52a8\u52a0\u8f7d package_dir \uff1a \u9879\u76ee\u5305\u6240\u5728\u7684\u4f4d\u7f6e include_package_data \uff1a \u662f\u5426\u6253\u5305\u6570\u636e\u6587\u4ef6 package_dir \uff1a \u5305\u542b\u6570\u636e\u6587\u4ef6\u7684\u5305\u6240\u5728\u4f4d\u7f6e data_files \uff1a \u5728\u5b89\u88c5\u65f6\uff0c\u5199\u5165\u5230\u7cfb\u7edf\u5176\u4ed6\u4f4d\u7f6e\u7684\u6570\u636e\u6587\u4ef6 exclude_package_data \uff1a \u6392\u9664\u7684\u6570\u636e\u6587\u4ef6","title":"2.2.2 options"},{"location":"guidelines/project_management/distribution/#2221-entrypoints","text":"Entry-points \u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u6ce8\u518c\u547d\u4ee4\u884c\u811a\u672c\uff0c\u6216\u8005\u63d0\u4f9b\u4e00\u79cd\u63d2\u4ef6\u52a0\u8f7d\u673a\u5236\u3002 \u6ce8\u518c\u547d\u4ee4\u884c \uff1a Setuptools \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u6b63\u786e\u7684\u6269\u5c55\u540d\u81ea\u52a8\u751f\u6210\u811a\u672c\uff0c\u751a\u81f3\u4f1a\u5728 Windows \u4e0a\u521b\u5efa\u4e00\u4e2a .exe \u6587\u4ef6\u3002\u4f7f\u7528\u6b64\u7279\u6027\u7684\u65b9\u6cd5\u662f\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49 entry points \uff0c \u6307\u51fa\u751f\u6210\u7684\u811a\u672c\u5e94\u8be5\u5bfc\u5165\u548c\u8fd0\u884c\u4ec0\u4e48\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u8981\u521b\u5efa\u4e24\u4e2a\u540d\u4e3a foo \u548c bar \u7684\u63a7\u5236\u53f0\u811a\u672c\u548c\u4e00\u4e2a\u540d\u4e3a baz \u7684 GUI \u811a\u672c\uff0c \u5982\u4e0b\u793a\u4f8b\uff1a setup ( # other arguments here... entry_points = { 'console_scripts' : [ 'foo = my_package.some_module:main_func' , 'bar = other_module:some_func' , ], 'gui_scripts' : [ 'baz = my_package_gui:start_func' , ] } ) \u5f53\u8be5\u9879\u76ee\u5b89\u88c5\u5728\u975e Windows \u5e73\u53f0\u4e0a(\u4f7f\u7528 setup.py install \u3001 setup.py develop \u6216\u4f7f\u7528 pip install )\u65f6\uff0c\u5c06\u5b89\u88c5\u4e00\u7ec4 foo \u3001 bar \u548c baz \u811a\u672c\uff0c \u4ece\u6307\u5b9a\u7684\u6a21\u5757\u5bfc\u5165 main_func \u548c some_func \u3002\u6307\u5b9a\u7684\u51fd\u6570\u5728\u6ca1\u6709\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u88ab\u8c03\u7528\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u88ab\u4f20\u9012\u7ed9 sys.exit() \uff0c\u56e0\u6b64\u53ef\u4ee5\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u7ea7\u522b\u65e5\u5fd7\u6216\u4e00\u6761\u6d88\u606f\u6765\u6253\u5370\u5230 stderr \u3002 \u5728 Windows \u5e73\u53f0\u4e0a\uff0c\u5c06\u521b\u5efa foo.exe \uff0c bar.exe \u548c baz.exe \u542f\u52a8\u7a0b\u5e8f\uff0c\u548c foo.py \uff0c bar.py \u548c baz.pyw \u6587\u4ef6\u3002 .exe \u7a0b\u5e8f\u901a\u8fc7\u67e5\u627e\u6b63\u786e\u7248\u672c\u7684 Python \u6765\u8fd0\u884c .py \u548c .pyw \u6587\u4ef6\u3002 \u53ef\u4ee5\u6839\u636e\u9700\u6c42\u5b9a\u4e49\u4efb\u610f\u6570\u91cf\u7684 console script \u548c gui script \u5165\u53e3\u70b9\uff0c\u6bcf\u4e2a\u5165\u53e3\u70b9\u90fd\u53ef\u4ee5\u6307\u5b9a\u6240\u4f9d\u8d56\u7684 \u201c\u9644\u52a0\u529f\u80fd\u201d \uff0c\u8fd9\u4e9b\u4f9d\u8d56\u4f1a\u5728\u8fd0\u884c\u65f6\u6dfb\u52a0\u5230 sys.path \u4e2d\u3002 \u66f4\u591a \u201c\u9644\u52a0\u529f\u80fd\u201d \u4fe1\u606f\u8bf7\u53c2\u8003 \u58f0\u660e\u9644\u52a0\u5185\u5bb9 \u90e8\u5206\u3002 entry points \u7684\u66f4\u591a\u5185\u5bb9\u8bf7\u53c2\u8003 \u670d\u52a1\u548c\u63d2\u4ef6\u7684\u52a8\u6001\u53d1\u73b0 \u7684\u90e8\u5206\u3002","title":"2.2.2.1 \u5165\u53e3\u70b9 EntryPoints"},{"location":"guidelines/project_management/distribution/#2222","text":"Setuptools \u652f\u6301 \u6253\u5305\u6570\u636e\u6587\u4ef6 \uff0c\u8fd9\u6837\u53ef\u4ee5 \u5f88\u65b9\u4fbf\u7684\u628a\u5305\u4e2d\u7684\u6570\u636e\u6587\u4ef6\u9884\u5148\u6253\u5305\uff0c\u5728\u5206\u53d1\u7684\u65f6\u5019\u76f4\u63a5\u4f7f\u7528\u3002\u5e38\u89c1\u7684\u6587\u4ef6\u5c31\u662f\u914d\u7f6e\u4e86\u3002 \u65b9\u6cd5\u4e00 \uff1a [options] include_package_data = True include_package_data \u4f1a\u544a\u8bc9 Setuptools \u901a\u8fc7 distutils \u7684 MANIFEST.in \u6587\u4ef6\u6307\u5b9a\u6570\u636e\u6587\u4ef6\u3002 \u65b9\u6cd5\u4e8c \uff1a [options.package_data] \"\" = \"*.txt\" \"*.rst\" \"hello\" = \"*.msg\" \u4f7f\u7528 package_data \u53ef\u4ee5\u66f4\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\u7d22\u8981\u5305\u542b\u7684\u6570\u636e\u6587\u4ef6\u3002\u7b2c\u4e00\u4e2a\u914d\u7f6e\u662f\u544a\u8bc9 Setuptools \u5728\u901a\u8fc7\u5168\u5c40\u6a21\u5f0f\u9012\u5f52\u5339\u914d\u4ee5 .txt \u548c .rst \u7ed3\u5c3e \u7684\u6240\u6709\u6587\u4ef6\uff0c\u7b2c\u4e8c\u4e2a\u914d\u7f6e\u662f\u67e5\u627e hello \u4e0b\u6240\u6709 .msg \u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5e76\u5728\u6253\u5305\u662f\u5305\u542b\u5339\u914d\u5230\u7684\u6240\u6709\u6570\u636e\u6587\u4ef6\u3002 \u65b9\u6cd5\u4e09\uff08SRC \u6a21\u5f0f\uff09 \uff1a [options] packages = find: package_dir = = src [options.packages.find] where = src [options.package_data] \"\" = \"*.txt\" \"*.rst\" \"hello\" = \"*.msg\" \u5f53\u4f7f\u7528 SRC \u9879\u76ee\u7ed3\u6784 \u65f6\uff0c\u9700\u8981\u91c7\u7528\u4e0a\u8ff0\u914d\u7f6e\u3002 packages = find: \u4e2d\u544a\u8bc9 Setuptools \u91c7\u7528 setuptools.find_packages \u65b9\u6cd5\u67e5\u627e\u9879\u76ee\u5305\u7ed3\u6784\u6240\u5728\u4f4d\u7f6e\uff0c options.packages.find \u4e2d\u4f1a\u914d\u7f6e setuptools.find_packages \u65b9\u6cd5\u7684\u53c2\u6570\uff0c where = src \u5219\u6307\u5b9a\u9879\u76ee\u7684\u5305\u5728 src \u4e0b\u3002 package_dir \u544a\u8bc9 distutils \u5305\u5728 src \u4e0b\uff0c\u56e0\u6b64 options.package_data \u4e2d\u7684\u914d\u7f6e\u90fd\u4f1a\u5728 src \u4e0b\u7684\u5305\u4e2d\u67e5\u627e\u3002","title":"2.2.2.2 \u6253\u5305\u6570\u636e\u6587\u4ef6"},{"location":"guidelines/project_management/distribution/#2223","text":"data_files \u53ef\u4ee5\u6307\u5b9a\u9700\u8981\u5b89\u88c5\u5230\u7cfb\u7edf\u4e2d\u7684\u5176\u4ed6\u6587\u4ef6\uff0c\u5982\u914d\u7f6e\u6587\u4ef6\u3001\u6d88\u606f\u76ee\u5f55\uff0c\u6570\u636e\u6587\u4ef6\u7b49\u3002 [options] packages = find: package_dir = = src [options.packages.find] where = src [options.package_data] my_package.config = settings.yml my_package.data = users.csv [options.data_files] /etc/my_package = src/my_package/config/settings.yml share/my_package/data = src/my_package/data/users.csv options.data_files \u4e4b\u524d\u7684\u51e0\u9879\u914d\u7f6e\u544a\u8bc9 Setuptools \u5728\u6784\u5efa\u7684\u65f6\u5019\uff0c\u5c06\u9700\u8981\u7684\u6570\u636e\u6587\u4ef6\u6253\u5305\u3002 \u5b83\u672c\u8eab\u7684\u914d\u7f6e\u5185\u5bb9\u662f\u6307\u5b9a\u9879\u76ee\u5728\u4f7f\u7528 Pip \u5b89\u88c5\u65f6\uff0c\u5c06\u9879\u76ee\u5305\u4e2d src/my_package/config/settings.yml \u590d\u5236\u5230\u7cfb\u7edf\u76ee\u5f55 /etc/my_package/settings.yml \u4f4d\u7f6e\u3002 \u5e76\u5c06\u9879\u76ee\u5305\u4e2d src/my_package/data/users.csv \u590d\u5236\u5230\u76f8\u5bf9\u4e8e\u89e3\u91ca\u5668\u7684 <sys.preifox>/share/my_package/data \u76ee\u5f55\u4e2d\u3002\u5982\u679c\u662f\u7cfb\u7edf\u7684 Python \u89e3\u91ca\u5668\uff0c\u5219\u662f\u76f8\u5bf9\u4e8e sys.prefix \u4e00\u822c\u662f /usr \u6216\u8005 /usr/local \uff0c\u5982\u679c\u662f\u7528\u6237\u5b89\u88c5\uff0c\u5219\u4e00\u822c\u662f ~/.local \u3002 \u66f4\u591a\u7ec6\u8282\u8bf7\u53c2\u8003 \u5b89\u88c5\u9644\u52a0\u6587\u4ef6 \u3002","title":"2.2.2.3 \u5b89\u88c5\u9644\u52a0\u6587\u4ef6"},{"location":"guidelines/project_management/distribution/#223","text":"\u5f53\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u6784\u5efa\u4e86\u3002 \u8fd0\u884c\u547d\u4ee4\uff1a python -m build \u8fd0\u884c\u5b8c\u6210\u540e\uff0c\u4f1a\u5728\u9879\u76ee\u6839\u76ee\u5f55\u7684 ./dist \u4e2d\u751f\u6210\u4e24\u4e2a\u5206\u53d1\u6587\u4ef6\u3002\u4e00\u4e2a\u662f .tar.gz \u7ed3\u5c3e\u7684\u6e90\u7801\u538b\u7f29\u5305\uff0c\u4e00\u4e2a\u662f .whl \u7ed3\u5c3e\u7684\u4e8c\u8fdb\u5236\u5305\u3002","title":"2.2.3 \u6784\u5efa"},{"location":"guidelines/project_management/distribution/#3","text":"\u6253\u5305\u540e\u7684\u6587\u4ef6\u53ef\u4ee5\u901a\u8fc7\u5206\u53d1\u624b\u6bb5\u7ed9\u5176\u4ed6\u4eba\u4f7f\u7528\u3002","title":"3 \u5206\u53d1"},{"location":"guidelines/project_management/distribution/#31","text":"\u624b\u52a8\u5206\u53d1\uff0c\u5373\u81ea\u5df1\u7ba1\u7406\u8fd9\u4e9b\u8f6f\u4ef6\u5305\uff0c\u5982\u901a\u8fc7\u590d\u5236\u3001 ftp \u6216\u8005\u7f51\u7edc\u53d1\u9001\u7b49\u65b9\u5f0f\u3002 \u4f7f\u7528\u65f6\uff0c\u4e0b\u8f7d\u6240\u9700\u8981\u7684\u7248\u672c\u5206\u53d1\u5305\uff0c\u7136\u540e\u4f7f\u7528 Pip \u5b89\u88c5 pip install foo.whl \u5373\u53ef\u3002","title":"3.1 \u624b\u52a8\u5206\u53d1"},{"location":"guidelines/project_management/distribution/#32","text":"Python \u6240\u7528\u516c\u5f00\u5305\u90fd\u5b58\u653e\u5728 Pypi \uff0c\u5f53\u6211\u4eec\u4f7f\u7528 pip install requests \u7684\u65f6\u5019\uff0c\u9ed8\u8ba4\u4f1a\u4ece Pypi \u4e2d\u67e5\u627e\u6700\u65b0\u7248\u672c\u7684\u5206\u53d1\u5305\uff0c\u627e\u5230\u4e86\u5c31\u5148\u4e0b\u8f7d\u5230\u672c\u5730\uff0c\u7136\u540e\u5b89\u88c5\u5230\u73af\u5883\u4e2d\u3002\u9664\u4e86\u5b98\u65b9\u4ed3\u5e93\uff0c\u8fd8\u652f\u6301\u79c1\u6709\u4ed3\u5e93\u3002 \u8981\u53d1\u5e03\u5230 Pypi \uff0c\u9996\u5148\u9700\u8981\u6ce8\u518c\u8d26\u53f7\uff0c\u5982\u679c\u662f\u8981\u6d4b\u8bd5\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u6d4b\u8bd5\u4ed3\u5e93 Test-Pypi \u3002\u5bf9\u4e8e\u79c1\u6709\u4ed3\u5e93\uff0c\u53ef\u4ee5\u53c2\u8003\u5177\u4f53\u6587\u6863\uff0c\u4f46\u4f7f\u7528\u65b9\u6cd5\u57fa\u672c\u4e00\u81f4\uff0c \u53ea\u9700\u8981\u66ff\u6362\u4e00\u4e0b\u4ed3\u5e93\u5730\u5740\u3002 \u5b89\u88c5 Twine \u5de5\u5177\u3002 pip install twine \u4e0a\u4f20\u5230 Test-Pypi \uff1a twine upload -r testpypi dist/* \u586b\u5199\u7528\u6237\u540d\u548c\u5bc6\u7801\u5373\u53ef\u4e0a\u4f20\u3002 \u4e0a\u4f20\u5230 Pypi \uff1a twine upload dist/*","title":"3.2 \u4f7f\u7528\u4ed3\u5e93\u5206\u53d1"},{"location":"guidelines/project_management/distribution/#321-twine","text":"Twine \u63d0\u4f9b\u4e86\u914d\u7f6e\uff0c\u53ef\u4ee5\u907f\u514d\u6bcf\u6b21\u8f93\u5bc6\u7801\u6216\u8005\u4ed3\u5e93\u5730\u5740\u7684\u9ebb\u70e6\u3002 \u914d\u7f6e\u6587\u4ef6 \uff1a Twine \u53ef\u4ee5\u4f7f\u7528 .pypirc \u4e2d\u7684\u914d\u7f6e\u3002\u9ed8\u8ba4\u8bfb\u53d6\u4f4d\u7f6e\u662f ~/.pypirc [distutils] index-servers = pypi testpypi private-repository [pypi] username = __token__ password = <PyPI token> [testpypi] username = __token__ password = <TestPyPI token> [private-repository] repository = <private-repository URL> username = <private-repository username> password = <private-repository password> \u4e0a\u8ff0\u914d\u7f6e\u4e2d\u6709\u4e09\u4e2a\u4ed3\u5e93\uff0c\u5206\u522b\u4e3a pypi \u3001 test-pypi \u3001 private-repository \u3002\u5728\u4f7f\u7528\u65f6\uff0c\u9ed8\u8ba4\u662f pypi \uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 -r \u53c2\u6570\u6307\u5b9a\u3002\u5176\u4e2d username \u3001 password \u4e3a\u5bf9\u5e94\u4ed3\u5e93\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u8b66\u544a \u914d\u7f6e\u6587\u4ef6\u4e2d\u4ee5\u6587\u672c\u5f62\u5f0f\u5b58\u50a8\u4e86\u5bc6\u7801\uff0c\u5e94\u6ce8\u610f\u5b89\u5168\u9690\u60a3\u3002 \u53ef\u4ee5\u4f7f\u7528 keyring \u6216\u8c03\u6574\u6587\u4ef6\u6743\u9650 chmod 600 ~/.pypirc \u3002 \u4f7f\u7528\u73af\u5883\u53d8\u91cf \uff1a TWINE_USERNAME \uff1a \u4ed3\u5e93\u7528\u6237\u540d TWINE_PASSWORD \uff1a \u4ed3\u5e93\u5bc6\u7801 TWINE_REPOSITORY \uff1a \u4ed3\u5e93\u5730\u5740\u3002\u65e2\u53ef\u4ee5\u662f\u5b8c\u6574\u5730\u5740\uff0c\u4e5f\u53ef\u4ee5\u662f .pypirc \u4e2d\u7684\u4ed3\u5e93\u540d\u79f0\u3002 \u4f7f\u7528 keyring \u7ba1\u7406\u5bc6\u7801 \uff1a \u4f7f\u7528 keyring \u53ef\u4ee5\u5f88\u5b89\u5168\u7684\u7ba1\u7406\u5bc6\u7801\uff0c\u5728\u4e0a\u4f20\u5305\u7684\u65f6\u5019\uff0c\u8f93\u5165\u7528\u6237\u540d\u540e\u5373\u53ef\u4ece keyring \u4e2d\u8bfb\u53d6\u914d\u7f6e\u7684\u5bc6\u7801\u3002 keyring set https://upload.pypi.org/legacy/ your-username \u6ce8\u610f keyring \u5728\u6ca1\u6709\u684c\u9762\u73af\u5883\u7684\u5730\u65b9\u4f7f\u7528\u8d77\u6765\u4f1a\u590d\u6742\u4e00\u70b9\u3002\u5177\u4f53\u4f7f\u7528\u53ef\u4ee5\u53c2\u8003 Using Keyring on headless Linux systems \u548c Using Keyring on headless Linux systems in a Docker container \u7981\u7528 Keyring \uff1a \u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u5e76\u4e0d\u60f3\u4f7f\u7528 keyring \uff0c\u6216\u8005 keyring \u7684\u63d0\u793a\u4f1a\u9020\u6210\u7cfb\u7edf\u6d41\u7a0b\u51fa\u73b0\u610f\u5916\uff0c\u6bd4\u5982 CI \u60c5\u51b5\u4e0b\u3002\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u65b9\u5f0f\u7981\u7528\uff1a keyring --disable","title":"3.2.1 Twine \u914d\u7f6e"},{"location":"guidelines/project_management/document/","text":"\u6587\u6863\u7ba1\u7406 \u9879\u76ee\u6587\u6863\u7528\u6765\u8bf4\u660e\u548c\u8bb0\u5f55\u9879\u76ee\u7684\u4fe1\u606f\uff0c\u6709\u52a9\u4e8e\u5f00\u53d1\u4eba\u5458\u3001\u7ba1\u7406\u4eba\u5458\u3001\u4f7f\u7528\u8005\u7684\u4ea4\u6d41\u548c\u6c9f\u901a\u3002\u5728 Python \u9879\u76ee\u4e2d \u4e00\u822c\u901a\u8fc7 Mkdocs \u548c sphinx \u6765 \u6784\u5efa\u9879\u76ee\u6587\u6863\u3002\u4e24\u8005\u90fd\u652f\u6301 markdown \u6807\u8bb0\u7684\u6587\u4ef6\uff0c\u4f46\u540e\u8005\u4e5f\u652f\u6301 reStructuredText \u6807\u8bb0\u6587\u4ef6\u3002 mkdocs Mkdocs \u662f\u4e00\u4e2a\u5feb\u901f\u3001\u7b80\u5355\u7684\u9759\u6001\u7ad9\u70b9\u751f\u6210\u5de5\u5177\u3002\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u76ee\u5f55\u4e2d\u7684 markdown \u6807\u8bb0\u6587\u4ef6\uff0c\u6765\u751f\u6210\u9759\u6001\u7f51\u9875\u3002 \u4f7f\u7528 YAML \u683c\u5f0f\u914d\u7f6e\u6587\u4ef6\u3002 \u7279\u70b9\uff1a YAML \u5355\u6587\u4ef6\u914d\u7f6e \u751f\u6210\u9759\u6001\u7ad9\u70b9 \u652f\u6301 markdown \u652f\u6301\u81ea\u5b9a\u4e49\u4e3b\u9898 \u652f\u6301 markdown \u6269\u5c55\u6807\u8bb0 \u652f\u6301\u63d2\u4ef6 sphinx sphinx \u662f\u4f7f\u7528 reStructuredText \u6807\u8bb0\u7f16\u5199\u6587\u6863\uff0c\u5e76 \u751f\u6210\u9759\u6001\u7ad9\u70b9\u7684\u5de5\u5177\u3002 \u7279\u70b9\uff1a \u5355\u4e2a Python \u6587\u4ef6\u914d\u7f6e \u751f\u6210 HTML \u3001 ePub \u7b49\u591a\u79cd\u683c\u5f0f \u652f\u6301 markdown \u548c reStructuredText \u652f\u6301\u81ea\u5b9a\u4e49\u4e3b\u9898 \u652f\u6301\u6269\u5c55 \u5b9e\u8df5 \u5728\u5f00\u53d1\u5b9e\u8df5\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528 Mkdocs \uff0c\u56e0\u4e3a\u5b83\u7b80\u5355\u4e0a\u624b\uff0c\u5e76\u4e14\u6709\u8bb8\u591a\u4f18\u79c0\u7684\u7b2c\u4e09\u65b9\u4e3b\u9898\u3002 \u5b9e\u8df5\u6848\u4f8b \u9996\u5148\u521b\u5efa\u4e00\u4e2a example-doc \u7684\u76ee\u5f55\uff0c\u7136\u540e\u521d\u59cb\u5316\u9879\u76ee\u865a\u62df\u73af\u5883\uff1a \u276f mkdir example-doc \u276f cd example-doc \u276f pipenv install mkdocs Creating a virtualenv for this project... Pipfile: /tmp/test/example-doc/Pipfile Using /usr/local/bin/python3.9 (3.9.7) to create virtualenv... \u2838 Creating virtual environment...created virtual environment CPython3.9.7.final.0-64 in 140ms creator CPython3Posix(dest=/home/kevin/.virtualenvs/example-doc-dabLH6DG, clear=False, no_vcs_ignore=False, global=False) seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/kevin/.local/share/virtualenv) added seed packages: pip==21.3.1, setuptools==58.5.3, wheel==0.37.0 activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator \u2714 Successfully created virtual environment! Virtualenv location: /home/kevin/.virtualenvs/example-doc-dabLH6DG Creating a Pipfile for this project... Installing mkdocs... Adding mkdocs to Pipfile's [packages]... \u2714 Installation Succeeded Pipfile.lock not found, creating... Locking [dev-packages] dependencies... Locking [packages] dependencies... Building requirements... Resolving dependencies... \u2714 Success! Updated Pipfile.lock (493bb6)! Installing dependencies from Pipfile.lock (493bb6)... \ud83d\udc0d \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 0/0 \u2014 00:00:00 To activate this project's virtualenv, run pipenv shell. Alternatively, run a command inside the virtualenv with pipenv run. \u8fdb\u5165\u5230\u865a\u62df\u73af\u5883\u540e\uff0c\u521d\u59cb\u5316\u6587\u6863\u914d\u7f6e\uff1a \u276f mkdocs new . INFO - Writing config file: ./mkdocs.yml INFO - Writing initial docs: ./docs/index.md \u276f ls docs mkdocs.yml Pipfile Pipfile.lock \u7136\u540e\u542f\u52a8 mkdocs \u7684\u672c\u5730\u670d\u52a1\u5668\uff1a \u276f mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.05 seconds INFO - [11:00:22] Serving on http://127.0.0.1:8000/ \u7136\u540e\u6d4f\u89c8\u5668\u6253\u5f00 [http://127.0.0.1:8000] \u8bbf\u95ee\u751f\u6210\u7684\u6587\u6863\u7ad9\u70b9\u3002 \u7ad9\u70b9\u4f7f\u7528\u9ed8\u8ba4\u4e3b\u9898\uff0c\u98ce\u683c\u6709\u70b9\u590d\u53e4\u3002\u53ef\u4ee5\u4f7f\u7528 mkdocs-material \u8ba9\u7ad9\u70b9\u66f4\u597d\u770b\uff1a \u5b89\u88c5 mkdocs-material \uff1a pipenv install mkdocs-material \u4fee\u6539\u914d\u7f6e\u6587\u4ef6 mkdocs.yml \uff0c\u589e\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a theme : name : material \u91cd\u65b0\u542f\u52a8 mkdocs serve \uff0c\u5373\u53ef\u770b\u5230\u6ce8\u610f\u5df2\u7ecf\u6539\u53d8\u3002 \u5bf9\u4e8e Mkdocs \u7684\u66f4\u591a\u4f7f\u7528\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003\u6587\u6863\uff1a Mkdocs \u5feb\u901f\u5f00\u59cb Mkdocs \u914d\u7f6e mkdocs-material \u4e3b\u9898","title":"\u6587\u6863\u7ba1\u7406"},{"location":"guidelines/project_management/document/#_1","text":"\u9879\u76ee\u6587\u6863\u7528\u6765\u8bf4\u660e\u548c\u8bb0\u5f55\u9879\u76ee\u7684\u4fe1\u606f\uff0c\u6709\u52a9\u4e8e\u5f00\u53d1\u4eba\u5458\u3001\u7ba1\u7406\u4eba\u5458\u3001\u4f7f\u7528\u8005\u7684\u4ea4\u6d41\u548c\u6c9f\u901a\u3002\u5728 Python \u9879\u76ee\u4e2d \u4e00\u822c\u901a\u8fc7 Mkdocs \u548c sphinx \u6765 \u6784\u5efa\u9879\u76ee\u6587\u6863\u3002\u4e24\u8005\u90fd\u652f\u6301 markdown \u6807\u8bb0\u7684\u6587\u4ef6\uff0c\u4f46\u540e\u8005\u4e5f\u652f\u6301 reStructuredText \u6807\u8bb0\u6587\u4ef6\u3002","title":"\u6587\u6863\u7ba1\u7406"},{"location":"guidelines/project_management/document/#mkdocs","text":"Mkdocs \u662f\u4e00\u4e2a\u5feb\u901f\u3001\u7b80\u5355\u7684\u9759\u6001\u7ad9\u70b9\u751f\u6210\u5de5\u5177\u3002\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u76ee\u5f55\u4e2d\u7684 markdown \u6807\u8bb0\u6587\u4ef6\uff0c\u6765\u751f\u6210\u9759\u6001\u7f51\u9875\u3002 \u4f7f\u7528 YAML \u683c\u5f0f\u914d\u7f6e\u6587\u4ef6\u3002 \u7279\u70b9\uff1a YAML \u5355\u6587\u4ef6\u914d\u7f6e \u751f\u6210\u9759\u6001\u7ad9\u70b9 \u652f\u6301 markdown \u652f\u6301\u81ea\u5b9a\u4e49\u4e3b\u9898 \u652f\u6301 markdown \u6269\u5c55\u6807\u8bb0 \u652f\u6301\u63d2\u4ef6","title":"mkdocs"},{"location":"guidelines/project_management/document/#sphinx","text":"sphinx \u662f\u4f7f\u7528 reStructuredText \u6807\u8bb0\u7f16\u5199\u6587\u6863\uff0c\u5e76 \u751f\u6210\u9759\u6001\u7ad9\u70b9\u7684\u5de5\u5177\u3002 \u7279\u70b9\uff1a \u5355\u4e2a Python \u6587\u4ef6\u914d\u7f6e \u751f\u6210 HTML \u3001 ePub \u7b49\u591a\u79cd\u683c\u5f0f \u652f\u6301 markdown \u548c reStructuredText \u652f\u6301\u81ea\u5b9a\u4e49\u4e3b\u9898 \u652f\u6301\u6269\u5c55","title":"sphinx"},{"location":"guidelines/project_management/document/#_2","text":"\u5728\u5f00\u53d1\u5b9e\u8df5\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528 Mkdocs \uff0c\u56e0\u4e3a\u5b83\u7b80\u5355\u4e0a\u624b\uff0c\u5e76\u4e14\u6709\u8bb8\u591a\u4f18\u79c0\u7684\u7b2c\u4e09\u65b9\u4e3b\u9898\u3002","title":"\u5b9e\u8df5"},{"location":"guidelines/project_management/document/#_3","text":"\u9996\u5148\u521b\u5efa\u4e00\u4e2a example-doc \u7684\u76ee\u5f55\uff0c\u7136\u540e\u521d\u59cb\u5316\u9879\u76ee\u865a\u62df\u73af\u5883\uff1a \u276f mkdir example-doc \u276f cd example-doc \u276f pipenv install mkdocs Creating a virtualenv for this project... Pipfile: /tmp/test/example-doc/Pipfile Using /usr/local/bin/python3.9 (3.9.7) to create virtualenv... \u2838 Creating virtual environment...created virtual environment CPython3.9.7.final.0-64 in 140ms creator CPython3Posix(dest=/home/kevin/.virtualenvs/example-doc-dabLH6DG, clear=False, no_vcs_ignore=False, global=False) seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/kevin/.local/share/virtualenv) added seed packages: pip==21.3.1, setuptools==58.5.3, wheel==0.37.0 activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator \u2714 Successfully created virtual environment! Virtualenv location: /home/kevin/.virtualenvs/example-doc-dabLH6DG Creating a Pipfile for this project... Installing mkdocs... Adding mkdocs to Pipfile's [packages]... \u2714 Installation Succeeded Pipfile.lock not found, creating... Locking [dev-packages] dependencies... Locking [packages] dependencies... Building requirements... Resolving dependencies... \u2714 Success! Updated Pipfile.lock (493bb6)! Installing dependencies from Pipfile.lock (493bb6)... \ud83d\udc0d \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 0/0 \u2014 00:00:00 To activate this project's virtualenv, run pipenv shell. Alternatively, run a command inside the virtualenv with pipenv run. \u8fdb\u5165\u5230\u865a\u62df\u73af\u5883\u540e\uff0c\u521d\u59cb\u5316\u6587\u6863\u914d\u7f6e\uff1a \u276f mkdocs new . INFO - Writing config file: ./mkdocs.yml INFO - Writing initial docs: ./docs/index.md \u276f ls docs mkdocs.yml Pipfile Pipfile.lock \u7136\u540e\u542f\u52a8 mkdocs \u7684\u672c\u5730\u670d\u52a1\u5668\uff1a \u276f mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.05 seconds INFO - [11:00:22] Serving on http://127.0.0.1:8000/ \u7136\u540e\u6d4f\u89c8\u5668\u6253\u5f00 [http://127.0.0.1:8000] \u8bbf\u95ee\u751f\u6210\u7684\u6587\u6863\u7ad9\u70b9\u3002 \u7ad9\u70b9\u4f7f\u7528\u9ed8\u8ba4\u4e3b\u9898\uff0c\u98ce\u683c\u6709\u70b9\u590d\u53e4\u3002\u53ef\u4ee5\u4f7f\u7528 mkdocs-material \u8ba9\u7ad9\u70b9\u66f4\u597d\u770b\uff1a \u5b89\u88c5 mkdocs-material \uff1a pipenv install mkdocs-material \u4fee\u6539\u914d\u7f6e\u6587\u4ef6 mkdocs.yml \uff0c\u589e\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a theme : name : material \u91cd\u65b0\u542f\u52a8 mkdocs serve \uff0c\u5373\u53ef\u770b\u5230\u6ce8\u610f\u5df2\u7ecf\u6539\u53d8\u3002 \u5bf9\u4e8e Mkdocs \u7684\u66f4\u591a\u4f7f\u7528\u7ec6\u8282\u53ef\u4ee5\u53c2\u8003\u6587\u6863\uff1a Mkdocs \u5feb\u901f\u5f00\u59cb Mkdocs \u914d\u7f6e mkdocs-material \u4e3b\u9898","title":"\u5b9e\u8df5\u6848\u4f8b"},{"location":"guidelines/project_management/project_structure/","text":"\u9879\u76ee\u7ed3\u6784 \u4ece\u54ea\u4e9b\u5730\u65b9\u63cf\u8ff0\uff1a \u5206\u522b\u63cf\u8ff0\u4e24\u79cd\u76ee\u5f55\u7ed3\u6784 \u4e24\u79cd\u76ee\u5f55\u7ed3\u6784\u7684\u6bd4\u8f83\u4e0e\u533a\u522b \u5f53\u524d\u91c7\u7528\u7684\u7ed3\u6784 \u7531\u4e8e Python \u7b80\u5355\u6613\u7528\uff0c\u5f88\u591a\u5f00\u59cb\u4f7f\u7528 Python \u7684\u4eba\u90fd\u662f\u4ece\u4e00\u4e2a\u811a\u672c\u6587\u4ef6\u5f00\u59cb\uff0c\u9010\u6b65\u5f62\u6210\u591a\u4e2a Python \u6587\u4ef6\u7ec4\u6210\u7684\u7a0b\u5e8f\u3002\u4e5f\u6b63\u56e0\u4e3a\u5982\u6b64\u5927\u90e8\u5206\u4eba\u5e76\u6ca1\u4ee5\u4e00\u4e2a\u9879\u76ee\u6216\u5de5\u7a0b\u7684\u6982\u5ff5\u53bb\u770b\u5f85\u81ea\u5df1\u7684\u7a0b\u5e8f\u3002\u800c\u73b0\u5728\u793e\u533a\u4e2d\u7684\u6d41\u884c\u9879\u76ee\u4e5f\u5b58\u5728\u4e24\u79cd\u4e0d\u540c\u7684\u76ee\u5f55\u7ed3\u6784\u3002 1 \u7b80\u5355\u7ed3\u6784 Python \u9879\u76ee\u6253\u5305 \u6587\u7ae0\u4e2d\u4ee5\u4e00\u4e2a\u7b80\u5355\u9879\u76ee\u7ed3\u6784\u6f14\u793a\u4e86\u5982\u4f55\u6253\u5305\u4e00\u4e2a Python \u9879\u76ee packaging_tutorial \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 example_pkg \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 tests \u9879\u76ee\u7ed3\u6784\u4ee5\u6839\u76ee\u5f55\u5f00\u59cb\uff0c\u4f5c\u4e3a\u9879\u76ee\u7684\u73af\u5883\u3002\u56e0\u4e3a\uff0c\u4e3a\u4e86\u5728\u5f00\u53d1\u4e2d\u6b63\u5e38\u5bfc\u5165 example_pkg \u4e2d\u6240\u6709\u7684\u4e1c\u897f\uff0c\u5c31\u9700\u8981\u5c06\u9879\u76ee\u6839\u76ee\u5f55\u6dfb\u52a0\u5230 sys.path \u4e2d\u3002\u8fd9\u4e5f\u5c31\u8ba9\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u5305\u90fd\u53d8\u6210\u4e86\u53ef\u5bfc\u5165\u3002\u5f53\u6709\u591a\u4e2a\u540c\u7ea7\u5305\u65f6\uff0c\u5b83\u4eec\u90fd\u662f\u6241\u5e73\u7684\u6563\u843d\u5728\u9879\u76ee\u6839\u76ee\u5f55\u3002\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u53ef\u80fd\u8fd8\u5b58\u5728\u5176\u4ed6\u975e\u5305\u76ee\u5f55\uff0c\u5982 data \u3001 docs \u7b49\u3002\u5982\u679c\u9700\u8981\u672c\u5730\u5f15\u7528\u7b2c\u4e09\u65b9\u5e93\uff0c\u4e5f\u9700\u8981\u653e\u5230\u6839\u76ee\u5f55\uff0c\u4f46\u7b2c\u4e09\u65b9\u5305\u5e76\u4e0d\u662f\u9879\u76ee\u7684\u5b50\u5305\uff0c\u800c\u662f\u5b83\u7684\u4e00\u4e2a\u5f15\u7528\u3002\u8fd9\u6837\u505a\u4f1a\u9020\u6210\u804c\u8d23\u6df7\u4e71\u3002 \u6bd4\u5982\u8fd9\u6837\u7684\u4e00\u4e2a\u9879\u76ee\uff1a tutorial \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 data | \u2514\u2500\u2500 user.json \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 history.md \u251c\u2500\u2500 user \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 views \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 requests # \u8fd9\u662f\u9700\u8981\u672c\u5730\u6253\u5305\u7684\u7b2c\u4e09\u65b9\u5305 \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 tests \u5f53\u591a\u4e2a\u76ee\u5f55\u6241\u5e73\u7684\u5206\u5e03\u5728\u9879\u76ee\u6839\u76ee\u5f55\u65f6\uff0c\u5b83\u4eec\u626e\u6f14\u8005\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u5728\u5f00\u53d1\u4e0a\uff0c\u4f1a\u5e26\u4e86\u4e00\u5b9a\u7684\u6df7\u4e71\u3002\u800c\u4e14\u5728\u6253\u5305\u548c\u6d4b\u8bd5\u4e0a\u4e5f\u4f1a\u5e26\u6765\u4e00\u4e9b\u4e0d\u4fbf\u3002 \u5728\u6253\u5305\u4e0a\uff0c\u9700\u8981\u63d0\u4f9b\u66f4\u591a\u7684\u914d\u7f6e\u6392\u9664\u4e0d\u5fc5\u8981\u7684\u76ee\u5f55\uff0c\u5982 docs \u6216\u8005\u5176\u4ed6\u4e0d\u9700\u8981\u6253\u5305\u4ec5\u9879\u76ee\u4e2d\u7684\u4e1c\u897f\u3002 \u5f53\u4f7f\u7528\u53ef\u7f16\u8f91\u5b89\u88c5\uff08 pip install -e . \uff09 \u65f6\uff0c\u4f1a\u5c06\u9879\u76ee\u6839\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u4e1c\u897f\u5b89\u88c5\u5230\u73af\u5883\u4e2d\uff0c\u5305\u62ec\u4e00\u4e9b\u4e0d\u9700\u8981\u7684\u3002 \u4f7f\u7528\u81ea\u52a8\u5316\u6d4b\u8bd5 tox \u5de5\u5177\u65e0\u6cd5\u68c0\u6d4b\u5b89\u88c5\u4e4b\u540e\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u79cd\u76ee\u5f55\u73af\u5883\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u73af\u5883\u4e2d\u7684\u5305\uff08\u9879\u76ee\u6839\u76ee\u5f55\u88ab\u6dfb\u52a0\u5230 sys.path \u4e2d\u4e86\uff09\u3002 2 src \u7ed3\u6784 Pypa \u7ef4\u62a4\u7684\u793a\u4f8b\u9879\u76ee \u4e2d\u91c7\u7528\u4e86\u4e00\u79cd\u66f4\u63a8\u8350\u7684\u7ed3\u6784 src \u7ed3\u6784\u3002 sampleproject \u251c\u2500\u2500 data \u251c\u2500\u2500 src | \u2514\u2500\u2500 sample | \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 tests \u516d\u5e74\u524d\u7684\u8fd9\u7bc7\u6587\u7ae0 Packaging a python library \u5c31\u8be6\u7ec6\u9610\u8ff0\u4e86\u4f7f\u7528 src \u7ed3\u6784\u6bd4\u7b80\u5355\u7ed3\u6784\u7684\u8bf8\u591a\u6709\u70b9\u3002\u800c\u73b0\u5728\u4e5f\u9010\u6e10\u88ab\u793e\u533a\u4f5c\u4e3a\u4e00\u4e2a\u6807\u51c6\u9075\u5faa\u3002\u867d\u7136\u793e\u533a\u4e2d\u6709\u5927\u91cf\u8001\u7684\u9879\u76ee\u4f9d\u7136\u91c7\u7528\u7b80\u5355\u5e03\u5c40\uff0c\u4f46\u65b0\u9879\u76ee\u63a8\u8350\u4f7f\u7528 src \u7ed3\u6784\u3002 \u5982\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u9879\u76ee\u7ed3\u6784\uff1a sampleproject \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 user.json \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 history.md \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 requests \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 sample \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 user \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 views \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 user \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 views \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tox.ini \u9879\u76ee\u7684\u5305\u7ed3\u6784\u5f88\u6e05\u6670\uff0c\u5728\u73af\u5883\u4e2d\u53ea\u9700\u8981\u5f15\u5165 src \u76ee\u5f55\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u5bfc\u5165\u9879\u76ee\u6e90\u4ee3\u7801\u3002\u901a\u8fc7 pip install -e . \u53ef\u7f16\u8f91\u5b89\u88c5\uff0c\u4e5f\u53ea\u4f1a\u5b89\u88c5 src \u4e2d\u7684\u5305\u3002\u7ba1\u7406\u8d77\u6765\u66f4\u52a0\u6e05\u6670\u3002 3 \u5b9e\u8df5 \u4e0b\u9762\u4ee5\u4e00\u4e2a\u7b80\u5355\u771f\u5b9e\u7684\u9879\u76ee\u6765\u6f14\u793a\u4f7f\u7528 src \u7ec4\u7ec7\u9879\u76ee 3.1 \u521b\u5efa\u9879\u76ee \u521b\u5efa\u9879\u76ee: mkdir sampleproject cd sampleproject \u521d\u59cb\u5316\u7248\u672c\u7ba1\u7406\uff1a git init # \u5982\u679c\u6ca1\u6709\u5168\u5c40\u7528\u6237\u540d\u548c\u90ae\u7bb1\uff0c\u9700\u8981\u5148\u914d\u7f6e git config user.email example@example.com git config user.name example \u521b\u5efa\u9879\u76ee\u81ea\u8ff0\u6587\u4ef6\uff1a touch README.md 3.2 \u7f16\u5199\u9879\u76ee\u6e90\u4ee3\u7801 \u521b\u5efa\u9879\u76ee\u5305\uff1a mkdir src/sample_project touch src/sample_project/__init__.py \u521d\u59cb\u5316\u7248\u672c\u53f7\uff1a src/sample_project/__init__.py __version__ = '0.1.0' \u5b89\u88c5\u4f9d\u8d56\uff1a pip install click \u521b\u5efa\u547d\u4ee4\u5165\u53e3\u6587\u4ef6\uff1a src/sample_project/cmdline.py import click @click . command () def main (): click . echo ( 'Hello world!' ) if __name__ == \"__main__\" : main () 3.3 \u7f16\u5199\u6d4b\u8bd5 \u521b\u5efa\u6d4b\u8bd5\u76ee\u5f55\uff1a mkdir -p tests/sample_project touch tests/sample_project/__init__.py \u5b89\u88c5\u4f9d\u8d56\uff1a pip install pytest \u521b\u5efa\u6d4b\u8bd5\u6587\u4ef6\uff1a tests/sample_project/test_cmdline.py from click.testing import CliRunner from sample_project import cmdline def test_main (): runner = CliRunner () result = runner . invoke ( cmdline . main ) assert 'Hello world!' in result . output \u8fd0\u884c\u6d4b\u8bd5\uff1a pip install -e . # \u4ee5\u53ef\u7f16\u8f91\u5b89\u88c5\u65b9\u5f0f\u5230\u73af\u5883\u4e2d pytest \u6d4b\u8bd5\u8fd0\u884c\u6210\u529f\uff0c\u8bf4\u660e\u529f\u80fd\u6b63\u786e 3.4 \u521d\u59cb\u5316\u6253\u5305\u914d\u7f6e \u7f16\u5199\u6253\u5305\u914d\u7f6e\uff1a setup.py import setuptools setuptools . setup () setup.cfg [metadata] name = sample_project version = attr: sample_project.__version__ author = example author_email = example@example.com description = Sample Project keywords = ssl_manager long_description = file: README.md long_description_content_type = text/markdown classifiers = Operating System :: OS Independent Programming Language :: Python :: 3.7 [options] python_requires > = 3.7 include_package_data = True packages = find: package_dir = = src install_requires = click [options.entry_points] console_scripts = ssl_manager = sample_project.cmdline:main [options.packages.find] where = src [tool:pytest] testpaths = tests python_files = tests.py test_*.py *_tests.py \u6253\u5305\uff1a python setup.py bdist_wheel 3.5 \u603b\u7ed3 \u81f3\u6b64\uff0c\u4e00\u4e2a\u9879\u76ee\u5f00\u53d1\u5b8c\u6210\uff0c\u5b8c\u6574\u9879\u76ee\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 build \u2502 \u251c\u2500\u2500 bdist.linux-x86_64 \u2502 \u2514\u2500\u2500 lib \u2502 \u2514\u2500\u2500 sample_project \u2502 \u251c\u2500\u2500 cmdline.py \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 sample_project-0.1.0.linux-x86_64.tar.gz \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 sample_project \u2502 \u2502 \u251c\u2500\u2500 cmdline.py \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 sample_project.egg-info \u2502 \u251c\u2500\u2500 dependency_links.txt \u2502 \u251c\u2500\u2500 entry_points.txt \u2502 \u251c\u2500\u2500 PKG-INFO \u2502 \u251c\u2500\u2500 requires.txt \u2502 \u251c\u2500\u2500 SOURCES.txt \u2502 \u2514\u2500\u2500 top_level.txt \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 sample_project \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_cmdline.py","title":"\u9879\u76ee\u7ed3\u6784"},{"location":"guidelines/project_management/project_structure/#_1","text":"\u4ece\u54ea\u4e9b\u5730\u65b9\u63cf\u8ff0\uff1a \u5206\u522b\u63cf\u8ff0\u4e24\u79cd\u76ee\u5f55\u7ed3\u6784 \u4e24\u79cd\u76ee\u5f55\u7ed3\u6784\u7684\u6bd4\u8f83\u4e0e\u533a\u522b \u5f53\u524d\u91c7\u7528\u7684\u7ed3\u6784 \u7531\u4e8e Python \u7b80\u5355\u6613\u7528\uff0c\u5f88\u591a\u5f00\u59cb\u4f7f\u7528 Python \u7684\u4eba\u90fd\u662f\u4ece\u4e00\u4e2a\u811a\u672c\u6587\u4ef6\u5f00\u59cb\uff0c\u9010\u6b65\u5f62\u6210\u591a\u4e2a Python \u6587\u4ef6\u7ec4\u6210\u7684\u7a0b\u5e8f\u3002\u4e5f\u6b63\u56e0\u4e3a\u5982\u6b64\u5927\u90e8\u5206\u4eba\u5e76\u6ca1\u4ee5\u4e00\u4e2a\u9879\u76ee\u6216\u5de5\u7a0b\u7684\u6982\u5ff5\u53bb\u770b\u5f85\u81ea\u5df1\u7684\u7a0b\u5e8f\u3002\u800c\u73b0\u5728\u793e\u533a\u4e2d\u7684\u6d41\u884c\u9879\u76ee\u4e5f\u5b58\u5728\u4e24\u79cd\u4e0d\u540c\u7684\u76ee\u5f55\u7ed3\u6784\u3002","title":"\u9879\u76ee\u7ed3\u6784"},{"location":"guidelines/project_management/project_structure/#1","text":"Python \u9879\u76ee\u6253\u5305 \u6587\u7ae0\u4e2d\u4ee5\u4e00\u4e2a\u7b80\u5355\u9879\u76ee\u7ed3\u6784\u6f14\u793a\u4e86\u5982\u4f55\u6253\u5305\u4e00\u4e2a Python \u9879\u76ee packaging_tutorial \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 example_pkg \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 tests \u9879\u76ee\u7ed3\u6784\u4ee5\u6839\u76ee\u5f55\u5f00\u59cb\uff0c\u4f5c\u4e3a\u9879\u76ee\u7684\u73af\u5883\u3002\u56e0\u4e3a\uff0c\u4e3a\u4e86\u5728\u5f00\u53d1\u4e2d\u6b63\u5e38\u5bfc\u5165 example_pkg \u4e2d\u6240\u6709\u7684\u4e1c\u897f\uff0c\u5c31\u9700\u8981\u5c06\u9879\u76ee\u6839\u76ee\u5f55\u6dfb\u52a0\u5230 sys.path \u4e2d\u3002\u8fd9\u4e5f\u5c31\u8ba9\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u5305\u90fd\u53d8\u6210\u4e86\u53ef\u5bfc\u5165\u3002\u5f53\u6709\u591a\u4e2a\u540c\u7ea7\u5305\u65f6\uff0c\u5b83\u4eec\u90fd\u662f\u6241\u5e73\u7684\u6563\u843d\u5728\u9879\u76ee\u6839\u76ee\u5f55\u3002\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u53ef\u80fd\u8fd8\u5b58\u5728\u5176\u4ed6\u975e\u5305\u76ee\u5f55\uff0c\u5982 data \u3001 docs \u7b49\u3002\u5982\u679c\u9700\u8981\u672c\u5730\u5f15\u7528\u7b2c\u4e09\u65b9\u5e93\uff0c\u4e5f\u9700\u8981\u653e\u5230\u6839\u76ee\u5f55\uff0c\u4f46\u7b2c\u4e09\u65b9\u5305\u5e76\u4e0d\u662f\u9879\u76ee\u7684\u5b50\u5305\uff0c\u800c\u662f\u5b83\u7684\u4e00\u4e2a\u5f15\u7528\u3002\u8fd9\u6837\u505a\u4f1a\u9020\u6210\u804c\u8d23\u6df7\u4e71\u3002 \u6bd4\u5982\u8fd9\u6837\u7684\u4e00\u4e2a\u9879\u76ee\uff1a tutorial \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 data | \u2514\u2500\u2500 user.json \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 history.md \u251c\u2500\u2500 user \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 views \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 requests # \u8fd9\u662f\u9700\u8981\u672c\u5730\u6253\u5305\u7684\u7b2c\u4e09\u65b9\u5305 \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 tests \u5f53\u591a\u4e2a\u76ee\u5f55\u6241\u5e73\u7684\u5206\u5e03\u5728\u9879\u76ee\u6839\u76ee\u5f55\u65f6\uff0c\u5b83\u4eec\u626e\u6f14\u8005\u4e0d\u540c\u7684\u529f\u80fd\uff0c\u5728\u5f00\u53d1\u4e0a\uff0c\u4f1a\u5e26\u4e86\u4e00\u5b9a\u7684\u6df7\u4e71\u3002\u800c\u4e14\u5728\u6253\u5305\u548c\u6d4b\u8bd5\u4e0a\u4e5f\u4f1a\u5e26\u6765\u4e00\u4e9b\u4e0d\u4fbf\u3002 \u5728\u6253\u5305\u4e0a\uff0c\u9700\u8981\u63d0\u4f9b\u66f4\u591a\u7684\u914d\u7f6e\u6392\u9664\u4e0d\u5fc5\u8981\u7684\u76ee\u5f55\uff0c\u5982 docs \u6216\u8005\u5176\u4ed6\u4e0d\u9700\u8981\u6253\u5305\u4ec5\u9879\u76ee\u4e2d\u7684\u4e1c\u897f\u3002 \u5f53\u4f7f\u7528\u53ef\u7f16\u8f91\u5b89\u88c5\uff08 pip install -e . \uff09 \u65f6\uff0c\u4f1a\u5c06\u9879\u76ee\u6839\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u4e1c\u897f\u5b89\u88c5\u5230\u73af\u5883\u4e2d\uff0c\u5305\u62ec\u4e00\u4e9b\u4e0d\u9700\u8981\u7684\u3002 \u4f7f\u7528\u81ea\u52a8\u5316\u6d4b\u8bd5 tox \u5de5\u5177\u65e0\u6cd5\u68c0\u6d4b\u5b89\u88c5\u4e4b\u540e\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u79cd\u76ee\u5f55\u73af\u5883\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u73af\u5883\u4e2d\u7684\u5305\uff08\u9879\u76ee\u6839\u76ee\u5f55\u88ab\u6dfb\u52a0\u5230 sys.path \u4e2d\u4e86\uff09\u3002","title":"1 \u7b80\u5355\u7ed3\u6784"},{"location":"guidelines/project_management/project_structure/#2-src","text":"Pypa \u7ef4\u62a4\u7684\u793a\u4f8b\u9879\u76ee \u4e2d\u91c7\u7528\u4e86\u4e00\u79cd\u66f4\u63a8\u8350\u7684\u7ed3\u6784 src \u7ed3\u6784\u3002 sampleproject \u251c\u2500\u2500 data \u251c\u2500\u2500 src | \u2514\u2500\u2500 sample | \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 tests \u516d\u5e74\u524d\u7684\u8fd9\u7bc7\u6587\u7ae0 Packaging a python library \u5c31\u8be6\u7ec6\u9610\u8ff0\u4e86\u4f7f\u7528 src \u7ed3\u6784\u6bd4\u7b80\u5355\u7ed3\u6784\u7684\u8bf8\u591a\u6709\u70b9\u3002\u800c\u73b0\u5728\u4e5f\u9010\u6e10\u88ab\u793e\u533a\u4f5c\u4e3a\u4e00\u4e2a\u6807\u51c6\u9075\u5faa\u3002\u867d\u7136\u793e\u533a\u4e2d\u6709\u5927\u91cf\u8001\u7684\u9879\u76ee\u4f9d\u7136\u91c7\u7528\u7b80\u5355\u5e03\u5c40\uff0c\u4f46\u65b0\u9879\u76ee\u63a8\u8350\u4f7f\u7528 src \u7ed3\u6784\u3002 \u5982\u4e0b\u9762\u8fd9\u4e2a\u793a\u4f8b\u9879\u76ee\u7ed3\u6784\uff1a sampleproject \u251c\u2500\u2500 data \u2502 \u2514\u2500\u2500 user.json \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 history.md \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 requests \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 sample \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 user \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 views \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 user \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 views \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tox.ini \u9879\u76ee\u7684\u5305\u7ed3\u6784\u5f88\u6e05\u6670\uff0c\u5728\u73af\u5883\u4e2d\u53ea\u9700\u8981\u5f15\u5165 src \u76ee\u5f55\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u5bfc\u5165\u9879\u76ee\u6e90\u4ee3\u7801\u3002\u901a\u8fc7 pip install -e . \u53ef\u7f16\u8f91\u5b89\u88c5\uff0c\u4e5f\u53ea\u4f1a\u5b89\u88c5 src \u4e2d\u7684\u5305\u3002\u7ba1\u7406\u8d77\u6765\u66f4\u52a0\u6e05\u6670\u3002","title":"2 src \u7ed3\u6784"},{"location":"guidelines/project_management/project_structure/#3","text":"\u4e0b\u9762\u4ee5\u4e00\u4e2a\u7b80\u5355\u771f\u5b9e\u7684\u9879\u76ee\u6765\u6f14\u793a\u4f7f\u7528 src \u7ec4\u7ec7\u9879\u76ee","title":"3 \u5b9e\u8df5"},{"location":"guidelines/project_management/project_structure/#31","text":"\u521b\u5efa\u9879\u76ee: mkdir sampleproject cd sampleproject \u521d\u59cb\u5316\u7248\u672c\u7ba1\u7406\uff1a git init # \u5982\u679c\u6ca1\u6709\u5168\u5c40\u7528\u6237\u540d\u548c\u90ae\u7bb1\uff0c\u9700\u8981\u5148\u914d\u7f6e git config user.email example@example.com git config user.name example \u521b\u5efa\u9879\u76ee\u81ea\u8ff0\u6587\u4ef6\uff1a touch README.md","title":"3.1 \u521b\u5efa\u9879\u76ee"},{"location":"guidelines/project_management/project_structure/#32","text":"\u521b\u5efa\u9879\u76ee\u5305\uff1a mkdir src/sample_project touch src/sample_project/__init__.py \u521d\u59cb\u5316\u7248\u672c\u53f7\uff1a src/sample_project/__init__.py __version__ = '0.1.0' \u5b89\u88c5\u4f9d\u8d56\uff1a pip install click \u521b\u5efa\u547d\u4ee4\u5165\u53e3\u6587\u4ef6\uff1a src/sample_project/cmdline.py import click @click . command () def main (): click . echo ( 'Hello world!' ) if __name__ == \"__main__\" : main ()","title":"3.2 \u7f16\u5199\u9879\u76ee\u6e90\u4ee3\u7801"},{"location":"guidelines/project_management/project_structure/#33","text":"\u521b\u5efa\u6d4b\u8bd5\u76ee\u5f55\uff1a mkdir -p tests/sample_project touch tests/sample_project/__init__.py \u5b89\u88c5\u4f9d\u8d56\uff1a pip install pytest \u521b\u5efa\u6d4b\u8bd5\u6587\u4ef6\uff1a tests/sample_project/test_cmdline.py from click.testing import CliRunner from sample_project import cmdline def test_main (): runner = CliRunner () result = runner . invoke ( cmdline . main ) assert 'Hello world!' in result . output \u8fd0\u884c\u6d4b\u8bd5\uff1a pip install -e . # \u4ee5\u53ef\u7f16\u8f91\u5b89\u88c5\u65b9\u5f0f\u5230\u73af\u5883\u4e2d pytest \u6d4b\u8bd5\u8fd0\u884c\u6210\u529f\uff0c\u8bf4\u660e\u529f\u80fd\u6b63\u786e","title":"3.3 \u7f16\u5199\u6d4b\u8bd5"},{"location":"guidelines/project_management/project_structure/#34","text":"\u7f16\u5199\u6253\u5305\u914d\u7f6e\uff1a setup.py import setuptools setuptools . setup () setup.cfg [metadata] name = sample_project version = attr: sample_project.__version__ author = example author_email = example@example.com description = Sample Project keywords = ssl_manager long_description = file: README.md long_description_content_type = text/markdown classifiers = Operating System :: OS Independent Programming Language :: Python :: 3.7 [options] python_requires > = 3.7 include_package_data = True packages = find: package_dir = = src install_requires = click [options.entry_points] console_scripts = ssl_manager = sample_project.cmdline:main [options.packages.find] where = src [tool:pytest] testpaths = tests python_files = tests.py test_*.py *_tests.py \u6253\u5305\uff1a python setup.py bdist_wheel","title":"3.4 \u521d\u59cb\u5316\u6253\u5305\u914d\u7f6e"},{"location":"guidelines/project_management/project_structure/#35","text":"\u81f3\u6b64\uff0c\u4e00\u4e2a\u9879\u76ee\u5f00\u53d1\u5b8c\u6210\uff0c\u5b8c\u6574\u9879\u76ee\u7ed3\u6784\u5982\u4e0b\uff1a \u251c\u2500\u2500 build \u2502 \u251c\u2500\u2500 bdist.linux-x86_64 \u2502 \u2514\u2500\u2500 lib \u2502 \u2514\u2500\u2500 sample_project \u2502 \u251c\u2500\u2500 cmdline.py \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 sample_project-0.1.0.linux-x86_64.tar.gz \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 sample_project \u2502 \u2502 \u251c\u2500\u2500 cmdline.py \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 sample_project.egg-info \u2502 \u251c\u2500\u2500 dependency_links.txt \u2502 \u251c\u2500\u2500 entry_points.txt \u2502 \u251c\u2500\u2500 PKG-INFO \u2502 \u251c\u2500\u2500 requires.txt \u2502 \u251c\u2500\u2500 SOURCES.txt \u2502 \u2514\u2500\u2500 top_level.txt \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 sample_project \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_cmdline.py","title":"3.5 \u603b\u7ed3"},{"location":"guidelines/tutorial/develop/","text":"\u529f\u80fd\u5f00\u53d1 \u6839\u636e\u524d\u9762\u7684\u7cfb\u7edf\u8bbe\u8ba1\uff0c ETL \u9879\u76ee\u603b\u5171\u6709\u4e09\u4e2a\u6838\u5fc3\u6a21\u5757\uff0c\u5206\u522b\u662f extractor \u3001 transformer \u548c loader \u3002\u4e3a\u4e86 \u80fd\u8fd0\u884c\u903b\u8f91\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a manage \u6a21\u5757\u7528\u6765\u7f16\u6392\u4e09\u4e2a\u6a21\u5757\u7684\u903b\u8f91\u3002\u7136\u540e\u4f1a\u5728\u547d\u4ee4\u884c\u4e2d\u6ce8\u518c\u4e00\u4e2a\u5165\u53e3\u65b9\u6cd5\uff0c\u8c03\u7528 mange \u7684\u903b\u8f91\u3002 extractor extractor \u7684\u4f5c\u7528\u662f\u4ece\u6e90\u76ee\u6807\u63d0\u53d6\u6570\u636e\uff0c\u76ee\u6807\u53ef\u4ee5\u662f\u6587\u4ef6\u3001\u6570\u636e\u5e93\u3001\u6d88\u606f\u961f\u5217\u7b49\u3002\u8fd9\u5178\u578b\u662f\u4e00\u4e2a\u591a\u5b9e\u73b0\u7684\u60c5\u51b5\uff0c\u540c\u65f6\u4e5f \u4e3a\u4e86\u7edf\u4e00\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u7f16\u5199\u81ea\u5df1\u7684 extractor \uff0c\u5c31\u9700\u8981\u5bf9 extractor \u505a\u51fa\u4e00\u4e2a\u62bd\u8c61\u8bbe\u8ba1\u3002\u6211\u4eec\u4f7f\u7528 BaseExtractor \u7c7b \u505a\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b\u3002 extractor \u57fa\u7c7b \u521b\u5efa extractor \u5305\uff0c\u5e76\u5728\u91cc\u9762\u65b0\u5efa\u4e00\u4e2a base.py \u6587\u4ef6\uff0c\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a \u6ce8\u610f\uff1aPython \u7684\u5305\u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u5305\u542b\u4e00\u4e2a __init__.py \u6587\u4ef6\u3002\u53ea\u662f\u4e00\u4e2a\u7a7a\u6587\u4ef6\u5939\uff0c\u4e0d\u662f\u5408\u6cd5\u7684 Python \u5305\u3002 src/example_etl/extractor/base.py \"\"\"Base extractor.\"\"\" from typing import Iterable class BaseExtractor : \"\"\"Base extractor\"\"\" def __init__ ( self , settings ): self . settings = settings self . setup () def setup ( self ): \"\"\"Setup something when init extractor\"\"\" def extract ( self ) -> Iterable [ str ]: \"\"\"Extract data.\"\"\" raise NotImplementedError () def close ( self ): \"\"\"Close something.\"\"\" def __enter__ ( self ): return self def __exit__ ( self , exc_type , exc_val , exc_tb ): self . close () BaseExtractor \u6709\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5 extract \uff0c\u9700\u8981\u5b9e\u73b0\u65f6\uff0c\u7ee7\u627f\u8be5\u7c7b\uff0c\u5e76\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5\u5373\u53ef\u3002 BaseExtractor \u540c\u65f6\u9ed8\u8ba4\u5b9e\u73b0\u4e86 __enter__ \u548c __exit__ \u4e24\u4e2a\u65b9\u6cd5\uff0c\u76ee\u7684\u662f\u8ba9\u5b9e\u73b0\u7c7b\u53ef\u4ee5\u901a\u8fc7 with \u5173\u952e\u5b57\u8c03\u7528\uff0c\u5e76\u81ea\u52a8\u7ba1\u7406 close \u65b9\u6cd5\u3002\u8fd9\u5bf9\u4e8e\u6570\u636e\u5e93 \u8fde\u63a5\u7684\u5b9e\u73b0\u5f88\u6709\u5e2e\u52a9\u3002 BaseExtractor \u63a5\u6536\u4e00\u4e2a settings \u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5176\u5b9e\u5c31\u662f example_etl.config.settings \u5bf9\u8c61\uff0c\u8fd9\u91cc\u901a\u8fc7\u8c03\u7528\u8005\u4f20\u9012\u3002 extract \u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\uff0c\u8fed\u4ee3\u5185\u5bb9\u4e3a str \u3002 extractor \u7684 file \u5b9e\u73b0 \u57fa\u4e8e BaseExtractor \u505a\u4e00\u4e2a\u6587\u4ef6\u63d0\u53d6\u5176\u5b9e\u73b0\u3002 \u5728 extractor \u5305\u4e2d\u521b\u5efa\u6587\u4ef6 file.py \uff0c\u5e76\u589e\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a src/example_etl/extractor/file.py \"\"\" File extractor extract data from file. \"\"\" import logging from typing import Iterable from example_etl.constants import DEFAULT_ENCODING from example_etl.extractor.base import BaseExtractor logger = logging . getLogger ( __name__ ) class FileExtractor ( BaseExtractor ): \"\"\"File extractor\"\"\" def extract ( self ) -> Iterable [ str ]: \"\"\"Open and read file\"\"\" extractor_path = self . settings . FILE_EXTRACTOR_PATH logger . info ( 'Extract data from %s ' , extractor_path ) with open ( extractor_path , 'r' , encoding = DEFAULT_ENCODING ) as file : for i in file : yield i \u5728\u5b9e\u73b0\u7684 extract \u65b9\u6cd5\u4e2d\uff0c\u4ece FileExtractor.settings \u5bf9\u8c61\u4e2d\u83b7\u53d6\u4e86\u4e00\u4e2a FILE_EXTRACTOR_PATH \u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u662f\u4ece \u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u7684\u3002\u4f7f\u7528\u65f6\uff0c\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u589e\u52a0 file_extractor_path: /tmp/foo.txt \u7684\u503c\u3002 extract \u65b9\u6cd5\u4e2d\u76f4\u63a5\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56de\u8fed\u4ee3\u5bf9\u8c61\u7684\u65b9\u5f0f\u81ea\u52a8\u7ba1\u7406\u6587\u4ef6\u8bfb\u5bf9\u8c61\u3002 \u6ce8\u610f\u4e00\u70b9\u7684\u662f\uff0c\u6253\u5f00\u6587\u4ef6\u65f6\u4f7f\u7528\u4e86\u9ed8\u8ba4\u5b57\u7b26\u96c6\u7684\u5e38\u91cf\u503c DEFAULT_ENCODING \u3002\u6240\u4ee5\u8fd8\u8981\u521b\u5efa src/example_etl/constants.py \uff0c \u5e76\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a \"\"\"Constants\"\"\" DEFAULT_ENCODING = 'utf-8' file.py \u6587\u4ef6\u4e2d\u8fd8\u521b\u5efa\u4e86\u4e00\u4e2a\u5168\u5c40 logger \u5bf9\u8c61\uff0c\u5bf9\u8c61\u540d\u79f0\u4f7f\u7528\u4e86 __name__ \u83b7\u53d6\u8be5\u5305\u7684\u540d\u79f0\u3002\u5728\u6253\u5370\u65e5\u5fd7\u65f6\uff0c\u663e\u793a\u7684\u5305\u540d \u4e3a example_etl.extractor.file \u3002\u5728 extract \u65b9\u6cd5\u4e2d\u6253\u5370\u4e00\u6761\u6267\u884c\u8bb0\u5f55\u3002 transformer transformer \u6a21\u5757\u7684\u529f\u80fd\u662f\u8f6c\u6362\u8bfb\u53d6\u5230\u7684\u903b\u8f91\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u63a5\u6536 extractor \u8bfb\u53d6\u5230\u7684\u6587\u672c\uff0c\u5904\u7406\u540e\u4f20\u9012\u7ed9 loader \u3002 \u6b64\u8fc7\u7a0b\u53ef\u4ee5\u6267\u884c\u53bb\u9664\u7a7a\u683c\u3001\u5220\u51cf\u5b57\u7b26\u7b49\u64cd\u4f5c\u3002 \u4e3a\u4e86\u65b9\u4fbf\u5b9e\u73b0\uff0c\u521b\u5efa\u4e00\u4e2a\u57fa\u7c7b BaseTransformer \u3002 transformer \u57fa\u7c7b \u9996\u5148\u521b\u5efa transformer \u5305\uff0c\u7136\u540e\u65b0\u5efa BaseTransformer.py \u6587\u4ef6\uff1a src/example_etl/transformer/BaseTransformer.py \"\"\"Base transformer\"\"\" class BaseTransformer : \"\"\"Base transformer\"\"\" def __init__ ( self , settings ): self . settings = settings def transform ( self , data : str ) -> str : \"\"\"Transform data\"\"\" raise NotImplementedError () BaseTransformer \u540c\u6837\u63a5\u6536\u4e00\u4e2a settings \u5bf9\u8c61\u3002\u5176\u62bd\u8c61\u65b9\u6cd5 transform \u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684 data \u5e76\u8fd4\u56de str \u7c7b\u578b \u7684\u6570\u636e\u3002 tansformer \u53bb\u7a7a\u683c\u5b9e\u73b0 BaseTransformer \u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u5220\u9664\u6587\u672c\u524d\u540e\u7a7a\u683c\u7684\u5b9e\u73b0 StripTransformer \uff1a \u521b\u5efa strip.py src/example_etl/transformer/strip.py \"\"\"Transform data and remove blank of data star and end.\"\"\" import logging from example_etl.transformer.base import BaseTransformer logger = logging . getLogger ( __name__ ) class StripTransformer ( BaseTransformer ): \"\"\" Transform data and remove blank of data star and end. \"\"\" def transform ( self , data : str ) -> str : \"\"\"Remove blank of data star and end.\"\"\" logger . debug ( 'Strip data: \" %s \"' , data ) return data . strip () StripTransformer \u5b9e\u73b0\u662f\u901a\u8fc7\u5b57\u7b26\u4e32\u65b9\u6cd5 strip \u5220\u9664\u63a5\u6536\u5230\u5b57\u7b26\u4e32\u6570\u636e\u524d\u540e\u7a7a\u683c\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 strip.py \u6587\u4ef6\u4e2d\u540c\u6837\u521d\u59cb\u5316\u4e00\u4e2a logger \u5bf9\u8c61\uff0c\u5728 transform \u4e2d\u6253\u5370\u4e00\u6761\u8bb0\u5f55\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86 debug \u65b9\u6cd5\uff0c\u6253\u5370\u7684\u65e5\u5fd7\u4e3a DEBUG \u7ea7\u522b\u3002\u5f53\u65e5\u5fd7\u7ea7\u522b\u8bbe\u7f6e\u5728 INFO \u65f6\uff0c\u8fd9\u91cc\u7684\u6267\u884c\u8bb0\u5f55\u662f\u4e0d\u4f1a\u6253\u5370\u7684\u3002\u5bf9\u4e8e \u5173\u6ce8\u4f4e\u7684\u8bb0\u5f55\uff0c\u53ef\u4ee5\u4f7f\u7528 DEBUG \u3002 loader loader \u6a21\u5757\u7528\u6765\u5c06 transformer \u8f6c\u6362\u7684\u6570\u636e\u52a0\u8f7d\u5230\u76ee\u6807\u4f4d\u7f6e\u3002\u76ee\u6807\u53ef\u4ee5\u662f\u6587\u4ef6\u3001\u6570\u636e\u5e93\u3001\u6d88\u606f\u961f\u5217\u7b49\u3002 \u540c\u6837\u7684\uff0c\u5bf9 loader \u505a\u51fa\u62bd\u8c61\u7c7b BaseLoader \u3002 loader \u57fa\u7c7b \u5728 loader \u5305\u4e2d\u521b\u5efa base.py \u6587\u4ef6\uff0c\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a src/example_etl/loader/base.py \"\"\"Base loader\"\"\" class BaseLoader : \"\"\"Base loader\"\"\" def __init__ ( self , settings ): self . settings = settings self . setup () def setup ( self ): \"\"\"Setup something when init loader.\"\"\" def load ( self , data : str ): \"\"\"Write data to loader\"\"\" raise NotImplementedError () def close ( self ): \"\"\"Close something\"\"\" def __exit__ ( self , exc_type , exc_val , exc_tb ): self . close () def __enter__ ( self ): return self \u5728 BaseLoader \u4e2d\u6709\u4e00\u4e2a load \u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u7528\u6765\u7ed9\u7ee7\u627f\u7c7b\u5b9e\u73b0\u3002\u9ed8\u8ba4\u7684 setup \u65b9\u6cd5\u53ef\u4ee5\u5728\u521d\u59cb\u5316 \u65f6\u505a\u4e00\u4e9b\u903b\u8f91\uff0c\u6bd4\u5982\u6253\u5f00\u6587\u4ef6\u3001\u521b\u5efa\u6570\u636e\u5e93\u8fde\u63a5\u7b49\u3002 close \u7528\u6765\u5173\u95ed\u8fd9\u4e9b\u903b\u8f91\u3002 __exit__ \u548c __enter__ \u53ef\u4ee5 \u8ba9 BaseLoader \u901a\u8fc7 with \u5173\u952e\u5b57\u4f7f\u7528\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c BaseLoader \u7684 load \u65b9\u6cd5\u4e2d\u4e0d\u80fd\u6709\u521b\u5efa\u8fde\u63a5\u5bf9\u8c61\u7684\u903b\u8f91\uff0c\u56e0\u4e3a load \u4f1a\u51fa\u73b0\u5728\u5faa\u73af\u4e2d\u7684\u3002 loader \u7684 file \u5b9e\u73b0 \u9ed8\u8ba4\u5b9e\u73b0\u4e00\u4e2a\u5c06\u6570\u636e\u5199\u5165\u6587\u4ef6\u7684\u5b9e\u73b0\u7c7b FileLoader \u3002 \u5728 loader \u5305\u4e2d\u521b\u5efa file.py \u6587\u4ef6\uff0c\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a src/example_etl/loader/file.py \"\"\" File loader Write data to loader file. \"\"\" import logging from example_etl.constants import DEFAULT_ENCODING from example_etl.loader.base import BaseLoader logger = logging . getLogger ( __name__ ) class FileLoader ( BaseLoader ): \"\"\" File loader \"\"\" file = None def setup ( self ): \"\"\"Open a file when init loader.\"\"\" loader_path = self . settings . FILE_LOADER_PATH logger . info ( 'Write data to %s ' , loader_path ) self . file = open ( loader_path , 'w' , encoding = DEFAULT_ENCODING ) # pylint: disable=consider-using-with def load ( self , data : str ): \"\"\"Write data to a file.\"\"\" self . file . write ( data ) self . file . flush () def close ( self ): \"\"\"Close file object when task done.\"\"\" self . file . close () \u8be5\u7c7b\u5728 setup \u65b9\u6cd5\u4e2d\u6253\u5f00\u6587\u4ef6\u5bf9\u8c61\uff0c\u5e76\u5728 close \u65b9\u6cd5\u4e2d\u5173\u95ed\u6587\u4ef6\u3002 load \u65b9\u6cd5\u4f1a\u5199\u5165\u6570\u636e\uff0c\u5e76\u7acb\u5373 \u5c06\u5185\u5bb9\u5237\u65b0\u5230\u6587\u4ef6\u4e2d\u3002 \u63d2\u4ef6\u6ce8\u518c \u4e09\u4e2a\u57fa\u7840\u6a21\u5757\u4f7f\u7528\u63d2\u4ef6\u673a\u5236\u81ea\u52a8\u53d1\u73b0\uff0c\u5e76\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6307\u5b9a\u9700\u8981\u4f7f\u7528\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u5728\u540e\u7eed\u4f7f\u7528\u4e2d\uff0c\u57fa\u4e8e\u62bd\u8c61\u57fa\u7c7b \u5f00\u53d1\u7684\u5176\u4ed6\u5b9e\u73b0\u4e5f\u662f\u901a\u8fc7\u8fd9\u79cd\u6765\u505a\u3002 \u5b89\u88c5\u63d2\u4ef6\u6846\u67b6 stevedore \uff1a pipenv install stevedore \u5c06 stevedore \u4f9d\u8d56\u52a0\u5165\u5230\u9879\u76ee\u5b89\u88c5\u4f9d\u8d56\u5217\u8868\u4e2d\u3002 \u7f16\u8f91 setup.cfg \u6587\u4ef6\uff0c\u5728 options \u4e0b\u7684 install_requires \u4e0b\u589e\u52a0 stevedore \uff1a [options] python_requires > = 3.9 include_package_data = True packages = find: package_dir = = src install_requires = click dynaconf stevedore \u6ce8\u518c\u63d2\u4ef6 \u5c06\u4e0a\u8ff0\u5b9e\u73b0\u7684\u4e09\u4e2a\u7c7b\u6ce8\u518c\u5230\u547d\u540d\u7a7a\u95f4\u4e2d\u3002 \u7f16\u8f91 setup.cfg \u6587\u4ef6\uff0c\u5728 [options.entry_points] \u4e2d\u589e\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a example_etl.extractor = file = example_etl.extractor.file:FileExtractor example_etl.loader = file = example_etl.loader.file:FileLoader example_etl.transformer = strip = example_etl.transformer.strip:StripTransformer \u4fee\u6539\u5b8c\u540e\u7684\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a [metadata] name = example_etl version = attr: example_etl.__version__ author = huagang author_email = huagang517@126.com description = Etl tools keywords = etl long_description = file: README.md long_description_content_type = text/markdown classifiers = Operating System :: OS Independent Programming Language :: Python :: 3.9 Programming Language :: Python :: 3.10 [options] python_requires > = 3.9 include_package_data = True packages = find: package_dir = = src install_requires = click = = 8.0.3 dynaconf = = 3.1.7 stevedore = = 3.5.0 [options.packages.find] where = src exclude = tests* docs # https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html [options.entry_points] console_scripts = example_etl = example_etl.cmdline:main example_etl.extractor = file = example_etl.extractor.file:FileExtractor example_etl.loader = file = example_etl.loader.file:FileLoader example_etl.transformer = strip = example_etl.transformer.strip:StripTransformer # Packaging project data in module example_etl. # https://setuptools.readthedocs.io/en/latest/userguide/datafiles.html?highlight=package_data [options.package_data] example_etl.config = settings.yml # Copy data for user from project when pip install. # The relative path is prefix `sys.prefix` . eg: `/usr/local/`. # Path and data will remove When pip uninstall. # https://docs.python.org/3/distutils/setupscript.html#installing-additional-files [options.data_files] etc/example_etl = src/example_etl/config/settings.yml \u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u5c06 FileExtractor \u3001 FileLoader \u3001 StripTransformer \u5206\u522b\u6ce8\u518c\u5230 entry_points \u4e2d\uff0c \u7136\u540e\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528 import.metadata \u6839\u636e\u540d\u79f0\u7a7a\u95f4\u67e5\u627e\u3002\u800c stevedore \u5219\u662f\u5c01\u88c5\u4e86\u67e5\u627e\u7684\u590d\u6742\u903b\u8f91\uff0c\u8ba9\u4f7f\u7528 \u66f4\u7b80\u5355\u3002 \u5c06\u9879\u76ee\u4ee5\u53ef\u7f16\u8f91\u6a21\u5f0f\u5b89\u88c5\u5230\u5f53\u524d\u73af\u5883\uff1a pip install -e . \u53ef\u4ee5\u5728 src/example_etl.egg-info/entry_points.txt \u6587\u4ef6\u4e2d\u67e5\u770b\u6253\u5305\u540e\u7684\u6ce8\u518c\u4fe1\u606f\uff1a [console_scripts] example_etl = example_etl.cmdline:main [example_etl.extractor] file = example_etl.extractor.file:FileExtractor [example_etl.loader] file = example_etl.loader.file:FileLoader [example_etl.transformer] strip = example_etl.transformer.strip:StripTransformer manage manage \u6a21\u5757\u662f\u7528\u6765\u7f16\u6392\u524d\u9762\u4e09\u4e2a\u6a21\u5757\u7684\u903b\u8f91\u3002 \u521b\u5efa manage.py \uff0c\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Manage\"\"\" import logging from typing import Type from stevedore import ExtensionManager from example_etl.config import settings from example_etl.exceptions import PluginNotFoundError from example_etl.extractor.base import BaseExtractor from example_etl.loader.base import BaseLoader from example_etl.transformer.base import BaseTransformer logger = logging . getLogger ( __name__ ) class Manage : \"\"\"Manager\"\"\" def __init__ ( self ): self . extractor_kls : Type [ BaseExtractor ] = get_extension ( 'example_etl.extractor' , settings . EXTRACTOR_NAME , ) self . loader_kls : Type [ BaseLoader ] = get_extension ( 'example_etl.loader' , settings . LOADER_NAME , ) self . transformer_kls : Type [ BaseTransformer ] = get_extension ( 'example_etl.transformer' , settings . TRANSFORMER_NAME , ) self . transformer : BaseTransformer = self . transformer_kls ( settings ) def run ( self ): \"\"\"Run manage\"\"\" with self . extractor_kls ( settings ) as extractor : with self . loader_kls ( settings ) as loader : self . transform ( extractor , loader ) logger . info ( 'Exit example_etl.' ) def transform ( self , extractor : BaseExtractor , loader : BaseLoader ): \"\"\"Transform data from extractor to loader.\"\"\" logger . info ( 'Start transformer data ......' ) for i in extractor . extract (): data = self . transformer . transform ( i ) loader . load ( data ) logger . info ( 'Data processed.' ) def get_extension ( namespace : str , name : str ): \"\"\"Get extension by name from namespace.\"\"\" extension_manager = ExtensionManager ( namespace = namespace , invoke_on_load = False ) for ext in extension_manager . extensions : if ext . name == name : logger . info ( 'Load plugin: %s in namespace \" %s \"' , ext . plugin , namespace ) return ext . plugin raise PluginNotFoundError ( namespace = namespace , name = name ) \u5728 manage \u4e2d\u5c01\u88c5\u4e86\u4e00\u4e2a\u901a\u8fc7\u540d\u79f0\u7a7a\u95f4\u548c\u540d\u79f0\u4e24\u4e2a\u53c2\u6570\u67e5\u627e\u63d2\u4ef6\u7684\u65b9\u6cd5 get_extension \u3002\u5f53\u627e\u4e0d\u5230\u5bf9\u5e94 \u7684\u63d2\u4ef6\u65f6\uff0c\u4f1a\u629b\u51fa PluginNotFoundError \u5f02\u5e38\u3002 \u5728 Manage \u7c7b\u7684 __init__ \u65b9\u6cd5\u4e2d\uff0c\u5206\u522b\u4ece\u4e09\u4e2a\u540d\u79f0\u7a7a\u95f4\u67e5\u627e\u5b9e\u73b0\u7c7b\uff0c\u67e5\u627e\u7684\u540d\u5b57\u5219\u662f\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u7684 \u53d8\u91cf\u83b7\u53d6\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u7075\u6d3b\u5730\u8c03\u6574\u9700\u8981\u4f7f\u7528\u7684\u5177\u4f53\u5b9e\u73b0\u4e86\u3002 run \u65b9\u6cd5\u4e2d\u4f7f\u7528 with \u5173\u952e\u5b57\u5206\u522b\u521d\u59cb\u5316 extractor \u548c loader \uff0c\u5728\u903b\u8f91\u7ed3\u675f\u65f6\uff0c\u53ef\u4ee5\u81ea\u52a8\u7ba1\u7406 \u5728 close \u4e2d\u5173\u95ed\u7684\u5bf9\u8c61\u3002 transform \u65b9\u6cd5\u4e2d\u8c03\u7528 extractor.extract \u65b9\u6cd5\u904d\u5386\u8bfb\u53d6\u7684\u6570\u636e\uff0c\u5e76\u5728\u8f6c\u6362\u540e\u5c06\u6570\u636e\u901a\u8fc7 loader.load \u5199\u5165 \u76ee\u6807\u4f4d\u7f6e\u3002 \u6700\u540e\u521b\u5efa\u4e00\u4e2a exceptions.py \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Exception\"\"\" class EtlError ( Exception ): \"\"\"Etl error\"\"\" class PluginNotFoundError ( EtlError ): \"\"\"PluginNotFoundError\"\"\" def __init__ ( self , namespace : str , name : str ): super () . __init__ () self . _namespace = namespace self . _name = name def __repr__ ( self ): return f 'Can not found \" { self . _name } \" plugin in { self . _namespace } ' def __str__ ( self ): return self . __repr__ () \u5728 exceptions.py \u6587\u4ef6\u4e2d\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u5168\u5c40\u5f02\u5e38\u7c7b EtlError \uff0c PluginNotFoundError \u5f02\u5e38\u7ee7\u627f\u5b83\u3002 \u5f53\u9700\u8981\u6355\u83b7\u6240\u4ee5\u9879\u76ee\u5f02\u5e38\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 EtlError \u6355\u83b7\u3002 \u589e\u52a0\u547d\u4ee4\u884c\u8c03\u7528 \u7f16\u8f91 cmdline.py \u6587\u4ef6\uff0c\u4fee\u6539 rum \u65b9\u6cd5\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a @main . command () def run (): \"\"\"Run command\"\"\" init_log () manage = Manage () manage . run () \u5728\u4f7f\u7528\u547d\u4ee4 example_etl \u8c03\u7528\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 run \u6307\u4ee4\u8fd0\u884c\u3002","title":"\u5f00\u53d1"},{"location":"guidelines/tutorial/develop/#_1","text":"\u6839\u636e\u524d\u9762\u7684\u7cfb\u7edf\u8bbe\u8ba1\uff0c ETL \u9879\u76ee\u603b\u5171\u6709\u4e09\u4e2a\u6838\u5fc3\u6a21\u5757\uff0c\u5206\u522b\u662f extractor \u3001 transformer \u548c loader \u3002\u4e3a\u4e86 \u80fd\u8fd0\u884c\u903b\u8f91\uff0c\u8fd8\u9700\u8981\u4e00\u4e2a manage \u6a21\u5757\u7528\u6765\u7f16\u6392\u4e09\u4e2a\u6a21\u5757\u7684\u903b\u8f91\u3002\u7136\u540e\u4f1a\u5728\u547d\u4ee4\u884c\u4e2d\u6ce8\u518c\u4e00\u4e2a\u5165\u53e3\u65b9\u6cd5\uff0c\u8c03\u7528 mange \u7684\u903b\u8f91\u3002","title":"\u529f\u80fd\u5f00\u53d1"},{"location":"guidelines/tutorial/develop/#extractor","text":"extractor \u7684\u4f5c\u7528\u662f\u4ece\u6e90\u76ee\u6807\u63d0\u53d6\u6570\u636e\uff0c\u76ee\u6807\u53ef\u4ee5\u662f\u6587\u4ef6\u3001\u6570\u636e\u5e93\u3001\u6d88\u606f\u961f\u5217\u7b49\u3002\u8fd9\u5178\u578b\u662f\u4e00\u4e2a\u591a\u5b9e\u73b0\u7684\u60c5\u51b5\uff0c\u540c\u65f6\u4e5f \u4e3a\u4e86\u7edf\u4e00\u5176\u4ed6\u5f00\u53d1\u4eba\u5458\u7f16\u5199\u81ea\u5df1\u7684 extractor \uff0c\u5c31\u9700\u8981\u5bf9 extractor \u505a\u51fa\u4e00\u4e2a\u62bd\u8c61\u8bbe\u8ba1\u3002\u6211\u4eec\u4f7f\u7528 BaseExtractor \u7c7b \u505a\u4e00\u4e2a\u62bd\u8c61\u57fa\u7c7b\u3002","title":"extractor"},{"location":"guidelines/tutorial/develop/#extractor_1","text":"\u521b\u5efa extractor \u5305\uff0c\u5e76\u5728\u91cc\u9762\u65b0\u5efa\u4e00\u4e2a base.py \u6587\u4ef6\uff0c\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a \u6ce8\u610f\uff1aPython \u7684\u5305\u662f\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u5305\u542b\u4e00\u4e2a __init__.py \u6587\u4ef6\u3002\u53ea\u662f\u4e00\u4e2a\u7a7a\u6587\u4ef6\u5939\uff0c\u4e0d\u662f\u5408\u6cd5\u7684 Python \u5305\u3002 src/example_etl/extractor/base.py \"\"\"Base extractor.\"\"\" from typing import Iterable class BaseExtractor : \"\"\"Base extractor\"\"\" def __init__ ( self , settings ): self . settings = settings self . setup () def setup ( self ): \"\"\"Setup something when init extractor\"\"\" def extract ( self ) -> Iterable [ str ]: \"\"\"Extract data.\"\"\" raise NotImplementedError () def close ( self ): \"\"\"Close something.\"\"\" def __enter__ ( self ): return self def __exit__ ( self , exc_type , exc_val , exc_tb ): self . close () BaseExtractor \u6709\u4e00\u4e2a\u62bd\u8c61\u65b9\u6cd5 extract \uff0c\u9700\u8981\u5b9e\u73b0\u65f6\uff0c\u7ee7\u627f\u8be5\u7c7b\uff0c\u5e76\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5\u5373\u53ef\u3002 BaseExtractor \u540c\u65f6\u9ed8\u8ba4\u5b9e\u73b0\u4e86 __enter__ \u548c __exit__ \u4e24\u4e2a\u65b9\u6cd5\uff0c\u76ee\u7684\u662f\u8ba9\u5b9e\u73b0\u7c7b\u53ef\u4ee5\u901a\u8fc7 with \u5173\u952e\u5b57\u8c03\u7528\uff0c\u5e76\u81ea\u52a8\u7ba1\u7406 close \u65b9\u6cd5\u3002\u8fd9\u5bf9\u4e8e\u6570\u636e\u5e93 \u8fde\u63a5\u7684\u5b9e\u73b0\u5f88\u6709\u5e2e\u52a9\u3002 BaseExtractor \u63a5\u6536\u4e00\u4e2a settings \u5bf9\u8c61\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5176\u5b9e\u5c31\u662f example_etl.config.settings \u5bf9\u8c61\uff0c\u8fd9\u91cc\u901a\u8fc7\u8c03\u7528\u8005\u4f20\u9012\u3002 extract \u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\uff0c\u8fed\u4ee3\u5185\u5bb9\u4e3a str \u3002","title":"extractor \u57fa\u7c7b"},{"location":"guidelines/tutorial/develop/#extractor-file","text":"\u57fa\u4e8e BaseExtractor \u505a\u4e00\u4e2a\u6587\u4ef6\u63d0\u53d6\u5176\u5b9e\u73b0\u3002 \u5728 extractor \u5305\u4e2d\u521b\u5efa\u6587\u4ef6 file.py \uff0c\u5e76\u589e\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a src/example_etl/extractor/file.py \"\"\" File extractor extract data from file. \"\"\" import logging from typing import Iterable from example_etl.constants import DEFAULT_ENCODING from example_etl.extractor.base import BaseExtractor logger = logging . getLogger ( __name__ ) class FileExtractor ( BaseExtractor ): \"\"\"File extractor\"\"\" def extract ( self ) -> Iterable [ str ]: \"\"\"Open and read file\"\"\" extractor_path = self . settings . FILE_EXTRACTOR_PATH logger . info ( 'Extract data from %s ' , extractor_path ) with open ( extractor_path , 'r' , encoding = DEFAULT_ENCODING ) as file : for i in file : yield i \u5728\u5b9e\u73b0\u7684 extract \u65b9\u6cd5\u4e2d\uff0c\u4ece FileExtractor.settings \u5bf9\u8c61\u4e2d\u83b7\u53d6\u4e86\u4e00\u4e2a FILE_EXTRACTOR_PATH \u53d8\u91cf\uff0c\u8fd9\u4e2a\u53d8\u91cf\u662f\u4ece \u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u7684\u3002\u4f7f\u7528\u65f6\uff0c\u9700\u8981\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u589e\u52a0 file_extractor_path: /tmp/foo.txt \u7684\u503c\u3002 extract \u65b9\u6cd5\u4e2d\u76f4\u63a5\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56de\u8fed\u4ee3\u5bf9\u8c61\u7684\u65b9\u5f0f\u81ea\u52a8\u7ba1\u7406\u6587\u4ef6\u8bfb\u5bf9\u8c61\u3002 \u6ce8\u610f\u4e00\u70b9\u7684\u662f\uff0c\u6253\u5f00\u6587\u4ef6\u65f6\u4f7f\u7528\u4e86\u9ed8\u8ba4\u5b57\u7b26\u96c6\u7684\u5e38\u91cf\u503c DEFAULT_ENCODING \u3002\u6240\u4ee5\u8fd8\u8981\u521b\u5efa src/example_etl/constants.py \uff0c \u5e76\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a \"\"\"Constants\"\"\" DEFAULT_ENCODING = 'utf-8' file.py \u6587\u4ef6\u4e2d\u8fd8\u521b\u5efa\u4e86\u4e00\u4e2a\u5168\u5c40 logger \u5bf9\u8c61\uff0c\u5bf9\u8c61\u540d\u79f0\u4f7f\u7528\u4e86 __name__ \u83b7\u53d6\u8be5\u5305\u7684\u540d\u79f0\u3002\u5728\u6253\u5370\u65e5\u5fd7\u65f6\uff0c\u663e\u793a\u7684\u5305\u540d \u4e3a example_etl.extractor.file \u3002\u5728 extract \u65b9\u6cd5\u4e2d\u6253\u5370\u4e00\u6761\u6267\u884c\u8bb0\u5f55\u3002","title":"extractor \u7684 file \u5b9e\u73b0"},{"location":"guidelines/tutorial/develop/#transformer","text":"transformer \u6a21\u5757\u7684\u529f\u80fd\u662f\u8f6c\u6362\u8bfb\u53d6\u5230\u7684\u903b\u8f91\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u63a5\u6536 extractor \u8bfb\u53d6\u5230\u7684\u6587\u672c\uff0c\u5904\u7406\u540e\u4f20\u9012\u7ed9 loader \u3002 \u6b64\u8fc7\u7a0b\u53ef\u4ee5\u6267\u884c\u53bb\u9664\u7a7a\u683c\u3001\u5220\u51cf\u5b57\u7b26\u7b49\u64cd\u4f5c\u3002 \u4e3a\u4e86\u65b9\u4fbf\u5b9e\u73b0\uff0c\u521b\u5efa\u4e00\u4e2a\u57fa\u7c7b BaseTransformer \u3002","title":"transformer"},{"location":"guidelines/tutorial/develop/#transformer_1","text":"\u9996\u5148\u521b\u5efa transformer \u5305\uff0c\u7136\u540e\u65b0\u5efa BaseTransformer.py \u6587\u4ef6\uff1a src/example_etl/transformer/BaseTransformer.py \"\"\"Base transformer\"\"\" class BaseTransformer : \"\"\"Base transformer\"\"\" def __init__ ( self , settings ): self . settings = settings def transform ( self , data : str ) -> str : \"\"\"Transform data\"\"\" raise NotImplementedError () BaseTransformer \u540c\u6837\u63a5\u6536\u4e00\u4e2a settings \u5bf9\u8c61\u3002\u5176\u62bd\u8c61\u65b9\u6cd5 transform \u63a5\u6536\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684 data \u5e76\u8fd4\u56de str \u7c7b\u578b \u7684\u6570\u636e\u3002","title":"transformer \u57fa\u7c7b"},{"location":"guidelines/tutorial/develop/#tansformer","text":"BaseTransformer \u5b9e\u73b0\u4e00\u4e2a\u53ef\u4ee5\u5220\u9664\u6587\u672c\u524d\u540e\u7a7a\u683c\u7684\u5b9e\u73b0 StripTransformer \uff1a \u521b\u5efa strip.py src/example_etl/transformer/strip.py \"\"\"Transform data and remove blank of data star and end.\"\"\" import logging from example_etl.transformer.base import BaseTransformer logger = logging . getLogger ( __name__ ) class StripTransformer ( BaseTransformer ): \"\"\" Transform data and remove blank of data star and end. \"\"\" def transform ( self , data : str ) -> str : \"\"\"Remove blank of data star and end.\"\"\" logger . debug ( 'Strip data: \" %s \"' , data ) return data . strip () StripTransformer \u5b9e\u73b0\u662f\u901a\u8fc7\u5b57\u7b26\u4e32\u65b9\u6cd5 strip \u5220\u9664\u63a5\u6536\u5230\u5b57\u7b26\u4e32\u6570\u636e\u524d\u540e\u7a7a\u683c\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002 strip.py \u6587\u4ef6\u4e2d\u540c\u6837\u521d\u59cb\u5316\u4e00\u4e2a logger \u5bf9\u8c61\uff0c\u5728 transform \u4e2d\u6253\u5370\u4e00\u6761\u8bb0\u5f55\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86 debug \u65b9\u6cd5\uff0c\u6253\u5370\u7684\u65e5\u5fd7\u4e3a DEBUG \u7ea7\u522b\u3002\u5f53\u65e5\u5fd7\u7ea7\u522b\u8bbe\u7f6e\u5728 INFO \u65f6\uff0c\u8fd9\u91cc\u7684\u6267\u884c\u8bb0\u5f55\u662f\u4e0d\u4f1a\u6253\u5370\u7684\u3002\u5bf9\u4e8e \u5173\u6ce8\u4f4e\u7684\u8bb0\u5f55\uff0c\u53ef\u4ee5\u4f7f\u7528 DEBUG \u3002","title":"tansformer \u53bb\u7a7a\u683c\u5b9e\u73b0"},{"location":"guidelines/tutorial/develop/#loader","text":"loader \u6a21\u5757\u7528\u6765\u5c06 transformer \u8f6c\u6362\u7684\u6570\u636e\u52a0\u8f7d\u5230\u76ee\u6807\u4f4d\u7f6e\u3002\u76ee\u6807\u53ef\u4ee5\u662f\u6587\u4ef6\u3001\u6570\u636e\u5e93\u3001\u6d88\u606f\u961f\u5217\u7b49\u3002 \u540c\u6837\u7684\uff0c\u5bf9 loader \u505a\u51fa\u62bd\u8c61\u7c7b BaseLoader \u3002","title":"loader"},{"location":"guidelines/tutorial/develop/#loader_1","text":"\u5728 loader \u5305\u4e2d\u521b\u5efa base.py \u6587\u4ef6\uff0c\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a src/example_etl/loader/base.py \"\"\"Base loader\"\"\" class BaseLoader : \"\"\"Base loader\"\"\" def __init__ ( self , settings ): self . settings = settings self . setup () def setup ( self ): \"\"\"Setup something when init loader.\"\"\" def load ( self , data : str ): \"\"\"Write data to loader\"\"\" raise NotImplementedError () def close ( self ): \"\"\"Close something\"\"\" def __exit__ ( self , exc_type , exc_val , exc_tb ): self . close () def __enter__ ( self ): return self \u5728 BaseLoader \u4e2d\u6709\u4e00\u4e2a load \u7684\u62bd\u8c61\u65b9\u6cd5\uff0c\u7528\u6765\u7ed9\u7ee7\u627f\u7c7b\u5b9e\u73b0\u3002\u9ed8\u8ba4\u7684 setup \u65b9\u6cd5\u53ef\u4ee5\u5728\u521d\u59cb\u5316 \u65f6\u505a\u4e00\u4e9b\u903b\u8f91\uff0c\u6bd4\u5982\u6253\u5f00\u6587\u4ef6\u3001\u521b\u5efa\u6570\u636e\u5e93\u8fde\u63a5\u7b49\u3002 close \u7528\u6765\u5173\u95ed\u8fd9\u4e9b\u903b\u8f91\u3002 __exit__ \u548c __enter__ \u53ef\u4ee5 \u8ba9 BaseLoader \u901a\u8fc7 with \u5173\u952e\u5b57\u4f7f\u7528\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c BaseLoader \u7684 load \u65b9\u6cd5\u4e2d\u4e0d\u80fd\u6709\u521b\u5efa\u8fde\u63a5\u5bf9\u8c61\u7684\u903b\u8f91\uff0c\u56e0\u4e3a load \u4f1a\u51fa\u73b0\u5728\u5faa\u73af\u4e2d\u7684\u3002","title":"loader \u57fa\u7c7b"},{"location":"guidelines/tutorial/develop/#loader-file","text":"\u9ed8\u8ba4\u5b9e\u73b0\u4e00\u4e2a\u5c06\u6570\u636e\u5199\u5165\u6587\u4ef6\u7684\u5b9e\u73b0\u7c7b FileLoader \u3002 \u5728 loader \u5305\u4e2d\u521b\u5efa file.py \u6587\u4ef6\uff0c\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a src/example_etl/loader/file.py \"\"\" File loader Write data to loader file. \"\"\" import logging from example_etl.constants import DEFAULT_ENCODING from example_etl.loader.base import BaseLoader logger = logging . getLogger ( __name__ ) class FileLoader ( BaseLoader ): \"\"\" File loader \"\"\" file = None def setup ( self ): \"\"\"Open a file when init loader.\"\"\" loader_path = self . settings . FILE_LOADER_PATH logger . info ( 'Write data to %s ' , loader_path ) self . file = open ( loader_path , 'w' , encoding = DEFAULT_ENCODING ) # pylint: disable=consider-using-with def load ( self , data : str ): \"\"\"Write data to a file.\"\"\" self . file . write ( data ) self . file . flush () def close ( self ): \"\"\"Close file object when task done.\"\"\" self . file . close () \u8be5\u7c7b\u5728 setup \u65b9\u6cd5\u4e2d\u6253\u5f00\u6587\u4ef6\u5bf9\u8c61\uff0c\u5e76\u5728 close \u65b9\u6cd5\u4e2d\u5173\u95ed\u6587\u4ef6\u3002 load \u65b9\u6cd5\u4f1a\u5199\u5165\u6570\u636e\uff0c\u5e76\u7acb\u5373 \u5c06\u5185\u5bb9\u5237\u65b0\u5230\u6587\u4ef6\u4e2d\u3002","title":"loader \u7684 file \u5b9e\u73b0"},{"location":"guidelines/tutorial/develop/#_2","text":"\u4e09\u4e2a\u57fa\u7840\u6a21\u5757\u4f7f\u7528\u63d2\u4ef6\u673a\u5236\u81ea\u52a8\u53d1\u73b0\uff0c\u5e76\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6307\u5b9a\u9700\u8981\u4f7f\u7528\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u5728\u540e\u7eed\u4f7f\u7528\u4e2d\uff0c\u57fa\u4e8e\u62bd\u8c61\u57fa\u7c7b \u5f00\u53d1\u7684\u5176\u4ed6\u5b9e\u73b0\u4e5f\u662f\u901a\u8fc7\u8fd9\u79cd\u6765\u505a\u3002 \u5b89\u88c5\u63d2\u4ef6\u6846\u67b6 stevedore \uff1a pipenv install stevedore \u5c06 stevedore \u4f9d\u8d56\u52a0\u5165\u5230\u9879\u76ee\u5b89\u88c5\u4f9d\u8d56\u5217\u8868\u4e2d\u3002 \u7f16\u8f91 setup.cfg \u6587\u4ef6\uff0c\u5728 options \u4e0b\u7684 install_requires \u4e0b\u589e\u52a0 stevedore \uff1a [options] python_requires > = 3.9 include_package_data = True packages = find: package_dir = = src install_requires = click dynaconf stevedore","title":"\u63d2\u4ef6\u6ce8\u518c"},{"location":"guidelines/tutorial/develop/#_3","text":"\u5c06\u4e0a\u8ff0\u5b9e\u73b0\u7684\u4e09\u4e2a\u7c7b\u6ce8\u518c\u5230\u547d\u540d\u7a7a\u95f4\u4e2d\u3002 \u7f16\u8f91 setup.cfg \u6587\u4ef6\uff0c\u5728 [options.entry_points] \u4e2d\u589e\u52a0\u5982\u4e0b\u5185\u5bb9\uff1a example_etl.extractor = file = example_etl.extractor.file:FileExtractor example_etl.loader = file = example_etl.loader.file:FileLoader example_etl.transformer = strip = example_etl.transformer.strip:StripTransformer \u4fee\u6539\u5b8c\u540e\u7684\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a [metadata] name = example_etl version = attr: example_etl.__version__ author = huagang author_email = huagang517@126.com description = Etl tools keywords = etl long_description = file: README.md long_description_content_type = text/markdown classifiers = Operating System :: OS Independent Programming Language :: Python :: 3.9 Programming Language :: Python :: 3.10 [options] python_requires > = 3.9 include_package_data = True packages = find: package_dir = = src install_requires = click = = 8.0.3 dynaconf = = 3.1.7 stevedore = = 3.5.0 [options.packages.find] where = src exclude = tests* docs # https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html [options.entry_points] console_scripts = example_etl = example_etl.cmdline:main example_etl.extractor = file = example_etl.extractor.file:FileExtractor example_etl.loader = file = example_etl.loader.file:FileLoader example_etl.transformer = strip = example_etl.transformer.strip:StripTransformer # Packaging project data in module example_etl. # https://setuptools.readthedocs.io/en/latest/userguide/datafiles.html?highlight=package_data [options.package_data] example_etl.config = settings.yml # Copy data for user from project when pip install. # The relative path is prefix `sys.prefix` . eg: `/usr/local/`. # Path and data will remove When pip uninstall. # https://docs.python.org/3/distutils/setupscript.html#installing-additional-files [options.data_files] etc/example_etl = src/example_etl/config/settings.yml \u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u5c06 FileExtractor \u3001 FileLoader \u3001 StripTransformer \u5206\u522b\u6ce8\u518c\u5230 entry_points \u4e2d\uff0c \u7136\u540e\u5728\u7a0b\u5e8f\u4e2d\u4f7f\u7528 import.metadata \u6839\u636e\u540d\u79f0\u7a7a\u95f4\u67e5\u627e\u3002\u800c stevedore \u5219\u662f\u5c01\u88c5\u4e86\u67e5\u627e\u7684\u590d\u6742\u903b\u8f91\uff0c\u8ba9\u4f7f\u7528 \u66f4\u7b80\u5355\u3002 \u5c06\u9879\u76ee\u4ee5\u53ef\u7f16\u8f91\u6a21\u5f0f\u5b89\u88c5\u5230\u5f53\u524d\u73af\u5883\uff1a pip install -e . \u53ef\u4ee5\u5728 src/example_etl.egg-info/entry_points.txt \u6587\u4ef6\u4e2d\u67e5\u770b\u6253\u5305\u540e\u7684\u6ce8\u518c\u4fe1\u606f\uff1a [console_scripts] example_etl = example_etl.cmdline:main [example_etl.extractor] file = example_etl.extractor.file:FileExtractor [example_etl.loader] file = example_etl.loader.file:FileLoader [example_etl.transformer] strip = example_etl.transformer.strip:StripTransformer","title":"\u6ce8\u518c\u63d2\u4ef6"},{"location":"guidelines/tutorial/develop/#manage","text":"manage \u6a21\u5757\u662f\u7528\u6765\u7f16\u6392\u524d\u9762\u4e09\u4e2a\u6a21\u5757\u7684\u903b\u8f91\u3002 \u521b\u5efa manage.py \uff0c\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Manage\"\"\" import logging from typing import Type from stevedore import ExtensionManager from example_etl.config import settings from example_etl.exceptions import PluginNotFoundError from example_etl.extractor.base import BaseExtractor from example_etl.loader.base import BaseLoader from example_etl.transformer.base import BaseTransformer logger = logging . getLogger ( __name__ ) class Manage : \"\"\"Manager\"\"\" def __init__ ( self ): self . extractor_kls : Type [ BaseExtractor ] = get_extension ( 'example_etl.extractor' , settings . EXTRACTOR_NAME , ) self . loader_kls : Type [ BaseLoader ] = get_extension ( 'example_etl.loader' , settings . LOADER_NAME , ) self . transformer_kls : Type [ BaseTransformer ] = get_extension ( 'example_etl.transformer' , settings . TRANSFORMER_NAME , ) self . transformer : BaseTransformer = self . transformer_kls ( settings ) def run ( self ): \"\"\"Run manage\"\"\" with self . extractor_kls ( settings ) as extractor : with self . loader_kls ( settings ) as loader : self . transform ( extractor , loader ) logger . info ( 'Exit example_etl.' ) def transform ( self , extractor : BaseExtractor , loader : BaseLoader ): \"\"\"Transform data from extractor to loader.\"\"\" logger . info ( 'Start transformer data ......' ) for i in extractor . extract (): data = self . transformer . transform ( i ) loader . load ( data ) logger . info ( 'Data processed.' ) def get_extension ( namespace : str , name : str ): \"\"\"Get extension by name from namespace.\"\"\" extension_manager = ExtensionManager ( namespace = namespace , invoke_on_load = False ) for ext in extension_manager . extensions : if ext . name == name : logger . info ( 'Load plugin: %s in namespace \" %s \"' , ext . plugin , namespace ) return ext . plugin raise PluginNotFoundError ( namespace = namespace , name = name ) \u5728 manage \u4e2d\u5c01\u88c5\u4e86\u4e00\u4e2a\u901a\u8fc7\u540d\u79f0\u7a7a\u95f4\u548c\u540d\u79f0\u4e24\u4e2a\u53c2\u6570\u67e5\u627e\u63d2\u4ef6\u7684\u65b9\u6cd5 get_extension \u3002\u5f53\u627e\u4e0d\u5230\u5bf9\u5e94 \u7684\u63d2\u4ef6\u65f6\uff0c\u4f1a\u629b\u51fa PluginNotFoundError \u5f02\u5e38\u3002 \u5728 Manage \u7c7b\u7684 __init__ \u65b9\u6cd5\u4e2d\uff0c\u5206\u522b\u4ece\u4e09\u4e2a\u540d\u79f0\u7a7a\u95f4\u67e5\u627e\u5b9e\u73b0\u7c7b\uff0c\u67e5\u627e\u7684\u540d\u5b57\u5219\u662f\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u7684 \u53d8\u91cf\u83b7\u53d6\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u7075\u6d3b\u5730\u8c03\u6574\u9700\u8981\u4f7f\u7528\u7684\u5177\u4f53\u5b9e\u73b0\u4e86\u3002 run \u65b9\u6cd5\u4e2d\u4f7f\u7528 with \u5173\u952e\u5b57\u5206\u522b\u521d\u59cb\u5316 extractor \u548c loader \uff0c\u5728\u903b\u8f91\u7ed3\u675f\u65f6\uff0c\u53ef\u4ee5\u81ea\u52a8\u7ba1\u7406 \u5728 close \u4e2d\u5173\u95ed\u7684\u5bf9\u8c61\u3002 transform \u65b9\u6cd5\u4e2d\u8c03\u7528 extractor.extract \u65b9\u6cd5\u904d\u5386\u8bfb\u53d6\u7684\u6570\u636e\uff0c\u5e76\u5728\u8f6c\u6362\u540e\u5c06\u6570\u636e\u901a\u8fc7 loader.load \u5199\u5165 \u76ee\u6807\u4f4d\u7f6e\u3002 \u6700\u540e\u521b\u5efa\u4e00\u4e2a exceptions.py \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Exception\"\"\" class EtlError ( Exception ): \"\"\"Etl error\"\"\" class PluginNotFoundError ( EtlError ): \"\"\"PluginNotFoundError\"\"\" def __init__ ( self , namespace : str , name : str ): super () . __init__ () self . _namespace = namespace self . _name = name def __repr__ ( self ): return f 'Can not found \" { self . _name } \" plugin in { self . _namespace } ' def __str__ ( self ): return self . __repr__ () \u5728 exceptions.py \u6587\u4ef6\u4e2d\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u5168\u5c40\u5f02\u5e38\u7c7b EtlError \uff0c PluginNotFoundError \u5f02\u5e38\u7ee7\u627f\u5b83\u3002 \u5f53\u9700\u8981\u6355\u83b7\u6240\u4ee5\u9879\u76ee\u5f02\u5e38\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7 EtlError \u6355\u83b7\u3002","title":"manage"},{"location":"guidelines/tutorial/develop/#_4","text":"\u7f16\u8f91 cmdline.py \u6587\u4ef6\uff0c\u4fee\u6539 rum \u65b9\u6cd5\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a @main . command () def run (): \"\"\"Run command\"\"\" init_log () manage = Manage () manage . run () \u5728\u4f7f\u7528\u547d\u4ee4 example_etl \u8c03\u7528\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 run \u6307\u4ee4\u8fd0\u884c\u3002","title":"\u589e\u52a0\u547d\u4ee4\u884c\u8c03\u7528"},{"location":"guidelines/tutorial/init_project/","text":"\u521d\u59cb\u5316\u9879\u76ee \u521d\u59cb\u5316\u9879\u76ee\u65f6\uff0c\u4f7f\u7528 cookiecutter \u52a0\u8f7d \u9879\u76ee\u6a21\u677f \u521b\u5efa\u3002 \u901a\u8fc7\u4ea4\u4e92\u64cd\u4f5c\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u7684\u529f\u80fd\u3002 \u521b\u5efa\u9879\u76ee\u9aa8\u67b6 \u5728\u7ec8\u7aef\u8fd0\u884c\u547d\u4ee4\uff1a cookiecutter https://github.com/pyloong/cookiecutter-pythonic-project \u7136\u540e\u6839\u636e\u4ea4\u4e92\u63d0\u793a\uff0c\u9009\u62e9\u9700\u8981\u7684\u5185\u5bb9\u3002\u6700\u7ec8\u8f93\u5165\u5982\u4e0b\uff1a \u276f cookiecutter https://github.com/pyloong/cookiecutter-pythonic-project You've downloaded /home/kevin/.cookiecutters/cookiecutter-pythonic-project before. Is it okay to delete and re-download it? [yes]: yes project_name [My Project]: example-etl project_slug [example_etl]: project_description [My Awesome Project!]: Example etl tools author_name [Author]: huagang author_email [huagang@example.com]: huagang517@126.com version [0.1.0]: Select python_version: 1 - 3.7 2 - 3.8 3 - 3.9 4 - 3.10 Choose from 1, 2, 3, 4 [1]: 4 use_src_layout [y]: y use_pipenv [y]: y Select index_server: 1 - none 2 - aliyun Choose from 1, 2 [1]: use_docker [n]: y Select ci_tools: 1 - none 2 - Gitlab 3 - Github Choose from 1, 2, 3 [1]: 3 init_skeleton [n]: y \u7136\u540e\u4f7f\u7528 vscode \u6253\u5f00\u9879\u76ee\uff1a code example_etl \u9879\u76ee\u5185\u5bb9 \u5728 IDE \u4e2d\u67e5\u770b\u9879\u76ee\uff0c\u53ef\u4ee5\u770b\u5230\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u276f tree example_etl example_etl \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 development.md \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 MANIFEST.in \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 example_etl \u2502 \u251c\u2500\u2500 cmdline.py \u2502 \u251c\u2500\u2500 config \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 settings.yml \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 log.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 test_cmdline.py \u2502 \u251c\u2500\u2500 test_log.py \u2502 \u2514\u2500\u2500 tests.py \u2514\u2500\u2500 tox.ini 5 directories, 19 files setup.cfg setup.cfg \u662f\u9879\u76ee\u7684\u6253\u5305\u914d\u7f6e\u6587\u4ef6\u3002\u6587\u4ef6\u524d\u9762 metadata \u4e2d\u8bbe\u7f6e\u4e86\u9879\u76ee\u7684\u57fa\u672c\u4fe1\u606f\u3002 options \u4e2d\u914d\u7f6e\u4e86\u6b64\u9879\u76ee\u5fc5\u987b\u4f7f\u7528\u7684\u4e00\u4e9b\u4fe1\u606f\u3002 \u6700\u540e\u51e0\u884c\u8fd8\u5305\u542b\u4e86 pytest \u7684\u914d\u7f6e\uff0c\u8fd9\u662f\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u5171\u7528\u8fd9\u4e9b\u914d\u7f6e\u3002 \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a [metadata] name = example_etl version = attr: example_etl.__version__ author = huagang author_email = huagang517@126.com description = Example etl tools keywords = example-etl long_description = file: README.md long_description_content_type = text/markdown classifiers = Operating System :: OS Independent Programming Language :: Python :: 3.10 [options] python_requires > = 3.10 include_package_data = True packages = find: package_dir = = src install_requires = dynaconf click [options.packages.find] where = src exclude = tests* docs # https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html [options.entry_points] console_scripts = example_etl = example_etl.cmdline:main # Packaging project data in module example_etl. # https://setuptools.readthedocs.io/en/latest/userguide/datafiles.html?highlight=package_data [options.package_data] example_etl.config = settings.yml # Copy data for user from project when pip install. # The relative path is prefix `sys.prefix` . eg: `/usr/local/`. # Path and data will remove When pip uninstall. # https://docs.python.org/3/distutils/setupscript.html#installing-additional-files [options.data_files] etc/example_etl = src/example_etl/config/settings.yml [tool:pytest] testpaths = tests python_files = tests.py test_*.py pyproject.toml pyproject.toml \u662f PEP 517 \u7684\u6253\u5305\u89c4\u8303\u6240\u9700\u8981\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u6765\u6307\u793a\u4f7f\u7528\u54ea\u79cd\u6253\u5305\u5de5\u5177\u3002 [build-system] requires = [ \"setuptools\" , \"wheel\" ] build-backend = \"setuptools.build_meta\" MANIFEST.in MANIFEST.in \u6307\u793a\u6253\u5305\u65f6\u9700\u8981\u5305\u542b\u6216\u6392\u9664\u7684\u6587\u4ef6\u3002\u53ef\u4ee5\u901a\u8fc7\u6b63\u5219\u7b49\u914d\u7f6e\u3002 include LICENSE include MANIFEST.in include *.md graft docs graft tests graft src/example_etl recursive-include src/example_etl/config/settings.yml global-exclude __pycache__ global-exclude *.py[co] src/example_etl/cmdline.py src/example_etl/cmdline.py \u662f\u4f7f\u7528 click \u7f16\u5199\u7684\u4e00\u4e2a\u547d\u4ee4\u884c\u5165\u53e3\u6587\u4ef6\uff0c\u901a\u8fc7\u4e00\u4e9b\u81ea\u5b9a\u4e49\u547d\u4ee4\u548c\u53c2\u6570\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u903b\u8f91\u3002 \"\"\"Command line\"\"\" import click from click import Context from example_etl import __version__ from example_etl.config import settings from example_etl.log import init_log @click . group ( invoke_without_command = True ) @click . pass_context @click . option ( '-V' , '--version' , is_flag = True , help = 'Show version and exit.' ) # If it's true, it will override `settings.VERBOSE` @click . option ( '-v' , '--verbose' , is_flag = True , help = 'Show more info.' ) @click . option ( '--debug' , is_flag = True , help = 'Enable debug.' ) # If it's true, it will override `settings.DEBUG` def main ( ctx : Context , version : str , verbose : bool , debug : bool ): \"\"\"Main commands\"\"\" if version : click . echo ( __version__ ) elif ctx . invoked_subcommand is None : click . echo ( ctx . get_help ()) else : if verbose : settings . set ( 'VERBOSE' , True ) if debug : settings . set ( 'DEBUG' , True ) @main . command () def run (): \"\"\"Run command\"\"\" init_log () click . echo ( 'run......' ) src/example_etl/log.py src/example_etl/log.py \u662f\u9884\u5b9a\u4e49\u65e5\u5fd7\u914d\u7f6e\u6587\u4ef6\uff0c\u5f53\u9879\u76ee\u542f\u52a8\u65f6\uff0c\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u9ed8\u8ba4\u7684\u65e5\u5fd7\u914d\u7f6e\u3002 \"\"\"Log\"\"\" import logging import os from logging.config import dictConfig from example_etl.config import settings os . makedirs ( settings . LOGPATH , exist_ok = True ) def verbose_formatter ( verbose : int ) -> str : \"\"\"formatter factory\"\"\" if verbose is True : return 'verbose' return 'simple' def update_log_level ( debug : bool , level : str ) -> str : \"\"\"update log level\"\"\" if debug is True : level_num = logging . DEBUG else : level_num = logging . getLevelName ( level ) settings . set ( 'LOGLEVEL' , logging . getLevelName ( level_num )) return settings . LOGLEVEL def init_log () -> None : \"\"\"Init log config.\"\"\" log_level = update_log_level ( settings . DEBUG , str ( settings . LOGLEVEL ) . upper ()) log_config = { \"version\" : 1 , \"disable_existing_loggers\" : False , \"formatters\" : { 'verbose' : { 'format' : ' %(asctime)s %(levelname)s %(name)s %(process)d %(thread)d %(message)s ' , }, 'simple' : { 'format' : ' %(asctime)s %(levelname)s %(name)s %(message)s ' , }, }, \"handlers\" : { \"console\" : { \"formatter\" : verbose_formatter ( settings . VERBOSE ), 'level' : 'DEBUG' , \"class\" : \"logging.StreamHandler\" , }, 'file' : { 'class' : 'logging.handlers.RotatingFileHandler' , 'level' : 'DEBUG' , 'formatter' : verbose_formatter ( settings . VERBOSE ), 'filename' : os . path . join ( settings . LOGPATH , 'all.log' ), 'maxBytes' : 1024 * 1024 * 1024 * 200 , # 200M 'backupCount' : '5' , 'encoding' : 'utf-8' }, }, \"loggers\" : { '' : { 'level' : log_level , 'handlers' : [ 'console' ]}, } } dictConfig ( log_config ) src/example_etl/config/__init__.py src/example_etl/config/__init__.py \u662f\u4f7f\u7528 dynaconf \u521d\u59cb\u5316\u7684\u914d\u7f6e\u4e2d\u5fc3\uff0c\u9879\u76ee\u6240\u6709\u7684\u914d\u7f6e\u90fd\u662f \u4ece settings \u5bf9\u8c61\u4e2d\u83b7\u53d6\uff0c\u5b83\u4f1a\u8bfb\u53d6\u9879\u76ee\u7ea7\u522b\u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\uff0c\u4e5f\u4f1a\u8bfb\u53d6\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u52a0\u8f7d\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\uff1a src/example_etl/config/settings.yml \uff1a\u9879\u76ee\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 src/example_etl/config/settings.local.yml \uff1a\u8fd9\u4e2a\u5728\u9879\u76ee\u4e2d\u662f\u4e0d\u4f1a git \u8ffd\u8e2a\u7684\uff0c\u5c5e\u4e8e\u672c\u5730\u81ea\u5b9a\u4e49\u914d\u7f6e <sys.prefix>/etc/example_etl/settings.yml \uff1a\u64cd\u4f5c\u7cfb\u7edf\u5916\u90e8\u914d\u7f6e\u6587\u4ef6\u3002\u9ed8\u8ba4\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u548c\u9879\u76ee\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9\u4e00\u81f4\u3002 \u4f7f\u7528 EXAMPLE_ETL_<name>=<value> \u73af\u5883\u53d8\u91cf\u4f20\u9012 \u4f18\u5148\u7ea7\u4ece\u4ece\u4e0a\u5012\u4e0b\u4f9d\u6b21\u589e\u5927\uff0c\u4f18\u5148\u7ea7\u9ad8\u7684\u4f1a\u8986\u76d6\u4f18\u5148\u7ea7\u4f4e\u7684\u914d\u7f6e\u3002 \"\"\" Configuration center. Use https://www.dynaconf.com/ \"\"\" \"\" import os import sys from pathlib import Path from dynaconf import Dynaconf _base_dir = Path ( __file__ ) . parent . parent _settings_files = [ # All config file will merge. Path ( __file__ ) . parent / 'settings.yml' , # Load default config. ] # User configuration. It will be created automatically by the pip installer . _external_files = [ Path ( sys . prefix , 'etc' , 'example_etl' , 'settings.yml' ) ] settings = Dynaconf ( # Set env `EXAMPLE_ETL_FOO='bar'`\uff0cuse `settings.FOO` . envvar_prefix = 'EXAMPLE_ETL' , settings_files = _settings_files , # load user configuration. # environments=True, # Enable multi-level configuration\uff0ceg: default, development, production load_dotenv = True , # Enable load .env # env_switcher='EXAMPLE_ETL_ENV', lowercase_read = False , # If true, can't use `settings.foo`, but can only use `settings.FOO` includes = _external_files , # Customs settings. base_dir = _base_dir , # `settings.BASE_DIR` ) \u521d\u59cb\u5316\u73af\u5883 \u9879\u76ee\u4f7f\u7528 pipenv \u7ba1\u7406\u865a\u62df\u73af\u5883\uff0c\u8fd0\u884c\u547d\u4ee4\u81ea\u52a8\u521b\u5efa\u865a\u62df\u73af\u5883\uff0c\u540c\u65f6\u5b89\u88c5\u5f00\u53d1\u73af\u5883\u4f9d\u8d56 pipenv install -d \u8f93\u5165\u5982\u4e0b\uff1a \u276f pipenv install -d Creating a virtualenv for this project... Pipfile: /tmp/test/example_etl/Pipfile Using /usr/local/bin/python3.10 (3.10.0) to create virtualenv... \u2838 Creating virtual environment...created virtual environment CPython3.10.0.final.0-64 in 201ms creator CPython3Posix(dest=/home/kevin/.virtualenvs/example_etl-H6lUq1jb, clear=False, no_vcs_ignore=False, global=False) seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/kevin/.local/share/virtualenv) added seed packages: pip==21.3.1, setuptools==58.5.3, wheel==0.37.0 activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator \u2714 Successfully created virtual environment! Virtualenv location: /home/kevin/.virtualenvs/example_etl-H6lUq1jb Installing dependencies from Pipfile.lock (96296b)... \ud83d\udc0d \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 26/26 \u2014 00:00:14 To activate this project's virtualenv, run pipenv shell. Alternatively, run a command inside the virtualenv with pipenv run. \u7136\u540e\u6267\u884c pipenv shell \u8fdb\u5165\u5230\u865a\u62df\u73af\u5883\u3002 \u5728\u4f7f\u7528 vscode \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8fd0\u884c Ctrl + Shift + p \u6253\u5f00\u6307\u4ee4\uff0c\u8f93\u5165 > Python: Select Interpreter \u9009\u62e9\u521a\u521a\u521b\u5efa\u7684\u865a\u62df\u73af\u5883\u3002 \u5982\u679c\u770b\u4e0d\u5230\uff0c\u53ea\u9700\u8981\u70b9\u51fb\u65c1\u8fb9\u7684\u5237\u65b0\u6309\u94ae\u5373\u53ef\u3002\u7136\u540e\u91cd\u65b0\u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\uff0c\u4f1a\u81ea\u52a8\u8fdb\u5165\u865a\u62df\u73af\u5883\u3002 \u8fd0\u884c\u6d4b\u8bd5 \u4e3a\u4e86\u4fdd\u8bc1\u521d\u59cb\u5316\u9879\u76ee\u662f\u6b63\u5e38\u7684\uff0c\u5728\u8fdb\u884c\u540e\u7eed\u6b65\u9aa4\u4e4b\u524d\uff0c\u8fd0\u884c\u81ea\u52a8\u5316\u6d4b\u8bd5\u903b\u8f91\uff1a tox \u53ef\u4ee5\u770b\u5230\u6700\u540e\u8f93\u51fa\u5982\u4e0b\uff1a _______________________________________________________________________ summary _______________________________________________________________________ py310: commands succeeded isort: commands succeeded pylint: commands succeeded congratulations :) \u5373\u4e00\u5207\u6b63\u5e38\u3002","title":"\u521d\u59cb\u5316"},{"location":"guidelines/tutorial/init_project/#_1","text":"\u521d\u59cb\u5316\u9879\u76ee\u65f6\uff0c\u4f7f\u7528 cookiecutter \u52a0\u8f7d \u9879\u76ee\u6a21\u677f \u521b\u5efa\u3002 \u901a\u8fc7\u4ea4\u4e92\u64cd\u4f5c\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u7684\u529f\u80fd\u3002","title":"\u521d\u59cb\u5316\u9879\u76ee"},{"location":"guidelines/tutorial/init_project/#_2","text":"\u5728\u7ec8\u7aef\u8fd0\u884c\u547d\u4ee4\uff1a cookiecutter https://github.com/pyloong/cookiecutter-pythonic-project \u7136\u540e\u6839\u636e\u4ea4\u4e92\u63d0\u793a\uff0c\u9009\u62e9\u9700\u8981\u7684\u5185\u5bb9\u3002\u6700\u7ec8\u8f93\u5165\u5982\u4e0b\uff1a \u276f cookiecutter https://github.com/pyloong/cookiecutter-pythonic-project You've downloaded /home/kevin/.cookiecutters/cookiecutter-pythonic-project before. Is it okay to delete and re-download it? [yes]: yes project_name [My Project]: example-etl project_slug [example_etl]: project_description [My Awesome Project!]: Example etl tools author_name [Author]: huagang author_email [huagang@example.com]: huagang517@126.com version [0.1.0]: Select python_version: 1 - 3.7 2 - 3.8 3 - 3.9 4 - 3.10 Choose from 1, 2, 3, 4 [1]: 4 use_src_layout [y]: y use_pipenv [y]: y Select index_server: 1 - none 2 - aliyun Choose from 1, 2 [1]: use_docker [n]: y Select ci_tools: 1 - none 2 - Gitlab 3 - Github Choose from 1, 2, 3 [1]: 3 init_skeleton [n]: y \u7136\u540e\u4f7f\u7528 vscode \u6253\u5f00\u9879\u76ee\uff1a code example_etl","title":"\u521b\u5efa\u9879\u76ee\u9aa8\u67b6"},{"location":"guidelines/tutorial/init_project/#_3","text":"\u5728 IDE \u4e2d\u67e5\u770b\u9879\u76ee\uff0c\u53ef\u4ee5\u770b\u5230\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a \u276f tree example_etl example_etl \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 development.md \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 MANIFEST.in \u251c\u2500\u2500 Pipfile \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 example_etl \u2502 \u251c\u2500\u2500 cmdline.py \u2502 \u251c\u2500\u2500 config \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 settings.yml \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 log.py \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 test_cmdline.py \u2502 \u251c\u2500\u2500 test_log.py \u2502 \u2514\u2500\u2500 tests.py \u2514\u2500\u2500 tox.ini 5 directories, 19 files","title":"\u9879\u76ee\u5185\u5bb9"},{"location":"guidelines/tutorial/init_project/#setupcfg","text":"setup.cfg \u662f\u9879\u76ee\u7684\u6253\u5305\u914d\u7f6e\u6587\u4ef6\u3002\u6587\u4ef6\u524d\u9762 metadata \u4e2d\u8bbe\u7f6e\u4e86\u9879\u76ee\u7684\u57fa\u672c\u4fe1\u606f\u3002 options \u4e2d\u914d\u7f6e\u4e86\u6b64\u9879\u76ee\u5fc5\u987b\u4f7f\u7528\u7684\u4e00\u4e9b\u4fe1\u606f\u3002 \u6700\u540e\u51e0\u884c\u8fd8\u5305\u542b\u4e86 pytest \u7684\u914d\u7f6e\uff0c\u8fd9\u662f\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u5171\u7528\u8fd9\u4e9b\u914d\u7f6e\u3002 \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a [metadata] name = example_etl version = attr: example_etl.__version__ author = huagang author_email = huagang517@126.com description = Example etl tools keywords = example-etl long_description = file: README.md long_description_content_type = text/markdown classifiers = Operating System :: OS Independent Programming Language :: Python :: 3.10 [options] python_requires > = 3.10 include_package_data = True packages = find: package_dir = = src install_requires = dynaconf click [options.packages.find] where = src exclude = tests* docs # https://setuptools.readthedocs.io/en/latest/userguide/entry_point.html [options.entry_points] console_scripts = example_etl = example_etl.cmdline:main # Packaging project data in module example_etl. # https://setuptools.readthedocs.io/en/latest/userguide/datafiles.html?highlight=package_data [options.package_data] example_etl.config = settings.yml # Copy data for user from project when pip install. # The relative path is prefix `sys.prefix` . eg: `/usr/local/`. # Path and data will remove When pip uninstall. # https://docs.python.org/3/distutils/setupscript.html#installing-additional-files [options.data_files] etc/example_etl = src/example_etl/config/settings.yml [tool:pytest] testpaths = tests python_files = tests.py test_*.py","title":"setup.cfg"},{"location":"guidelines/tutorial/init_project/#pyprojecttoml","text":"pyproject.toml \u662f PEP 517 \u7684\u6253\u5305\u89c4\u8303\u6240\u9700\u8981\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u7528\u6765\u6307\u793a\u4f7f\u7528\u54ea\u79cd\u6253\u5305\u5de5\u5177\u3002 [build-system] requires = [ \"setuptools\" , \"wheel\" ] build-backend = \"setuptools.build_meta\"","title":"pyproject.toml"},{"location":"guidelines/tutorial/init_project/#manifestin","text":"MANIFEST.in \u6307\u793a\u6253\u5305\u65f6\u9700\u8981\u5305\u542b\u6216\u6392\u9664\u7684\u6587\u4ef6\u3002\u53ef\u4ee5\u901a\u8fc7\u6b63\u5219\u7b49\u914d\u7f6e\u3002 include LICENSE include MANIFEST.in include *.md graft docs graft tests graft src/example_etl recursive-include src/example_etl/config/settings.yml global-exclude __pycache__ global-exclude *.py[co]","title":"MANIFEST.in"},{"location":"guidelines/tutorial/init_project/#srcexample_etlcmdlinepy","text":"src/example_etl/cmdline.py \u662f\u4f7f\u7528 click \u7f16\u5199\u7684\u4e00\u4e2a\u547d\u4ee4\u884c\u5165\u53e3\u6587\u4ef6\uff0c\u901a\u8fc7\u4e00\u4e9b\u81ea\u5b9a\u4e49\u547d\u4ee4\u548c\u53c2\u6570\u6765\u63a7\u5236\u7a0b\u5e8f\u7684\u903b\u8f91\u3002 \"\"\"Command line\"\"\" import click from click import Context from example_etl import __version__ from example_etl.config import settings from example_etl.log import init_log @click . group ( invoke_without_command = True ) @click . pass_context @click . option ( '-V' , '--version' , is_flag = True , help = 'Show version and exit.' ) # If it's true, it will override `settings.VERBOSE` @click . option ( '-v' , '--verbose' , is_flag = True , help = 'Show more info.' ) @click . option ( '--debug' , is_flag = True , help = 'Enable debug.' ) # If it's true, it will override `settings.DEBUG` def main ( ctx : Context , version : str , verbose : bool , debug : bool ): \"\"\"Main commands\"\"\" if version : click . echo ( __version__ ) elif ctx . invoked_subcommand is None : click . echo ( ctx . get_help ()) else : if verbose : settings . set ( 'VERBOSE' , True ) if debug : settings . set ( 'DEBUG' , True ) @main . command () def run (): \"\"\"Run command\"\"\" init_log () click . echo ( 'run......' )","title":"src/example_etl/cmdline.py"},{"location":"guidelines/tutorial/init_project/#srcexample_etllogpy","text":"src/example_etl/log.py \u662f\u9884\u5b9a\u4e49\u65e5\u5fd7\u914d\u7f6e\u6587\u4ef6\uff0c\u5f53\u9879\u76ee\u542f\u52a8\u65f6\uff0c\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u9ed8\u8ba4\u7684\u65e5\u5fd7\u914d\u7f6e\u3002 \"\"\"Log\"\"\" import logging import os from logging.config import dictConfig from example_etl.config import settings os . makedirs ( settings . LOGPATH , exist_ok = True ) def verbose_formatter ( verbose : int ) -> str : \"\"\"formatter factory\"\"\" if verbose is True : return 'verbose' return 'simple' def update_log_level ( debug : bool , level : str ) -> str : \"\"\"update log level\"\"\" if debug is True : level_num = logging . DEBUG else : level_num = logging . getLevelName ( level ) settings . set ( 'LOGLEVEL' , logging . getLevelName ( level_num )) return settings . LOGLEVEL def init_log () -> None : \"\"\"Init log config.\"\"\" log_level = update_log_level ( settings . DEBUG , str ( settings . LOGLEVEL ) . upper ()) log_config = { \"version\" : 1 , \"disable_existing_loggers\" : False , \"formatters\" : { 'verbose' : { 'format' : ' %(asctime)s %(levelname)s %(name)s %(process)d %(thread)d %(message)s ' , }, 'simple' : { 'format' : ' %(asctime)s %(levelname)s %(name)s %(message)s ' , }, }, \"handlers\" : { \"console\" : { \"formatter\" : verbose_formatter ( settings . VERBOSE ), 'level' : 'DEBUG' , \"class\" : \"logging.StreamHandler\" , }, 'file' : { 'class' : 'logging.handlers.RotatingFileHandler' , 'level' : 'DEBUG' , 'formatter' : verbose_formatter ( settings . VERBOSE ), 'filename' : os . path . join ( settings . LOGPATH , 'all.log' ), 'maxBytes' : 1024 * 1024 * 1024 * 200 , # 200M 'backupCount' : '5' , 'encoding' : 'utf-8' }, }, \"loggers\" : { '' : { 'level' : log_level , 'handlers' : [ 'console' ]}, } } dictConfig ( log_config )","title":"src/example_etl/log.py"},{"location":"guidelines/tutorial/init_project/#srcexample_etlconfig__init__py","text":"src/example_etl/config/__init__.py \u662f\u4f7f\u7528 dynaconf \u521d\u59cb\u5316\u7684\u914d\u7f6e\u4e2d\u5fc3\uff0c\u9879\u76ee\u6240\u6709\u7684\u914d\u7f6e\u90fd\u662f \u4ece settings \u5bf9\u8c61\u4e2d\u83b7\u53d6\uff0c\u5b83\u4f1a\u8bfb\u53d6\u9879\u76ee\u7ea7\u522b\u7684\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\uff0c\u4e5f\u4f1a\u8bfb\u53d6\u81ea\u5b9a\u4e49\u914d\u7f6e\u6587\u4ef6\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u52a0\u8f7d\u7684\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b\uff1a src/example_etl/config/settings.yml \uff1a\u9879\u76ee\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6 src/example_etl/config/settings.local.yml \uff1a\u8fd9\u4e2a\u5728\u9879\u76ee\u4e2d\u662f\u4e0d\u4f1a git \u8ffd\u8e2a\u7684\uff0c\u5c5e\u4e8e\u672c\u5730\u81ea\u5b9a\u4e49\u914d\u7f6e <sys.prefix>/etc/example_etl/settings.yml \uff1a\u64cd\u4f5c\u7cfb\u7edf\u5916\u90e8\u914d\u7f6e\u6587\u4ef6\u3002\u9ed8\u8ba4\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u548c\u9879\u76ee\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u7684\u5185\u5bb9\u4e00\u81f4\u3002 \u4f7f\u7528 EXAMPLE_ETL_<name>=<value> \u73af\u5883\u53d8\u91cf\u4f20\u9012 \u4f18\u5148\u7ea7\u4ece\u4ece\u4e0a\u5012\u4e0b\u4f9d\u6b21\u589e\u5927\uff0c\u4f18\u5148\u7ea7\u9ad8\u7684\u4f1a\u8986\u76d6\u4f18\u5148\u7ea7\u4f4e\u7684\u914d\u7f6e\u3002 \"\"\" Configuration center. Use https://www.dynaconf.com/ \"\"\" \"\" import os import sys from pathlib import Path from dynaconf import Dynaconf _base_dir = Path ( __file__ ) . parent . parent _settings_files = [ # All config file will merge. Path ( __file__ ) . parent / 'settings.yml' , # Load default config. ] # User configuration. It will be created automatically by the pip installer . _external_files = [ Path ( sys . prefix , 'etc' , 'example_etl' , 'settings.yml' ) ] settings = Dynaconf ( # Set env `EXAMPLE_ETL_FOO='bar'`\uff0cuse `settings.FOO` . envvar_prefix = 'EXAMPLE_ETL' , settings_files = _settings_files , # load user configuration. # environments=True, # Enable multi-level configuration\uff0ceg: default, development, production load_dotenv = True , # Enable load .env # env_switcher='EXAMPLE_ETL_ENV', lowercase_read = False , # If true, can't use `settings.foo`, but can only use `settings.FOO` includes = _external_files , # Customs settings. base_dir = _base_dir , # `settings.BASE_DIR` )","title":"src/example_etl/config/__init__.py"},{"location":"guidelines/tutorial/init_project/#_4","text":"\u9879\u76ee\u4f7f\u7528 pipenv \u7ba1\u7406\u865a\u62df\u73af\u5883\uff0c\u8fd0\u884c\u547d\u4ee4\u81ea\u52a8\u521b\u5efa\u865a\u62df\u73af\u5883\uff0c\u540c\u65f6\u5b89\u88c5\u5f00\u53d1\u73af\u5883\u4f9d\u8d56 pipenv install -d \u8f93\u5165\u5982\u4e0b\uff1a \u276f pipenv install -d Creating a virtualenv for this project... Pipfile: /tmp/test/example_etl/Pipfile Using /usr/local/bin/python3.10 (3.10.0) to create virtualenv... \u2838 Creating virtual environment...created virtual environment CPython3.10.0.final.0-64 in 201ms creator CPython3Posix(dest=/home/kevin/.virtualenvs/example_etl-H6lUq1jb, clear=False, no_vcs_ignore=False, global=False) seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/kevin/.local/share/virtualenv) added seed packages: pip==21.3.1, setuptools==58.5.3, wheel==0.37.0 activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator \u2714 Successfully created virtual environment! Virtualenv location: /home/kevin/.virtualenvs/example_etl-H6lUq1jb Installing dependencies from Pipfile.lock (96296b)... \ud83d\udc0d \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 26/26 \u2014 00:00:14 To activate this project's virtualenv, run pipenv shell. Alternatively, run a command inside the virtualenv with pipenv run. \u7136\u540e\u6267\u884c pipenv shell \u8fdb\u5165\u5230\u865a\u62df\u73af\u5883\u3002 \u5728\u4f7f\u7528 vscode \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u8fd0\u884c Ctrl + Shift + p \u6253\u5f00\u6307\u4ee4\uff0c\u8f93\u5165 > Python: Select Interpreter \u9009\u62e9\u521a\u521a\u521b\u5efa\u7684\u865a\u62df\u73af\u5883\u3002 \u5982\u679c\u770b\u4e0d\u5230\uff0c\u53ea\u9700\u8981\u70b9\u51fb\u65c1\u8fb9\u7684\u5237\u65b0\u6309\u94ae\u5373\u53ef\u3002\u7136\u540e\u91cd\u65b0\u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\uff0c\u4f1a\u81ea\u52a8\u8fdb\u5165\u865a\u62df\u73af\u5883\u3002","title":"\u521d\u59cb\u5316\u73af\u5883"},{"location":"guidelines/tutorial/init_project/#_5","text":"\u4e3a\u4e86\u4fdd\u8bc1\u521d\u59cb\u5316\u9879\u76ee\u662f\u6b63\u5e38\u7684\uff0c\u5728\u8fdb\u884c\u540e\u7eed\u6b65\u9aa4\u4e4b\u524d\uff0c\u8fd0\u884c\u81ea\u52a8\u5316\u6d4b\u8bd5\u903b\u8f91\uff1a tox \u53ef\u4ee5\u770b\u5230\u6700\u540e\u8f93\u51fa\u5982\u4e0b\uff1a _______________________________________________________________________ summary _______________________________________________________________________ py310: commands succeeded isort: commands succeeded pylint: commands succeeded congratulations :) \u5373\u4e00\u5207\u6b63\u5e38\u3002","title":"\u8fd0\u884c\u6d4b\u8bd5"},{"location":"guidelines/tutorial/publish/","text":"\u6253\u5305\u53d1\u5e03 \u9879\u76ee\u5f00\u53d1\u6d4b\u8bd5\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5c06\u9879\u76ee\u53d1\u5e03\u5230 Pypi \u4ed3\u5e93\u4e2d\uff0c\u7136\u540e\u5728\u5176\u4ed6\u5730\u65b9\u901a\u8fc7 Pip \u547d\u4ee4\u5373\u53ef \u5b89\u88c5\u4f7f\u7528\u3002\u5bf9\u4e8e\u4e00\u4e9b\u5de5\u5177\u5305\u6bd4\u8f83\u65b9\u4fbf\u3002 \u6253\u5305 \u6839\u636e PEP 517 \u89c4\u8303\uff0c\u65b0\u7684\u6253\u5305\u673a\u5236\u901a\u8fc7 build \u5de5\u5177\u6765\u64cd\u4f5c\u3002 \u5b89\u88c5\u6253\u5305\u5de5\u5177\uff1a pip install build \u7136\u540e\u8fd0\u884c\u6253\u5305\u547d\u4ee4\uff1a python -m build -w \u5176\u4e2d\u4f7f\u7528 -w \u5c06\u4f1a\u751f\u6210\u4e00\u4e2a Whl \u7684\u5305\u3002 \u53d1\u5e03 \u4f7f\u7528 twine \u5c06\u5df2\u7ecf\u6253\u5305\u597d\u7684\u6587\u4ef6\u53d1\u5e03\u5230 Pypi \u4ed3\u5e93\u4e2d\u3002 \u6ce8\u610f\uff1a\u53d1\u5e03\u65f6\uff0c\u9700\u8981\u63d0\u4f9b Pypi \u4ed3\u5e93\u7684\u8d26\u53f7\u548c\u5bc6\u7801\uff0c\u8bf7\u63d0\u524d\u6ce8\u518c\u3002 \u5b89\u88c5 twine \u4f9d\u8d56\uff1a pip install twine \u7136\u540e\u53d1\u5e03\uff1a twine upload dist/example_etl-0.0.1.dev0-py3-none-any.whl \u8f93\u5165\u8d26\u53f7\u5bc6\u7801\u540e\uff0c\u5373\u53ef\u5c06\u9879\u76ee\u53d1\u5e03\u5230 Pypi \u6ce8\u610f\uff1a\u7531\u4e8e Pypi \u4e0a\u7684\u9879\u76ee\u540d\u79f0\u662f\u552f\u4e00\u7684\uff0c example_etl \u540d\u79f0\u5df2\u7ecf\u88ab\u4f7f\u7528\uff0c\u6240\u4ee5\u4f60\u5728\u6d4b\u8bd5\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u9879\u76ee\u540d\u79f0\u3002 \u5b89\u88c5\u6d4b\u8bd5 \u9879\u76ee\u6b63\u5e38\u53d1\u5e03\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 pip \u5b89\u88c5\u5230\u672c\u5730\u4f7f\u7528\uff1a pip install example-etl \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a \u276f pip install example-etl Collecting example-etl Downloading example_etl-0.0.1.dev0-py3-none-any.whl (14 kB) Collecting dynaconf==3.1.7 Downloading dynaconf-3.1.7-py2.py3-none-any.whl (200 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 200 kB 850 kB/s Collecting stevedore==3.5.0 Downloading stevedore-3.5.0-py3-none-any.whl (49 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 49 kB 747 kB/s Collecting click==8.0.3 Downloading click-8.0.3-py3-none-any.whl (97 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 97 kB 554 kB/s Collecting pbr!=2.1.0,>=2.0.0 Downloading pbr-5.8.0-py2.py3-none-any.whl (112 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 112 kB 1.9 MB/s Installing collected packages: pbr, stevedore, dynaconf, click, example-etl Successfully installed click-8.0.3 dynaconf-3.1.7 example-etl-0.0.1.dev0 pbr-5.8.0 stevedore-3.5.0","title":"\u53d1\u5e03"},{"location":"guidelines/tutorial/publish/#_1","text":"\u9879\u76ee\u5f00\u53d1\u6d4b\u8bd5\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u5c06\u9879\u76ee\u53d1\u5e03\u5230 Pypi \u4ed3\u5e93\u4e2d\uff0c\u7136\u540e\u5728\u5176\u4ed6\u5730\u65b9\u901a\u8fc7 Pip \u547d\u4ee4\u5373\u53ef \u5b89\u88c5\u4f7f\u7528\u3002\u5bf9\u4e8e\u4e00\u4e9b\u5de5\u5177\u5305\u6bd4\u8f83\u65b9\u4fbf\u3002","title":"\u6253\u5305\u53d1\u5e03"},{"location":"guidelines/tutorial/publish/#_2","text":"\u6839\u636e PEP 517 \u89c4\u8303\uff0c\u65b0\u7684\u6253\u5305\u673a\u5236\u901a\u8fc7 build \u5de5\u5177\u6765\u64cd\u4f5c\u3002 \u5b89\u88c5\u6253\u5305\u5de5\u5177\uff1a pip install build \u7136\u540e\u8fd0\u884c\u6253\u5305\u547d\u4ee4\uff1a python -m build -w \u5176\u4e2d\u4f7f\u7528 -w \u5c06\u4f1a\u751f\u6210\u4e00\u4e2a Whl \u7684\u5305\u3002","title":"\u6253\u5305"},{"location":"guidelines/tutorial/publish/#_3","text":"\u4f7f\u7528 twine \u5c06\u5df2\u7ecf\u6253\u5305\u597d\u7684\u6587\u4ef6\u53d1\u5e03\u5230 Pypi \u4ed3\u5e93\u4e2d\u3002 \u6ce8\u610f\uff1a\u53d1\u5e03\u65f6\uff0c\u9700\u8981\u63d0\u4f9b Pypi \u4ed3\u5e93\u7684\u8d26\u53f7\u548c\u5bc6\u7801\uff0c\u8bf7\u63d0\u524d\u6ce8\u518c\u3002 \u5b89\u88c5 twine \u4f9d\u8d56\uff1a pip install twine \u7136\u540e\u53d1\u5e03\uff1a twine upload dist/example_etl-0.0.1.dev0-py3-none-any.whl \u8f93\u5165\u8d26\u53f7\u5bc6\u7801\u540e\uff0c\u5373\u53ef\u5c06\u9879\u76ee\u53d1\u5e03\u5230 Pypi \u6ce8\u610f\uff1a\u7531\u4e8e Pypi \u4e0a\u7684\u9879\u76ee\u540d\u79f0\u662f\u552f\u4e00\u7684\uff0c example_etl \u540d\u79f0\u5df2\u7ecf\u88ab\u4f7f\u7528\uff0c\u6240\u4ee5\u4f60\u5728\u6d4b\u8bd5\u65f6\uff0c\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u9879\u76ee\u540d\u79f0\u3002","title":"\u53d1\u5e03"},{"location":"guidelines/tutorial/publish/#_4","text":"\u9879\u76ee\u6b63\u5e38\u53d1\u5e03\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 pip \u5b89\u88c5\u5230\u672c\u5730\u4f7f\u7528\uff1a pip install example-etl \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a \u276f pip install example-etl Collecting example-etl Downloading example_etl-0.0.1.dev0-py3-none-any.whl (14 kB) Collecting dynaconf==3.1.7 Downloading dynaconf-3.1.7-py2.py3-none-any.whl (200 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 200 kB 850 kB/s Collecting stevedore==3.5.0 Downloading stevedore-3.5.0-py3-none-any.whl (49 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 49 kB 747 kB/s Collecting click==8.0.3 Downloading click-8.0.3-py3-none-any.whl (97 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 97 kB 554 kB/s Collecting pbr!=2.1.0,>=2.0.0 Downloading pbr-5.8.0-py2.py3-none-any.whl (112 kB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 112 kB 1.9 MB/s Installing collected packages: pbr, stevedore, dynaconf, click, example-etl Successfully installed click-8.0.3 dynaconf-3.1.7 example-etl-0.0.1.dev0 pbr-5.8.0 stevedore-3.5.0","title":"\u5b89\u88c5\u6d4b\u8bd5"},{"location":"guidelines/tutorial/test/","text":"\u6d4b\u8bd5 \u6d4b\u8bd5\u662f\u4fdd\u969c\u5b89\u5168\u4e0a\u7ebf\u4e00\u4e2a\u91cd\u8981\u7684\u6b65\u9aa4\uff0c\u7f16\u5199\u826f\u597d\u7684\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u5728\u53d1\u5e03\u4e4b\u524d\u5c3d\u53ef\u80fd\u907f\u514d BUG \u51fa\u73b0\u3002 \u5728\u4fee\u6539\u529f\u80fd\u540e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u56de\u5f52\u6d4b\u8bd5\uff0c\u68c0\u67e5\u73b0\u6709\u529f\u80fd\u7684\u7a33\u5b9a\u6027\u3002 \u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u8fc7\u7a0b\uff0c\u548c\u5f00\u53d1\u987a\u5e8f\u4e00\u76f4\uff0c\u73b0\u6d4b\u8bd5\u4e09\u4e2a\u6a21\u5757\uff0c\u518d\u6d4b\u8bd5 manage \u6a21\u5757\uff0c\u6700\u540e\u6d4b\u8bd5\u8c03\u7528\u903b\u8f91\u3002 \u6d4b\u8bd5\u65f6\uff0c\u4f7f\u7528\u7684\u662f pytest \u5de5\u5177\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 unittest \u3002 \u6d4b\u8bd5 extractor \u5728 tests \u5305\u4e2d\u65b0\u5efa test_extractor.py \u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Test extractor\"\"\" import pytest from example_etl.extractor.base import BaseExtractor from example_etl.extractor.file import FileExtractor def test_base_source ( mocker ): \"\"\"Test base extractor\"\"\" close_mock = mocker . patch . object ( BaseExtractor , 'close' ) with pytest . raises ( NotImplementedError ): with BaseExtractor ( mocker . MagicMock ()) as base : base . extract () assert close_mock . called_once () def test_file_source ( mocker , foo_file ): \"\"\"Test file extractor\"\"\" extractor = FileExtractor ( mocker . MagicMock ()) extractor . settings . FILE_EXTRACTOR_PATH = foo_file data = list ( extractor . extract ()) assert data == [ 'foo' ] \u6d4b\u8bd5\u4ee3\u7801\u4e2d\uff0c\u5206\u522b\u6d4b\u8bd5\u4e86 BaseExtractor \u548c FileExtractor \u7684\u903b\u8f91\u3002 \u5728\u6d4b\u8bd5\u903b\u8f91\u4e2d\u4f7f\u7528\u4e86 mocker \u529f\u80fd\uff0c\u53ef\u4ee5\u5728\u6d4b\u8bd5\u5355\u5143\u903b\u8f91\u65f6\uff0c\u5c06\u5176\u4f9d\u8d56\u7684\u4e1c\u897f mock \u6389\u3002\u5728 pytest \u6d4b\u8bd5\u6846\u67b6\u4e2d\uff0c \u4f7f\u7528 pytest-mock \u6269\u5c55\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4f7f\u7528 mocker \u5bf9\u8c61\u3002 \u5b89\u88c5 pytest-mock \uff1a pipenv install -d pytest-mock \u8fd9\u91cc\u4f7f\u7528\u4e86 pipenv install -d \uff0c\u610f\u601d\u662f\u5c06 pytest-mock \u5b89\u88c5\u5230\u5f00\u53d1\u73af\u5883\u4f9d\u8d56\u4e2d\u3002 \u5f53\u5728\u4e00\u4e2a\u65b0\u73af\u5883 pipenv install \u5b89\u88c5\u65f6\uff0c\u662f\u4e0d\u4f1a\u5b89\u88c5\u5f00\u53d1\u73af\u5883\u4e2d\u7684\u4f9d\u8d56\u7684\u3002 \u6d4b\u8bd5\u4ee3\u7801\u4e2d\u540c\u65f6\u4f7f\u7528\u4e86 foo_file \u7684 fixture \uff0c\u5b83\u5b9a\u4e49\u5728 conftest.py \u4e2d\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Test config\"\"\" import tempfile import pytest from click.testing import CliRunner @pytest . fixture () def clicker (): \"\"\"clicker fixture\"\"\" yield CliRunner () @pytest . fixture () def foo_file (): \"\"\"foo file\"\"\" with tempfile . NamedTemporaryFile ( mode = 'w' ) as file : file . write ( 'foo' ) file . flush () yield file . name \u7136\u540e\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c pytest \uff0c\u6d4b\u8bd5\u521a\u521a\u7f16\u5199\u7684\u6d4b\u8bd5\u4ee3\u7801\u3002\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a \u276f pytest ================================================================= test session starts ================================================================= platform linux -- Python 3.10.0, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 rootdir: /tmp/test/example_etl, configfile: setup.cfg, testpaths: tests plugins: cov-3.0.0, mock-3.6.1 collected 12 items tests/test_cmdline.py ..... [ 41%] tests/test_extcator.py .. [ 58%] tests/test_log.py .... [ 91%] tests/tests.py . [100%] ================================================================= 12 passed in 0.18s ================================================================== \u6d4b\u8bd5\u6210\u529f\u3002 \u6d4b\u8bd5 transformer \u5728 tests \u5305\u4e2d\u521b\u5efa test_transformer.py \u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Test transformer\"\"\" import pytest from example_etl.transformer.base import BaseTransformer from example_etl.transformer.strip import StripTransformer def test_base_process ( mocker ): \"\"\"Test base transformer\"\"\" process = BaseTransformer ( mocker . MagicMock ()) with pytest . raises ( NotImplementedError ): process . transform ( 'foo' ) @pytest . mark . parametrize ( 'data, expect_value' , [ ( 'xx ' , 'xx' ), ( ' xx ' , 'xx' ), ( 'xx' , 'xx' ), ] ) def test_strip_process ( mocker , data , expect_value ): \"\"\"Test strip transformer\"\"\" processor = StripTransformer ( mocker . MagicMock ()) res = processor . transform ( data ) assert res == expect_value \u5728\u6d4b\u8bd5 test_strip_process \u65f6\uff0c\u4f7f\u7528\u4e86 pytest \u7684\u53c2\u6570\u5316\u6d4b\u8bd5\u3002\u53ef\u4ee5\u5728\u4e00\u4e2a\u6d4b\u8bd5\u903b\u8f91\u4e2d\uff0c\u6d4b\u8bd5\u4e0d\u540c\u7684\u8f93\u5165\u8f93\u51fa\u503c\u3002 \u518d\u6b21\u8fd0\u884c pytest \u547d\u4ee4\uff0c\u68c0\u6d4b\u6d4b\u8bd5\u662f\u5426\u6b63\u786e\u3002 \u6d4b\u8bd5 loader \u5728 tests \u5305\u4e2d\u521b\u5efa test_loader.py \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Test loader\"\"\" import tempfile from pathlib import Path import pytest from example_etl.loader.base import BaseLoader from example_etl.loader.file import FileLoader def test_base_dest ( mocker ): \"\"\"Test base loader\"\"\" close_mock = mocker . patch . object ( BaseLoader , 'close' ) with BaseLoader ( mocker . MagicMock ()) as base : with pytest . raises ( NotImplementedError ): base . load ( 'foo' ) assert close_mock . called_once () def test_file_dest ( mocker ): \"\"\"Test file loader\"\"\" with tempfile . NamedTemporaryFile () as file : settings_mock = mocker . MagicMock () settings_mock . FILE_LOADER_PATH = file . name with FileLoader ( settings_mock ) as loader : loader . load ( 'foo' ) file = Path ( file . name ) stat = file . stat () assert stat . st_size == 3 \u5728\u6d4b\u8bd5 test_file_dest \u65f6\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a\u4e34\u65f6\u6587\u4ef6\u4f5c\u4e3a\u76ee\u6807\u5199\u5165\uff0c\u4f7f\u7528\u4e86 with \u5173\u952e\u5b57\u6253\u5f00\u6587\u4ef6\uff0c \u5728\u6d4b\u8bd5\u5b8c\u6210\u540e\uff0c\u4f1a\u81ea\u52a8\u5220\u9664\u4e34\u65f6\u6587\u4ef6\u3002 \u518d\u6b21\u8fd0\u884c pytest \u68c0\u8f66\u6d4b\u8bd5\u6b63\u786e\u3002 \u6d4b\u8bd5 manage manage \u7684\u903b\u8f91\u540c\u6837\u9700\u8981\u6d4b\u8bd5\uff0c\u5728 tests \u5305\u4e2d\u521b\u5efa test_manage.py \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Test manage\"\"\" import pytest from example_etl.exceptions import PluginNotFoundError from example_etl.extractor.file import FileExtractor from example_etl.manage import Manage , get_extension def test_get_extension (): \"\"\"Test get extension\"\"\" plugin = get_extension ( 'example_etl.extractor' , 'file' ) assert plugin is FileExtractor def test_get_extension_error (): \"\"\"Test get extension error\"\"\" with pytest . raises ( PluginNotFoundError ): get_extension ( 'example_etl.extractor' , 'xxx' ) def test_manage_run ( mocker ): \"\"\"Test manage run\"\"\" mocker . patch ( 'example_etl.manage.get_extension' ) process_mock = mocker . patch . object ( Manage , 'transform' ) manage = Manage () manage . run () assert process_mock . called_once () def test_manage_transform ( mocker ): \"\"\"Test manage transform\"\"\" magic_mock = mocker . MagicMock () manage = Manage () manage . transformer = magic_mock magic_mock . extract . return_value = [ 1 , 2 ] manage . transform ( magic_mock , magic_mock ) assert magic_mock . extract . called_once () assert magic_mock . load . call_count == 2 assert magic_mock . transform . call_count == 2 \u5728\u6d4b\u8bd5\u65f6\uff0c\u9700\u8981\u4fdd\u8bc1\u914d\u7f6e\u6587\u4ef6\u4e2d\u5b58\u5728\u4e4b\u524d\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u53d8\u91cf\u3002 \u5728 src/example_etl/config/settings.yml \u6587\u4ef6\u4e2d\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a extractor_name : file transformer_name : strip loader_name : file \u914d\u7f6e\u7a0b\u5e8f\u9ed8\u8ba4\u4f7f\u7528\u4e09\u4e2a\u5df2\u7ecf\u5b9e\u73b0\u7684\u903b\u8f91\u3002 \u518d\u6b21\u8fd0\u884c pytest \u68c0\u67e5\u6d4b\u8bd5\u7ed3\u679c\u3002 \u68c0\u67e5\u6d4b\u8bd5\u8986\u76d6\u7387 \u6d4b\u8bd5\u8986\u76d6\u7387\u6307\u793a\u7f16\u5199\u7684\u5355\u5143\u6d4b\u8bd5\uff0c\u8986\u76d6\u4e86\u591a\u5c11\u6e90\u4ee3\u7801\u3002\u80fd\u591f\u901a\u8fc7\u6d4b\u8bd5\u8986\u76d6\u7387\u67e5\u770b\u8fd8\u6709\u54ea\u4e9b\u5185\u5bb9\u6ca1\u6709\u88ab\u6d4b\u8bd5\u5230\u3002 \u8fd0\u884c pytest --cov \u67e5\u770b\u6d4b\u8bd5\u8986\u76d6\u7387\u3002 \u276f pytest --cov ================================================================= test session starts ================================================================= platform linux -- Python 3.10.0, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 rootdir: /tmp/test/example_etl, configfile: setup.cfg, testpaths: tests plugins: cov-3.0.0, mock-3.6.1 collected 24 items tests/test_cmdline.py ..... [ 20%] tests/test_extcator.py .. [ 29%] tests/test_loader.py .. [ 37%] tests/test_log.py ...... [ 62%] tests/test_manage.py .... [ 79%] tests/test_transformer.py .... [ 95%] tests/tests.py . [100%] ---------- coverage: platform linux, python 3.10.0-final-0 ----------- Name Stmts Miss Cover ------------------------------------------------------------- src/example_etl/__init__.py 1 0 100% src/example_etl/cmdline.py 23 0 100% src/example_etl/config/__init__.py 8 0 100% src/example_etl/constants.py 1 0 100% src/example_etl/exceptions.py 10 2 80% src/example_etl/extractor/__init__.py 0 0 100% src/example_etl/extractor/base.py 13 0 100% src/example_etl/extractor/file.py 12 0 100% src/example_etl/loader/__init__.py 0 0 100% src/example_etl/loader/base.py 12 0 100% src/example_etl/loader/file.py 15 0 100% src/example_etl/log.py 19 0 100% src/example_etl/manage.py 33 0 100% src/example_etl/transformer/__init__.py 0 0 100% src/example_etl/transformer/base.py 5 0 100% src/example_etl/transformer/strip.py 7 0 100% tests/__init__.py 0 0 100% tests/conftest.py 12 0 100% tests/test_cmdline.py 10 0 100% tests/test_exceptions.py 0 0 100% tests/test_extcator.py 14 0 100% tests/test_loader.py 20 0 100% tests/test_log.py 10 0 100% tests/test_manage.py 25 0 100% tests/test_transformer.py 12 0 100% tests/tests.py 3 0 100% ------------------------------------------------------------- TOTAL 265 2 99% ================================================================= 24 passed in 0.41s ================================================================== \u901a\u8fc7\u8986\u76d6\u7387\u53ef\u4ee5\u770b\u5230 src/example_etl/exceptions.py \u7684\u903b\u8f91\u8fd8\u6709\u6ca1\u6d4b\u8bd5\u7684\u3002 \u5b8c\u5584\u5176\u4ed6\u6d4b\u8bd5 \u5728 tests \u6a21\u5757\u4e2d\u521b\u5efa test_exceptions.py \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Test exception\"\"\" from example_etl.exceptions import PluginNotFoundError def test_plugin_not_found_error (): \"\"\"test plugin not found error\"\"\" error = PluginNotFoundError ( 'foo' , 'bar' ) assert str ( error ) == 'Can not found \"bar\" plugin in foo' \u518d\u6b21\u8fd0\u884c pytest --cov \u53ef\u4ee5\u770b\u5230\u8986\u76d6\u7387 100% \u3002 \u4ee3\u7801\u98ce\u683c\u68c0\u6d4b \u4e3a\u4e86\u8ba9\u5f00\u53d1\u98ce\u683c\u8fbe\u5230\u7edf\u4e00\uff0c\u4f7f\u7528\u4ee3\u7801\u683c\u5f0f\u5316\u5de5\u5177\u68c0\u6d4b\u3002 \u4f7f\u7528 isort \u5c06\u5bfc\u5305\u90e8\u5206\u683c\u5f0f\u5316\u4e3a\u7edf\u4e00\u683c\u5f0f\uff0c\u4f7f\u7528 pylint \u68c0\u6d4b\u4ee3\u7801\u662f\u5426\u7b26\u5408 PEP8 \u89c4\u8303\uff0c\u540c\u65f6\u8fd8\u80fd\u68c0\u6d4b \u4e00\u4e9b\u4e0d\u6807\u51c6\u7684\u7684\u8bed\u6cd5\uff0c\u5e76\u7ed9\u51fa\u4fee\u6539\u5efa\u8bae\u3002 \u6267\u884c isort . --check-only --diff \u68c0\u6d4b\u4ee3\u7801\u98ce\u683c\uff0c\u5e76\u4ec5\u8f93\u51fa\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u5bfc\u5305\uff0c\u6267\u884c isort \u4f1a\u81ea\u52a8\u683c\u5f0f \u5316\u4ee3\u7801\u3002 \u8fd0\u884c pylint src tests \u68c0\u67e5 src \u76ee\u5f55\u548c tests \u76ee\u5f55\u4e0b\u7684 Python \u4ee3\u7801\u3002\u4f1a\u8f93\u51fa\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u5185\u5bb9\uff0c\u7136\u540e \u6839\u636e\u5efa\u8bae\u4fee\u6539\u5373\u53ef\u3002 \u81ea\u52a8\u5316\u6d4b\u8bd5 \u9879\u76ee\u9ed8\u8ba4\u5e26\u6709 tox \u81ea\u52a8\u5316\u914d\u7f6e\u3002\u5f53\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u76f4\u63a5\u8fd0\u884c tox \uff0c\u4f1a\u81ea\u52a8\u5728\u6a21\u62df\u73af\u5883\u4e2d\u6d4b\u8bd5\u4ee3\u7801\u3002\u6d4b\u8bd5\u65f6\uff0c\u4f1a \u521b\u5efa\u72ec\u7acb\u7684\u865a\u62df\u73af\u5883\uff0c\u7136\u540e\u5c06\u9879\u76ee\u6253\u5305\u5b89\u88c5\u5230\u73af\u5883\u4e2d\uff0c\u518d\u8fdb\u884c\u6d4b\u8bd5\u3002 tox \u4f1a\u81ea\u52a8\u6267\u884c pytest \u6d4b\u8bd5\uff0c \u5bfc\u5305\u68c0\u6d4b\uff0c\u4ee3\u7801\u98ce\u683c\u68c0\u6d4b\u3002","title":"\u6d4b\u8bd5"},{"location":"guidelines/tutorial/test/#_1","text":"\u6d4b\u8bd5\u662f\u4fdd\u969c\u5b89\u5168\u4e0a\u7ebf\u4e00\u4e2a\u91cd\u8981\u7684\u6b65\u9aa4\uff0c\u7f16\u5199\u826f\u597d\u7684\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u5728\u53d1\u5e03\u4e4b\u524d\u5c3d\u53ef\u80fd\u907f\u514d BUG \u51fa\u73b0\u3002 \u5728\u4fee\u6539\u529f\u80fd\u540e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u56de\u5f52\u6d4b\u8bd5\uff0c\u68c0\u67e5\u73b0\u6709\u529f\u80fd\u7684\u7a33\u5b9a\u6027\u3002 \u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u8fc7\u7a0b\uff0c\u548c\u5f00\u53d1\u987a\u5e8f\u4e00\u76f4\uff0c\u73b0\u6d4b\u8bd5\u4e09\u4e2a\u6a21\u5757\uff0c\u518d\u6d4b\u8bd5 manage \u6a21\u5757\uff0c\u6700\u540e\u6d4b\u8bd5\u8c03\u7528\u903b\u8f91\u3002 \u6d4b\u8bd5\u65f6\uff0c\u4f7f\u7528\u7684\u662f pytest \u5de5\u5177\uff0c\u800c\u4e0d\u662f\u4f7f\u7528 unittest \u3002","title":"\u6d4b\u8bd5"},{"location":"guidelines/tutorial/test/#extractor","text":"\u5728 tests \u5305\u4e2d\u65b0\u5efa test_extractor.py \u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Test extractor\"\"\" import pytest from example_etl.extractor.base import BaseExtractor from example_etl.extractor.file import FileExtractor def test_base_source ( mocker ): \"\"\"Test base extractor\"\"\" close_mock = mocker . patch . object ( BaseExtractor , 'close' ) with pytest . raises ( NotImplementedError ): with BaseExtractor ( mocker . MagicMock ()) as base : base . extract () assert close_mock . called_once () def test_file_source ( mocker , foo_file ): \"\"\"Test file extractor\"\"\" extractor = FileExtractor ( mocker . MagicMock ()) extractor . settings . FILE_EXTRACTOR_PATH = foo_file data = list ( extractor . extract ()) assert data == [ 'foo' ] \u6d4b\u8bd5\u4ee3\u7801\u4e2d\uff0c\u5206\u522b\u6d4b\u8bd5\u4e86 BaseExtractor \u548c FileExtractor \u7684\u903b\u8f91\u3002 \u5728\u6d4b\u8bd5\u903b\u8f91\u4e2d\u4f7f\u7528\u4e86 mocker \u529f\u80fd\uff0c\u53ef\u4ee5\u5728\u6d4b\u8bd5\u5355\u5143\u903b\u8f91\u65f6\uff0c\u5c06\u5176\u4f9d\u8d56\u7684\u4e1c\u897f mock \u6389\u3002\u5728 pytest \u6d4b\u8bd5\u6846\u67b6\u4e2d\uff0c \u4f7f\u7528 pytest-mock \u6269\u5c55\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u4f7f\u7528 mocker \u5bf9\u8c61\u3002 \u5b89\u88c5 pytest-mock \uff1a pipenv install -d pytest-mock \u8fd9\u91cc\u4f7f\u7528\u4e86 pipenv install -d \uff0c\u610f\u601d\u662f\u5c06 pytest-mock \u5b89\u88c5\u5230\u5f00\u53d1\u73af\u5883\u4f9d\u8d56\u4e2d\u3002 \u5f53\u5728\u4e00\u4e2a\u65b0\u73af\u5883 pipenv install \u5b89\u88c5\u65f6\uff0c\u662f\u4e0d\u4f1a\u5b89\u88c5\u5f00\u53d1\u73af\u5883\u4e2d\u7684\u4f9d\u8d56\u7684\u3002 \u6d4b\u8bd5\u4ee3\u7801\u4e2d\u540c\u65f6\u4f7f\u7528\u4e86 foo_file \u7684 fixture \uff0c\u5b83\u5b9a\u4e49\u5728 conftest.py \u4e2d\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Test config\"\"\" import tempfile import pytest from click.testing import CliRunner @pytest . fixture () def clicker (): \"\"\"clicker fixture\"\"\" yield CliRunner () @pytest . fixture () def foo_file (): \"\"\"foo file\"\"\" with tempfile . NamedTemporaryFile ( mode = 'w' ) as file : file . write ( 'foo' ) file . flush () yield file . name \u7136\u540e\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c pytest \uff0c\u6d4b\u8bd5\u521a\u521a\u7f16\u5199\u7684\u6d4b\u8bd5\u4ee3\u7801\u3002\u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a \u276f pytest ================================================================= test session starts ================================================================= platform linux -- Python 3.10.0, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 rootdir: /tmp/test/example_etl, configfile: setup.cfg, testpaths: tests plugins: cov-3.0.0, mock-3.6.1 collected 12 items tests/test_cmdline.py ..... [ 41%] tests/test_extcator.py .. [ 58%] tests/test_log.py .... [ 91%] tests/tests.py . [100%] ================================================================= 12 passed in 0.18s ================================================================== \u6d4b\u8bd5\u6210\u529f\u3002","title":"\u6d4b\u8bd5 extractor"},{"location":"guidelines/tutorial/test/#transformer","text":"\u5728 tests \u5305\u4e2d\u521b\u5efa test_transformer.py \u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Test transformer\"\"\" import pytest from example_etl.transformer.base import BaseTransformer from example_etl.transformer.strip import StripTransformer def test_base_process ( mocker ): \"\"\"Test base transformer\"\"\" process = BaseTransformer ( mocker . MagicMock ()) with pytest . raises ( NotImplementedError ): process . transform ( 'foo' ) @pytest . mark . parametrize ( 'data, expect_value' , [ ( 'xx ' , 'xx' ), ( ' xx ' , 'xx' ), ( 'xx' , 'xx' ), ] ) def test_strip_process ( mocker , data , expect_value ): \"\"\"Test strip transformer\"\"\" processor = StripTransformer ( mocker . MagicMock ()) res = processor . transform ( data ) assert res == expect_value \u5728\u6d4b\u8bd5 test_strip_process \u65f6\uff0c\u4f7f\u7528\u4e86 pytest \u7684\u53c2\u6570\u5316\u6d4b\u8bd5\u3002\u53ef\u4ee5\u5728\u4e00\u4e2a\u6d4b\u8bd5\u903b\u8f91\u4e2d\uff0c\u6d4b\u8bd5\u4e0d\u540c\u7684\u8f93\u5165\u8f93\u51fa\u503c\u3002 \u518d\u6b21\u8fd0\u884c pytest \u547d\u4ee4\uff0c\u68c0\u6d4b\u6d4b\u8bd5\u662f\u5426\u6b63\u786e\u3002","title":"\u6d4b\u8bd5 transformer"},{"location":"guidelines/tutorial/test/#loader","text":"\u5728 tests \u5305\u4e2d\u521b\u5efa test_loader.py \uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Test loader\"\"\" import tempfile from pathlib import Path import pytest from example_etl.loader.base import BaseLoader from example_etl.loader.file import FileLoader def test_base_dest ( mocker ): \"\"\"Test base loader\"\"\" close_mock = mocker . patch . object ( BaseLoader , 'close' ) with BaseLoader ( mocker . MagicMock ()) as base : with pytest . raises ( NotImplementedError ): base . load ( 'foo' ) assert close_mock . called_once () def test_file_dest ( mocker ): \"\"\"Test file loader\"\"\" with tempfile . NamedTemporaryFile () as file : settings_mock = mocker . MagicMock () settings_mock . FILE_LOADER_PATH = file . name with FileLoader ( settings_mock ) as loader : loader . load ( 'foo' ) file = Path ( file . name ) stat = file . stat () assert stat . st_size == 3 \u5728\u6d4b\u8bd5 test_file_dest \u65f6\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a\u4e34\u65f6\u6587\u4ef6\u4f5c\u4e3a\u76ee\u6807\u5199\u5165\uff0c\u4f7f\u7528\u4e86 with \u5173\u952e\u5b57\u6253\u5f00\u6587\u4ef6\uff0c \u5728\u6d4b\u8bd5\u5b8c\u6210\u540e\uff0c\u4f1a\u81ea\u52a8\u5220\u9664\u4e34\u65f6\u6587\u4ef6\u3002 \u518d\u6b21\u8fd0\u884c pytest \u68c0\u8f66\u6d4b\u8bd5\u6b63\u786e\u3002","title":"\u6d4b\u8bd5 loader"},{"location":"guidelines/tutorial/test/#manage","text":"manage \u7684\u903b\u8f91\u540c\u6837\u9700\u8981\u6d4b\u8bd5\uff0c\u5728 tests \u5305\u4e2d\u521b\u5efa test_manage.py \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Test manage\"\"\" import pytest from example_etl.exceptions import PluginNotFoundError from example_etl.extractor.file import FileExtractor from example_etl.manage import Manage , get_extension def test_get_extension (): \"\"\"Test get extension\"\"\" plugin = get_extension ( 'example_etl.extractor' , 'file' ) assert plugin is FileExtractor def test_get_extension_error (): \"\"\"Test get extension error\"\"\" with pytest . raises ( PluginNotFoundError ): get_extension ( 'example_etl.extractor' , 'xxx' ) def test_manage_run ( mocker ): \"\"\"Test manage run\"\"\" mocker . patch ( 'example_etl.manage.get_extension' ) process_mock = mocker . patch . object ( Manage , 'transform' ) manage = Manage () manage . run () assert process_mock . called_once () def test_manage_transform ( mocker ): \"\"\"Test manage transform\"\"\" magic_mock = mocker . MagicMock () manage = Manage () manage . transformer = magic_mock magic_mock . extract . return_value = [ 1 , 2 ] manage . transform ( magic_mock , magic_mock ) assert magic_mock . extract . called_once () assert magic_mock . load . call_count == 2 assert magic_mock . transform . call_count == 2 \u5728\u6d4b\u8bd5\u65f6\uff0c\u9700\u8981\u4fdd\u8bc1\u914d\u7f6e\u6587\u4ef6\u4e2d\u5b58\u5728\u4e4b\u524d\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u53d8\u91cf\u3002 \u5728 src/example_etl/config/settings.yml \u6587\u4ef6\u4e2d\u52a0\u5165\u5982\u4e0b\u5185\u5bb9\uff1a extractor_name : file transformer_name : strip loader_name : file \u914d\u7f6e\u7a0b\u5e8f\u9ed8\u8ba4\u4f7f\u7528\u4e09\u4e2a\u5df2\u7ecf\u5b9e\u73b0\u7684\u903b\u8f91\u3002 \u518d\u6b21\u8fd0\u884c pytest \u68c0\u67e5\u6d4b\u8bd5\u7ed3\u679c\u3002","title":"\u6d4b\u8bd5 manage"},{"location":"guidelines/tutorial/test/#_2","text":"\u6d4b\u8bd5\u8986\u76d6\u7387\u6307\u793a\u7f16\u5199\u7684\u5355\u5143\u6d4b\u8bd5\uff0c\u8986\u76d6\u4e86\u591a\u5c11\u6e90\u4ee3\u7801\u3002\u80fd\u591f\u901a\u8fc7\u6d4b\u8bd5\u8986\u76d6\u7387\u67e5\u770b\u8fd8\u6709\u54ea\u4e9b\u5185\u5bb9\u6ca1\u6709\u88ab\u6d4b\u8bd5\u5230\u3002 \u8fd0\u884c pytest --cov \u67e5\u770b\u6d4b\u8bd5\u8986\u76d6\u7387\u3002 \u276f pytest --cov ================================================================= test session starts ================================================================= platform linux -- Python 3.10.0, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 rootdir: /tmp/test/example_etl, configfile: setup.cfg, testpaths: tests plugins: cov-3.0.0, mock-3.6.1 collected 24 items tests/test_cmdline.py ..... [ 20%] tests/test_extcator.py .. [ 29%] tests/test_loader.py .. [ 37%] tests/test_log.py ...... [ 62%] tests/test_manage.py .... [ 79%] tests/test_transformer.py .... [ 95%] tests/tests.py . [100%] ---------- coverage: platform linux, python 3.10.0-final-0 ----------- Name Stmts Miss Cover ------------------------------------------------------------- src/example_etl/__init__.py 1 0 100% src/example_etl/cmdline.py 23 0 100% src/example_etl/config/__init__.py 8 0 100% src/example_etl/constants.py 1 0 100% src/example_etl/exceptions.py 10 2 80% src/example_etl/extractor/__init__.py 0 0 100% src/example_etl/extractor/base.py 13 0 100% src/example_etl/extractor/file.py 12 0 100% src/example_etl/loader/__init__.py 0 0 100% src/example_etl/loader/base.py 12 0 100% src/example_etl/loader/file.py 15 0 100% src/example_etl/log.py 19 0 100% src/example_etl/manage.py 33 0 100% src/example_etl/transformer/__init__.py 0 0 100% src/example_etl/transformer/base.py 5 0 100% src/example_etl/transformer/strip.py 7 0 100% tests/__init__.py 0 0 100% tests/conftest.py 12 0 100% tests/test_cmdline.py 10 0 100% tests/test_exceptions.py 0 0 100% tests/test_extcator.py 14 0 100% tests/test_loader.py 20 0 100% tests/test_log.py 10 0 100% tests/test_manage.py 25 0 100% tests/test_transformer.py 12 0 100% tests/tests.py 3 0 100% ------------------------------------------------------------- TOTAL 265 2 99% ================================================================= 24 passed in 0.41s ================================================================== \u901a\u8fc7\u8986\u76d6\u7387\u53ef\u4ee5\u770b\u5230 src/example_etl/exceptions.py \u7684\u903b\u8f91\u8fd8\u6709\u6ca1\u6d4b\u8bd5\u7684\u3002","title":"\u68c0\u67e5\u6d4b\u8bd5\u8986\u76d6\u7387"},{"location":"guidelines/tutorial/test/#_3","text":"\u5728 tests \u6a21\u5757\u4e2d\u521b\u5efa test_exceptions.py \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a \"\"\"Test exception\"\"\" from example_etl.exceptions import PluginNotFoundError def test_plugin_not_found_error (): \"\"\"test plugin not found error\"\"\" error = PluginNotFoundError ( 'foo' , 'bar' ) assert str ( error ) == 'Can not found \"bar\" plugin in foo' \u518d\u6b21\u8fd0\u884c pytest --cov \u53ef\u4ee5\u770b\u5230\u8986\u76d6\u7387 100% \u3002","title":"\u5b8c\u5584\u5176\u4ed6\u6d4b\u8bd5"},{"location":"guidelines/tutorial/test/#_4","text":"\u4e3a\u4e86\u8ba9\u5f00\u53d1\u98ce\u683c\u8fbe\u5230\u7edf\u4e00\uff0c\u4f7f\u7528\u4ee3\u7801\u683c\u5f0f\u5316\u5de5\u5177\u68c0\u6d4b\u3002 \u4f7f\u7528 isort \u5c06\u5bfc\u5305\u90e8\u5206\u683c\u5f0f\u5316\u4e3a\u7edf\u4e00\u683c\u5f0f\uff0c\u4f7f\u7528 pylint \u68c0\u6d4b\u4ee3\u7801\u662f\u5426\u7b26\u5408 PEP8 \u89c4\u8303\uff0c\u540c\u65f6\u8fd8\u80fd\u68c0\u6d4b \u4e00\u4e9b\u4e0d\u6807\u51c6\u7684\u7684\u8bed\u6cd5\uff0c\u5e76\u7ed9\u51fa\u4fee\u6539\u5efa\u8bae\u3002 \u6267\u884c isort . --check-only --diff \u68c0\u6d4b\u4ee3\u7801\u98ce\u683c\uff0c\u5e76\u4ec5\u8f93\u51fa\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u5bfc\u5305\uff0c\u6267\u884c isort \u4f1a\u81ea\u52a8\u683c\u5f0f \u5316\u4ee3\u7801\u3002 \u8fd0\u884c pylint src tests \u68c0\u67e5 src \u76ee\u5f55\u548c tests \u76ee\u5f55\u4e0b\u7684 Python \u4ee3\u7801\u3002\u4f1a\u8f93\u51fa\u4e0d\u7b26\u5408\u89c4\u8303\u7684\u5185\u5bb9\uff0c\u7136\u540e \u6839\u636e\u5efa\u8bae\u4fee\u6539\u5373\u53ef\u3002","title":"\u4ee3\u7801\u98ce\u683c\u68c0\u6d4b"},{"location":"guidelines/tutorial/test/#_5","text":"\u9879\u76ee\u9ed8\u8ba4\u5e26\u6709 tox \u81ea\u52a8\u5316\u914d\u7f6e\u3002\u5f53\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u76f4\u63a5\u8fd0\u884c tox \uff0c\u4f1a\u81ea\u52a8\u5728\u6a21\u62df\u73af\u5883\u4e2d\u6d4b\u8bd5\u4ee3\u7801\u3002\u6d4b\u8bd5\u65f6\uff0c\u4f1a \u521b\u5efa\u72ec\u7acb\u7684\u865a\u62df\u73af\u5883\uff0c\u7136\u540e\u5c06\u9879\u76ee\u6253\u5305\u5b89\u88c5\u5230\u73af\u5883\u4e2d\uff0c\u518d\u8fdb\u884c\u6d4b\u8bd5\u3002 tox \u4f1a\u81ea\u52a8\u6267\u884c pytest \u6d4b\u8bd5\uff0c \u5bfc\u5305\u68c0\u6d4b\uff0c\u4ee3\u7801\u98ce\u683c\u68c0\u6d4b\u3002","title":"\u81ea\u52a8\u5316\u6d4b\u8bd5"},{"location":"guidelines/tutorial/tutorial/","text":"\u521d\u7ea7\u6559\u7a0b \u521d\u7ea7\u6559\u7a0b\u662f\u4e00\u4e2a ETL \u793a\u4f8b\u9879\u76ee\u3002\u5b83\u548c\u4e4b\u524d\u7684\u5feb\u901f\u4e0a\u624b\u4e0d\u540c\u7684\u662f\u5305\u542b\u4e86\u66f4\u591a Python \u5de5\u7a0b\u5316\u7684\u5185\u5bb9\u3002 \u4e3b\u8981\u4e00\u4e0b\u51e0\u4e2a\u70b9\uff1a \u4f7f\u7528\u9879\u76ee\u6a21\u677f\u521d\u59cb\u5316\u9879\u76ee \u4f7f\u7528\u914d\u7f6e\u7cfb\u7edf\u52a0\u8f7d\u9879\u76ee\u914d\u7f6e\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bfb\u53d6\u5916\u90e8\u914d\u7f6e\u6587\u4ef6\uff0c\u4f7f\u7528 YAML \u683c\u5f0f\u6587\u4ef6 \u4f7f\u7528\u63d2\u4ef6\u5316\u673a\u5236\u5f00\u53d1\u81ea\u5b9a\u4e49\u903b\u8f91\uff0c\u5e76\u80fd\u81ea\u52a8\u53d1\u73b0 \u5b8c\u6574\u7684\u6253\u5305\u53d1\u5e03\u6d41\u7a0b\uff0c\u5e76\u5c06\u9879\u76ee\u53d1\u5e03\u5230 pypi ~~\u7f16\u5199\u9879\u76ee\u8bf4\u660e\u6587\u6863\uff0c\u5e76\u81ea\u52a8\u6784\u5efa\u9759\u6001\u7ad9\u70b9~~ \u6784\u5efa Docker \u955c\u50cf\uff0c\u9879\u76ee\u53ef\u4ee5\u5bb9\u5668\u5316\u8fd0\u884c \u5b8c\u6574\u7684\u5355\u5143\u6d4b\u8bd5\uff0c\u8986\u76d6\u7387 100% \u9879\u76ee\u8bbe\u8ba1 ETL \u793a\u4f8b\u9879\u76ee\u7684\u8bbe\u8ba1\u6709\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\u5206\u522b\u4e3a extractor \u3001 loader \u548c transformer \u3002 extractor \u8d1f\u8d23\u4ece\u6e90\u76ee\u6807\u63d0\u53d6 \u6570\u636e\uff0c transform \u8d1f\u8d23\u5904\u7406\u4e2d\u95f4\u7684\u8f6c\u6362\u903b\u8f91\uff0c loader \u8d1f\u8d23\u5c06\u5904\u7406\u540e\u7684\u7ed3\u679c\u52a0\u8f7d\u5230\u76ee\u6807\u4f4d\u7f6e\u3002 \u5728\u4e09\u4e2a\u6a21\u5757\u4e2d\uff0c\u90fd\u6709\u5bf9\u5e94\u7684\u62bd\u8c61\u57fa\u7c7b\u3002\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\uff0c\u53ea\u9700\u5b9e\u73b0\u5bf9\u5e94\u7684\u903b\u8f91\uff0c\u5e76\u5c06\u5b9e\u73b0\u7684\u7c7b\u6ce8\u518c\u5230\u547d\u540d\u7a7a\u95f4\uff0c\u7136\u540e\u901a\u8fc7\u914d\u7f6e \u6587\u4ef6\u52a0\u8f7d\u5b9e\u73b0\u7684\u540d\u79f0\uff0c\u5373\u53ef\u6b63\u5e38\u4f7f\u7528\u3002 \u4f7f\u7528\u8bf4\u660e \u56e0\u4e3a\u8be5\u9879\u76ee\u5df2\u7ecf\u53d1\u5e03\u5230 Pypi \u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 pip \u547d\u4ee4\u5b89\u88c5\u4f7f\u7528\u3002 \u5efa\u8bae\u5728\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5\uff01 pip install example-etl \u7136\u540e\u4f7f\u7528 example_etl \u547d\u4ee4 example_etl --help \u9ed8\u8ba4\u53ea\u5b9e\u73b0\u4ece\u6587\u672c\u6309\u884c\u63d0\u53d6\uff0c\u7136\u540e\u5220\u9664\u6587\u672c\u524d\u540e\u7a7a\u683c\uff0c\u518d\u5c06\u6587\u672c\u5199\u5165\u76ee\u6807\u6587\u4ef6\u7684\u4e09\u4e2a\u5b9e\u73b0\u3002","title":"\u9879\u76ee\u8bf4\u660e"},{"location":"guidelines/tutorial/tutorial/#_1","text":"\u521d\u7ea7\u6559\u7a0b\u662f\u4e00\u4e2a ETL \u793a\u4f8b\u9879\u76ee\u3002\u5b83\u548c\u4e4b\u524d\u7684\u5feb\u901f\u4e0a\u624b\u4e0d\u540c\u7684\u662f\u5305\u542b\u4e86\u66f4\u591a Python \u5de5\u7a0b\u5316\u7684\u5185\u5bb9\u3002 \u4e3b\u8981\u4e00\u4e0b\u51e0\u4e2a\u70b9\uff1a \u4f7f\u7528\u9879\u76ee\u6a21\u677f\u521d\u59cb\u5316\u9879\u76ee \u4f7f\u7528\u914d\u7f6e\u7cfb\u7edf\u52a0\u8f7d\u9879\u76ee\u914d\u7f6e\uff0c\u5e76\u4e14\u53ef\u4ee5\u8bfb\u53d6\u5916\u90e8\u914d\u7f6e\u6587\u4ef6\uff0c\u4f7f\u7528 YAML \u683c\u5f0f\u6587\u4ef6 \u4f7f\u7528\u63d2\u4ef6\u5316\u673a\u5236\u5f00\u53d1\u81ea\u5b9a\u4e49\u903b\u8f91\uff0c\u5e76\u80fd\u81ea\u52a8\u53d1\u73b0 \u5b8c\u6574\u7684\u6253\u5305\u53d1\u5e03\u6d41\u7a0b\uff0c\u5e76\u5c06\u9879\u76ee\u53d1\u5e03\u5230 pypi ~~\u7f16\u5199\u9879\u76ee\u8bf4\u660e\u6587\u6863\uff0c\u5e76\u81ea\u52a8\u6784\u5efa\u9759\u6001\u7ad9\u70b9~~ \u6784\u5efa Docker \u955c\u50cf\uff0c\u9879\u76ee\u53ef\u4ee5\u5bb9\u5668\u5316\u8fd0\u884c \u5b8c\u6574\u7684\u5355\u5143\u6d4b\u8bd5\uff0c\u8986\u76d6\u7387 100%","title":"\u521d\u7ea7\u6559\u7a0b"},{"location":"guidelines/tutorial/tutorial/#_2","text":"ETL \u793a\u4f8b\u9879\u76ee\u7684\u8bbe\u8ba1\u6709\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\u5206\u522b\u4e3a extractor \u3001 loader \u548c transformer \u3002 extractor \u8d1f\u8d23\u4ece\u6e90\u76ee\u6807\u63d0\u53d6 \u6570\u636e\uff0c transform \u8d1f\u8d23\u5904\u7406\u4e2d\u95f4\u7684\u8f6c\u6362\u903b\u8f91\uff0c loader \u8d1f\u8d23\u5c06\u5904\u7406\u540e\u7684\u7ed3\u679c\u52a0\u8f7d\u5230\u76ee\u6807\u4f4d\u7f6e\u3002 \u5728\u4e09\u4e2a\u6a21\u5757\u4e2d\uff0c\u90fd\u6709\u5bf9\u5e94\u7684\u62bd\u8c61\u57fa\u7c7b\u3002\u5982\u679c\u9700\u8981\u81ea\u5b9a\u4e49\uff0c\u53ea\u9700\u5b9e\u73b0\u5bf9\u5e94\u7684\u903b\u8f91\uff0c\u5e76\u5c06\u5b9e\u73b0\u7684\u7c7b\u6ce8\u518c\u5230\u547d\u540d\u7a7a\u95f4\uff0c\u7136\u540e\u901a\u8fc7\u914d\u7f6e \u6587\u4ef6\u52a0\u8f7d\u5b9e\u73b0\u7684\u540d\u79f0\uff0c\u5373\u53ef\u6b63\u5e38\u4f7f\u7528\u3002","title":"\u9879\u76ee\u8bbe\u8ba1"},{"location":"guidelines/tutorial/tutorial/#_3","text":"\u56e0\u4e3a\u8be5\u9879\u76ee\u5df2\u7ecf\u53d1\u5e03\u5230 Pypi \u4e2d\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7 pip \u547d\u4ee4\u5b89\u88c5\u4f7f\u7528\u3002 \u5efa\u8bae\u5728\u865a\u62df\u73af\u5883\u4e2d\u5b89\u88c5\uff01 pip install example-etl \u7136\u540e\u4f7f\u7528 example_etl \u547d\u4ee4 example_etl --help \u9ed8\u8ba4\u53ea\u5b9e\u73b0\u4ece\u6587\u672c\u6309\u884c\u63d0\u53d6\uff0c\u7136\u540e\u5220\u9664\u6587\u672c\u524d\u540e\u7a7a\u683c\uff0c\u518d\u5c06\u6587\u672c\u5199\u5165\u76ee\u6807\u6587\u4ef6\u7684\u4e09\u4e2a\u5b9e\u73b0\u3002","title":"\u4f7f\u7528\u8bf4\u660e"},{"location":"introduction/ides/","text":"Python \u5f00\u53d1\u5de5\u5177 \u80fd\u591f\u505a Python \u5f00\u53d1\u7684\u5de5\u5177\u6709\u5f88\u591a\uff0c\u751a\u81f3\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u4e60\u60ef\u6bd4\u8f83\u597d\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 VIM \u6216\u8005 Windows \u4e0b\u7684\u8bb0\u4e8b\u672c \u6765\u7f16\u5199 Python \u4ee3\u7801\u3002\u4f46\u662f\u4e3a\u4e86\u9762\u5411\u4f01\u4e1a\u548c\u5de5\u7a0b\u5316\u5f00\u53d1\uff0c\u63a8\u8350\u4f7f\u7528\u96c6\u6210\u4e86\u8bf8\u591a\u7279\u6027\u7684\u5f00\u53d1\u5de5\u5177\uff0c\u6765\u6539\u5584\u5f00\u53d1\u4f53\u9a8c\u3002 \u5f53\u524d\u4e3b\u6d41\u7684\u5f00\u53d1\u5de5\u5177\u6709\uff1a Visual Studio Code Pycharm Eclipse \u4e0a\u8ff0\u8f6f\u4ef6\u9664\u4e86 [Pycharm](https://www.jetbrains.com/pycharm/) \u4e13\u4e1a\u7248\u662f\u6536\u8d39\u7684\uff0c\u5176\u4f59\u90fd\u662f\u514d\u8d39\u3002\u5982\u679c\u9700\u8981\u4f7f\u7528 Pycharm \uff0c \u5efa\u8bae\u4f7f\u7528\u793e\u533a\u7248\uff0c\u6216\u8005\u8d2d\u4e70\u6b63\u7248\u3002 Visual Studio Code VScode \u662f\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u6b3e\u6587\u672c\u7f16\u8f91\u5668\uff0c\u901a\u8fc7\u81ea\u5e26\u7684\u63d2\u4ef6\u7cfb\u7edf\uff0c\u53ef\u4ee5\u5c06\u6587\u672c\u7f16\u8f91\u5668\u6253\u9020\u6210\u4e00\u4e2a\u96c6\u6210\u5f00\u53d1\u5de5\u5177\u3002 \u4ece\u5b98\u7f51\u4e0b\u8f7d\u5e76\u5b89\u88c5\u3002 \u914d\u7f6e \u4ece\u63d2\u4ef6\u4e2d\u5fc3\u5b89\u88c5\u4e2d\u6587\u63d2\u4ef6\uff1a \u4ece\u63d2\u4ef6\u4e2d\u5fc3\u5b89\u88c5 Python Extension Pack \u63d2\u4ef6\uff1a \u4f7f\u7528 \u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u76ee\u5f55\uff0c\u7136\u540e\u9009\u62e9\u4f7f\u7528 vscode \u6253\u5f00\u3002Windows \u53ef\u4ee5\u901a\u8fc7\u53f3\u51fb\uff0c\u9009\u62e9 \u901a\u8fc7 Code \u6253\u5f00 \uff0c Linux \u53ef\u4ee5\u5728\u7ec8\u7aef\u4f7f\u7528 code demo \u547d\u4ee4\u6253\u5f00\u3002 \u7136\u540e\u4f7f\u7528\u5feb\u6377\u952e Ctrl + ` \u7ec4\u5408\u952e\u6253\u5f00\u7ec8\u7aef\uff0c\u6267\u884c pipenv lock \u751f\u6210\u865a\u62df\u73af\u5883\u548c Pipenv \u7684\u914d\u7f6e\u6587\u4ef6\uff1a \u7136\u540e\u4f7f\u7528 Ctrl + Shift + p \u6253\u5f00 vscode \u7684\u6307\u4ee4\u7a97\u53e3\uff0c\u5728\u7a97\u53e3\u4e2d\u8f93\u5165 >python: select Interpreter \u6765\u9009\u62e9\u9879\u76ee\u9700\u8981\u4f7f\u7528\u7684 Python \u89e3\u91ca\u5668\uff0c \u7136\u540e\u9009\u62e9\u4e0a\u9762\u4e00\u6b65\u521b\u5efa\u7684 Python \u89e3\u91ca\u5668\uff1a \u7136\u540e\u53ef\u4ee5\u770b\u5230\u7a97\u53e3\u7684\u5de6\u4e0b\u89d2\u5df2\u7ecf\u51fa\u73b0\u4e86\u4e0a\u4e00\u6b65\u9009\u62e9 Python \u89e3\u91ca\u5668\u3002 \u521b\u5efa\u65b0\u6587\u4ef6\uff0c\u5e76\u8f93\u5165\u5982\u4e0b\u4ee3\u7801\uff1a import sys print ( sys . version ) \u7136\u540e\u53f3\u51fb\u8be5\u6587\u4ef6\uff0c\u9009\u62e9 \u5728\u7ec8\u7aef\u4e2d\u8fd0\u884c Python \u6587\u4ef6 \uff1a [ ] \u53ef\u4ee5\u770b\u5230\u8f93\u5165\uff1a \u66f4\u591a\u5173\u4e8e\u5728 vscode \u4e2d\u4f7f\u7528 Python \u7684\u5185\u5bb9\uff0c\u8bf7\u53c2\u8003 Getting Started with Python in VS Code \u3002 \u95ee\u9898\u6392\u67e5 \u56e0\u4e3a\u5728\u6b64\u7cfb\u7edf\u4e0a\u7981\u6b62\u8fd0\u884c\u811a\u672c \u95ee\u9898\u539f\u56e0 \u7531\u4e8e Pipenv \u4e3a\u7ec8\u7aef(\u9ed8\u8ba4\u662f Powershell) \u542f\u52a8\u865a\u62df\u73af\u5883\u65f6\uff0c\u4f7f\u7528\u7684 ps1 \u811a\u672c\u6587\u4ef6\uff0c\u800c Powershell \u9ed8\u8ba4\u7684\u6267\u884c\u7b56\u7565 \u662f\u7981\u7528\u811a\u672c\u6587\u4ef6\u6267\u884c\u7684\u3002\u6240\u4ee5\u5f53 vscode \u914d\u7f6e\u4e86\u865a\u62df\u73af\u5883\u540e\uff0c\u542f\u52a8\u7ec8\u7aef\uff0c\u4f1a\u65e0\u6cd5\u6267\u884c\u811a\u672c\u6587\u4ef6\u3002 \u89e3\u51b3\u65b9\u6cd5 \u53c2\u8003 [https:/go.microsoft.com/fwlink/?LinkID=135170] \u7684\u8bf4\u660e\uff0c\u5e76\u66f4\u6539\u5f53\u524d\u7528\u6237\u7684 Powershell \u6267\u884c\u7b56\u7565\uff1a Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser","title":"IDE \u9009\u62e9"},{"location":"introduction/ides/#python","text":"\u80fd\u591f\u505a Python \u5f00\u53d1\u7684\u5de5\u5177\u6709\u5f88\u591a\uff0c\u751a\u81f3\u6765\u8bf4\uff0c\u5982\u679c\u4f60\u4e60\u60ef\u6bd4\u8f83\u597d\uff0c\u90fd\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 VIM \u6216\u8005 Windows \u4e0b\u7684\u8bb0\u4e8b\u672c \u6765\u7f16\u5199 Python \u4ee3\u7801\u3002\u4f46\u662f\u4e3a\u4e86\u9762\u5411\u4f01\u4e1a\u548c\u5de5\u7a0b\u5316\u5f00\u53d1\uff0c\u63a8\u8350\u4f7f\u7528\u96c6\u6210\u4e86\u8bf8\u591a\u7279\u6027\u7684\u5f00\u53d1\u5de5\u5177\uff0c\u6765\u6539\u5584\u5f00\u53d1\u4f53\u9a8c\u3002 \u5f53\u524d\u4e3b\u6d41\u7684\u5f00\u53d1\u5de5\u5177\u6709\uff1a Visual Studio Code Pycharm Eclipse \u4e0a\u8ff0\u8f6f\u4ef6\u9664\u4e86 [Pycharm](https://www.jetbrains.com/pycharm/) \u4e13\u4e1a\u7248\u662f\u6536\u8d39\u7684\uff0c\u5176\u4f59\u90fd\u662f\u514d\u8d39\u3002\u5982\u679c\u9700\u8981\u4f7f\u7528 Pycharm \uff0c \u5efa\u8bae\u4f7f\u7528\u793e\u533a\u7248\uff0c\u6216\u8005\u8d2d\u4e70\u6b63\u7248\u3002","title":"Python \u5f00\u53d1\u5de5\u5177"},{"location":"introduction/ides/#visual-studio-code","text":"VScode \u662f\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u6b3e\u6587\u672c\u7f16\u8f91\u5668\uff0c\u901a\u8fc7\u81ea\u5e26\u7684\u63d2\u4ef6\u7cfb\u7edf\uff0c\u53ef\u4ee5\u5c06\u6587\u672c\u7f16\u8f91\u5668\u6253\u9020\u6210\u4e00\u4e2a\u96c6\u6210\u5f00\u53d1\u5de5\u5177\u3002 \u4ece\u5b98\u7f51\u4e0b\u8f7d\u5e76\u5b89\u88c5\u3002","title":"Visual Studio Code"},{"location":"introduction/ides/#_1","text":"\u4ece\u63d2\u4ef6\u4e2d\u5fc3\u5b89\u88c5\u4e2d\u6587\u63d2\u4ef6\uff1a \u4ece\u63d2\u4ef6\u4e2d\u5fc3\u5b89\u88c5 Python Extension Pack \u63d2\u4ef6\uff1a","title":"\u914d\u7f6e"},{"location":"introduction/ides/#_2","text":"\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u76ee\u5f55\uff0c\u7136\u540e\u9009\u62e9\u4f7f\u7528 vscode \u6253\u5f00\u3002Windows \u53ef\u4ee5\u901a\u8fc7\u53f3\u51fb\uff0c\u9009\u62e9 \u901a\u8fc7 Code \u6253\u5f00 \uff0c Linux \u53ef\u4ee5\u5728\u7ec8\u7aef\u4f7f\u7528 code demo \u547d\u4ee4\u6253\u5f00\u3002 \u7136\u540e\u4f7f\u7528\u5feb\u6377\u952e Ctrl + ` \u7ec4\u5408\u952e\u6253\u5f00\u7ec8\u7aef\uff0c\u6267\u884c pipenv lock \u751f\u6210\u865a\u62df\u73af\u5883\u548c Pipenv \u7684\u914d\u7f6e\u6587\u4ef6\uff1a \u7136\u540e\u4f7f\u7528 Ctrl + Shift + p \u6253\u5f00 vscode \u7684\u6307\u4ee4\u7a97\u53e3\uff0c\u5728\u7a97\u53e3\u4e2d\u8f93\u5165 >python: select Interpreter \u6765\u9009\u62e9\u9879\u76ee\u9700\u8981\u4f7f\u7528\u7684 Python \u89e3\u91ca\u5668\uff0c \u7136\u540e\u9009\u62e9\u4e0a\u9762\u4e00\u6b65\u521b\u5efa\u7684 Python \u89e3\u91ca\u5668\uff1a \u7136\u540e\u53ef\u4ee5\u770b\u5230\u7a97\u53e3\u7684\u5de6\u4e0b\u89d2\u5df2\u7ecf\u51fa\u73b0\u4e86\u4e0a\u4e00\u6b65\u9009\u62e9 Python \u89e3\u91ca\u5668\u3002 \u521b\u5efa\u65b0\u6587\u4ef6\uff0c\u5e76\u8f93\u5165\u5982\u4e0b\u4ee3\u7801\uff1a import sys print ( sys . version ) \u7136\u540e\u53f3\u51fb\u8be5\u6587\u4ef6\uff0c\u9009\u62e9 \u5728\u7ec8\u7aef\u4e2d\u8fd0\u884c Python \u6587\u4ef6 \uff1a [ ] \u53ef\u4ee5\u770b\u5230\u8f93\u5165\uff1a \u66f4\u591a\u5173\u4e8e\u5728 vscode \u4e2d\u4f7f\u7528 Python \u7684\u5185\u5bb9\uff0c\u8bf7\u53c2\u8003 Getting Started with Python in VS Code \u3002","title":"\u4f7f\u7528"},{"location":"introduction/ides/#_3","text":"","title":"\u95ee\u9898\u6392\u67e5"},{"location":"introduction/ides/#_4","text":"","title":"\u56e0\u4e3a\u5728\u6b64\u7cfb\u7edf\u4e0a\u7981\u6b62\u8fd0\u884c\u811a\u672c"},{"location":"introduction/ides/#_5","text":"\u7531\u4e8e Pipenv \u4e3a\u7ec8\u7aef(\u9ed8\u8ba4\u662f Powershell) \u542f\u52a8\u865a\u62df\u73af\u5883\u65f6\uff0c\u4f7f\u7528\u7684 ps1 \u811a\u672c\u6587\u4ef6\uff0c\u800c Powershell \u9ed8\u8ba4\u7684\u6267\u884c\u7b56\u7565 \u662f\u7981\u7528\u811a\u672c\u6587\u4ef6\u6267\u884c\u7684\u3002\u6240\u4ee5\u5f53 vscode \u914d\u7f6e\u4e86\u865a\u62df\u73af\u5883\u540e\uff0c\u542f\u52a8\u7ec8\u7aef\uff0c\u4f1a\u65e0\u6cd5\u6267\u884c\u811a\u672c\u6587\u4ef6\u3002","title":"\u95ee\u9898\u539f\u56e0"},{"location":"introduction/ides/#_6","text":"\u53c2\u8003 [https:/go.microsoft.com/fwlink/?LinkID=135170] \u7684\u8bf4\u660e\uff0c\u5e76\u66f4\u6539\u5f53\u524d\u7528\u6237\u7684 Powershell \u6267\u884c\u7b56\u7565\uff1a Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser","title":"\u89e3\u51b3\u65b9\u6cd5"},{"location":"introduction/install/","text":"Python \u73af\u5883\u5b89\u88c5 \u672c\u6587\u4ee5\u622a\u56fe\u8bb0\u5f55\u7684\u5f62\u5f0f\u5c55\u793a\u5982\u4f55\u5728\u4e3b\u6d41\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u5b89\u88c5 Python \u73af\u5883\u3002 \u5728 Python \u73af\u5883\u9009\u62e9\u4e0a\uff0c\u63a8\u8350\u4f7f\u7528\u8f83\u65b0\u7684 Python \u7248\u672c\u3002\u6839\u636e \u5b98\u65b9\u53d1\u5e03\u6d88\u606f \uff0c \u81ea 2020\u5e74 1 \u6708 1 \u65e5\u8d77\uff0c Python 2 \u5c06\u505c\u6b62\u7ef4\u62a4\uff0c\u5305\u62ec\u4efb\u4f55\u65b0\u7684\u9519\u8bef\u62a5\u544a\u3001\u4fee\u590d\u548c\u66f4\u6539\u3002 \u6240\u4ee5\u5f3a\u70c8\u5efa\u8bae\u4f60\u5728\u7248\u672c\u9009\u62e9\u4e0a\u4f7f\u7528 Python 3.7 \u4e4b\u540e\u7684\u7248\u672c\u3002\u8003\u8651\u5230 Python 3 \u5404\u4e2a\u7248\u672c\u7684\u65b0\u7279\u6027\u548c\u517c\u5bb9\u6027\uff0c \u5efa\u8bae\u9009\u62e9 Python 3.9 \u6216 Python 3.10 \u3002 \u622a\u6b62\u5230\u5f53\u524d\u65f6\u95f4\uff082021-12-03\uff09\uff0c Python \u5404\u4e2a\u7248\u672c\u7684\u72b6\u6001\u5982\u4e0b\uff1a Branch Schedule Status First release End-of-life main PEP 664 features 2022-10-03 2027-10 3.10 PEP 619 bugfix 2021-10-04 2026-10 3.9 PEP 596 bugfix 2020-10-05 2025-10 3.8 PEP 569 security 2019-10-14 2024-10 3.7 PEP 537 security 2018-06-27 2023-06-27 3.6 PEP 494 security 2016-12-23 2021-12-23 \u672c\u6587\u5b89\u88c5\u7684\u7248\u672c\u4f7f\u7528\u6700\u65b0\u7684\u7a33\u5b9a\u7248 python 3.10 \uff0c\u4f1a\u5728\u5982\u4e0b\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u5b89\u88c5\uff1a Windows 11 \uff1a \u5b89\u88c5\u5305\u5b89\u88c5 Ubuntu Desktop 21 \uff1a \u6e90\u4ee3\u7801\u7f16\u8bd1\u5b89\u88c5 \u4ece Python \u4e0b\u8f7d\u9875\u9762 \u627e\u5230 Python 3.10 \u7684\u4e0b\u8f7d\u9875\u9762 \u7136\u540e\u4e0b\u8f7d\u5bf9\u5e94\u7684\u6587\u4ef6\u5373\u53ef\u3002 1 \u5b89\u88c5 \u5173\u4e8e Python \u7684\u5b89\u88c5\u4f7f\u7528\u7684\u66f4\u591a\u7ec6\u8282\uff0c\u53ef\u4ee5\u53c2\u8003 Python\u5b89\u88c5\u548c\u4f7f\u7528 \u3002 1.1 Windows 11 1.1.1 \u5b89\u88c5 Python \u73af\u5883 \u4e0b\u8f7d Windows installer(64-bit) \u5230\u672c\u5730\uff0c\u7136\u540e\u53cc\u51fb\u8fd0\u884c\u5b89\u88c5\u6587\u4ef6\u3002 \u6ce8\u610f\uff1a\u5b89\u88c5\u65f6\uff0c\u9700\u8981\u8d26\u6237\u63a7\u5236\u6743\u9650\u3002 \u5982\u679c\u60f3\u8981\u5c06 Python \u5b89\u88c5\u5230\u9ed8\u8ba4\u76ee\u5f55\uff0c\u76f4\u63a5\u70b9\u51fb Install Now \u5373\u53ef\u3002 \u70b9\u51fb Customize Installation : \u6b64\u65f6\u53ef\u4ee5\u9009\u62e9\u53ef\u9009\u7684\u7279\u6027\uff0c\u4e0d\u8fc7\u8fd8\u4e0d\u662f\u4f60\u4e0d\u77e5\u9053\u5b83\u4eec\u662f\u505a\u4ec0\u4e48\u7684\uff0c\u6216\u8005\u4e0d\u6e05\u695a\u4f60\u662f\u5426\u9700\u8981\u5b83\u4eec\uff0c\u90a3\u4e48\u4fdd\u6301\u9ed8\u8ba4\u5373\u53ef\u3002 \u7136\u540e\u70b9\u51fb Next \uff1a \u7136\u540e\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a \u52fe\u9009 Install for all users \u5c06 Python \u5b89\u88c5\u4e3a\u6240\u6709\u7528\u6237\u53ef\u7528 \u52fe\u9009 Add Python to environment variables \u5c06\u4f1a\u81ea\u52a8\u521b\u5efa Python \u7684\u73af\u5883\u53d8\u91cf\u3002\u6b64\u9009\u9879\u4f1a\u5728 Windows \u73af\u5883 PATH \u4e2d\u65b0\u589e\u4e24\u4e2a\u53d8\u91cf C:\\devtools\\Python310\\Scripts\\ \u548c C:\\devtools\\Python310\\ \u3002\u76ee\u5f55\u4e3a Python \u7684\u5b89\u88c5\u76ee\u5f55\u3002 \u5982\u679c\u6709\u9700\u8981\uff0c\u4fee\u6539 Customize install location \u4e0b\u7684\u5b89\u88c5\u8def\u5f84\u3002 \u7136\u540e\u70b9\u51fb Install \uff0c\u5c06 Python \u5b89\u88c5\u5230\u6307\u5b9a\u7684\u76ee\u5f55\u3002\u6b64\u8fc7\u7a0b\u9700\u8981\u8d26\u6237\u6388\u6743\u3002 \u7b49\u5f85\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u70b9\u51fb Close \u3002\u5f53\u7136\u5efa\u8bae\u70b9\u51fb Disable path length limit \uff0c\u6765\u7981\u7528 Windows \u4e0b\u7684 260 \u5b57\u8282\u6587\u4ef6 \u8def\u5f84\u7684\u9650\u5236\u3002 \u81f3\u6b64\u5b89\u88c5\u5b8c\u6210\u3002 \u66f4\u591a\u5173\u4e8e Windows \u7cfb\u7edf\u7684\u5176\u4ed6\u7ec6\u8282\uff0c\u8bf7\u53c2\u8003 \u5728Windows\u4e0a\u4f7f\u7528 Python \u3002 1.1.2 \u6d4b\u8bd5 Python \u73af\u5883 \u6253\u5f00 Windows \u7684 CMD \uff0c\u7136\u540e\u8f93\u5165 python --version \u5373\u53ef\u83b7\u5f97 Python \u7248\u672c\uff1a 1.2 Ubuntu Desktop 21 \u5bf9\u4e8e\u7f16\u8bd1\u5b89\u88c5\uff0c\u9002\u7528\u4e8e\u5927\u90e8\u5206 Linux \u7cfb\u7edf\uff0c\u9664\u4e86 Python \u5b89\u88c5\u8fc7\u7a0b\u4e2d\u7684\u4f9d\u8d56\u5305\u5728\u7279\u5b9a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6709\u533a\u522b\u5916\uff0c\u5176\u4ed6\u64cd\u4f5c\u90fd\u662f\u4e00\u81f4\u7684\u3002 1.2.1 \u5b89\u88c5\u4f9d\u8d56 sudo apt-get install build-essential gdb lcov pkg-config \\ libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \\ libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \\ lzma lzma-dev tk-dev uuid-dev zlib1g-dev 1.2.2 \u5b89\u88c5 Python \u73af\u5883 \u4e0b\u8f7d XZ compressed source tarball \u6e90\u7801\u5305\uff0c\u7136\u540e\u89e3\u538b\u5230 /tmp \uff0c \u7136\u540e\u89e3\u538b\uff1a cd /tmp/ wget https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tar.xz tar -Jxf Python-3.10.0.tar.xz cd Python-3.10.0/ \u4f7f\u7528 ./configure \u8fdb\u884c\u9884\u7f16\u8bd1\u3002\u5728\u9884\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u6307\u5b9a\u8981\u7f16\u8bd1\u5230\u6e90\u4ee3\u7801\u4e2d\u7684\u5185\u5bb9\u3002\u4f7f\u7528 ./configure --help \u53ef\u4ee5\u67e5\u770b\u652f\u6301\u54ea\u4e9b\u9009\u9879\u3002 \u4e00\u822c\u4f1a\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a ./configure --enable-optimizations \u5982\u679c\u9700\u8981\u5b89\u88c5\u5230\u5176\u4ed6\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 --prefix=/usr/bin \u6307\u5b9a\u3002\u9ed8\u8ba4\u662f\u5b89\u88c5\u5230 /usr/local/bin \u3002 \u5f53\u51fa\u73b0\u5982\u4e0b\u8f93\u51fa\uff0c\u8bf4\u660e\u9884\u7f16\u8bd1\u5b8c\u6210\uff1a creating Modules/Setup.local creating Makefile \u7f16\u8bd1 \u4f7f\u7528 make \u547d\u4ee4\u7f16\u8bd1\u6784\u5efa make -s -j2 -j \u53ef\u4ee5\u6307\u5b9a\u5e76\u53d1\u6784\u5efa\u4efb\u52a1\u6570\u3002\u5982\u679c\u591a\u6838 CPU \u53ef\u4ee5\u6307\u5b9a\u6838\u5fc3\u6570\u3002 \u5b89\u88c5 sudo make altinstall \u4f7f\u7528 altinstall \u53ef\u4ee5\u907f\u514d\u8986\u76d6\u7cfb\u7edf\u73b0\u6709\u9ed8\u8ba4\u547d\u4ee4\u3002\u5373\u4e0d\u4f1a\u8986\u76d6 python \u547d\u4ee4\u3002 1.2.3 \u6d4b\u8bd5 Python \u73af\u5883 \u6253\u5f00\u7ec8\u7aef\uff0c\u8fd0\u884c python3.10 --version \u4f1a\u8f93\u51fa Python \u7684\u7248\u672c\u3002 \u81f3\u6b64 Python \u73af\u5883\u5b89\u88c5\u5b8c\u6210\u3002 \u66f4\u591a\u5173\u4e8e Unix \u7cfb\u7edf\u7684\u5176\u4ed6\u7ec6\u8282\uff0c\u8bf7\u53c2\u8003 \u5728\u7c7bUnix\u73af\u5883\u4e0b\u4f7f\u7528Python \u3002 2 \u4ed3\u5e93\u52a0\u901f \u9274\u4e8e\u56fd\u5185\u7f51\u7edc\u7684\u95ee\u9898\uff0c\u4e3a\u4e86\u5feb\u901f\u5b89\u88c5 Python \u4f9d\u8d56\u5305\uff0c\u6700\u597d\u4f7f\u7528\u56fd\u5185\u955c\u50cf\u4ed3\u5e93\u52a0\u901f Pypi \u7684\u5305\u3002 Pypi \u56fd\u5185\u955c\u50cf\u6709\u5f88\u591a\uff0c\u73b0\u5728\u63a8\u8350\u5982\u4e0b\u51e0\u4e2a\uff1a \u6e05\u534e mirror \u963f\u91cc\u4e91 mirror 163 mirror \u4e0b\u9762\u4f7f\u7528\u963f\u91cc\u4e91\u955c\u50cf\u914d\u7f6e\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u955c\u50cf\u4ed3\u5e93\uff0c\u6539\u52a8 index-url \u540e\u9762\u7684\u5730\u5740\u5373\u53ef\uff1a pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/ 3 \u591a\u73af\u5883\u5171\u5b58 \u591a\u73af\u5883\u5171\u5b58\u662f\u4e3a\u4e86\u5728\u540c\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u540c\u65f6\u4f7f\u7528\u4e0d\u540c\u7248\u672c\u7684 Python \u73af\u5883\uff0c\u6216\u8005\u7f16\u5199\u7684\u7a0b\u5e8f\u9700\u8981\u5728 \u4e0d\u540c\u7248\u672c\u4e0b\u8fd0\u884c\u6d4b\u8bd5\u3002 ~~3.1 Windows~~ \u7ecf\u6d4b\u8bd5\uff0c\u7531\u4e8e DLL \u7684\u95ee\u9898\uff0c\u65e0\u6cd5\u901a\u8fc7 Windows \u7684 mklink \u547d\u4ee4\u8f6f\u8fde\u63a5\u4e00\u4e2a\u65b0\u7684 python.exe \u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u522b\u540d\u3002 3.2 Linux Linux \u672c\u8eab\u7684\u4f18\u52bf\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f6f\u8fde\u63a5\u751f\u6210\u4e0d\u540c\u7684\u53ef\u6267\u884c\u6587\u4ef6\u540d\u3002\u5728\u5b89\u88c5\u597d Python 3.10 \u7248\u672c\u540e\uff0c\u9ed8\u8ba4\u4f1a\u5728\u751f\u6210 /usr/local/bin/python3.10 \u53ef\u6267\u884c\u6587\u4ef6\u3002\u5982\u679c\u9700\u8981\u5c06\u9ed8\u8ba4\u7684 Python \u547d\u4ee4\u66ff\u6362\u4e3a python3.10 \u5219\u53ef\u4ee5\u5220\u9664\u539f\u6709\u7684 python \u547d\u4ee4\uff0c\u7136\u540e\u91cd\u65b0\u8f6f\u8fde\u63a5\u3002 # \u5907\u4efd\u5f53\u524d\u9ed8\u8ba4\u7684 python3 \u547d\u4ee4\u5230 /tmp mv /usr/bin/python3 /tmp # \u91cd\u65b0\u8fde\u63a5 python3 \u547d\u4ee4 ln -s /usr/local/bin/python3.10 /usr/bin/python3 # \u5907\u4efd\u5f53\u524d\u9ed8\u8ba4 pip3 \u547d\u4ee4 mv /usr/bin/pip3 /tmp # \u91cd\u65b0\u8fde\u63a5 pip3 \u547d\u4ee4 ln -s /usr/local/bin/pip3.10 /usr/bin/pip3 4 \u95ee\u9898\u6392\u67e5 4.1 Linux \u5b89\u88c5\u51fa\u73b0\u95ee\u9898 \u5982\u679c\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u95ee\u9898\uff0c\u8bf7\u68c0\u67e5\u4f9d\u8d56\u662f\u5426\u5b89\u88c5\u5b8c\u6210\u3002 Debian / Ubuntu \u7cfb\u5217\u64cd\u4f5c\u7cfb\u7edf\u4f9d\u8d56\u5982\u4e0b\uff1a sudo apt-get install build-essential gdb lcov pkg-config \\ libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \\ libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \\ lzma lzma-dev tk-dev uuid-dev zlib1g-dev \u5bf9\u4e8e RHEL \u7cfb\u5217\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4f9d\u8d56\u5b89\u88c5\u5982\u4e0b\uff1a sudo dnf install dnf-plugins-core # install this to use 'dnf builddep' sudo dnf builddep python3 4.2 \u5378\u8f7d Python \u6ce8\u610f\uff1a\u5982\u679c\u662f Linux \u64cd\u4f5c\u7cfb\u7edf\uff0c\u4f60\u5e94\u8be5\u81f3\u5c11\u4fdd\u7559\u7cfb\u7edf\u7684\u9ed8\u8ba4 Python \u73af\u5883\uff0c\u6216\u8005\u4e00\u4e2a\u5176\u4ed6\u7248\u672c\u7684 PYthon \u73af\u5883\uff0c\u5426\u5219 \u64cd\u4f5c\u7cfb\u7edf\u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\u3002 \u8981\u5378\u8f7d\u5bf9\u5e94\u7248\u672c\u7684 Python \u73af\u5883\uff0c\u53ea\u9700\u8981\u5c06\u7cfb\u7edf\u6839\u76ee\u5f55\u76f8\u5173\u76ee\u5f55\u67e5\u627e\u5230\uff0c\u7136\u540e\u5220\u9664\u5373\u53ef\u3002 \u5bf9\u4e8e\u7f16\u8bd1\u5b89\u88c5\u7684 Python \u73af\u5883\uff0c\u4f1a\u5c06 Python \u5b89\u88c5\u5230\u5982\u4e0b\u51e0\u4e2a\u76ee\u5f55\uff1a /usr/lib/python3.10 /usr/local/lib/libpython3.10.a /usr/local/lib/python3.10 /usr/local/include/python3.10 /usr/local/bin/python3.10-config /usr/local/bin/python3.10 /usr/local/share/man/man1/python3.10.1 \u8fd0\u884c\u547d\u4ee4\u5220\u9664\uff1a # \u521b\u5efa\u5907\u4efd\u76ee\u5f55\uff0c\u4ee5\u4fbf\u51fa\u73b0\u95ee\u9898\uff0c\u53ef\u4ee5\u6267\u884c\u6062\u590d # \u6ce8\u610f\u4e0d\u8981\u5728 /tmp \u4e0b\u521b\u5efa\uff0c\u5982\u679c\u91cd\u542f\u7cfb\u7edf /tmp \u4e0b\u7684\u6587\u4ef6\u4f1a\u5220\u9664\u3002 # \u653e\u5728\u5bb6\u76ee\u5f55\uff0c\u53ef\u4ee5\u901a\u8fc7\u5e94\u6025\u6a21\u5f0f\u627e\u5230\u76f8\u5e94\u6587\u4ef6\u3002 # \u7b49\u786e\u4fdd\u64cd\u4f5c\u7cfb\u7edf\u6ca1\u6709\u4efb\u4f55\u5f02\u5e38\u95ee\u9898\u7684\u65f6\u5019\uff0c\u518d\u5220\u9664 mkdir ~/removed_python310 mv -f \\ /usr/lib/python3.10 \\ /usr/local/lib/libpython3.10.a \\ /usr/local/lib/python3.10 \\ /usr/local/include/python3.10 \\ /usr/local/bin/python3.10-config \\ /usr/local/bin/python3.10 \\ /usr/local/share/man/man1/python3.10.1 \\ ~/removed_python310 \u5982\u679c\u4f60\u66fe\u4f7f\u7528\u8fc7 pip3.10 \u5b89\u88c5\u4f9d\u8d56\uff0c\u8bf7\u68c0\u67e5\u7528\u6237\u76ee\u5f55\u4e0b\u662f\u5426\u5b58\u5728\u76f8\u5173\u4f9d\u8d56\u76ee\u5f55\uff1a /home/god/.local/lib/python3.10","title":"Python \u5b89\u88c5"},{"location":"introduction/install/#python","text":"\u672c\u6587\u4ee5\u622a\u56fe\u8bb0\u5f55\u7684\u5f62\u5f0f\u5c55\u793a\u5982\u4f55\u5728\u4e3b\u6d41\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u5b89\u88c5 Python \u73af\u5883\u3002 \u5728 Python \u73af\u5883\u9009\u62e9\u4e0a\uff0c\u63a8\u8350\u4f7f\u7528\u8f83\u65b0\u7684 Python \u7248\u672c\u3002\u6839\u636e \u5b98\u65b9\u53d1\u5e03\u6d88\u606f \uff0c \u81ea 2020\u5e74 1 \u6708 1 \u65e5\u8d77\uff0c Python 2 \u5c06\u505c\u6b62\u7ef4\u62a4\uff0c\u5305\u62ec\u4efb\u4f55\u65b0\u7684\u9519\u8bef\u62a5\u544a\u3001\u4fee\u590d\u548c\u66f4\u6539\u3002 \u6240\u4ee5\u5f3a\u70c8\u5efa\u8bae\u4f60\u5728\u7248\u672c\u9009\u62e9\u4e0a\u4f7f\u7528 Python 3.7 \u4e4b\u540e\u7684\u7248\u672c\u3002\u8003\u8651\u5230 Python 3 \u5404\u4e2a\u7248\u672c\u7684\u65b0\u7279\u6027\u548c\u517c\u5bb9\u6027\uff0c \u5efa\u8bae\u9009\u62e9 Python 3.9 \u6216 Python 3.10 \u3002 \u622a\u6b62\u5230\u5f53\u524d\u65f6\u95f4\uff082021-12-03\uff09\uff0c Python \u5404\u4e2a\u7248\u672c\u7684\u72b6\u6001\u5982\u4e0b\uff1a Branch Schedule Status First release End-of-life main PEP 664 features 2022-10-03 2027-10 3.10 PEP 619 bugfix 2021-10-04 2026-10 3.9 PEP 596 bugfix 2020-10-05 2025-10 3.8 PEP 569 security 2019-10-14 2024-10 3.7 PEP 537 security 2018-06-27 2023-06-27 3.6 PEP 494 security 2016-12-23 2021-12-23 \u672c\u6587\u5b89\u88c5\u7684\u7248\u672c\u4f7f\u7528\u6700\u65b0\u7684\u7a33\u5b9a\u7248 python 3.10 \uff0c\u4f1a\u5728\u5982\u4e0b\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u5b89\u88c5\uff1a Windows 11 \uff1a \u5b89\u88c5\u5305\u5b89\u88c5 Ubuntu Desktop 21 \uff1a \u6e90\u4ee3\u7801\u7f16\u8bd1\u5b89\u88c5 \u4ece Python \u4e0b\u8f7d\u9875\u9762 \u627e\u5230 Python 3.10 \u7684\u4e0b\u8f7d\u9875\u9762 \u7136\u540e\u4e0b\u8f7d\u5bf9\u5e94\u7684\u6587\u4ef6\u5373\u53ef\u3002","title":"Python \u73af\u5883\u5b89\u88c5"},{"location":"introduction/install/#1","text":"\u5173\u4e8e Python \u7684\u5b89\u88c5\u4f7f\u7528\u7684\u66f4\u591a\u7ec6\u8282\uff0c\u53ef\u4ee5\u53c2\u8003 Python\u5b89\u88c5\u548c\u4f7f\u7528 \u3002","title":"1 \u5b89\u88c5"},{"location":"introduction/install/#11-windows-11","text":"","title":"1.1 Windows 11"},{"location":"introduction/install/#111-python","text":"\u4e0b\u8f7d Windows installer(64-bit) \u5230\u672c\u5730\uff0c\u7136\u540e\u53cc\u51fb\u8fd0\u884c\u5b89\u88c5\u6587\u4ef6\u3002 \u6ce8\u610f\uff1a\u5b89\u88c5\u65f6\uff0c\u9700\u8981\u8d26\u6237\u63a7\u5236\u6743\u9650\u3002 \u5982\u679c\u60f3\u8981\u5c06 Python \u5b89\u88c5\u5230\u9ed8\u8ba4\u76ee\u5f55\uff0c\u76f4\u63a5\u70b9\u51fb Install Now \u5373\u53ef\u3002 \u70b9\u51fb Customize Installation : \u6b64\u65f6\u53ef\u4ee5\u9009\u62e9\u53ef\u9009\u7684\u7279\u6027\uff0c\u4e0d\u8fc7\u8fd8\u4e0d\u662f\u4f60\u4e0d\u77e5\u9053\u5b83\u4eec\u662f\u505a\u4ec0\u4e48\u7684\uff0c\u6216\u8005\u4e0d\u6e05\u695a\u4f60\u662f\u5426\u9700\u8981\u5b83\u4eec\uff0c\u90a3\u4e48\u4fdd\u6301\u9ed8\u8ba4\u5373\u53ef\u3002 \u7136\u540e\u70b9\u51fb Next \uff1a \u7136\u540e\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a \u52fe\u9009 Install for all users \u5c06 Python \u5b89\u88c5\u4e3a\u6240\u6709\u7528\u6237\u53ef\u7528 \u52fe\u9009 Add Python to environment variables \u5c06\u4f1a\u81ea\u52a8\u521b\u5efa Python \u7684\u73af\u5883\u53d8\u91cf\u3002\u6b64\u9009\u9879\u4f1a\u5728 Windows \u73af\u5883 PATH \u4e2d\u65b0\u589e\u4e24\u4e2a\u53d8\u91cf C:\\devtools\\Python310\\Scripts\\ \u548c C:\\devtools\\Python310\\ \u3002\u76ee\u5f55\u4e3a Python \u7684\u5b89\u88c5\u76ee\u5f55\u3002 \u5982\u679c\u6709\u9700\u8981\uff0c\u4fee\u6539 Customize install location \u4e0b\u7684\u5b89\u88c5\u8def\u5f84\u3002 \u7136\u540e\u70b9\u51fb Install \uff0c\u5c06 Python \u5b89\u88c5\u5230\u6307\u5b9a\u7684\u76ee\u5f55\u3002\u6b64\u8fc7\u7a0b\u9700\u8981\u8d26\u6237\u6388\u6743\u3002 \u7b49\u5f85\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u70b9\u51fb Close \u3002\u5f53\u7136\u5efa\u8bae\u70b9\u51fb Disable path length limit \uff0c\u6765\u7981\u7528 Windows \u4e0b\u7684 260 \u5b57\u8282\u6587\u4ef6 \u8def\u5f84\u7684\u9650\u5236\u3002 \u81f3\u6b64\u5b89\u88c5\u5b8c\u6210\u3002 \u66f4\u591a\u5173\u4e8e Windows \u7cfb\u7edf\u7684\u5176\u4ed6\u7ec6\u8282\uff0c\u8bf7\u53c2\u8003 \u5728Windows\u4e0a\u4f7f\u7528 Python \u3002","title":"1.1.1 \u5b89\u88c5 Python \u73af\u5883"},{"location":"introduction/install/#112-python","text":"\u6253\u5f00 Windows \u7684 CMD \uff0c\u7136\u540e\u8f93\u5165 python --version \u5373\u53ef\u83b7\u5f97 Python \u7248\u672c\uff1a","title":"1.1.2 \u6d4b\u8bd5 Python \u73af\u5883"},{"location":"introduction/install/#12-ubuntu-desktop-21","text":"\u5bf9\u4e8e\u7f16\u8bd1\u5b89\u88c5\uff0c\u9002\u7528\u4e8e\u5927\u90e8\u5206 Linux \u7cfb\u7edf\uff0c\u9664\u4e86 Python \u5b89\u88c5\u8fc7\u7a0b\u4e2d\u7684\u4f9d\u8d56\u5305\u5728\u7279\u5b9a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u6709\u533a\u522b\u5916\uff0c\u5176\u4ed6\u64cd\u4f5c\u90fd\u662f\u4e00\u81f4\u7684\u3002","title":"1.2 Ubuntu Desktop 21"},{"location":"introduction/install/#121","text":"sudo apt-get install build-essential gdb lcov pkg-config \\ libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \\ libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \\ lzma lzma-dev tk-dev uuid-dev zlib1g-dev","title":"1.2.1 \u5b89\u88c5\u4f9d\u8d56"},{"location":"introduction/install/#122-python","text":"\u4e0b\u8f7d XZ compressed source tarball \u6e90\u7801\u5305\uff0c\u7136\u540e\u89e3\u538b\u5230 /tmp \uff0c \u7136\u540e\u89e3\u538b\uff1a cd /tmp/ wget https://www.python.org/ftp/python/3.10.0/Python-3.10.0.tar.xz tar -Jxf Python-3.10.0.tar.xz cd Python-3.10.0/ \u4f7f\u7528 ./configure \u8fdb\u884c\u9884\u7f16\u8bd1\u3002\u5728\u9884\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u6307\u5b9a\u8981\u7f16\u8bd1\u5230\u6e90\u4ee3\u7801\u4e2d\u7684\u5185\u5bb9\u3002\u4f7f\u7528 ./configure --help \u53ef\u4ee5\u67e5\u770b\u652f\u6301\u54ea\u4e9b\u9009\u9879\u3002 \u4e00\u822c\u4f1a\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a ./configure --enable-optimizations \u5982\u679c\u9700\u8981\u5b89\u88c5\u5230\u5176\u4ed6\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528 --prefix=/usr/bin \u6307\u5b9a\u3002\u9ed8\u8ba4\u662f\u5b89\u88c5\u5230 /usr/local/bin \u3002 \u5f53\u51fa\u73b0\u5982\u4e0b\u8f93\u51fa\uff0c\u8bf4\u660e\u9884\u7f16\u8bd1\u5b8c\u6210\uff1a creating Modules/Setup.local creating Makefile \u7f16\u8bd1 \u4f7f\u7528 make \u547d\u4ee4\u7f16\u8bd1\u6784\u5efa make -s -j2 -j \u53ef\u4ee5\u6307\u5b9a\u5e76\u53d1\u6784\u5efa\u4efb\u52a1\u6570\u3002\u5982\u679c\u591a\u6838 CPU \u53ef\u4ee5\u6307\u5b9a\u6838\u5fc3\u6570\u3002 \u5b89\u88c5 sudo make altinstall \u4f7f\u7528 altinstall \u53ef\u4ee5\u907f\u514d\u8986\u76d6\u7cfb\u7edf\u73b0\u6709\u9ed8\u8ba4\u547d\u4ee4\u3002\u5373\u4e0d\u4f1a\u8986\u76d6 python \u547d\u4ee4\u3002","title":"1.2.2 \u5b89\u88c5 Python \u73af\u5883"},{"location":"introduction/install/#123-python","text":"\u6253\u5f00\u7ec8\u7aef\uff0c\u8fd0\u884c python3.10 --version \u4f1a\u8f93\u51fa Python \u7684\u7248\u672c\u3002 \u81f3\u6b64 Python \u73af\u5883\u5b89\u88c5\u5b8c\u6210\u3002 \u66f4\u591a\u5173\u4e8e Unix \u7cfb\u7edf\u7684\u5176\u4ed6\u7ec6\u8282\uff0c\u8bf7\u53c2\u8003 \u5728\u7c7bUnix\u73af\u5883\u4e0b\u4f7f\u7528Python \u3002","title":"1.2.3 \u6d4b\u8bd5 Python \u73af\u5883"},{"location":"introduction/install/#2","text":"\u9274\u4e8e\u56fd\u5185\u7f51\u7edc\u7684\u95ee\u9898\uff0c\u4e3a\u4e86\u5feb\u901f\u5b89\u88c5 Python \u4f9d\u8d56\u5305\uff0c\u6700\u597d\u4f7f\u7528\u56fd\u5185\u955c\u50cf\u4ed3\u5e93\u52a0\u901f Pypi \u7684\u5305\u3002 Pypi \u56fd\u5185\u955c\u50cf\u6709\u5f88\u591a\uff0c\u73b0\u5728\u63a8\u8350\u5982\u4e0b\u51e0\u4e2a\uff1a \u6e05\u534e mirror \u963f\u91cc\u4e91 mirror 163 mirror \u4e0b\u9762\u4f7f\u7528\u963f\u91cc\u4e91\u955c\u50cf\u914d\u7f6e\uff0c\u5982\u679c\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u955c\u50cf\u4ed3\u5e93\uff0c\u6539\u52a8 index-url \u540e\u9762\u7684\u5730\u5740\u5373\u53ef\uff1a pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/","title":"2 \u4ed3\u5e93\u52a0\u901f"},{"location":"introduction/install/#3","text":"\u591a\u73af\u5883\u5171\u5b58\u662f\u4e3a\u4e86\u5728\u540c\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u540c\u65f6\u4f7f\u7528\u4e0d\u540c\u7248\u672c\u7684 Python \u73af\u5883\uff0c\u6216\u8005\u7f16\u5199\u7684\u7a0b\u5e8f\u9700\u8981\u5728 \u4e0d\u540c\u7248\u672c\u4e0b\u8fd0\u884c\u6d4b\u8bd5\u3002","title":"3 \u591a\u73af\u5883\u5171\u5b58"},{"location":"introduction/install/#31-windows","text":"\u7ecf\u6d4b\u8bd5\uff0c\u7531\u4e8e DLL \u7684\u95ee\u9898\uff0c\u65e0\u6cd5\u901a\u8fc7 Windows \u7684 mklink \u547d\u4ee4\u8f6f\u8fde\u63a5\u4e00\u4e2a\u65b0\u7684 python.exe \u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u522b\u540d\u3002","title":"~~3.1 Windows~~"},{"location":"introduction/install/#32-linux","text":"Linux \u672c\u8eab\u7684\u4f18\u52bf\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f6f\u8fde\u63a5\u751f\u6210\u4e0d\u540c\u7684\u53ef\u6267\u884c\u6587\u4ef6\u540d\u3002\u5728\u5b89\u88c5\u597d Python 3.10 \u7248\u672c\u540e\uff0c\u9ed8\u8ba4\u4f1a\u5728\u751f\u6210 /usr/local/bin/python3.10 \u53ef\u6267\u884c\u6587\u4ef6\u3002\u5982\u679c\u9700\u8981\u5c06\u9ed8\u8ba4\u7684 Python \u547d\u4ee4\u66ff\u6362\u4e3a python3.10 \u5219\u53ef\u4ee5\u5220\u9664\u539f\u6709\u7684 python \u547d\u4ee4\uff0c\u7136\u540e\u91cd\u65b0\u8f6f\u8fde\u63a5\u3002 # \u5907\u4efd\u5f53\u524d\u9ed8\u8ba4\u7684 python3 \u547d\u4ee4\u5230 /tmp mv /usr/bin/python3 /tmp # \u91cd\u65b0\u8fde\u63a5 python3 \u547d\u4ee4 ln -s /usr/local/bin/python3.10 /usr/bin/python3 # \u5907\u4efd\u5f53\u524d\u9ed8\u8ba4 pip3 \u547d\u4ee4 mv /usr/bin/pip3 /tmp # \u91cd\u65b0\u8fde\u63a5 pip3 \u547d\u4ee4 ln -s /usr/local/bin/pip3.10 /usr/bin/pip3","title":"3.2 Linux"},{"location":"introduction/install/#4","text":"","title":"4 \u95ee\u9898\u6392\u67e5"},{"location":"introduction/install/#41-linux","text":"\u5982\u679c\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u95ee\u9898\uff0c\u8bf7\u68c0\u67e5\u4f9d\u8d56\u662f\u5426\u5b89\u88c5\u5b8c\u6210\u3002 Debian / Ubuntu \u7cfb\u5217\u64cd\u4f5c\u7cfb\u7edf\u4f9d\u8d56\u5982\u4e0b\uff1a sudo apt-get install build-essential gdb lcov pkg-config \\ libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \\ libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \\ lzma lzma-dev tk-dev uuid-dev zlib1g-dev \u5bf9\u4e8e RHEL \u7cfb\u5217\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4f9d\u8d56\u5b89\u88c5\u5982\u4e0b\uff1a sudo dnf install dnf-plugins-core # install this to use 'dnf builddep' sudo dnf builddep python3","title":"4.1 Linux \u5b89\u88c5\u51fa\u73b0\u95ee\u9898"},{"location":"introduction/install/#42-python","text":"\u6ce8\u610f\uff1a\u5982\u679c\u662f Linux \u64cd\u4f5c\u7cfb\u7edf\uff0c\u4f60\u5e94\u8be5\u81f3\u5c11\u4fdd\u7559\u7cfb\u7edf\u7684\u9ed8\u8ba4 Python \u73af\u5883\uff0c\u6216\u8005\u4e00\u4e2a\u5176\u4ed6\u7248\u672c\u7684 PYthon \u73af\u5883\uff0c\u5426\u5219 \u64cd\u4f5c\u7cfb\u7edf\u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528\u3002 \u8981\u5378\u8f7d\u5bf9\u5e94\u7248\u672c\u7684 Python \u73af\u5883\uff0c\u53ea\u9700\u8981\u5c06\u7cfb\u7edf\u6839\u76ee\u5f55\u76f8\u5173\u76ee\u5f55\u67e5\u627e\u5230\uff0c\u7136\u540e\u5220\u9664\u5373\u53ef\u3002 \u5bf9\u4e8e\u7f16\u8bd1\u5b89\u88c5\u7684 Python \u73af\u5883\uff0c\u4f1a\u5c06 Python \u5b89\u88c5\u5230\u5982\u4e0b\u51e0\u4e2a\u76ee\u5f55\uff1a /usr/lib/python3.10 /usr/local/lib/libpython3.10.a /usr/local/lib/python3.10 /usr/local/include/python3.10 /usr/local/bin/python3.10-config /usr/local/bin/python3.10 /usr/local/share/man/man1/python3.10.1 \u8fd0\u884c\u547d\u4ee4\u5220\u9664\uff1a # \u521b\u5efa\u5907\u4efd\u76ee\u5f55\uff0c\u4ee5\u4fbf\u51fa\u73b0\u95ee\u9898\uff0c\u53ef\u4ee5\u6267\u884c\u6062\u590d # \u6ce8\u610f\u4e0d\u8981\u5728 /tmp \u4e0b\u521b\u5efa\uff0c\u5982\u679c\u91cd\u542f\u7cfb\u7edf /tmp \u4e0b\u7684\u6587\u4ef6\u4f1a\u5220\u9664\u3002 # \u653e\u5728\u5bb6\u76ee\u5f55\uff0c\u53ef\u4ee5\u901a\u8fc7\u5e94\u6025\u6a21\u5f0f\u627e\u5230\u76f8\u5e94\u6587\u4ef6\u3002 # \u7b49\u786e\u4fdd\u64cd\u4f5c\u7cfb\u7edf\u6ca1\u6709\u4efb\u4f55\u5f02\u5e38\u95ee\u9898\u7684\u65f6\u5019\uff0c\u518d\u5220\u9664 mkdir ~/removed_python310 mv -f \\ /usr/lib/python3.10 \\ /usr/local/lib/libpython3.10.a \\ /usr/local/lib/python3.10 \\ /usr/local/include/python3.10 \\ /usr/local/bin/python3.10-config \\ /usr/local/bin/python3.10 \\ /usr/local/share/man/man1/python3.10.1 \\ ~/removed_python310 \u5982\u679c\u4f60\u66fe\u4f7f\u7528\u8fc7 pip3.10 \u5b89\u88c5\u4f9d\u8d56\uff0c\u8bf7\u68c0\u67e5\u7528\u6237\u76ee\u5f55\u4e0b\u662f\u5426\u5b58\u5728\u76f8\u5173\u4f9d\u8d56\u76ee\u5f55\uff1a /home/god/.local/lib/python3.10","title":"4.2 \u5378\u8f7d Python"},{"location":"introduction/virtualenv/","text":"\u865a\u62df\u73af\u5883 \u6587\u7ae0\u8981\u70b9\uff1a \u4ecb\u7ecd Python \u7684\u865a\u62df\u73af\u5883 \u4ecb\u7ecd\u5e76\u4f7f\u7528 Python \u4e2d\u5e38\u89c1\u7684\u865a\u62df\u73af\u5883 \u603b\u7ed3\u5f00\u53d1\u4e2d\u7684\u865a\u62df\u73af\u5883\u7684\u4f7f\u7528\u5b9e\u8df5 1. \u6982\u8ff0 Python \u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u4f1a\u4f7f\u7528\u4e0d\u5728\u6807\u51c6\u5e93\u5185\u7684\u8f6f\u4ef6\u5305\u548c\u6a21\u5757\u3002\u5e94\u7528\u7a0b\u5e8f\u6709\u65f6\u9700\u8981\u7279\u5b9a\u7248\u672c\u7684\u5e93\uff0c\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u9700\u8981\u4fee\u590d\u7279\u5b9a\u7684\u9519\u8bef\uff0c\u6216\u8005\u53ef\u4ee5\u4f7f\u7528\u5e93\u7684\u8fc7\u65f6\u7248\u672c\u7684\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u3002 \u8fd9\u610f\u5473\u7740\u4e00\u4e2a Python \u73af\u5883\u53ef\u80fd\u65e0\u6cd5\u6ee1\u8db3\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u8981\u6c42\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f A \u9700\u8981\u7279\u5b9a\u6a21\u5757\u7684 1.0 \u7248\u672c\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f B \u9700\u8981 2.0 \u7248\u672c\uff0c\u5219\u9700\u6c42\u5b58\u5728\u51b2\u7a81\uff0c\u5b89\u88c5\u7248\u672c 1.0 \u6216 2.0 \u5c06\u5bfc\u81f4\u67d0\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u65e0\u6cd5\u8fd0\u884c\u3002 \u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u662f\u521b\u5efa\u4e00\u4e2a virtual environment \uff0c\u4e00\u4e2a\u76ee\u5f55\u6811\uff0c\u5176\u4e2d\u5b89\u88c5\u6709\u7279\u5b9aPython\u7248\u672c\uff0c\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u5305\u3002 \u7136\u540e\uff0c\u4e0d\u540c\u7684\u5e94\u7528\u5c06\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u865a\u62df\u73af\u5883\u3002 \u8981\u89e3\u51b3\u5148\u524d\u9762\u4f8b\u5b50\u4e2d\u7684\u51b2\u7a81\uff0c\u5e94\u7528\u7a0b\u5e8f A \u53ef\u4ee5\u62e5\u6709\u81ea\u5df1\u7684\u5b89\u88c5\u4e86 1.0 \u7248\u672c\u7684\u865a\u62df\u73af\u5883\uff0c\u800c\u5e94\u7528\u7a0b\u5e8f B \u5219\u62e5\u6709\u5b89\u88c5\u4e86 2.0 \u7248\u672c\u7684\u53e6\u4e00\u4e2a\u865a\u62df\u73af\u5883\u3002 \u5982\u679c\u5e94\u7528\u7a0b\u5e8f B \u8981\u6c42\u5c06\u67d0\u4e2a\u5e93\u5347\u7ea7\u5230 3.0 \u7248\u672c\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5e94\u7528\u7a0b\u5e8f A \u7684\u73af\u5883\u3002 2. \u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177 \u73b0\u5728 Python \u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\u8d8a\u6765\u8d8a\u5f3a\u5927\u3002\u5e38\u89c1\u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\u5982\u4e0b\uff1a venv \uff1a Python \u6807\u51c6\u5e93\u4e2d\u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177 conda \uff1a Anaconda \u4e0b\u7684\u7ba1\u7406\u5de5\u5177 Virtualenv \uff1a \u7b2c\u4e09\u65b9\u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\uff0c\u73b0\u5728\u5728 Pypa \u4e2d\u7ef4\u62a4\u3002 Pipenv \uff1a \u7b2c\u4e09\u65b9\u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\uff0c\u73b0\u5728\u5728 Pypa \u4e2d\u7ef4\u62a4\u3002 poetry \uff1a \u7b2c\u4e09\u65b9\u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\u3002 2.1 venv venv \u662f Python \u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a\u6a21\u5757\u3002\u5982\u679c\u7cfb\u7edf\u4e2d\u6709\u591a\u4e2a\u7248\u672c\u7684 Python \u73af\u5883\uff0c\u53ef\u4ee5\u521b\u5efa\u6307\u5b9a\u7248\u672c\u7684\u865a\u62df\u73af\u5883\u3002 \u521b\u5efa\u865a\u62df\u73af\u5883\uff1a \u5728\u5f53\u524d\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a demo \u7684\u865a\u62df\u73af\u5883\u76ee\u5f55\uff1a python3 -m venv demo \u5982\u679c demo \u4e0d\u5b58\u5728\uff0c\u5c31\u4f1a\u521b\u5efa\u8be5\u76ee\u5f55\uff0c\u540c\u65f6\u5728\u91cc\u9762\u521b\u5efa Python \u89e3\u91ca\u5668\uff0c\u6807\u51c6\u5e93\u548c\u5404\u79cd\u652f\u6301\u6587\u4ef6\u7684\u526f\u672c\u76ee\u5f55\u3002 \u901a\u5e38\u521b\u5efa\u4ee5\u70b9\u5f00\u5934\u7684 .venv \u76ee\u5f55\u3002\u65e2\u53ef\u4ee5\u505a\u5230\u9690\u85cf\u76ee\u5f55\u7684\u6548\u679c\uff0c\u4e5f\u53ef\u4ee5\u548c\u5e38\u89c1\u7684 .env \u73af\u5883\u53d8\u91cf\u5b9a\u4e49\u6587\u4ef6\u533a\u5206\u3002 \u4f7f\u7528\u865a\u62df\u73af\u5883\uff1a \u4e0b\u9762\u6fc0\u6d3b\u73af\u5883\u53d8\u91cf Windows: demo\\Scripts\\activate.bat Unix \u6216 MacOs \u4e0a\uff1a source demo/bin/active \u6fc0\u6d3b\u540e\u5c31\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d\u4f7f\u7528\u521b\u5efa\u7684\u865a\u62df\u73af\u5883\u4e86\u3002 $ source demo/bin/activate (demo) $ python Python 3.7.3 (default, Oct 28 2020, 14:33:53) [GCC 8.3.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import sys >>> sys.version '3.7.3 (default, Oct 28 2020, 14:33:53) \\n[GCC 8.3.0]' >>> sys.path ['', '/usr/lib/python37.zip', '/usr/lib/python3.7', '/usr/lib/python3.7/lib-dynload', '/tmp/test/demo/lib/python3.7/site-packages'] \u9000\u51fa\u865a\u62df\u73af\u5883\uff1a deactive 2.2 Conda Conda \u662f\u5728 Windows\uff0c macOS \u548c Linux \u4e0a\u8fd0\u884c\u7684\u5f00\u6e90\u8f6f\u4ef6\u5305\u7ba1\u7406\u7cfb\u7edf\u548c\u73af\u5883\u7ba1\u7406\u7cfb\u7edf\u3002 Conda \u5feb\u901f\u5b89\u88c5\uff0c\u8fd0\u884c\u548c\u66f4\u65b0\u8f6f\u4ef6\u5305\u53ca\u5176\u4f9d\u8d56\u9879\u3002Conda \u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\u7684\u73af\u5883\u4e2d\u521b\u5efa\uff0c\u4fdd\u5b58\uff0c\u52a0\u8f7d\u548c\u5207\u6362\u3002\u5b83\u662f\u4e3a Python \u7a0b\u5e8f\u521b\u5efa\u7684\uff0c\u4f46\u53ef\u4ee5\u6253\u5305\u548c\u5206\u53d1\u9002\u7528\u4e8e\u4efb\u4f55\u8bed\u8a00\u7684\u8f6f\u4ef6\u3002 Conda \u4f5c\u4e3a\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u53ef\u4ee5\u5e2e\u52a9\u60a8\u67e5\u627e\u548c\u5b89\u88c5\u8f6f\u4ef6\u5305\u3002\u5982\u679c\u60a8\u9700\u8981\u4e00\u4e2a\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u7248\u672c\u7684 Python \u7684\u8f6f\u4ef6\u5305\uff0c\u5219\u65e0\u9700\u5207\u6362\u5230\u5176\u4ed6\u73af\u5883\u7ba1\u7406\u5668\uff0c\u56e0\u4e3a Conda \u4e5f\u662f\u73af\u5883\u7ba1\u7406\u5668\u3002\u4ec5\u9700\u51e0\u4e2a\u547d\u4ee4\uff0c\u60a8\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u73af\u5883\u6765\u8fd0\u884c\u8be5\u4e0d\u540c\u7248\u672c\u7684Python\uff0c\u540c\u65f6\u7ee7\u7eed\u5728\u6b63\u5e38\u73af\u5883\u4e2d\u8fd0\u884c\u60a8\u901a\u5e38\u7684 Python \u7248\u672c\u3002 \u5728\u9ed8\u8ba4\u914d\u7f6e\u4e0b\uff0cConda \u53ef\u4ee5\u5b89\u88c5\u548c\u7ba1\u7406\u5728 repo.anaconda.com \u4e0a\uff0c\u7531 Anaconda\u00ae \u5ba1\u67e5\u548c\u7ef4\u62a4\u7684\u4e0a\u5343\u4e2a\u8f6f\u4ef6\u5305\u3002 Conda\u53ef\u4ee5\u4e0e Travis CI \u548c AppVeyor \u7b49\u6301\u7eed\u96c6\u6210\u7cfb\u7edf\u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u63d0\u4f9b\u9891\u7e41\uff0c\u81ea\u52a8\u7684\u4ee3\u7801\u6d4b\u8bd5\u3002 \u6240\u6709\u7248\u672c\u7684 Anaconda \u548c Miniconda \u4e2d\u90fd\u5305\u542b conda \u8f6f\u4ef6\u5305\u548c\u73af\u5883\u7ba1\u7406\u5668\u3002 \u64cd\u4f5c\u524d\u63d0\uff1a \u8bf7\u786e\u4fdd Python \u73af\u5883\u662f\u7531 Anaconda \u6216 Miniconda \u63d0\u4f9b\u7684\u3002 \u521b\u5efa\u865a\u62df\u73af\u5883\uff1a \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a demo \u76ee\u5f55\u7684\u865a\u62df\u73af\u5883 conda create --name demo \u4f7f\u7528\u865a\u62df\u73af\u5883\uff1a C:\\Users\\test>conda activate demo (demo) C:\\Users\\test>python Python 3.8.3 (default, Jul 2 2020, 17:30:36) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import sys >>> sys.path ['', 'C:\\\\ProgramData\\\\Anaconda3\\\\python38.zip', 'C:\\\\ProgramData\\\\Anaconda3\\\\DLLs', 'C:\\\\ProgramData\\\\Anaconda3\\\\lib', 'C:\\\\ProgramData\\\\Anaconda3', 'C:\\\\ProgramData\\\\Anaconda3\\\\lib\\\\site-packages', 'C:\\\\ProgramData\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32', 'C:\\\\ProgramData\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32\\\\lib', 'C:\\\\ProgramData\\\\Anaconda3\\\\lib\\\\site-packages\\\\Pythonwin'] >>> sys.version '3.8.3 (default, Jul 2 2020, 17:30:36) [MSC v.1916 64 bit (AMD64)]' \u9000\u51fa\u865a\u62df\u73af\u5883\uff1a deactivate 2.3 Virtualenv Virtualenv \u662f\u4e00\u4e2a\u7b2c\u4e09\u5e93\uff0c\u73b0\u5728\u7531 Pypa \u7ba1\u7406\u3002\u5176\u5177\u6709\u6bd4 venv \u66f4\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u4f46\u73b0\u5728 Virtualenv \u7684\u4e00\u4e9b\u529f\u80fd\u4e5f\u5728\u6162\u6162\u662f\u914d\u5230 venv \u4e0a\u3002 \u5b89\u88c5\uff1a pip install -U virtualenv Virtualenv \u5728 Conda \u73af\u5883\u4e0b\u4f1a\u6709 Bug \u3002 1 \u521b\u5efa\u865a\u62df\u73af\u5883\uff1a \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a venv \u76ee\u5f55\u7684\u865a\u62df\u73af\u5883 virtualenv venv \u4f7f\u7528\u865a\u62df\u73af\u5883\uff1a source venv/bin/activate \u597d\u7528\u7684\u5de5\u5177\uff1a \u642d\u914d VirtualenvWrapper \u53ef\u4ee5\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u548c\u7ba1\u7406\u865a\u62df\u73af\u5883\u3002 Linux \u5b89\u88c5\uff1a pip install virtualenvwrapper # \u6267\u884c virtualvnewrapper \u521d\u59cb\u5316\u811a\u672c\u3002\u53ef\u4ee5\u8bb2\u4e0b\u9762\u8fd9\u4e00\u884c\u52a0\u5165\u5230 `~/.bashrc` \u4e2d\uff0c\u65b9\u4fbf\u5f53\u524d\u7528\u6237\u4f7f\u7528\uff0c\u6216\u8005\u52a0\u5165\u5230 `/etc/profile` \u4e2d\u65b9\u4fbf\u6240\u6709\u7528\u6237\u4f7f\u7528 source /usr/local/bin/virtualenvwrapper.sh \u521b\u5efa\u865a\u62df\u73af\u5883\uff1a # \u6267\u884c\u547d\u4ee4\uff0c\u9ed8\u8ba4\u4f1a\u5728 `~/.virtualenvs` \u4e0b\u521b\u5efa\u5bf9\u5e94\u540d\u79f0\u7684\u865a\u62df\u73af\u5883\u76ee\u5f55\uff0c\u540c\u65f6\u521d\u59cb\u5316\u865a\u62df\u73af\u5883\u3002 # \u6240\u6709\u865a\u62df\u73af\u5883\u90fd\u4f1a\u96c6\u4e2d\u5b58\u653e\u5728\u8fd9\u91cc\u3002\u907f\u514d\u4e86\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6709\u865a\u62df\u73af\u5883\u76ee\u5f55\u3002 mkvirtualenv venv \u4f7f\u7528\u865a\u62df\u73af\u5883\uff1a workon venv \u5220\u9664\u865a\u62df\u73af\u5883\uff1a rmvirtualenv venv Windows \u5b89\u88c5\uff1a pip install virtualenvwrapper-win \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf WORKON_HOME=D:/virtualenvs \u4f7f\u7528\u7684\u65b9\u6cd5\u548c\u4e0a\u9762\u4e00\u81f4\u3002 2.4 Pipenv (\u63a8\u8350\u4f7f\u7528) Pipenv \u662f\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\uff0c\u5176\u4f9d\u8d56 Virtualenv \uff0c\u5e76\u5728\u4e4b\u4e0a\u505a\u4e86\u8bb8\u591a\u5176\u4ed6\u529f\u80fd\u3002\u6b63\u5982\u5176\u5b98\u7f51\u4e2d\u6240\u8bf4\uff0c\u5b83\u7684\u76ee\u7684\u662f\u8981\u628a\u6240\u6709\u6700\u597d\u7684\u5305\u7ba1\u7406\uff08 bundler , composer , npm \uff0c yarn \u7b49\uff09\u5f15\u5165\u5230 Python \u4e2d\u3002 Pipenv \u5177\u6709\u5982\u4e0b\u7279\u70b9 \u96c6\u4e2d\u5b58\u50a8\u865a\u62df\u73af\u5883\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u76f4\u63a5\u521b\u5efa\u3002\u53ef\u4ee5\u901a\u8fc7 WORKON_HOME \u73af\u5883\u53d8\u91cf\u914d\u7f6e\u3002 \u751f\u6210 Pipfile \u548c Pipfile.lock \u3002\u524d\u8005\u8bb0\u5f55\u4f9d\u8d56\u9879\u3001\u5b89\u88c5\u6e90\u3001\u8981\u4f7f\u7528\u7684 Python \u7248\u672c\uff0c\u540e\u8005\u8bb0\u5f55\u6240\u5b89\u88c5\u7684\u7684\u7248\u672c\u7684 Hash \u503c\u7b49\u4fe1\u606f\u3002 \u81ea\u52a8\u5b89\u88c5\u5378\u8f7d\u4f9d\u8d56\uff0c\u81ea\u52a8\u6e05\u9664\u65e0\u7528\u7684\u4f9d\u8d56\u3002 \u81ea\u52a8\u52a0\u8f7d .env \u6587\u4ef6\u3002 \u80fd\u6839\u636e\u4f9d\u8d56\u6811\u7684\u5173\u7cfb\u68c0\u6d4b\u4f9d\u8d56\u51b2\u7a81\u3002 \u5b89\u88c5\uff1a pip install pipenv \u8bf7\u6ce8\u610f Virtualenv \u5728 Conda \u73af\u5883\u4e0b\u7684 Bug [Virtualenv-bug] \u3002 \u521b\u5efa\u865a\u62df\u73af\u5883\uff1a \u5728\u9879\u76ee\u6839\u76ee\u5f55\u6267\u884c pipenv install \uff1a root@b2e8a92bace7:~/demo# pipenv install Creating a virtualenv for this project... Pipfile: /root/demo/Pipfile Using /usr/local/bin/python3 (3.7.7) to create virtualenv... \u2838 Creating virtual environment...created virtual environment CPython3.7.7.final.0-64 in 175ms creator CPython3Posix(dest=/root/.virtualenvs/demo-xfYnOzmm, clear=False, no_vcs_ignore=False, global=False) seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/root/.local/share/virtualenv) added seed packages: pip==20.2.4, setuptools==50.3.2, wheel==0.35.1 activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator \u2714 Successfully created virtual environment! Virtualenv location: /root/.virtualenvs/demo-xfYnOzmm Creating a Pipfile for this project... Pipfile.lock not found, creating... Locking [dev-packages] dependencies... Locking [packages] dependencies... Updated Pipfile.lock (a65489)! Installing dependencies from Pipfile.lock (a65489)... \ud83d\udc0d \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 0/0 \u2014 00:00:00 To activate this project's virtualenv, run pipenv shell. Alternatively, run a command inside the virtualenv with pipenv run. \u4f7f\u7528\u865a\u62df\u73af\u5883\uff1a \u5355\u6b21\u4f7f\u7528 # \u67e5\u770b\u865a\u62df\u73af\u5883\u7684 Python \u7248\u672c pipenv run python --version \u8fdb\u5165\u865a\u62df\u73af\u5883 pipenv shell \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install tox \u4f9d\u8d56\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4f1a\u66f4\u65b0 Pipfile \u6587\u4ef6\uff0c\u540c\u65f6\u66f4\u65b0 Pipfile.lock \u6587\u4ef6\uff0c\u8bb0\u5f55\u5b89\u88c5\u7684\u7248\u672c\u548c\u5bf9\u5e94 HASH \u503c\u3002 2.5 Poetry Poetry \u662f\u540e\u671f\u4e4b\u79c0\uff0c\u5b83\u7684\u96c4\u5fc3\u4e0d\u4ec5\u4ec5\u662f\u505a Pipenv \u7684\u4e8b\uff0c\u5b83\u8fd8\u60f3\u628a Python \u7684\u6253\u5305\u7ba1\u7406\u4e00\u5e76\u505a\u4e86\uff0c\u5e76\u6d88\u9664 setup.py \u6587\u4ef6\u3002\u5b83\u4f7f\u7528\u57fa\u4e8e PEP517 \u89c4\u8303\u7684 pyproject.toml \u6587\u4ef6\u8bb0\u5f55\u4fe1\u606f\uff0c\u5e76\u6253\u5305\u3002 \u5177\u4f53\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 PEP 517 -- A build-system independent format for source trees \u3002 \u5f53\u524d\u57fa\u4e8e PEP517 \u7684\u6784\u5efa\u6a21\u5f0f\u5df2\u7ecf\u5b8c\u5168\u53ef\u7528\u3002\u5728 pip \u7684\u53d1\u884c\u8bb0\u5f55\u4e2d\uff0c\u6700\u65e9\u662f\u5728 18.1 (2018-10-05) \u5c31\u5f15\u5165\u4e86 PEP517 \u7684 0.2 \u7248\u672c\u3002 \u5728\u4f7f\u7528\u4e0a\uff0cPoetry \u7ed9\u4eba\u7684\u611f\u89c9\u66f4\u73b0\u4ee3\u5316\u3002 \u5b89\u88c5\uff1a pip install poetry \u4f7f\u7528\uff1a # \u4f7f\u7528\u524d\u9700\u8981\u5148\u521d\u59cb\u5316\u9879\u76ee\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u751f\u6210 `pyproject.toml` \u6587\u4ef6 poetry init # \u5b89\u88c5\u4f9d\u8d56 poetry add tox # \u8fdb\u5165\u865a\u62df\u73af\u5883 poetry shell # \u6784\u5efa\u9879\u76ee poetry build # \u53d1\u5e03\u9879\u76ee poetry publish 3. \u865a\u62df\u73af\u5883\u5b9e\u8df5(Pipenv) \u4f17\u591a\u7684\u865a\u62df\u73af\u5883\uff0c\u548c\u5bf9\u5e94\u7684\u5de5\u5177\uff0c\u5728\u9009\u62e9\u65f6\u96be\u514d\u6709\u70b9\u56f0\u60d1\uff0c\u8981\u9009\u62e9\u4e00\u4e2a\u597d\u7528\u7684\u5de5\u5177\uff0c\u6700\u4f73\u9014\u5f84\u5c31\u662f\u81ea\u5df1\u90fd\u5c1d\u8bd5\u4e00\u904d\u3002 \u4e0a\u8ff0\u51e0\u4e2a\u4e3b\u6d41\u865a\u62df\u73af\u5883\u5de5\u5177\u9664\u4e86 venv \u662f\u5185\u7f6e\u5e93\uff0c\u5176\u4ed6\u51e0\u4e2a\u90fd\u662f\u57fa\u4e8e Virtualenv \u518d\u6b21\u5f00\u53d1\uff0c\u5e76\u63d0\u4f9b\u4e86\u5176\u4ed6\u529f\u80fd\u3002\u4f46\u662f Virtualenv \u6ca1\u6709\u63d0\u4f9b\u4f9d\u8d56\u68c0\u6d4b\u7684\u529f\u80fd\uff0c\u800c\u4e14\u4f9d\u8d56\u5305\u7684\u7ba1\u7406\u8fd8\u662f\u9700\u8981\u4f7f\u7528 pip \u547d\u4ee4\uff0c\u4f9d\u8d56\u9879\u9700\u8981\u901a\u8fc7 requirements.txt \u3002 \u5f53\u4f60\u9700\u8981\u7ba1\u7406\u4e0d\u540c\u5f00\u53d1\u73af\u5883\u4e0b\u7684\u4f9d\u8d56\u65f6\uff0c\u5c31\u9700\u8981\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a requirements.txt \u3002\u4f8b\u5982 requirements-devlopment.txt \uff0c requirements-production.txt \u6216\u8fd9 requirements-test.txt \u3002 Poetry \u662f\u770b\u8d77\u6765\u66f4\u9177\u7684\u5de5\u5177\uff0c\u65e0\u8bba\u662f\u4ea4\u4e92\u7684\u8f93\u51fa\uff0c\u8fd8\u662f\u5b83\u57fa\u4e8e PEP517 \u7684\u7279\u6027\u3002\u4f46\u5b83\u6bd5\u7adf\u8fd8\u592a\u8fc7\u4e8e\u5e74\u8f7b\uff0c\u5b58\u5728\u4e00\u4e9b\u4e0d\u7a33\u5b9a\u6027\uff0c\u6bd4\u5982\u6709\u65f6\u547d\u4ee4\u9519\u8bef\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u9519\u8bef\u5806\u6808\u4fe1\u606f\u3002\u53e6\u5916\u73b0\u5728\u7684 PEP517 \u89c4\u8303\u8fd8\u6ca1\u5728\u793e\u533a\u5927\u89c4\u6a21\u4f7f\u7528\uff0c\u751a\u81f3\u6709\u76f8\u5f53\u4e8e\u4e00\u90e8\u5206\u4eba\u8fd8\u6ca1\u63a5\u89e6\u5230\u5b83\uff0c\u5927\u5bb6\u8fd8\u662f\u719f\u6089\u901a\u8fc7 setup.py \u6216 setup.cfg \u7f16\u5199\u9879\u76ee\u5c31\u914d\u7f6e\uff0c\u7136\u540e\u901a\u8fc7 setup \u547d\u4ee4\u6784\u5efa\u6253\u5305\u3002 \u7efc\u5408\u6765\u770b Pipenv \u5c31\u663e\u5f97\u66f4\u52a0\u5408\u9002\uff0c\u652f\u6301\u591a\u79cd\u73af\u5883\u7ba1\u7406\uff0c\u63d0\u4f9b\u4f9d\u8d56\u5173\u7cfb\u6821\u9a8c\uff0c\u548c\u4f9d\u8d56\u7684 lock \u6587\u4ef6\uff0c\u4e5f\u6709\u81ea\u52a8\u7ba1\u7406\u4f9d\u8d56\u7684\u64cd\u4f5c\u3002 \u4e0b\u9762\u4ee5\u4e00\u4e2a\u9879\u76ee\u7684\u751f\u547d\u5468\u671f\u63cf\u8ff0\u5982\u4f55\u66f4\u597d\u7684\u4f7f\u7528 Pipenv \u3002 3.1 \u521d\u59cb\u5316\u9879\u76ee \u521d\u59cb\u5316\u9879\u76ee\u540e\uff0c\u4f7f\u7528 Pipenv \u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u5f53\u524d\u9879\u76ee\u7684\u865a\u62df\u73af\u5883\u3002\u5982\u679c\u662f Pycharm \uff0c\u53ef\u4ee5\u76f4\u63a5\u9009\u62e9\u4f7f\u7528 Pipenv \u521b\u5efa\u3002 pipenv install 3.2 \u5b89\u88c5\u9879\u76ee\u4f9d\u8d56 \u5f53\u9700\u8981\u533a\u5206\u5f00\u53d1\u73af\u5883\u548c\u666e\u901a\u73af\u5883\u65f6\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 install -d \u9009\u9879\u5b89\u88c5\u5f00\u53d1\u73af\u5883\u4f9d\u8d56 pipenv install -d pytest tox \u4e00\u822c\u7684\u4f9d\u8d56\u76f4\u63a5\u5b89\u88c5\u5373\u53ef\u3002 pipenv install django requests scrapy sqlalchemy 3.3 \u6e05\u7406\u4f9d\u8d56 \u5f53\u9700\u8981\u4ece\u73af\u5883\u4e2d\u6e05\u9664\u4e0d\u5728\u9700\u8981\u7684\u4f9d\u8d56\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u5378\u8f7d pipenv uninstall scrapy \u6216\u8005\u76f4\u63a5\u4fee\u6539 Pipfile \u6587\u4ef6\uff0c\u5220\u9664\u4e0d\u518d\u9700\u8981\u7684\u5185\u5bb9\uff0c\u7136\u540e\u901a\u8fc7 pipenv lock \u751f\u6210 Pipfile.lock \u6587\u4ef6\u3002 \u5982\u679c\u73af\u5883\u4e2d\u8fd8\u5b58\u5728\u5176\u4ed6\u5b89\u88c5\u8fc7\u7684\u5305\uff0c\u53ef\u4ee5\u901a\u8fc7 pipenv clean \u81ea\u52a8\u6e05\u7406\u4e0d\u5728 Pipfile \u4e2d\u7684\u4f9d\u8d56\u5305\u3002 3.4 \u90e8\u7f72 \u5728\u90e8\u7f72\u65f6\uff0c\u5f3a\u70c8\u63a8\u8350\u4f7f\u7528 pipenv sync \u5b89\u88c5\u5728 Pipfile.lock \u6587\u4ef6\u4e2d\u4f9d\u8d56\u5305\u3002 3.5 \u751f\u6210 requirements.txt \u4f7f\u7528 pipenv lock -r \u53ef\u4ee5\u770b\u5230\u6240\u6709\u4f9d\u8d56\u5217\u8868\u3002 # \u67e5\u770b\u6240\u6709\u4f9d\u8d56 pipenv lock -r # \u4ec5\u6240\u6709\u5f00\u53d1\u4f9d\u8d56 pipenv lock -r --dev-only \u5f53\u9700\u8981\u4fdd\u5b58\u6210\u6587\u4ef6\u76f4\u63a5\u4f7f\u7528\u91cd\u5b9a\u5411\u7b26\u53f7\u5373\u53ef > pipenv lock -r > requirements.txt pipenv lock -r --dev-only > requirements.txt 3.6 Lock \u5361\u4f4f\u4e86 \u5b89\u88c5\u4f9d\u8d56\u65f6\u4f1a\u751f\u6210\u4e00\u4e2a Pipfile.lock \u7684\u6587\u4ef6\uff0c\u7528\u4e8e\u8bb0\u5f55\u4f7f\u7528\u7684\u6700\u7ec8\u7248\u548c\u548c\u8be5\u7248\u672c\u7684 HASH \uff0c\u8fd9\u4e5f\u662f\u4fdd\u8bc1\u5b89\u5168\u3002 \u6709\u65f6\u53ef\u80fd\u56e0\u4e3a\u7f51\u7edc\u95ee\u9898\uff0c\u5728\u751f\u6210 Pipfile.lock \u7684\u901f\u5ea6\u5f88\u6162\u3002\u53ef\u4ee5\u4f7f\u7528 --skip-lock \u547d\u4ee4\u8df3\u8fc7\u3002 pipenv install django --skip-lock \u4f46\u5728\u53d1\u5e03\u524d\uff0c\u5efa\u8bae\u8fd8\u662f\u8981\u751f\u6210 Pipfile.lock \u3002\u5982\u679c\u771f\u7684\u4e0d\u9700\u8981\uff0c\u76f4\u63a5\u5c06 Pipfile.lock \u6392\u9664\u5728\u7248\u672c\u7ba1\u7406\u4e4b\u5916\u5c31\u884c\u5566\u3002 \u5982\u679c\u4f60\u7684\u662f Conda \u73af\u5883\uff0c\u8bf7\u4f7f\u7528 20.0.34 \u4e4b\u524d\u7684 Virtualenv \u3002\u5177\u4f53\u8bf7\u53c2\u8003 virtualenv==20.0.34 not compatible with python on windows #12094 \u548c conda support - Windows 3.7+ #1986 \u3002\u5982\u679c\u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u4fee\u590d\uff0c\u8bf7\u5ffd\u7565\u3002 \u21a9","title":"\u865a\u62df\u73af\u5883"},{"location":"introduction/virtualenv/#_1","text":"\u6587\u7ae0\u8981\u70b9\uff1a \u4ecb\u7ecd Python \u7684\u865a\u62df\u73af\u5883 \u4ecb\u7ecd\u5e76\u4f7f\u7528 Python \u4e2d\u5e38\u89c1\u7684\u865a\u62df\u73af\u5883 \u603b\u7ed3\u5f00\u53d1\u4e2d\u7684\u865a\u62df\u73af\u5883\u7684\u4f7f\u7528\u5b9e\u8df5","title":"\u865a\u62df\u73af\u5883"},{"location":"introduction/virtualenv/#1","text":"Python \u5e94\u7528\u7a0b\u5e8f\u901a\u5e38\u4f1a\u4f7f\u7528\u4e0d\u5728\u6807\u51c6\u5e93\u5185\u7684\u8f6f\u4ef6\u5305\u548c\u6a21\u5757\u3002\u5e94\u7528\u7a0b\u5e8f\u6709\u65f6\u9700\u8981\u7279\u5b9a\u7248\u672c\u7684\u5e93\uff0c\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u9700\u8981\u4fee\u590d\u7279\u5b9a\u7684\u9519\u8bef\uff0c\u6216\u8005\u53ef\u4ee5\u4f7f\u7528\u5e93\u7684\u8fc7\u65f6\u7248\u672c\u7684\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u7a0b\u5e8f\u3002 \u8fd9\u610f\u5473\u7740\u4e00\u4e2a Python \u73af\u5883\u53ef\u80fd\u65e0\u6cd5\u6ee1\u8db3\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u8981\u6c42\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f A \u9700\u8981\u7279\u5b9a\u6a21\u5757\u7684 1.0 \u7248\u672c\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f B \u9700\u8981 2.0 \u7248\u672c\uff0c\u5219\u9700\u6c42\u5b58\u5728\u51b2\u7a81\uff0c\u5b89\u88c5\u7248\u672c 1.0 \u6216 2.0 \u5c06\u5bfc\u81f4\u67d0\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u65e0\u6cd5\u8fd0\u884c\u3002 \u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u662f\u521b\u5efa\u4e00\u4e2a virtual environment \uff0c\u4e00\u4e2a\u76ee\u5f55\u6811\uff0c\u5176\u4e2d\u5b89\u88c5\u6709\u7279\u5b9aPython\u7248\u672c\uff0c\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u5305\u3002 \u7136\u540e\uff0c\u4e0d\u540c\u7684\u5e94\u7528\u5c06\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684\u865a\u62df\u73af\u5883\u3002 \u8981\u89e3\u51b3\u5148\u524d\u9762\u4f8b\u5b50\u4e2d\u7684\u51b2\u7a81\uff0c\u5e94\u7528\u7a0b\u5e8f A \u53ef\u4ee5\u62e5\u6709\u81ea\u5df1\u7684\u5b89\u88c5\u4e86 1.0 \u7248\u672c\u7684\u865a\u62df\u73af\u5883\uff0c\u800c\u5e94\u7528\u7a0b\u5e8f B \u5219\u62e5\u6709\u5b89\u88c5\u4e86 2.0 \u7248\u672c\u7684\u53e6\u4e00\u4e2a\u865a\u62df\u73af\u5883\u3002 \u5982\u679c\u5e94\u7528\u7a0b\u5e8f B \u8981\u6c42\u5c06\u67d0\u4e2a\u5e93\u5347\u7ea7\u5230 3.0 \u7248\u672c\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u5e94\u7528\u7a0b\u5e8f A \u7684\u73af\u5883\u3002","title":"1. \u6982\u8ff0"},{"location":"introduction/virtualenv/#2","text":"\u73b0\u5728 Python \u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\u8d8a\u6765\u8d8a\u5f3a\u5927\u3002\u5e38\u89c1\u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\u5982\u4e0b\uff1a venv \uff1a Python \u6807\u51c6\u5e93\u4e2d\u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177 conda \uff1a Anaconda \u4e0b\u7684\u7ba1\u7406\u5de5\u5177 Virtualenv \uff1a \u7b2c\u4e09\u65b9\u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\uff0c\u73b0\u5728\u5728 Pypa \u4e2d\u7ef4\u62a4\u3002 Pipenv \uff1a \u7b2c\u4e09\u65b9\u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\uff0c\u73b0\u5728\u5728 Pypa \u4e2d\u7ef4\u62a4\u3002 poetry \uff1a \u7b2c\u4e09\u65b9\u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\u3002","title":"2. \u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177"},{"location":"introduction/virtualenv/#21-venv","text":"venv \u662f Python \u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a\u6a21\u5757\u3002\u5982\u679c\u7cfb\u7edf\u4e2d\u6709\u591a\u4e2a\u7248\u672c\u7684 Python \u73af\u5883\uff0c\u53ef\u4ee5\u521b\u5efa\u6307\u5b9a\u7248\u672c\u7684\u865a\u62df\u73af\u5883\u3002 \u521b\u5efa\u865a\u62df\u73af\u5883\uff1a \u5728\u5f53\u524d\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a demo \u7684\u865a\u62df\u73af\u5883\u76ee\u5f55\uff1a python3 -m venv demo \u5982\u679c demo \u4e0d\u5b58\u5728\uff0c\u5c31\u4f1a\u521b\u5efa\u8be5\u76ee\u5f55\uff0c\u540c\u65f6\u5728\u91cc\u9762\u521b\u5efa Python \u89e3\u91ca\u5668\uff0c\u6807\u51c6\u5e93\u548c\u5404\u79cd\u652f\u6301\u6587\u4ef6\u7684\u526f\u672c\u76ee\u5f55\u3002 \u901a\u5e38\u521b\u5efa\u4ee5\u70b9\u5f00\u5934\u7684 .venv \u76ee\u5f55\u3002\u65e2\u53ef\u4ee5\u505a\u5230\u9690\u85cf\u76ee\u5f55\u7684\u6548\u679c\uff0c\u4e5f\u53ef\u4ee5\u548c\u5e38\u89c1\u7684 .env \u73af\u5883\u53d8\u91cf\u5b9a\u4e49\u6587\u4ef6\u533a\u5206\u3002 \u4f7f\u7528\u865a\u62df\u73af\u5883\uff1a \u4e0b\u9762\u6fc0\u6d3b\u73af\u5883\u53d8\u91cf Windows: demo\\Scripts\\activate.bat Unix \u6216 MacOs \u4e0a\uff1a source demo/bin/active \u6fc0\u6d3b\u540e\u5c31\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d\u4f7f\u7528\u521b\u5efa\u7684\u865a\u62df\u73af\u5883\u4e86\u3002 $ source demo/bin/activate (demo) $ python Python 3.7.3 (default, Oct 28 2020, 14:33:53) [GCC 8.3.0] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import sys >>> sys.version '3.7.3 (default, Oct 28 2020, 14:33:53) \\n[GCC 8.3.0]' >>> sys.path ['', '/usr/lib/python37.zip', '/usr/lib/python3.7', '/usr/lib/python3.7/lib-dynload', '/tmp/test/demo/lib/python3.7/site-packages'] \u9000\u51fa\u865a\u62df\u73af\u5883\uff1a deactive","title":"2.1 venv"},{"location":"introduction/virtualenv/#22-conda","text":"Conda \u662f\u5728 Windows\uff0c macOS \u548c Linux \u4e0a\u8fd0\u884c\u7684\u5f00\u6e90\u8f6f\u4ef6\u5305\u7ba1\u7406\u7cfb\u7edf\u548c\u73af\u5883\u7ba1\u7406\u7cfb\u7edf\u3002 Conda \u5feb\u901f\u5b89\u88c5\uff0c\u8fd0\u884c\u548c\u66f4\u65b0\u8f6f\u4ef6\u5305\u53ca\u5176\u4f9d\u8d56\u9879\u3002Conda \u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\u7684\u73af\u5883\u4e2d\u521b\u5efa\uff0c\u4fdd\u5b58\uff0c\u52a0\u8f7d\u548c\u5207\u6362\u3002\u5b83\u662f\u4e3a Python \u7a0b\u5e8f\u521b\u5efa\u7684\uff0c\u4f46\u53ef\u4ee5\u6253\u5305\u548c\u5206\u53d1\u9002\u7528\u4e8e\u4efb\u4f55\u8bed\u8a00\u7684\u8f6f\u4ef6\u3002 Conda \u4f5c\u4e3a\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u53ef\u4ee5\u5e2e\u52a9\u60a8\u67e5\u627e\u548c\u5b89\u88c5\u8f6f\u4ef6\u5305\u3002\u5982\u679c\u60a8\u9700\u8981\u4e00\u4e2a\u9700\u8981\u4f7f\u7528\u5176\u4ed6\u7248\u672c\u7684 Python \u7684\u8f6f\u4ef6\u5305\uff0c\u5219\u65e0\u9700\u5207\u6362\u5230\u5176\u4ed6\u73af\u5883\u7ba1\u7406\u5668\uff0c\u56e0\u4e3a Conda \u4e5f\u662f\u73af\u5883\u7ba1\u7406\u5668\u3002\u4ec5\u9700\u51e0\u4e2a\u547d\u4ee4\uff0c\u60a8\u5c31\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u5b8c\u5168\u72ec\u7acb\u7684\u73af\u5883\u6765\u8fd0\u884c\u8be5\u4e0d\u540c\u7248\u672c\u7684Python\uff0c\u540c\u65f6\u7ee7\u7eed\u5728\u6b63\u5e38\u73af\u5883\u4e2d\u8fd0\u884c\u60a8\u901a\u5e38\u7684 Python \u7248\u672c\u3002 \u5728\u9ed8\u8ba4\u914d\u7f6e\u4e0b\uff0cConda \u53ef\u4ee5\u5b89\u88c5\u548c\u7ba1\u7406\u5728 repo.anaconda.com \u4e0a\uff0c\u7531 Anaconda\u00ae \u5ba1\u67e5\u548c\u7ef4\u62a4\u7684\u4e0a\u5343\u4e2a\u8f6f\u4ef6\u5305\u3002 Conda\u53ef\u4ee5\u4e0e Travis CI \u548c AppVeyor \u7b49\u6301\u7eed\u96c6\u6210\u7cfb\u7edf\u7ed3\u5408\u4f7f\u7528\uff0c\u4ee5\u63d0\u4f9b\u9891\u7e41\uff0c\u81ea\u52a8\u7684\u4ee3\u7801\u6d4b\u8bd5\u3002 \u6240\u6709\u7248\u672c\u7684 Anaconda \u548c Miniconda \u4e2d\u90fd\u5305\u542b conda \u8f6f\u4ef6\u5305\u548c\u73af\u5883\u7ba1\u7406\u5668\u3002 \u64cd\u4f5c\u524d\u63d0\uff1a \u8bf7\u786e\u4fdd Python \u73af\u5883\u662f\u7531 Anaconda \u6216 Miniconda \u63d0\u4f9b\u7684\u3002 \u521b\u5efa\u865a\u62df\u73af\u5883\uff1a \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a demo \u76ee\u5f55\u7684\u865a\u62df\u73af\u5883 conda create --name demo \u4f7f\u7528\u865a\u62df\u73af\u5883\uff1a C:\\Users\\test>conda activate demo (demo) C:\\Users\\test>python Python 3.8.3 (default, Jul 2 2020, 17:30:36) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import sys >>> sys.path ['', 'C:\\\\ProgramData\\\\Anaconda3\\\\python38.zip', 'C:\\\\ProgramData\\\\Anaconda3\\\\DLLs', 'C:\\\\ProgramData\\\\Anaconda3\\\\lib', 'C:\\\\ProgramData\\\\Anaconda3', 'C:\\\\ProgramData\\\\Anaconda3\\\\lib\\\\site-packages', 'C:\\\\ProgramData\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32', 'C:\\\\ProgramData\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32\\\\lib', 'C:\\\\ProgramData\\\\Anaconda3\\\\lib\\\\site-packages\\\\Pythonwin'] >>> sys.version '3.8.3 (default, Jul 2 2020, 17:30:36) [MSC v.1916 64 bit (AMD64)]' \u9000\u51fa\u865a\u62df\u73af\u5883\uff1a deactivate","title":"2.2 Conda"},{"location":"introduction/virtualenv/#23-virtualenv","text":"Virtualenv \u662f\u4e00\u4e2a\u7b2c\u4e09\u5e93\uff0c\u73b0\u5728\u7531 Pypa \u7ba1\u7406\u3002\u5176\u5177\u6709\u6bd4 venv \u66f4\u5f3a\u5927\u7684\u529f\u80fd\uff0c\u4f46\u73b0\u5728 Virtualenv \u7684\u4e00\u4e9b\u529f\u80fd\u4e5f\u5728\u6162\u6162\u662f\u914d\u5230 venv \u4e0a\u3002 \u5b89\u88c5\uff1a pip install -U virtualenv Virtualenv \u5728 Conda \u73af\u5883\u4e0b\u4f1a\u6709 Bug \u3002 1 \u521b\u5efa\u865a\u62df\u73af\u5883\uff1a \u521b\u5efa\u4e00\u4e2a\u540d\u4e3a venv \u76ee\u5f55\u7684\u865a\u62df\u73af\u5883 virtualenv venv \u4f7f\u7528\u865a\u62df\u73af\u5883\uff1a source venv/bin/activate \u597d\u7528\u7684\u5de5\u5177\uff1a \u642d\u914d VirtualenvWrapper \u53ef\u4ee5\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u548c\u7ba1\u7406\u865a\u62df\u73af\u5883\u3002 Linux \u5b89\u88c5\uff1a pip install virtualenvwrapper # \u6267\u884c virtualvnewrapper \u521d\u59cb\u5316\u811a\u672c\u3002\u53ef\u4ee5\u8bb2\u4e0b\u9762\u8fd9\u4e00\u884c\u52a0\u5165\u5230 `~/.bashrc` \u4e2d\uff0c\u65b9\u4fbf\u5f53\u524d\u7528\u6237\u4f7f\u7528\uff0c\u6216\u8005\u52a0\u5165\u5230 `/etc/profile` \u4e2d\u65b9\u4fbf\u6240\u6709\u7528\u6237\u4f7f\u7528 source /usr/local/bin/virtualenvwrapper.sh \u521b\u5efa\u865a\u62df\u73af\u5883\uff1a # \u6267\u884c\u547d\u4ee4\uff0c\u9ed8\u8ba4\u4f1a\u5728 `~/.virtualenvs` \u4e0b\u521b\u5efa\u5bf9\u5e94\u540d\u79f0\u7684\u865a\u62df\u73af\u5883\u76ee\u5f55\uff0c\u540c\u65f6\u521d\u59cb\u5316\u865a\u62df\u73af\u5883\u3002 # \u6240\u6709\u865a\u62df\u73af\u5883\u90fd\u4f1a\u96c6\u4e2d\u5b58\u653e\u5728\u8fd9\u91cc\u3002\u907f\u514d\u4e86\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u6709\u865a\u62df\u73af\u5883\u76ee\u5f55\u3002 mkvirtualenv venv \u4f7f\u7528\u865a\u62df\u73af\u5883\uff1a workon venv \u5220\u9664\u865a\u62df\u73af\u5883\uff1a rmvirtualenv venv Windows \u5b89\u88c5\uff1a pip install virtualenvwrapper-win \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf WORKON_HOME=D:/virtualenvs \u4f7f\u7528\u7684\u65b9\u6cd5\u548c\u4e0a\u9762\u4e00\u81f4\u3002","title":"2.3 Virtualenv"},{"location":"introduction/virtualenv/#24-pipenv","text":"Pipenv \u662f\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684\u865a\u62df\u73af\u5883\u7ba1\u7406\u5de5\u5177\uff0c\u5176\u4f9d\u8d56 Virtualenv \uff0c\u5e76\u5728\u4e4b\u4e0a\u505a\u4e86\u8bb8\u591a\u5176\u4ed6\u529f\u80fd\u3002\u6b63\u5982\u5176\u5b98\u7f51\u4e2d\u6240\u8bf4\uff0c\u5b83\u7684\u76ee\u7684\u662f\u8981\u628a\u6240\u6709\u6700\u597d\u7684\u5305\u7ba1\u7406\uff08 bundler , composer , npm \uff0c yarn \u7b49\uff09\u5f15\u5165\u5230 Python \u4e2d\u3002 Pipenv \u5177\u6709\u5982\u4e0b\u7279\u70b9 \u96c6\u4e2d\u5b58\u50a8\u865a\u62df\u73af\u5883\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u76f4\u63a5\u521b\u5efa\u3002\u53ef\u4ee5\u901a\u8fc7 WORKON_HOME \u73af\u5883\u53d8\u91cf\u914d\u7f6e\u3002 \u751f\u6210 Pipfile \u548c Pipfile.lock \u3002\u524d\u8005\u8bb0\u5f55\u4f9d\u8d56\u9879\u3001\u5b89\u88c5\u6e90\u3001\u8981\u4f7f\u7528\u7684 Python \u7248\u672c\uff0c\u540e\u8005\u8bb0\u5f55\u6240\u5b89\u88c5\u7684\u7684\u7248\u672c\u7684 Hash \u503c\u7b49\u4fe1\u606f\u3002 \u81ea\u52a8\u5b89\u88c5\u5378\u8f7d\u4f9d\u8d56\uff0c\u81ea\u52a8\u6e05\u9664\u65e0\u7528\u7684\u4f9d\u8d56\u3002 \u81ea\u52a8\u52a0\u8f7d .env \u6587\u4ef6\u3002 \u80fd\u6839\u636e\u4f9d\u8d56\u6811\u7684\u5173\u7cfb\u68c0\u6d4b\u4f9d\u8d56\u51b2\u7a81\u3002 \u5b89\u88c5\uff1a pip install pipenv \u8bf7\u6ce8\u610f Virtualenv \u5728 Conda \u73af\u5883\u4e0b\u7684 Bug [Virtualenv-bug] \u3002 \u521b\u5efa\u865a\u62df\u73af\u5883\uff1a \u5728\u9879\u76ee\u6839\u76ee\u5f55\u6267\u884c pipenv install \uff1a root@b2e8a92bace7:~/demo# pipenv install Creating a virtualenv for this project... Pipfile: /root/demo/Pipfile Using /usr/local/bin/python3 (3.7.7) to create virtualenv... \u2838 Creating virtual environment...created virtual environment CPython3.7.7.final.0-64 in 175ms creator CPython3Posix(dest=/root/.virtualenvs/demo-xfYnOzmm, clear=False, no_vcs_ignore=False, global=False) seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/root/.local/share/virtualenv) added seed packages: pip==20.2.4, setuptools==50.3.2, wheel==0.35.1 activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator \u2714 Successfully created virtual environment! Virtualenv location: /root/.virtualenvs/demo-xfYnOzmm Creating a Pipfile for this project... Pipfile.lock not found, creating... Locking [dev-packages] dependencies... Locking [packages] dependencies... Updated Pipfile.lock (a65489)! Installing dependencies from Pipfile.lock (a65489)... \ud83d\udc0d \u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589\u2589 0/0 \u2014 00:00:00 To activate this project's virtualenv, run pipenv shell. Alternatively, run a command inside the virtualenv with pipenv run. \u4f7f\u7528\u865a\u62df\u73af\u5883\uff1a \u5355\u6b21\u4f7f\u7528 # \u67e5\u770b\u865a\u62df\u73af\u5883\u7684 Python \u7248\u672c pipenv run python --version \u8fdb\u5165\u865a\u62df\u73af\u5883 pipenv shell \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install tox \u4f9d\u8d56\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4f1a\u66f4\u65b0 Pipfile \u6587\u4ef6\uff0c\u540c\u65f6\u66f4\u65b0 Pipfile.lock \u6587\u4ef6\uff0c\u8bb0\u5f55\u5b89\u88c5\u7684\u7248\u672c\u548c\u5bf9\u5e94 HASH \u503c\u3002","title":"2.4 Pipenv (\u63a8\u8350\u4f7f\u7528)"},{"location":"introduction/virtualenv/#25-poetry","text":"Poetry \u662f\u540e\u671f\u4e4b\u79c0\uff0c\u5b83\u7684\u96c4\u5fc3\u4e0d\u4ec5\u4ec5\u662f\u505a Pipenv \u7684\u4e8b\uff0c\u5b83\u8fd8\u60f3\u628a Python \u7684\u6253\u5305\u7ba1\u7406\u4e00\u5e76\u505a\u4e86\uff0c\u5e76\u6d88\u9664 setup.py \u6587\u4ef6\u3002\u5b83\u4f7f\u7528\u57fa\u4e8e PEP517 \u89c4\u8303\u7684 pyproject.toml \u6587\u4ef6\u8bb0\u5f55\u4fe1\u606f\uff0c\u5e76\u6253\u5305\u3002 \u5177\u4f53\u5185\u5bb9\u53ef\u4ee5\u53c2\u8003 PEP 517 -- A build-system independent format for source trees \u3002 \u5f53\u524d\u57fa\u4e8e PEP517 \u7684\u6784\u5efa\u6a21\u5f0f\u5df2\u7ecf\u5b8c\u5168\u53ef\u7528\u3002\u5728 pip \u7684\u53d1\u884c\u8bb0\u5f55\u4e2d\uff0c\u6700\u65e9\u662f\u5728 18.1 (2018-10-05) \u5c31\u5f15\u5165\u4e86 PEP517 \u7684 0.2 \u7248\u672c\u3002 \u5728\u4f7f\u7528\u4e0a\uff0cPoetry \u7ed9\u4eba\u7684\u611f\u89c9\u66f4\u73b0\u4ee3\u5316\u3002 \u5b89\u88c5\uff1a pip install poetry \u4f7f\u7528\uff1a # \u4f7f\u7528\u524d\u9700\u8981\u5148\u521d\u59cb\u5316\u9879\u76ee\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u751f\u6210 `pyproject.toml` \u6587\u4ef6 poetry init # \u5b89\u88c5\u4f9d\u8d56 poetry add tox # \u8fdb\u5165\u865a\u62df\u73af\u5883 poetry shell # \u6784\u5efa\u9879\u76ee poetry build # \u53d1\u5e03\u9879\u76ee poetry publish","title":"2.5 Poetry"},{"location":"introduction/virtualenv/#3-pipenv","text":"\u4f17\u591a\u7684\u865a\u62df\u73af\u5883\uff0c\u548c\u5bf9\u5e94\u7684\u5de5\u5177\uff0c\u5728\u9009\u62e9\u65f6\u96be\u514d\u6709\u70b9\u56f0\u60d1\uff0c\u8981\u9009\u62e9\u4e00\u4e2a\u597d\u7528\u7684\u5de5\u5177\uff0c\u6700\u4f73\u9014\u5f84\u5c31\u662f\u81ea\u5df1\u90fd\u5c1d\u8bd5\u4e00\u904d\u3002 \u4e0a\u8ff0\u51e0\u4e2a\u4e3b\u6d41\u865a\u62df\u73af\u5883\u5de5\u5177\u9664\u4e86 venv \u662f\u5185\u7f6e\u5e93\uff0c\u5176\u4ed6\u51e0\u4e2a\u90fd\u662f\u57fa\u4e8e Virtualenv \u518d\u6b21\u5f00\u53d1\uff0c\u5e76\u63d0\u4f9b\u4e86\u5176\u4ed6\u529f\u80fd\u3002\u4f46\u662f Virtualenv \u6ca1\u6709\u63d0\u4f9b\u4f9d\u8d56\u68c0\u6d4b\u7684\u529f\u80fd\uff0c\u800c\u4e14\u4f9d\u8d56\u5305\u7684\u7ba1\u7406\u8fd8\u662f\u9700\u8981\u4f7f\u7528 pip \u547d\u4ee4\uff0c\u4f9d\u8d56\u9879\u9700\u8981\u901a\u8fc7 requirements.txt \u3002 \u5f53\u4f60\u9700\u8981\u7ba1\u7406\u4e0d\u540c\u5f00\u53d1\u73af\u5883\u4e0b\u7684\u4f9d\u8d56\u65f6\uff0c\u5c31\u9700\u8981\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a requirements.txt \u3002\u4f8b\u5982 requirements-devlopment.txt \uff0c requirements-production.txt \u6216\u8fd9 requirements-test.txt \u3002 Poetry \u662f\u770b\u8d77\u6765\u66f4\u9177\u7684\u5de5\u5177\uff0c\u65e0\u8bba\u662f\u4ea4\u4e92\u7684\u8f93\u51fa\uff0c\u8fd8\u662f\u5b83\u57fa\u4e8e PEP517 \u7684\u7279\u6027\u3002\u4f46\u5b83\u6bd5\u7adf\u8fd8\u592a\u8fc7\u4e8e\u5e74\u8f7b\uff0c\u5b58\u5728\u4e00\u4e9b\u4e0d\u7a33\u5b9a\u6027\uff0c\u6bd4\u5982\u6709\u65f6\u547d\u4ee4\u9519\u8bef\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u9519\u8bef\u5806\u6808\u4fe1\u606f\u3002\u53e6\u5916\u73b0\u5728\u7684 PEP517 \u89c4\u8303\u8fd8\u6ca1\u5728\u793e\u533a\u5927\u89c4\u6a21\u4f7f\u7528\uff0c\u751a\u81f3\u6709\u76f8\u5f53\u4e8e\u4e00\u90e8\u5206\u4eba\u8fd8\u6ca1\u63a5\u89e6\u5230\u5b83\uff0c\u5927\u5bb6\u8fd8\u662f\u719f\u6089\u901a\u8fc7 setup.py \u6216 setup.cfg \u7f16\u5199\u9879\u76ee\u5c31\u914d\u7f6e\uff0c\u7136\u540e\u901a\u8fc7 setup \u547d\u4ee4\u6784\u5efa\u6253\u5305\u3002 \u7efc\u5408\u6765\u770b Pipenv \u5c31\u663e\u5f97\u66f4\u52a0\u5408\u9002\uff0c\u652f\u6301\u591a\u79cd\u73af\u5883\u7ba1\u7406\uff0c\u63d0\u4f9b\u4f9d\u8d56\u5173\u7cfb\u6821\u9a8c\uff0c\u548c\u4f9d\u8d56\u7684 lock \u6587\u4ef6\uff0c\u4e5f\u6709\u81ea\u52a8\u7ba1\u7406\u4f9d\u8d56\u7684\u64cd\u4f5c\u3002 \u4e0b\u9762\u4ee5\u4e00\u4e2a\u9879\u76ee\u7684\u751f\u547d\u5468\u671f\u63cf\u8ff0\u5982\u4f55\u66f4\u597d\u7684\u4f7f\u7528 Pipenv \u3002","title":"3. \u865a\u62df\u73af\u5883\u5b9e\u8df5(Pipenv)"},{"location":"introduction/virtualenv/#31","text":"\u521d\u59cb\u5316\u9879\u76ee\u540e\uff0c\u4f7f\u7528 Pipenv \u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u5f53\u524d\u9879\u76ee\u7684\u865a\u62df\u73af\u5883\u3002\u5982\u679c\u662f Pycharm \uff0c\u53ef\u4ee5\u76f4\u63a5\u9009\u62e9\u4f7f\u7528 Pipenv \u521b\u5efa\u3002 pipenv install","title":"3.1 \u521d\u59cb\u5316\u9879\u76ee"},{"location":"introduction/virtualenv/#32","text":"\u5f53\u9700\u8981\u533a\u5206\u5f00\u53d1\u73af\u5883\u548c\u666e\u901a\u73af\u5883\u65f6\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 install -d \u9009\u9879\u5b89\u88c5\u5f00\u53d1\u73af\u5883\u4f9d\u8d56 pipenv install -d pytest tox \u4e00\u822c\u7684\u4f9d\u8d56\u76f4\u63a5\u5b89\u88c5\u5373\u53ef\u3002 pipenv install django requests scrapy sqlalchemy","title":"3.2 \u5b89\u88c5\u9879\u76ee\u4f9d\u8d56"},{"location":"introduction/virtualenv/#33","text":"\u5f53\u9700\u8981\u4ece\u73af\u5883\u4e2d\u6e05\u9664\u4e0d\u5728\u9700\u8981\u7684\u4f9d\u8d56\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u5378\u8f7d pipenv uninstall scrapy \u6216\u8005\u76f4\u63a5\u4fee\u6539 Pipfile \u6587\u4ef6\uff0c\u5220\u9664\u4e0d\u518d\u9700\u8981\u7684\u5185\u5bb9\uff0c\u7136\u540e\u901a\u8fc7 pipenv lock \u751f\u6210 Pipfile.lock \u6587\u4ef6\u3002 \u5982\u679c\u73af\u5883\u4e2d\u8fd8\u5b58\u5728\u5176\u4ed6\u5b89\u88c5\u8fc7\u7684\u5305\uff0c\u53ef\u4ee5\u901a\u8fc7 pipenv clean \u81ea\u52a8\u6e05\u7406\u4e0d\u5728 Pipfile \u4e2d\u7684\u4f9d\u8d56\u5305\u3002","title":"3.3 \u6e05\u7406\u4f9d\u8d56"},{"location":"introduction/virtualenv/#34","text":"\u5728\u90e8\u7f72\u65f6\uff0c\u5f3a\u70c8\u63a8\u8350\u4f7f\u7528 pipenv sync \u5b89\u88c5\u5728 Pipfile.lock \u6587\u4ef6\u4e2d\u4f9d\u8d56\u5305\u3002","title":"3.4 \u90e8\u7f72"},{"location":"introduction/virtualenv/#35-requirementstxt","text":"\u4f7f\u7528 pipenv lock -r \u53ef\u4ee5\u770b\u5230\u6240\u6709\u4f9d\u8d56\u5217\u8868\u3002 # \u67e5\u770b\u6240\u6709\u4f9d\u8d56 pipenv lock -r # \u4ec5\u6240\u6709\u5f00\u53d1\u4f9d\u8d56 pipenv lock -r --dev-only \u5f53\u9700\u8981\u4fdd\u5b58\u6210\u6587\u4ef6\u76f4\u63a5\u4f7f\u7528\u91cd\u5b9a\u5411\u7b26\u53f7\u5373\u53ef > pipenv lock -r > requirements.txt pipenv lock -r --dev-only > requirements.txt","title":"3.5 \u751f\u6210 requirements.txt"},{"location":"introduction/virtualenv/#36-lock","text":"\u5b89\u88c5\u4f9d\u8d56\u65f6\u4f1a\u751f\u6210\u4e00\u4e2a Pipfile.lock \u7684\u6587\u4ef6\uff0c\u7528\u4e8e\u8bb0\u5f55\u4f7f\u7528\u7684\u6700\u7ec8\u7248\u548c\u548c\u8be5\u7248\u672c\u7684 HASH \uff0c\u8fd9\u4e5f\u662f\u4fdd\u8bc1\u5b89\u5168\u3002 \u6709\u65f6\u53ef\u80fd\u56e0\u4e3a\u7f51\u7edc\u95ee\u9898\uff0c\u5728\u751f\u6210 Pipfile.lock \u7684\u901f\u5ea6\u5f88\u6162\u3002\u53ef\u4ee5\u4f7f\u7528 --skip-lock \u547d\u4ee4\u8df3\u8fc7\u3002 pipenv install django --skip-lock \u4f46\u5728\u53d1\u5e03\u524d\uff0c\u5efa\u8bae\u8fd8\u662f\u8981\u751f\u6210 Pipfile.lock \u3002\u5982\u679c\u771f\u7684\u4e0d\u9700\u8981\uff0c\u76f4\u63a5\u5c06 Pipfile.lock \u6392\u9664\u5728\u7248\u672c\u7ba1\u7406\u4e4b\u5916\u5c31\u884c\u5566\u3002 \u5982\u679c\u4f60\u7684\u662f Conda \u73af\u5883\uff0c\u8bf7\u4f7f\u7528 20.0.34 \u4e4b\u524d\u7684 Virtualenv \u3002\u5177\u4f53\u8bf7\u53c2\u8003 virtualenv==20.0.34 not compatible with python on windows #12094 \u548c conda support - Windows 3.7+ #1986 \u3002\u5982\u679c\u8fd9\u4e2a\u95ee\u9898\u5df2\u7ecf\u4fee\u590d\uff0c\u8bf7\u5ffd\u7565\u3002 \u21a9","title":"3.6 Lock \u5361\u4f4f\u4e86"},{"location":"practices/web/","text":"\u5feb\u901f\u4e0a\u624b \u8fd9\u662f\u4e00\u4e2a\u5feb\u901f\u4e0a\u624b\u7684\u793a\u4f8b\u9879\u76ee\uff0c\u65e8\u5728\u901a\u8fc7\u4e00\u4e2a\u5c3d\u53ef\u80fd\u5305\u542b\u4e3b\u8981\u77e5\u8bc6\u70b9\u7684\u7b80\u5355\u9879\u76ee\uff0c\u6765\u5411\u4f7f\u7528\u8005\u5c55\u793a\u4e00\u4e2a\u66f4 Python \u5316\u7684\u9879\u76ee\u5f00\u53d1\u6d41\u7a0b\u3002 \u793a\u4f8b\u9879\u76ee\u662f\u4e00\u4e2a\u4f7f\u7528\u5f02\u6b65\u5fae Web \u6846\u67b6 Fastapi \u5f00\u53d1\u7684\u535a\u5ba2\u7cfb\u7edf\u3002\u9879\u76ee\u4e1a\u52a1\u529f\u80fd\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u5b8c\u6574\u4f53\u73b0\u4e86\u4e00\u4e2a\u9879\u76ee\u4ece\u73af\u5883\u642d\u5efa\uff0c\u5230\u5f00\u53d1\uff0c\u6700\u540e\u6d4b\u8bd5\u53d1\u5e03\u7684\u5b8c\u6574\u6d41\u7a0b\u3002 1. \u5f00\u53d1\u73af\u5883\u642d\u5efa 1.1 Python \u73af\u5883 \u9274\u4e8e\u5b98\u65b9\u5df2\u7ecf\u505c\u6b62\u5bf9 Python 2 \u7684\u652f\u6301 1 \uff0c\u6211\u4eec\u4e0d\u63a8\u8350\u518d\u4f7f\u7528 Python 2 \u8fdb\u884c\u5f00\u53d1\u3002\u6839\u636e\u5f53\u524d Python \u7248\u672c\u4f7f\u7528\u60c5\u51b5\uff0c\u63a8\u8350\u4f7f\u7528 Python 3.7+ \u3002 \u5177\u4f53\u7684\u7248\u672c\u7684 Python \u73af\u5883\u53ef\u4ee5\u5728 \u5b98\u7f51 \u4e0b\u8f7d\u3002\u4e3a\u4e86\u4f7f\u7528\u4fbf\u5229\u6027\uff0c\u53ef\u4ee5\u9009\u62e9 Anaconda 2 \u3002 1.2 \u5f00\u53d1\u5de5\u5177 \u63a8\u8350\u4f7f\u7528 Pycharm \u4f5c\u4e3a\u4e3b\u8981\u5f00\u53d1\u5de5\u5177\uff0c\u53ef\u4ee5\u9009\u62e9\u793e\u533a\u7248\u672c\u514d\u8d39\u4f7f\u7528\u3002 Visual Studio Code \u662f\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u6b3e\u514d\u8d39\u8f7b\u91cf\u6587\u672c\u7f16\u8f91\u5668\uff0c\u901a\u8fc7\u5b89\u88c5\u63d2\u4ef6\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6210\u4e00\u6b3e\u529f\u80fd\u5f3a\u5927\u7684 IDE \u3002\u5728\u5bf9 Python \u7684\u652f\u6301\u4e0a\uff0c\u5df2\u7ecf\u6709\u4e86\u8f83\u4e3a\u5b8c\u5584\u7684\u63d2\u4ef6\u4f53\u7cfb\uff0c\u6b64\u65b9\u6848\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5907\u7528\u3002 1.3 \u865a\u62df\u73af\u5883\u5de5\u5177 \u63a8\u8350\u4f7f\u7528 pipenv \u3002Pipenv \u76f8\u6bd4\u4f7f\u7528 requirements.txt \u7ba1\u7406\u4f9d\u8d56\u5217\u8868\uff0c\u66f4\u52a0\u5f3a\u5927\u3002\u5b83\u652f\u6301\u540c\u65f6\u7ba1\u7406\u5f00\u53d1\u751f\u4ea7\u73af\u5883\u4f9d\u8d56\uff0c\u81ea\u52a8\u67e5\u627e\u865a\u62df\u73af\u5883\uff0c\u751f\u6210\u4f9d\u8d56\u9501\u5b9a\u6587\u4ef6\u7b49\u5176\u4ed6\u7279\u6027\u3002 \u5728\u5b89\u88c5\u597d Python \u73af\u5883\u540e\uff0c\u5e94\u8be5\u5728\u5168\u5c40\u73af\u5883\u4e2d\u5b89\u88c5 pipenv \u3002 1.4 Git \u4f7f\u7528 \u63a8\u8350\u4f7f\u7528 Git \u5bf9\u9879\u76ee\u8fdb\u884c\u7248\u672c\u7ba1\u7406\u3002\u6240\u4ee5\u9700\u8981\u63d0\u524d\u5b89\u88c5 Git \uff0c\u5e76\u719f\u6089\u5e38\u7528 Git \u7684\u6982\u5ff5\u548c\u5e38\u7528 Git \u547d\u4ee4\u3002 2. \u9879\u76ee\u521d\u59cb\u5316 2.1 \u521d\u59cb\u5316\u9879\u76ee\u7ed3\u6784 \u9879\u76ee\u7ed3\u6784\u91c7\u7528 src \u76ee\u5f55\u7ed3\u6784\uff0c\u8be6\u89c1 pypa/sampleproject \u3002 \u521b\u5efa\u9879\u76ee\u76ee\u5f55\u7ed3\u6784\uff1a . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 example_blog \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tests \u2514\u2500\u2500 __init__.py \u521d\u59cb\u5316\u9879\u76ee\u865a\u62df\u73af\u5883\uff1a pipenv install \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u9879\u76ee\u76ee\u5f55\u4f1a\u81ea\u52a8\u751f\u6210 Pipfile \u548c Pipfile.lock \u4e24\u4e2a\u6587\u4ef6\u3002 2.2 \u521d\u59cb\u5316\u9879\u76ee\u57fa\u672c\u4fe1\u606f \u7f16\u8f91 setup.py \u6587\u4ef6\uff1a import setuptools setuptools . setup () \u7f16\u8f91 setup.cfg \u6587\u4ef6\uff0c\u914d\u7f6e\u9879\u76ee\u63cf\u8ff0\u4fe1\u606f\uff1a [metadata] name = example_blog version = attr: example_blog.__version__ author = huagang author_email = huagang517@126.com description = This is example blog system. keywords = blog example long_description = file: README.md long_description_content_type = text/markdown classifiers = Operating System :: OS Independent Programming Language :: Python :: 3.7 [options] python_requires > = 3.7 include_package_data = True packages = find: package_dir = = src install_requires = [options.packages.find] where = src \u7f16\u8f91 src/example_blog/__init__.py \uff0c\u521b\u5efa\u521d\u59cb\u7248\u672c\u53f7\uff1a __version__ = '0.1.0' 2.3 \u589e\u52a0\u9879\u76ee\u81ea\u8ff0\u6587\u4ef6 \u7f16\u5199 README.md \u6587\u4ef6 # \u4e00\u4e2a\u7b80\u5355\u535a\u5ba2\u7cfb\u7edf\u793a\u4f8b. \u6b64\u9879\u76ee\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u535a\u5ba2\u7cfb\u7edf\uff0c\u63d0\u4f9b\u4e00\u4e9b\u7528\u6237\u7ba1\u7406\u548c\u535a\u5ba2\u6587\u7ae0\u7ba1\u7406\u3002\u76ee\u7684\u662f\u6f14\u793a\u5982\u4f55\u505a\u4e00\u4e2a\u66f4\u52a0 Pythonic \u7684\u9879\u76ee\u3002 \u5982\u679c\u60a8\u6709\u4efb\u4f55\u610f\u89c1\u548c\u5efa\u8bae\uff0c\u6b22\u8fce\u5f00\u542f ISSUE \u53d1\u8d77\u8ba8\u8bba\u3002\u671f\u5f85\u4e0e\u60a8\u6253\u9020\u66f4\u52a0\u5b8c\u7f8e\u7684 Python \u793a\u4f8b\u3002 ## \u534f\u4f5c\u5f00\u53d1 - Fork \u4ed3\u5e93 - \u7f16\u5199\u4ee3\u7801\uff0c\u6d4b\u8bd5\uff0c\u63d0\u4ea4 - \u53d1\u8d77 PR - \u5ba1\u6838\u901a\u8fc7\u540e\u5408\u5e76\uff0c\u534f\u4f5c\u5b8c\u6210 2.4 \u589e\u52a0 .gitignore # Created by .ignore support plugin (hsz.mobi) ### Python template # Byte-compiled / optimized / DLL files __pycache__/ *.py[cod] *$py.class # C extensions *.so # Distribution / packaging .Python build/ develop-eggs/ dist/ downloads/ eggs/ .eggs/ lib/ lib64/ parts/ sdist/ var/ wheels/ pip-wheel-metadata/ share/python-wheels/ *.egg-info/ .installed.cfg *.egg MANIFEST # PyInstaller # Usually these files are written by a python script from a template # before PyInstaller builds the exe, so as to inject date/other infos into it. *.manifest *.spec # Installer logs pip-log.txt pip-delete-this-directory.txt # Unit test / coverage reports htmlcov/ .tox/ .nox/ .coverage .coverage.* .cache nosetests.xml coverage.xml *.cover *.py,cover .hypothesis/ .pytest_cache/ cover/ # Translations *.mo *.pot # Django stuff: *.log local_settings.py db.sqlite3 db.sqlite3-journal # Flask stuff: instance/ .webassets-cache # Scrapy stuff: .scrapy # Sphinx documentation docs/_build/ # PyBuilder .pybuilder/ target/ # Jupyter Notebook .ipynb_checkpoints # IPython profile_default/ ipython_config.py # pyenv # For a library or package, you might want to ignore these files since the code is # intended to run in multiple environments; otherwise, check them in: # .python-version # pipenv # According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control. # However, in case of collaboration, if having platform-specific dependencies or dependencies # having no cross-platform support, pipenv may install dependencies that don't work, or not # install all needed dependencies. #Pipfile.lock # PEP 582; used by e.g. github.com/David-OConnor/pyflow __pypackages__/ # Celery stuff celerybeat-schedule celerybeat.pid # SageMath parsed files *.sage.py # Environments .env .venv env/ venv/ ENV/ env.bak/ venv.bak/ # Spyder project settings .spyderproject .spyproject # Rope project settings .ropeproject # mkdocs documentation /site # mypy .mypy_cache/ .dmypy.json dmypy.json # Pyre type checker .pyre/ # pytype static type analyzer .pytype/ # Cython debug symbols cython_debug/ ### Windows template # Windows thumbnail cache files Thumbs.db Thumbs.db:encryptable ehthumbs.db ehthumbs_vista.db # Dump file *.stackdump # Folder config file [Dd]esktop.ini # Recycle Bin used on file shares $RECYCLE.BIN/ # Windows Installer files *.cab *.msi *.msix *.msm *.msp # Windows shortcuts *.lnk ### Linux template *~ # temporary files which can be created if a process still has a handle open of a deleted file .fuse_hidden* # KDE directory preferences .directory # Linux trash folder which might appear on any partition or disk .Trash-* # .nfs files are created when an open file is removed but is still being accessed .nfs* ### macOS template # General .DS_Store .AppleDouble .LSOverride # Icon must end with two \\r Icon # Thumbnails ._* # Files that might appear in the root of a volume .DocumentRevisions-V100 .fseventsd .Spotlight-V100 .TemporaryItems .Trashes .VolumeIcon.icns .com.apple.timemachine.donotpresent # Directories potentially created on remote AFP share .AppleDB .AppleDesktop Network Trash Folder Temporary Items .apdisk .vscode .idea 2.6 \u521d\u59cb Git \u63d0\u4ea4 git init git config user.name example git config user.email example@example.com git add . git commit -m \"feat: First commit!\" 2.5 \u5b89\u88c5\u5f00\u53d1\u5305 \u5c06\u9879\u76ee\u4ee5\u7f16\u8f91\u65b9\u5f0f\u5b89\u88c5\u5230\u73af\u5883\u4e2d\uff1a pip install -e . \u6ce8\u610f \u8fd9\u91cc\u4e0d\u8981\u4f7f\u7528 pipenv \u547d\u4ee4\uff0c\u5426\u5219\u4f1a\u5199\u5165 Pipfile \u3002 3. \u9879\u76ee\u529f\u80fd\u5f00\u53d1 3.1 \u521b\u5efa\u547d\u4ee4\u884c\u5165\u53e3 \u547d\u4ee4\u884c\u5165\u53e3\u662f\u542f\u52a8\u9879\u76ee\u7684\u4e3b\u5165\u53e3\uff0c\u5e38\u89c1\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u4e00\u4e2a __main__ \u51fd\u6570\uff0c\u8c03\u7528\u542f\u52a8\u4ee3\u7801\uff0c\u7136\u540e\u4f7f\u7528 python \u547d\u4ee4\u542f\u52a8\u8be5\u6587\u4ef6\u3002\u4f46\u5bf9\u4e8e\u591a\u7ea7\u547d\u4ee4\u53c2\u6570\u7684\u60c5\u51b5\u5c31\u6bd4\u8f83\u9ebb\u70e6\uff0c\u63a8\u8350\u4f7f\u7528 click \u5de5\u5177\u7f16\u5199\u5165\u53e3\u903b\u8f91\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install click \u7f16\u8f91 setup.cfg \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a install_requires = click \u521b\u5efa src/example_blog/cmdline.py \u6587\u4ef6\uff1a @click . group ( invoke_without_command = True ) @click . pass_context @click . option ( '-V' , '--version' , is_flag = True , help = 'Show version and exit.' ) def main ( ctx , version ): if version : click . echo ( __version__ ) elif ctx . invoked_subcommand is None : click . echo ( ctx . get_help ()) \u7f16\u8f91 setup.cfg \uff0c\u5c06\u547d\u4ee4\u884c\u5165\u53e3\u6ce8\u518c\u5230\u9879\u76ee\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff1a [options.entry_points] console_scripts = example_blog = example_blog.cmdline:main \u91cd\u65b0\u5b89\u88c5\u9879\u76ee\uff1a pip install -e . \u6d4b\u8bd5\u547d\u4ee4\u662f\u5426\u751f\u6548\uff1a example_blog -V \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Add commline.\" 3.2 \u5f15\u5165\u9879\u76ee\u914d\u7f6e\u7cfb\u7edf \u9879\u76ee\u7684\u914d\u7f6e\u7cfb\u7edf\u662f\u4e00\u4e2a\u9879\u76ee\u7684\u6838\u5fc3\u9a71\u52a8\uff0c\u4f7f\u7528\u914d\u7f6e\u7cfb\u7edf\u4fbf\u4e8e\u7ba1\u7406\u6563\u843d\u5728\u5404\u5904\u7684\u914d\u7f6e\u53c2\u6570\uff0c\u4e5f\u65b9\u4fbf\u5728\u542f\u52a8\u524d\u901a\u8fc7\u8c03\u6574\u914d\u7f6e\uff0c\u6539\u53d8\u7cfb\u7edf\u884c\u4e3a\u3002 Dynaconf \u662f\u4e00\u4e2a\u9ad8\u5ea6\u7075\u6d3b\u7684\u914d\u7f6e\u7ba1\u7406\u5de5\u5177\uff0c\u652f\u6301\u591a\u73af\u5883\u5206\u5c42\uff0c\u591a\u79cd\u914d\u7f6e\u5bfc\u5165\u7b49\u6709\u70b9\u3002\u5728\u9879\u76ee\u5f00\u53d1\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528\u5982\u4e0b\u5b9e\u8df5\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install dynaconf \u7f16\u8f91 setup.cfg \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a install_requires = click dynaconf \u5efa\u7acb\u914d\u7f6e\u5305\uff0c\u548c\u914d\u7f6e\u6587\u4ef6\uff1a mkdir src/example_blog/config touch src/example_blog/config/__init__.py touch src/example_blog/config/settings.yml \u7f16\u8f91 src/example_blog/config/__init__.py \uff0c \u521d\u59cb\u5316\u5168\u5c40\u914d\u7f6e\u5bf9\u8c61\uff1a import os import sys from pathlib import Path from dynaconf import Dynaconf _BASE_DIR = Path ( __file__ ) . parent . parent settings_files = [ Path ( __file__ ) . parent / 'settings.yml' , ] # \u6307\u5b9a\u7edd\u5bf9\u8def\u5f84\u52a0\u8f7d\u9ed8\u8ba4\u914d\u7f6e settings = Dynaconf ( envvar_prefix = \"EXAMPLE_BLOG\" , # \u73af\u5883\u53d8\u91cf\u524d\u7f00\u3002\u8bbe\u7f6e`EXAMPLE_BLOG_FOO='bar'`\uff0c\u4f7f\u7528`settings.FOO` settings_files = settings_files , environments = False , # \u542f\u7528\u591a\u5c42\u6b21\u65e5\u5fd7\uff0c\u652f\u6301 dev, pro load_dotenv = True , # \u52a0\u8f7d .env env_switcher = \"EXAMPLE_BLOG_ENV\" , # \u7528\u4e8e\u5207\u6362\u6a21\u5f0f\u7684\u73af\u5883\u53d8\u91cf\u540d\u79f0 EXAMPLE_BLOG_ENV=production lowercase_read = False , # \u7981\u7528\u5c0f\u5199\u8bbf\u95ee\uff0c settings.name \u662f\u4e0d\u5141\u8bb8\u7684 includes = [ os . path . join ( sys . prefix , 'etc' , 'example_blog' , 'settings.yml' )], # \u81ea\u5b9a\u4e49\u914d\u7f6e\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e base_dir = _BASE_DIR , # \u7f16\u7801\u4f20\u5165\u914d\u7f6e ) \u7f16\u8f91 src/example_blog/config/settings.yml \uff0c\u521d\u59cb\u5316\u914d\u7f6e\uff1a LOG_LEVEL : INFO \u7f16\u8f91 src/example_blog/config/settings.local.yml \uff0c\u589e\u52a0\u672c\u5730\u5f00\u53d1\u914d\u7f6e\uff1a LOG_LEVEL : DEBUG \u6839\u636e Dynaconf \u89c4\u5219\uff0c settings.local.yml \u7684\u914d\u7f6e\u4e3a\u672c\u5730\u914d\u7f6e\uff0c\u4e14\u4f18\u5148\u7ea7\u6bd4 settings.yml \u4f4e\uff0c\u6240\u4ee5\u672c\u5730\u914d\u7f6e\u4f1a\u5728\u540e\u9762\u52a0\u8f7d\uff0c\u8986\u76d6\u4e4b\u524d\u7684\u914d\u7f6e\u3002 \u7f16\u8f91 .gitignore \uff0c\u5c06\u6240\u6709\u672c\u5730\u914d\u7f6e\u6392\u9664\u7248\u672c\u63a7\u5236\u4e4b\u5916\u3002 **/settings.local.yml \u7f16\u8f91 setup.cfg \uff0c\u5c06\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u6253\u5305\u8303\u56f4\u4e4b\u5185\uff1a [options.package_data] example_blog.config = settings.yml \u7f16\u8f91 setup.cfg \uff0c\u589e\u52a0\u5916\u90e8\u914d\u7f6e\u8def\u5f84\uff1a [options.data_files] etc/example_blog = src/example_blog/config/settings.yml \u6ce8\u610f\uff1a data_files \u4e2d\u7684\u76f8\u5bf9\u8def\u5f84\u4f1a\u5199\u5165\u5230 sys.prefix \u4f4d\u7f6e\u4e0b\u3002\u5f53\u5b89\u88c5\u540e\uff0c\u4f1a\u5728\u8be5\u76ee\u5f55\u4e0b\u751f\u6210 etc/example_blog/settings.yml \u7684\u914d\u7f6e\u6587\u4ef6\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u8be5\u6587\u4ef6\u9a71\u52a8\u9879\u76ee\u914d\u7f6e\u3002\u6b64\u6587\u4ef6\u5c5e\u4e8e\u7528\u6237\u7ea7\u522b\u914d\u7f6e\u3002\u4f1a\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e\u3002 \u63d0\u4ea4\u4ee3\u7801\u3002 git add . git commit -m \"feat: Add config.\" 3.3 \u5f15\u5165\u65e5\u5fd7 \u521b\u5efa src/example_blog/log.py \uff0c\u521d\u59cb\u5316 log \uff1a from logging.config import dictConfig from example_blog.config import settings def init_log (): log_config = { 'version' : 1 , 'disable_existing_loggers' : False , 'formatters' : { 'sample' : { 'format' : ' %(asctime)s %(levelname)s %(message)s ' }, 'verbose' : { 'format' : ' %(asctime)s %(levelname)s %(name)s %(process)d %(thread)d %(message)s ' }, \"access\" : { \"()\" : \"uvicorn.logging.AccessFormatter\" , \"fmt\" : ' %(asctime)s %(levelprefix)s %(client_addr)s - \" %(request_line)s \" %(status_code)s ' , }, }, 'handlers' : { \"console\" : { \"formatter\" : 'verbose' , 'level' : 'DEBUG' , \"class\" : \"logging.StreamHandler\" , }, }, 'loggers' : { '' : { 'level' : settings . LOG_LEVEL , 'handlers' : [ 'console' ]}, }, } dictConfig ( log_config ) \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Add log\" 3.4 \u6570\u636e\u8bbf\u95ee \u6570\u636e\u5c42\u662f\u5e94\u7528\u7684\u6700\u5e95\u5c42\uff0c\u548c\u6570\u636e\u5b58\u50a8\u6253\u4ea4\u9053\u3002\u4f7f\u7528 sqlalchemy \u4f5c\u5e95\u5c42\u6570\u636e\u6a21\u578b\u5efa\u6a21\u548c\u6570\u636e\u8bbf\u95ee\u64cd\u4f5c\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install sqlalchemy mysqlclient \u7f16\u8f91 setup.cfg \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a install_requires = click dynaconf sqlalchemy mysqlclient \u7f16\u5199 src/example_blog/config/settings.yml \uff0c\u589e\u52a0\u6570\u636e\u5e93\u914d\u7f6e\u4fe1\u606f\uff1a # ###################################################################################################### # # https://docs.sqlalchemy.org/en/13/core/engines.html DATABASE : DRIVER : mysql NAME : example_blog HOST : 127.0.0.1 PORT : 3306 USERNAME : root PASSWORD : root QUERY : charset : utf8mb4 \u8b66\u544a settings.yml \u4e3a\u7cfb\u7edf\u9ed8\u8ba4\u914d\u7f6e\uff0c\u4f1a\u88ab git \u8ffd\u8e2a\u7ba1\u7406\uff0c\u4e0d\u8981\u586b\u5199\u771f\u6b63\u7684\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f\u3002\u771f\u5b9e\u914d\u7f6e\u4fe1\u606f\u53ef\u4ee5\u5199\u5728 settings.local.yml \u6587\u4ef6\u4e2d\uff0c\u4f1a\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e\u3002 \u65b0\u5efa src/example_blog/db.py \uff0c\u521b\u5efa sqlalchemy \u8bbf\u95ee\u5bf9\u8c61\uff1a \"\"\"Database connections\"\"\" from sqlalchemy.engine import create_engine from sqlalchemy.engine.base import Engine from sqlalchemy.engine.url import URL from sqlalchemy.orm import scoped_session , sessionmaker from example_blog.config import settings url = URL ( drivername = settings . DATABASE . DRIVER , username = settings . DATABASE . get ( 'USERNAME' , None ), password = settings . DATABASE . get ( 'PASSWORD' , None ), host = settings . DATABASE . get ( 'HOST' , None ), port = settings . DATABASE . get ( 'PORT' , None ), database = settings . DATABASE . get ( 'NAME' , None ), query = settings . DATABASE . get ( 'QUERY' , None ), ) engine : Engine = create_engine ( url , echo = True ) SessionFactory = sessionmaker ( bind = engine , autocommit = False , autoflush = True ) ScopedSession = scoped_session ( SessionFactory ) \u521b\u5efa src/example_blog/models.py \uff0c\u521b\u5efa\u6570\u636e\u6a21\u578b\uff1a \"\"\"Models\"\"\" from datetime import datetime from sqlalchemy import Column , DateTime , Integer , String , Text from sqlalchemy.ext.declarative import declarative_base , declared_attr class CustomBase : \"\"\"https://docs.sqlalchemy.org/en/13/orm/extensions/declarative/mixins.html\"\"\" @declared_attr def __tablename__ ( cls ): return cls . __name__ . lower () __table_args__ = { 'mysql_engine' : 'InnoDB' , 'mysql_collate' : 'utf8mb4_general_ci' } id = Column ( Integer , primary_key = True , autoincrement = True ) BaseModel = declarative_base ( cls = CustomBase ) class Article ( BaseModel ): \"\"\"Article table\"\"\" title = Column ( String ( 500 )) body = Column ( Text (), nullable = True ) create_time = Column ( DateTime , default = datetime . now , nullable = False ) update_time = Column ( DateTime , default = datetime . now , onupdate = datetime . now , nullable = False ) \u4e3a\u4e86\u5728\u5e94\u7528\u4e2d\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u6570\u636e\u6a21\u578b\u5bf9\u8c61\uff0c\u5f15\u5165 pydantic \u6765\u5b9a\u4e49\u4e00\u4e9b\u5bf9\u8c61\u6a21\u578b\u7684\u57fa\u672c\u4fe1\u606f\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install pydantic \u7f16\u8f91 setup.cfg \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a install_requires = click dynaconf sqlalchemy mysqlclient pydantic \u521b\u5efa src/example_blog/schemas.py \uff0c\u521b\u5efa\u5bf9\u8c61\u6a21\u578b\uff1a from datetime import datetime from typing import Optional , TypeVar from pydantic import BaseModel , constr from example_blog.models import BaseModel as DBModel ModelType = TypeVar ( 'ModelType' , bound = DBModel ) CreateSchema = TypeVar ( 'CreateSchema' , bound = BaseModel ) UpdateSchema = TypeVar ( 'UpdateSchema' , bound = BaseModel ) class InDBMixin ( BaseModel ): id : int class Config : orm_mode = True class BaseArticle ( BaseModel ): title : constr ( max_length = 500 ) body : Optional [ str ] = None class ArticleSchema ( BaseArticle , InDBMixin ): create_time : datetime update_time : datetime class CreateArticleSchema ( BaseArticle ): pass class UpdateArticleSchema ( BaseArticle ): title : Optional [ constr ( max_length = 500 )] = None \u521b\u5efa src/example_blog/dao.py \uff0c\u521b\u5efa\u6570\u636e\u8bbf\u95ee\u5c42\uff1a from typing import Generic , List from fastapi.encoders import jsonable_encoder from sqlalchemy.orm import Session from example_blog.models import Article from example_blog.schemas import CreateSchema , ModelType , UpdateSchema , CreateArticleSchema , UpdateArticleSchema class BaseDAO ( Generic [ ModelType , CreateSchema , UpdateSchema ]): model : ModelType def get ( self , session : Session , offset = 0 , limit = 10 ) -> List [ ModelType ]: result = session . query ( self . model ) . offset ( offset ) . limit ( limit ) . all () return result def get_by_id ( self , session : Session , pk : int , ) -> ModelType : return session . query ( self . model ) . get ( pk ) def create ( self , session : Session , obj_in : CreateSchema ) -> ModelType : \"\"\"Create\"\"\" obj = self . model ( ** jsonable_encoder ( obj_in )) session . add ( obj ) session . commit () return obj def patch ( self , session : Session , pk : int , obj_in : UpdateSchema ) -> ModelType : \"\"\"Patch\"\"\" obj = self . get_by_id ( session , pk ) update_data = obj_in . dict ( exclude_unset = True ) for key , val in update_data . items (): setattr ( obj , key , val ) session . add ( obj ) session . commit () session . refresh ( obj ) return obj def delete ( self , session : Session , pk : int ) -> None : \"\"\"Delete\"\"\" obj = self . get_by_id ( session , pk ) session . delete ( obj ) session . commit () def count ( self , session : Session ): return session . query ( self . model ) . count () class ArticleDAO ( BaseDAO [ Article , CreateArticleSchema , UpdateArticleSchema ]): model = Article \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Add models and DAO\" 3.5 \u670d\u52a1\u5c42 \u521b\u5efa src/example_blog/services.py \uff0c\u521b\u5efa\u670d\u52a1\uff1a \"\"\"Service\"\"\" from typing import Generic , List from sqlalchemy.orm import Session from example_blog.dao import ArticleDAO , BaseDAO from example_blog.models import Article from example_blog.schemas import CreateSchema , ModelType , UpdateSchema class BaseService ( Generic [ ModelType , CreateSchema , UpdateSchema ]): dao : BaseDAO def get ( self , session : Session , offset = 0 , limit = 10 ) -> List [ ModelType ]: \"\"\"\"\"\" return self . dao . get ( session , offset = offset , limit = limit ) def total ( self , session : Session ) -> int : return self . dao . count ( session ) def get_by_id ( self , session : Session , pk : int ) -> ModelType : \"\"\"Get by id\"\"\" return self . dao . get_by_id ( session , pk ) def create ( self , session : Session , obj_in : CreateSchema ) -> ModelType : \"\"\"Create a object\"\"\" return self . dao . create ( session , obj_in ) def patch ( self , session : Session , pk : int , obj_in : UpdateSchema ) -> ModelType : \"\"\"Update\"\"\" return self . dao . patch ( session , pk , obj_in ) def delete ( self , session : Session , pk : int ) -> None : \"\"\"Delete a object\"\"\" return self . dao . delete ( session , pk ) class ArticleService ( BaseService [ Article , CreateSchema , UpdateSchema ]): dao = ArticleDAO () \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Add services.\" 3.6 \u5f15\u5165 Fastapi Fastapi \u662f\u4e00\u4e2a\u8f7b\u91cf\u7684 Web \u6846\u67b6\uff0c\u73b0\u5728\u5f15\u5165\uff0c\u4f7f\u5176\u4f5c\u4e3a API \u5c42 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install fastapi uvicorn \u7f16\u8f91 setup.cfg \uff0c\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a install_requires = click dynaconf sqlalchemy mysqlclient pydantic fastapi uvicorn \u521b\u5efa src/examp.e_blog/views.py \uff0c\u521b\u5efa\u89c6\u56fe\uff1a from fastapi import APIRouter , Depends from sqlalchemy.orm import Session from example_blog.dependencies import CommonQueryParams , get_db from example_blog.schemas import ( ArticleSchema , CreateArticleSchema , UpdateArticleSchema ) from example_blog.services import ArticleService router = APIRouter () _service = ArticleService () @router . get ( '/articles' ) def get ( session : Session = Depends ( get_db ), commons : CommonQueryParams = Depends () ): return _service . get ( session , offset = commons . offset , limit = commons . limit ) @router . get ( '/articles/ {pk} ' ) def get_by_id ( pk : int , session : Session = Depends ( get_db ) ): return _service . get_by_id ( session , pk ) @router . post ( '/articles' , response_model = ArticleSchema ) def create ( obj_in : CreateArticleSchema , session : Session = Depends ( get_db ), ): return _service . create ( session , obj_in ) @router . patch ( '/articles/ {pk} ' , response_model = ArticleSchema ) def patch ( pk : int , obj_in : UpdateArticleSchema , session : Session = Depends ( get_db ) ): return _service . patch ( session , pk , obj_in ) @router . delete ( '/articles/ {pk} ' ) def delete ( pk : int , session : Session = Depends ( get_db ) ): return _service . delete ( session , pk ) \u521b\u5efa src/example_blog/middlewares.py \uff0c\u521b\u5efa\u6570\u636e\u5e93\u4f1a\u8bdd\u4e2d\u95f4\u4ef6\uff1a from typing import Callable from fastapi import FastAPI , Request , Response from example_blog.db import SessionFactory async def db_session_middleware ( request : Request , call_next : Callable ) -> Response : response = Response ( 'Internal server error' , status_code = 500 ) try : request . state . db = SessionFactory () response = await call_next ( request ) finally : request . state . db . close () return response def init_middleware ( app : FastAPI ) -> None : app . middleware ( 'http' )( db_session_middleware ) \u521b\u5efa src/example_blog/dependencies.py \uff0c\u521b\u5efa Fastapi \u7684\u4f9d\u8d56\u9879\uff1a from fastapi import Request from sqlalchemy.orm import Session def get_db ( request : Request ) -> Session : return request . state . db class CommonQueryParams : def __init__ ( self , offset : int = 1 , limit : int = 10 ): self . offset = offset - 1 if self . offset < 0 : self . offset = 0 self . limit = limit if self . limit < 0 : self . limit = 10 \u521b\u5efa src/example_blog/routes.py \uff0c\u521b\u5efa\u8def\u7531\uff1a from fastapi import APIRouter , FastAPI from example_blog import views def router_v1 (): router = APIRouter () router . include_router ( views . router , tags = [ 'Article' ]) return router def init_routers ( app : FastAPI ): app . include_router ( router_v1 (), prefix = '/api/v1' , tags = [ 'v1' ]) \u521b\u5efa src/example_blog/server.py \uff0c\u521b\u5efa\u670d\u52a1\u542f\u52a8\u903b\u8f91\uff1a \"\"\"server\"\"\" import uvicorn from fastapi import FastAPI from example_blog import middlewares , routes from example_blog.config import settings from example_blog.log import init_log class Server : def __init__ ( self ): init_log () self . app = FastAPI () def init_app ( self ): middlewares . init_middleware ( self . app ) routes . init_routers ( self . app ) def run ( self ): self . init_app () uvicorn . run ( app = self . app , host = settings . HOST , port = settings . PORT , ) \u4fee\u6539 src/example_blog/config/settings.yml \uff0c\u589e\u52a0\u670d\u52a1\u914d\u7f6e\uff1a HOST: 127.0.0.1 PORT: 8000 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Add api service.\" 3.7 \u7f16\u5199\u542f\u52a8\u547d\u4ee4 \u7f16\u8f91 src/example_blog/cmdline.py \uff0c\u589e\u52a0\u542f\u52a8 Server \u903b\u8f91\uff1a @main . command () @click . option ( '-h' , '--host' , show_default = True , help = f 'Host IP. Default: { settings . HOST } ' ) @click . option ( '-p' , '--port' , show_default = True , type = int , help = f 'Port. Default: { settings . PORT } ' ) @click . option ( '--level' , help = 'Log level' ) def server ( host , port , level ): \"\"\"Start server.\"\"\" kwargs = { 'LOGLEVEL' : level , 'HOST' : host , 'PORT' : port , } for name , value in kwargs . items (): if value : settings . set ( name , value ) Server () . run () \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Add server cmdline.\" 3.8 \u542f\u52a8 Server \u547d\u4ee4\u884c\u8fd0\u884c\uff1a example_blog server \u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a INFO: Started server process [21687] 2020-12-28 18:11:56,341 INFO uvicorn.error 21687 139772921304768 Started server process [21687] INFO: Waiting for application startup. 2020-12-28 18:11:56,341 INFO uvicorn.error 21687 139772921304768 Waiting for application startup. INFO: Application startup complete. 2020-12-28 18:11:56,341 INFO uvicorn.error 21687 139772921304768 Application startup complete. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) 2020-12-28 18:11:56,341 INFO uvicorn.error 21687 139772921304768 Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u6d4f\u89c8\u5668\u6253\u5f00 http://127.0.0.1:8000/docs \u5373\u53ef\u67e5\u770b\u63a5\u53e3\u6587\u6863\u3002 \u63d0\u4ea4\u4ee3\u7801 3.9 \u5f15\u5165\u8fc1\u79fb\u5de5\u5177 \u4e3a\u4e86\u4fbf\u4e8e\u6570\u636e\u6a21\u578b\u53d8\u66f4\uff0c\u5f15\u5165 alembic \u505a\u6570\u636e\u5e93\u8fc1\u79fb\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install alembic \u7f16\u8f91 setup.cfg \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a install_requires = click dynaconf sqlalchemy mysqlclient pydantic fastapi uvicorn alembic \u521d\u59cb\u5316 alembic \uff1a alembic init migration mv alembic.ini src/example_blog/migration \u5c06 alembic \u7684\u76f8\u5173\u6587\u4ef6\u5168\u90e8\u653e\u5230 src/example_blog/migration \u76ee\u5f55\u4e2d \u4fee\u6539 src/example_blog/migration/alembic.ini \uff1a # A generic, single database configuration. [alembic] # path to migration scripts ;script_location = src/example_blog/migration script_location = . # template used to generate migration files # file_template = %%(rev)s_%%(slug)s # timezone to use when rendering the date # within the migration file as well as the filename. # string value is passed to dateutil.tz.gettz() # leave blank for localtime # timezone = # max length of characters to apply to the # \"slug\" field # truncate_slug_length = 40 # set to 'true' to run the environment during # the 'revision' command, regardless of autogenerate # revision_environment = false # set to 'true' to allow .pyc and .pyo files without # a source .py file to be detected as revisions in the # versions/ directory # sourceless = false # version location specification; this defaults # to src/example_blog/migration/versions. When using multiple version # directories, initial revisions must be specified with --version-path # version_locations = %(here)s/bar %(here)s/bat src/example_blog/migration/versions # the output encoding used when revision files # are written from script.py.mako # output_encoding = utf-8 ;sqlalchemy.url = driver://user:pass@localhost/dbname [post_write_hooks] # post_write_hooks defines scripts or Python functions that are run # on newly generated revision scripts. See the documentation for further # detail and examples # format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint # hooks=black # black.type=console_scripts # black.entrypoint=black # black.options=-l 79 # Logging configuration [loggers] keys = root,sqlalchemy,alembic [handlers] keys = console [formatters] keys = generic [logger_root] level = WARN handlers = console qualname = [logger_sqlalchemy] level = WARN handlers = qualname = sqlalchemy.engine [logger_alembic] level = INFO handlers = qualname = alembic [handler_console] class = StreamHandler args = (sys.stderr,) level = NOTSET formatter = generic [formatter_generic] format = %(levelname)-5.5s [%(name)s] %(message)s datefmt = %H:%M:%S \u4fee\u6539 src/example_blog/migration/env.py \uff1a from logging.config import fileConfig from alembic import context from sqlalchemy import engine_from_config , pool from example_blog import db from example_blog.models import BaseModel # this is the Alembic Config object, which provides # access to the values within the .ini file in use. config = context . config # Interpret the config file for Python logging. # This line sets up loggers basically. fileConfig ( config . config_file_name ) # add your model's MetaData object here # for 'autogenerate' support # from myapp import mymodel # target_metadata = mymodel.Base.metadata # target_metadata = None target_metadata = BaseModel . metadata # other values from the config, defined by the needs of env.py, # can be acquired: # my_important_option = config.get_main_option(\"my_important_option\") # ... etc. def run_migrations_offline (): \"\"\"Run migrations in 'offline' mode. This configures the context with just a URL and not an Engine, though an Engine is acceptable here as well. By skipping the Engine creation we don't even need a DBAPI to be available. Calls to context.execute() here emit the given string to the script output. \"\"\" context . configure ( url = db . url , target_metadata = target_metadata , literal_binds = True , dialect_opts = { \"paramstyle\" : \"named\" }, ) with context . begin_transaction (): context . run_migrations () def run_migrations_online (): \"\"\"Run migrations in 'online' mode. In this scenario we need to create an Engine and associate a connection with the context. \"\"\" configuration = config . get_section ( config . config_ini_section ) configuration [ 'sqlalchemy.url' ] = str ( db . url ) connectable = engine_from_config ( configuration , prefix = \"sqlalchemy.\" , poolclass = pool . NullPool , ) with connectable . connect () as connection : context . configure ( connection = connection , target_metadata = target_metadata ) with context . begin_transaction (): context . run_migrations () if context . is_offline_mode (): run_migrations_offline () else : run_migrations_online () \u7f16\u5199 src/example_blog/cmdline.py \uff0c\u521b\u5efa\u8fc1\u79fb\u547d\u4ee4\uff1a from pathlib import Path from alembic import config from click import Context @main . command () @click . pass_context @click . option ( '-h' , '--help' , is_flag = True ) @click . argument ( 'args' , nargs =- 1 ) def migrate ( ctx : Context , help , args ): \"\"\"usage migrate -- arguments \"\"\" with utils . chdir ( Path ( __file__ ) . parent / 'migration' ): argv = list ( args ) if help : argv . append ( '--help' ) config . main ( prog = ctx . command_path , argv = argv ) \u521b\u5efa utils.py \uff1a \"\"\"Utils\"\"\" import contextlib import os from os import PathLike from typing import Union @contextlib . contextmanager def chdir ( path : Union [ str , PathLike ]): cwd = os . getcwd () os . chdir ( path ) yield os . chdir ( cwd ) \u63d0\u793a \u7531\u4e8e\u4f7f\u7528\u4e86 click \u5305\u88c5\u4e86 alembic \u547d\u4ee4\uff0c\u5728\u4f7f\u7528\u4e0a\u4f1a\u6709\u70b9\u4e0d\u540c\uff0c\u9ed8\u8ba4\u5e94\u8be5\u4f7f\u7528 migrate -- \u540e\u52a0 alembic \u7684\u5176\u4ed6\u53c2\u6570\uff0c\u5426\u5219\u591a\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u4f1a\u65e0\u6cd5\u8bc6\u522b\u3002 \u4e3a\u4e86\u5c06 src/example_blog/migration \u6253\u5305\u5230\u9879\u76ee\u4e2d\uff0c\u9700\u8981\u5c06\u5176\u53d8\u6210 Python \u5305\u3002 \u521b\u5efa src/example_blog/migration/__init__.py \u548c src/example_blog/migration/versions/__init__.py \u7f16\u8f91 setup.cfg \uff0c\u5c06\u8fc1\u79fb\u811a\u672c\u914d\u7f6e\u4fe1\u606f\u52a0\u5165\u6253\u5305\u7cfb\u7edf\uff1a [options.package_data] example_blog.config = settings.yml example_blog.migration = alembic.ini README script.py.mako \u521b\u5efa\u7a7a\u767d\u6570\u636e\u5e93\u8fc1\u79fb\u7248\u672c\uff1a example_blog migrate -- revision -m \"init\" \u6267\u884c\u8fc1\u79fb\uff1a example_blog migrate -- upgrade head \u521b\u5efa\u7b2c\u4e00\u4e2a\u6570\u636e\u5e93\u8fc1\u79fb\u7248\u672c\uff1a example_blog migrate -- revision --autogenerate -m \"init_table\" \u6267\u884c\u8fc1\u79fb\uff1a example_blog migrate -- upgrade head \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"Add alembic migrate.\" 4. \u6d4b\u8bd5\u548c\u4f18\u5316\u4ee3\u7801 \u6d4b\u8bd5\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u91cd\u8981\u7684\u4e00\u73af\uff0c\u80fd\u591f\u5728\u53d1\u5e03\u4e4b\u524d\u68c0\u67e5\u51fa\u66f4\u591a\u53ef\u80fd\u51fa\u73b0\u7684\u5f02\u5e38\u60c5\u51b5\u3002 \u6d4b\u8bd5\u6846\u67b6\u9009\u7528\u6bd4\u8f83\u5e38\u7528\u7684 pytest \uff0c\u5b83\u5177\u6709\u5f3a\u5927\u7684\u529f\u80fd\u548c\u5f88\u597d\u7684\u517c\u5bb9\u6027\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install -d pytest \u521b\u5efa tests/settings.yml \uff0c\u521d\u59cb\u5316\u6d4b\u8bd5\u914d\u7f6e\uff1a DEBUG: false LOG_LEVEL: INFO HOST: 127.0.0.1 PORT: 8000 DATABASE: DRIVER: mysql NAME: example_blog HOST: 127.0.0.1 PORT: 3306 USERNAME: root PASSWORD: root QUERY: charset: utf8mb4 \u7f16\u8f91 tests/__init__.py \uff0c\u52a0\u8f7d\u6d4b\u8bd5\u914d\u7f6e\uff1a import os from example_blog.config import settings settings . load_file ( os . path . join ( os . path . dirname ( __file__ ), 'settings.yml' )) settings . load_file ( os . path . join ( os . path . dirname ( __file__ ), 'settings.local.yml' )) \u867d\u7136\u672c\u5730\u5f00\u53d1\u914d\u7f6e\u53ef\u4ee5\u4e34\u65f6\u8c03\u6574\uff0c\u4f46\u5bf9\u4e8e\u5f00\u53d1\u73af\u5883\u548c\u6d4b\u8bd5\u73af\u5883\u4f9d\u7136\u6709\u4e9b\u4e0d\u4e00\u6837\u3002\u4ece\u4e0a\u9762\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u5230\u52a0\u8f7d\u4e86\u4e24\u4e2a\u6d4b\u8bd5\u914d\u7f6e\uff0c\u548c Dynaconf \u89c4\u5219\u4e00\u6837\uff0c settings.local.yml \u914d\u7f6e\u4e3a\u672c\u5730\u914d\u7f6e\uff0c\u4e0d\u4f1a\u88ab\u4ee3\u7801\u8ffd\u8e2a\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u662f\u624b\u52a8\u5b9e\u73b0\u7684\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"test: Init test.\" 4.1 \u6d4b\u8bd5\u6570\u636e\u8bbf\u95ee\u5c42 \u7f16\u5199\u6d4b\u8bd5\u914d\u7f6e\uff1a \u65b0\u5efa tests/conftest.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u914d\u7f6e\uff1a \"\"\"Test config\"\"\" import os from pathlib import Path import pytest from alembic import command , config from sqlalchemy.orm import Session from example_blog import migration from example_blog.config import settings from example_blog.db import SessionFactory from example_blog.models import Article @pytest . fixture () def migrate (): \"\"\"Re-init database when run a test.\"\"\" os . chdir ( Path ( migration . __file__ ) . parent ) alembic_config = config . Config ( './alembic.ini' ) alembic_config . set_main_option ( 'script_location' , os . getcwd ()) print ( ' \\n ----- RUN ALEMBIC MIGRATION: ----- \\n ' ) command . downgrade ( alembic_config , 'base' ) command . upgrade ( alembic_config , 'head' ) try : yield finally : command . downgrade ( alembic_config , 'base' ) db_name = settings . DATABASE . get ( 'NAME' ) if settings . DATABASE . DRIVER == 'sqlite' and os . path . isfile ( db_name ): try : os . remove ( db_name ) except FileNotFoundError : pass @pytest . fixture () def session ( migrate ) -> Session : \"\"\"session fixture\"\"\" _s = SessionFactory () yield _s _s . close () @pytest . fixture () def init_article ( session ): \"\"\"Init article\"\"\" a_1 = Article ( title = 'Hello world' , body = 'Hello world, can you see me?' ) a_2 = Article ( title = 'Love baby' , body = 'I love you everyday, and i want with you.' ) a_3 = Article ( title = 'Tomorrow' , body = 'When the sun rises, this day is fine day, cheer up.' ) session . add_all ([ a_1 , a_2 , a_3 ]) session . commit () \u7f16\u5199\u6570\u636e\u8bbf\u95ee\u5c42\u7528\u4f8b\uff1a import pytest from example_blog.dao import ArticleDAO from example_blog.models import Article from example_blog.schemas import CreateArticleSchema , UpdateArticleSchema class TestArticle : @pytest . fixture () def dao ( self , init_article ): yield ArticleDAO () def test_get ( self , dao , session ): users = dao . get ( session ) assert len ( users ) == 3 users = dao . get ( session , limit = 2 ) assert len ( users ) == 2 users = dao . get ( session , offset = 4 ) assert not users def test_get_by_id ( self , dao , session ): user = dao . get_by_id ( session , 1 ) assert user . id == 1 def test_create ( self , dao , session ): origin_count = session . query ( dao . model ) . count () obj_in = CreateArticleSchema ( title = 'test' ) dao . create ( session , obj_in ) count = session . query ( dao . model ) . count () assert origin_count + 1 == count def test_patch ( self , dao , session ): obj : Article = session . query ( dao . model ) . first () body = obj . body obj_in = UpdateArticleSchema ( body = 'test' ) updated_obj : Article = dao . patch ( session , obj . id , obj_in ) assert body != updated_obj . body def test_delete ( self , dao , session ): origin_count = session . query ( dao . model ) . count () dao . delete ( session , 1 ) count = session . query ( dao . model ) . count () assert origin_count - 1 == count def test_count ( self , dao , session ): count = dao . count ( session ) assert count == 3 \u8fd0\u884c\u6d4b\u8bd5\uff1a pytest tests/test_dao.py \u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"test: Add dao test.\" 4.2 \u6d4b\u8bd5\u670d\u52a1\u5c42 \u521b\u5efa tests/test_services.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\uff1a import pytest from example_blog.schemas import CreateArticleSchema , UpdateArticleSchema from example_blog.services import ArticleService class TestArticleService : @pytest . fixture () def service ( self , init_article ): yield ArticleService () def test_get ( self , service , session ): objs = service . get ( session ) assert len ( objs ) == 3 objs = service . get ( session , limit = 2 ) assert len ( objs ) == 2 objs = service . get ( session , offset = 5 ) assert not objs def test_total ( self , service , session ): total = service . total ( session ) assert total == 3 def test_by_id ( self , service , session ): __obj = session . query ( service . dao . model ) . first () obj = service . get_by_id ( session , __obj . id ) assert obj . id == __obj . id def test_create ( self , service , session ): origin_count = service . total ( session ) obj_in = CreateArticleSchema ( title = 'test' ) service . create ( session , obj_in ) count = service . total ( session ) assert origin_count + 1 == count def test_patch ( self , service , session ): origin_obj = session . query ( service . dao . model ) . first () body = origin_obj . body obj_in = UpdateArticleSchema ( body = 'test' ) obj = service . patch ( session , origin_obj . id , obj_in ) assert body != obj . body def test_delete ( self , service , session ): origin_count = service . total ( session ) obj = session . query ( service . dao . model ) . first () service . delete ( session , obj . id ) count = service . total ( session ) assert origin_count - 1 == count \u8fd0\u884c\u6d4b\u8bd5\uff1a pytest tests/test_services.py \u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"test: Add service test.\" 4.3 \u6d4b\u8bd5\u8bd5\u56fe\u5c42 \u7f16\u8f91 tests/conftest.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u914d\u7f6e\uff1a from fastapi.testclient import TestClient from example_blog import migration , server @pytest . fixture def client (): \"\"\"Fast api test client factory\"\"\" _s = server . Server () _s . init_app () _c = TestClient ( app = _s . app ) yield _c \u7531\u4e8e Fastapi \u7684 TestClient \u4f9d\u8d56 requests \uff0c\u6240\u4ee5\u9700\u8981\u5148\u5b89\u88c5\uff1a pipenv install -d requests \u521b\u5efa tests/test_views.py \uff0c\u6d4b\u8bd5\u8bd5\u56fe\uff1a import pytest from fastapi.encoders import jsonable_encoder from fastapi.responses import Response from example_blog.models import Article from example_blog.schemas import ModelType def test_docs ( client ): \"\"\"Test view\"\"\" response = client . get ( '/docs' ) assert response . status_code == 200 class BaseTest : version = 'v1' base_url : str model : ModelType @pytest . fixture () def init_data ( self ): pass def url ( self , pk : int = None ) -> str : url_split = [ 'api' , self . version , self . base_url ] if pk : url_split . append ( str ( pk )) return '/' . join ( url_split ) def assert_response_ok ( self , response : Response ): assert response . status_code == 200 def test_get ( self , client , session , init_data ): count = session . query ( self . model ) . count () response = client . get ( self . url ()) self . assert_response_ok ( response ) assert count == len ( response . json ()) def test_get_by_id ( self , client , session , init_data ): obj = session . query ( self . model ) . first () response = client . get ( self . url ( obj . id )) self . assert_response_ok ( response ) assert jsonable_encoder ( obj ) == response . json () def test_delete ( self , client , session , init_data ): count = session . query ( self . model ) . count () session . close () response = client . delete ( self . url ( 1 )) self . assert_response_ok ( response ) after_count = session . query ( self . model ) . count () assert after_count == 2 assert count - 1 == after_count class TestArticle ( BaseTest ): model = Article base_url = 'articles' @pytest . fixture () def init_data ( self , init_article ): pass def test_create ( self , client , session , init_data ): response = client . post ( self . url (), json = { 'title' : 'xxx' } ) self . assert_response_ok ( response ) assert response . json () . get ( 'title' ) == 'xxx' def test_patch ( self , client , session , init_data ): obj = session . query ( Article ) . first () response = client . patch ( self . url ( obj . id ), json = { 'body' : 'xxx' }) self . assert_response_ok ( response ) assert response . json () . get ( 'body' ) != obj . body \u8fd0\u884c\u6d4b\u8bd5\uff1a pytest tests/test_views.py \u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"test: Add view test.\" 4.4 \u6d4b\u8bd5\u547d\u4ee4\u884c \u7f16\u8f91 tests/conftest.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u914d\u7f6e\uff1a from click.testing import CliRunner @pytest . fixture def cli (): runner = CliRunner ( echo_stdin = True , mix_stderr = False ) yield runner \u521b\u5efa tests/test_cmdline.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\uff1a import uvicorn from alembic import config import example_blog from example_blog import cmdline def test_main ( cli ): result = cli . invoke ( cmdline . main ) assert result . exit_code == 0 result = cli . invoke ( cmdline . main , '-V' ) assert result . exit_code == 0 assert str ( result . output ) . strip () == example_blog . __version__ def test_run ( cli , mocker ): mock_run = mocker . patch . object ( uvicorn , 'run' ) result = cli . invoke ( cmdline . main , [ 'server' , '-h' , '127.0.0.1' , '-p' , '8080' ]) assert result . exit_code == 0 mock_run . assert_called_once_with ( app = mocker . ANY , host = '127.0.0.1' , port = 8080 ) def test_migrate ( cli , mocker ): mock_main = mocker . patch . object ( config , 'main' ) cli . invoke ( cmdline . main , [ 'migrate' , '--help' ]) mock_main . assert_called_once () \u56e0\u4e3a\u5355\u5143\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u4e86 mock \uff0c\u6240\u4ee5\u5b89\u88c5\u914d\u5408 pytest \u4f7f\u7528\u7684 pytest-mock pipenv install -d pytest-mock \u8fd0\u884c\u6d4b\u8bd5\uff1a pytest tests/test_views.py \u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"test: Add cmdline test.\" 4.5 \u5176\u4ed6\u6d4b\u8bd5 \u521b\u5efa tests/test_dependencies.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\uff1a import pytest from example_blog.dependencies import CommonQueryParams @pytest . mark . parametrize ( [ 'args' , 'expect_value' ], [ ((), ( 0 , 10 )), (( 0 ,), ( 0 , 10 )), (( - 10 , - 10 ), ( 0 , 10 )), (( 5 , 100 ), ( 4 , 100 )), ] ) def test_common_query_params ( args , expect_value ): params = CommonQueryParams ( * args ) assert params . offset == expect_value [ 0 ] assert params . limit == expect_value [ 1 ] \u521b\u5efa tests/test_utils.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\uff1a import os from example_blog.utils import chdir def test_chdir (): path = '/tmp' cwd = os . getcwd () with chdir ( path ): assert path == os . getcwd () assert cwd == os . getcwd () \u8fd0\u884c\u6d4b\u8bd5\uff1a pytest \u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"test: Add other test.\" \u81f3\u6b64\uff0c\u6240\u6709\u6d4b\u8bd5\u8fd0\u884c\u5b8c\u6bd5\uff0c\u9664\u4e86 src/example_blog/migration \u4e4b\u5916\u7684\u5305\u7684\u6d4b\u8bd5\u5df2\u7ecf\u53ef\u4ee5\u5168\u90e8\u8986\u76d6\u3002 4.6 \u4f18\u5316\u4ee3\u7801 \u4ee3\u7801\u98ce\u683c\u548c\u4ee3\u7801\u89c4\u8303\u662f\u4e00\u4e2a\u5f00\u53d1\u4eba\u5458\u5f00\u53d1\u4fee\u517b\u7684\u4f53\u73b0\uff0c\u597d\u7684\u4ee3\u7801\u80fd\u591f\u8ba9\u4eba\u773c\u524d\u4e00\u4eae\u3002\u4e3a\u4e86\u89c4\u8303\uff0c\u793e\u533a\u5f00\u53d1\u8bb8\u591a\u5de5\u5177\u7528\u4e8e\u68c0\u6d4b\u4ee3\u7801\u3002 4.6.1 \u4f18\u5316\u5bfc\u5165 isort \u662f\u4e00\u4e2a\u81ea\u52a8\u683c\u5f0f\u5316\u5bfc\u5165\u7684\u5de5\u5177\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install -d isort \u683c\u5f0f\u5316\u4ee3\u7801\uff1a isort . \u6b64\u65f6\u53ef\u4ee5\u4e0d\u7528\u5148\u6025\u7740\u63d0\u4ea4\uff0c\u5728\u540e\u9762\u5bf9\u4ee3\u7801\u98ce\u683c\u68c0\u6d4b\u7684\u65f6\u5019\u53ef\u80fd\u8fd8\u4f1a\u518d\u6b21\u683c\u5f0f\u5316\u4ee3\u7801\u3002 4.6.2 \u4f18\u5316\u4ee3\u7801\u98ce\u683c flake8 \u662f\u4e00\u4e2a\u9075\u5faa PEP8 \u89c4\u8303\u68c0\u6d4b\u4ee3\u7801\u7684\u5de5\u5177\u3002\u4f7f\u7528\u8be5\u5de5\u5177\uff0c\u53ef\u4ee5\u68c0\u6d4b\u51fa\u54ea\u4e9b\u4ee3\u7801\u4e0d\u7b26\u5408 PEP8 \u89c4\u8303\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install -d flake8 \u68c0\u6d4b\u4ee3\u7801\uff1a flake8 \u6839\u636e\u8f93\u51fa\u63d0\u793a\uff0c\u53c2\u7167 flake8 \u89c4\u5219 \u8fdb\u884c\u8c03\u6574\uff0c\u76f4\u81f3\u5b8c\u5168\u7b26\u5408\u4e3a\u6b62\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Lint code\" 5. \u6253\u5305\u53d1\u5e03 \u5230\u8fd9\u4e00\u6b65\uff0c setup.cfg \u6587\u4ef6\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a [metadata] name = example_blog version = attr: example_blog.__version__ author = huagang author_email = huagang517@126.com description = This is example blog system. keywords = blog example long_description = file: README.md long_description_content_type = text/markdown classifiers = Operating System :: OS Independent Programming Language :: Python :: 3.7 [options] python_requires > = 3.7 include_package_data = True packages = find: package_dir = = src install_requires = click dynaconf sqlalchemy mysqlclient pydantic fastapi uvicorn alembic [options.packages.find] where = src [options.entry_points] console_scripts = example_blog = example_blog.cmdline:main [options.package_data] example_blog.config = settings.yml example_blog.migration = alembic.ini README script.py.mako [options.data_files] etc/example_blog = src/example_blog/config/settings.yml \u5728\u6574\u4e2a\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u662f\u9010\u6b65\u4e30\u5bcc\u6b64\u6587\u4ef6\u7684\u3002\u8fd9\u662f\u9879\u76ee\u7684\u63cf\u8ff0\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86\u6253\u5305\u7684\u914d\u7f6e\u4fe1\u606f\u3002 5.1 \u6253\u5305 python setup.py sdist bdist_wheel \u5728 dist \u76ee\u5f55\u4e2d\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f .tar.gz \u7684\u6e90\u7801\u6253\u5305\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f .whl \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002 5.2 \u53d1\u5e03 \u5c06\u5f00\u53d1\u597d\u7684\u9879\u76ee\u53d1\u5e03\u5230\u7d22\u5f15\u4ed3\u5e93\uff0c\u6216\u5185\u7f51\u7684\u79c1\u6709\u4ed3\u5e93\u3002 \u4f7f\u7528 twine \u4e0a\u4f20\uff1a twine upload dist/* https://www.python.org/doc/sunset-python-2/ \u21a9 \u73b0\u5728 Anaconda / Miniconda \u5728 Windows \u4e0a\u4f7f\u7528\u865a\u62df\u73af\u5883\u5de5\u5177 Virtualenv \u5b58\u5728\u4e00\u4e9b\u517c\u5bb9\u95ee\u9898\uff0c\u800c\u4e14 Pipenv \u662f\u4f9d\u8d56\u8fd9\u4e2a\u5de5\u5177\u7684\u3002\u8bf7\u53c2\u8003 conda support - Windows 3.7+ #1986 \u548c virtualenv==20.0.34 not compatible with python on windows #12094 \u21a9","title":"Fastapi"},{"location":"practices/web/#_1","text":"\u8fd9\u662f\u4e00\u4e2a\u5feb\u901f\u4e0a\u624b\u7684\u793a\u4f8b\u9879\u76ee\uff0c\u65e8\u5728\u901a\u8fc7\u4e00\u4e2a\u5c3d\u53ef\u80fd\u5305\u542b\u4e3b\u8981\u77e5\u8bc6\u70b9\u7684\u7b80\u5355\u9879\u76ee\uff0c\u6765\u5411\u4f7f\u7528\u8005\u5c55\u793a\u4e00\u4e2a\u66f4 Python \u5316\u7684\u9879\u76ee\u5f00\u53d1\u6d41\u7a0b\u3002 \u793a\u4f8b\u9879\u76ee\u662f\u4e00\u4e2a\u4f7f\u7528\u5f02\u6b65\u5fae Web \u6846\u67b6 Fastapi \u5f00\u53d1\u7684\u535a\u5ba2\u7cfb\u7edf\u3002\u9879\u76ee\u4e1a\u52a1\u529f\u80fd\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u5b8c\u6574\u4f53\u73b0\u4e86\u4e00\u4e2a\u9879\u76ee\u4ece\u73af\u5883\u642d\u5efa\uff0c\u5230\u5f00\u53d1\uff0c\u6700\u540e\u6d4b\u8bd5\u53d1\u5e03\u7684\u5b8c\u6574\u6d41\u7a0b\u3002","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"practices/web/#1","text":"","title":"1. \u5f00\u53d1\u73af\u5883\u642d\u5efa"},{"location":"practices/web/#11-python","text":"\u9274\u4e8e\u5b98\u65b9\u5df2\u7ecf\u505c\u6b62\u5bf9 Python 2 \u7684\u652f\u6301 1 \uff0c\u6211\u4eec\u4e0d\u63a8\u8350\u518d\u4f7f\u7528 Python 2 \u8fdb\u884c\u5f00\u53d1\u3002\u6839\u636e\u5f53\u524d Python \u7248\u672c\u4f7f\u7528\u60c5\u51b5\uff0c\u63a8\u8350\u4f7f\u7528 Python 3.7+ \u3002 \u5177\u4f53\u7684\u7248\u672c\u7684 Python \u73af\u5883\u53ef\u4ee5\u5728 \u5b98\u7f51 \u4e0b\u8f7d\u3002\u4e3a\u4e86\u4f7f\u7528\u4fbf\u5229\u6027\uff0c\u53ef\u4ee5\u9009\u62e9 Anaconda 2 \u3002","title":"1.1 Python \u73af\u5883"},{"location":"practices/web/#12","text":"\u63a8\u8350\u4f7f\u7528 Pycharm \u4f5c\u4e3a\u4e3b\u8981\u5f00\u53d1\u5de5\u5177\uff0c\u53ef\u4ee5\u9009\u62e9\u793e\u533a\u7248\u672c\u514d\u8d39\u4f7f\u7528\u3002 Visual Studio Code \u662f\u5fae\u8f6f\u5f00\u53d1\u7684\u4e00\u6b3e\u514d\u8d39\u8f7b\u91cf\u6587\u672c\u7f16\u8f91\u5668\uff0c\u901a\u8fc7\u5b89\u88c5\u63d2\u4ef6\u53ef\u4ee5\u81ea\u5b9a\u4e49\u6210\u4e00\u6b3e\u529f\u80fd\u5f3a\u5927\u7684 IDE \u3002\u5728\u5bf9 Python \u7684\u652f\u6301\u4e0a\uff0c\u5df2\u7ecf\u6709\u4e86\u8f83\u4e3a\u5b8c\u5584\u7684\u63d2\u4ef6\u4f53\u7cfb\uff0c\u6b64\u65b9\u6848\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5907\u7528\u3002","title":"1.2 \u5f00\u53d1\u5de5\u5177"},{"location":"practices/web/#13","text":"\u63a8\u8350\u4f7f\u7528 pipenv \u3002Pipenv \u76f8\u6bd4\u4f7f\u7528 requirements.txt \u7ba1\u7406\u4f9d\u8d56\u5217\u8868\uff0c\u66f4\u52a0\u5f3a\u5927\u3002\u5b83\u652f\u6301\u540c\u65f6\u7ba1\u7406\u5f00\u53d1\u751f\u4ea7\u73af\u5883\u4f9d\u8d56\uff0c\u81ea\u52a8\u67e5\u627e\u865a\u62df\u73af\u5883\uff0c\u751f\u6210\u4f9d\u8d56\u9501\u5b9a\u6587\u4ef6\u7b49\u5176\u4ed6\u7279\u6027\u3002 \u5728\u5b89\u88c5\u597d Python \u73af\u5883\u540e\uff0c\u5e94\u8be5\u5728\u5168\u5c40\u73af\u5883\u4e2d\u5b89\u88c5 pipenv \u3002","title":"1.3 \u865a\u62df\u73af\u5883\u5de5\u5177"},{"location":"practices/web/#14-git","text":"\u63a8\u8350\u4f7f\u7528 Git \u5bf9\u9879\u76ee\u8fdb\u884c\u7248\u672c\u7ba1\u7406\u3002\u6240\u4ee5\u9700\u8981\u63d0\u524d\u5b89\u88c5 Git \uff0c\u5e76\u719f\u6089\u5e38\u7528 Git \u7684\u6982\u5ff5\u548c\u5e38\u7528 Git \u547d\u4ee4\u3002","title":"1.4 Git \u4f7f\u7528"},{"location":"practices/web/#2","text":"","title":"2. \u9879\u76ee\u521d\u59cb\u5316"},{"location":"practices/web/#21","text":"\u9879\u76ee\u7ed3\u6784\u91c7\u7528 src \u76ee\u5f55\u7ed3\u6784\uff0c\u8be6\u89c1 pypa/sampleproject \u3002 \u521b\u5efa\u9879\u76ee\u76ee\u5f55\u7ed3\u6784\uff1a . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 setup.cfg \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 example_blog \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tests \u2514\u2500\u2500 __init__.py \u521d\u59cb\u5316\u9879\u76ee\u865a\u62df\u73af\u5883\uff1a pipenv install \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u9879\u76ee\u76ee\u5f55\u4f1a\u81ea\u52a8\u751f\u6210 Pipfile \u548c Pipfile.lock \u4e24\u4e2a\u6587\u4ef6\u3002","title":"2.1 \u521d\u59cb\u5316\u9879\u76ee\u7ed3\u6784"},{"location":"practices/web/#22","text":"\u7f16\u8f91 setup.py \u6587\u4ef6\uff1a import setuptools setuptools . setup () \u7f16\u8f91 setup.cfg \u6587\u4ef6\uff0c\u914d\u7f6e\u9879\u76ee\u63cf\u8ff0\u4fe1\u606f\uff1a [metadata] name = example_blog version = attr: example_blog.__version__ author = huagang author_email = huagang517@126.com description = This is example blog system. keywords = blog example long_description = file: README.md long_description_content_type = text/markdown classifiers = Operating System :: OS Independent Programming Language :: Python :: 3.7 [options] python_requires > = 3.7 include_package_data = True packages = find: package_dir = = src install_requires = [options.packages.find] where = src \u7f16\u8f91 src/example_blog/__init__.py \uff0c\u521b\u5efa\u521d\u59cb\u7248\u672c\u53f7\uff1a __version__ = '0.1.0'","title":"2.2 \u521d\u59cb\u5316\u9879\u76ee\u57fa\u672c\u4fe1\u606f"},{"location":"practices/web/#23","text":"\u7f16\u5199 README.md \u6587\u4ef6 # \u4e00\u4e2a\u7b80\u5355\u535a\u5ba2\u7cfb\u7edf\u793a\u4f8b. \u6b64\u9879\u76ee\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u535a\u5ba2\u7cfb\u7edf\uff0c\u63d0\u4f9b\u4e00\u4e9b\u7528\u6237\u7ba1\u7406\u548c\u535a\u5ba2\u6587\u7ae0\u7ba1\u7406\u3002\u76ee\u7684\u662f\u6f14\u793a\u5982\u4f55\u505a\u4e00\u4e2a\u66f4\u52a0 Pythonic \u7684\u9879\u76ee\u3002 \u5982\u679c\u60a8\u6709\u4efb\u4f55\u610f\u89c1\u548c\u5efa\u8bae\uff0c\u6b22\u8fce\u5f00\u542f ISSUE \u53d1\u8d77\u8ba8\u8bba\u3002\u671f\u5f85\u4e0e\u60a8\u6253\u9020\u66f4\u52a0\u5b8c\u7f8e\u7684 Python \u793a\u4f8b\u3002 ## \u534f\u4f5c\u5f00\u53d1 - Fork \u4ed3\u5e93 - \u7f16\u5199\u4ee3\u7801\uff0c\u6d4b\u8bd5\uff0c\u63d0\u4ea4 - \u53d1\u8d77 PR - \u5ba1\u6838\u901a\u8fc7\u540e\u5408\u5e76\uff0c\u534f\u4f5c\u5b8c\u6210","title":"2.3 \u589e\u52a0\u9879\u76ee\u81ea\u8ff0\u6587\u4ef6"},{"location":"practices/web/#24-gitignore","text":"# Created by .ignore support plugin (hsz.mobi) ### Python template # Byte-compiled / optimized / DLL files __pycache__/ *.py[cod] *$py.class # C extensions *.so # Distribution / packaging .Python build/ develop-eggs/ dist/ downloads/ eggs/ .eggs/ lib/ lib64/ parts/ sdist/ var/ wheels/ pip-wheel-metadata/ share/python-wheels/ *.egg-info/ .installed.cfg *.egg MANIFEST # PyInstaller # Usually these files are written by a python script from a template # before PyInstaller builds the exe, so as to inject date/other infos into it. *.manifest *.spec # Installer logs pip-log.txt pip-delete-this-directory.txt # Unit test / coverage reports htmlcov/ .tox/ .nox/ .coverage .coverage.* .cache nosetests.xml coverage.xml *.cover *.py,cover .hypothesis/ .pytest_cache/ cover/ # Translations *.mo *.pot # Django stuff: *.log local_settings.py db.sqlite3 db.sqlite3-journal # Flask stuff: instance/ .webassets-cache # Scrapy stuff: .scrapy # Sphinx documentation docs/_build/ # PyBuilder .pybuilder/ target/ # Jupyter Notebook .ipynb_checkpoints # IPython profile_default/ ipython_config.py # pyenv # For a library or package, you might want to ignore these files since the code is # intended to run in multiple environments; otherwise, check them in: # .python-version # pipenv # According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control. # However, in case of collaboration, if having platform-specific dependencies or dependencies # having no cross-platform support, pipenv may install dependencies that don't work, or not # install all needed dependencies. #Pipfile.lock # PEP 582; used by e.g. github.com/David-OConnor/pyflow __pypackages__/ # Celery stuff celerybeat-schedule celerybeat.pid # SageMath parsed files *.sage.py # Environments .env .venv env/ venv/ ENV/ env.bak/ venv.bak/ # Spyder project settings .spyderproject .spyproject # Rope project settings .ropeproject # mkdocs documentation /site # mypy .mypy_cache/ .dmypy.json dmypy.json # Pyre type checker .pyre/ # pytype static type analyzer .pytype/ # Cython debug symbols cython_debug/ ### Windows template # Windows thumbnail cache files Thumbs.db Thumbs.db:encryptable ehthumbs.db ehthumbs_vista.db # Dump file *.stackdump # Folder config file [Dd]esktop.ini # Recycle Bin used on file shares $RECYCLE.BIN/ # Windows Installer files *.cab *.msi *.msix *.msm *.msp # Windows shortcuts *.lnk ### Linux template *~ # temporary files which can be created if a process still has a handle open of a deleted file .fuse_hidden* # KDE directory preferences .directory # Linux trash folder which might appear on any partition or disk .Trash-* # .nfs files are created when an open file is removed but is still being accessed .nfs* ### macOS template # General .DS_Store .AppleDouble .LSOverride # Icon must end with two \\r Icon # Thumbnails ._* # Files that might appear in the root of a volume .DocumentRevisions-V100 .fseventsd .Spotlight-V100 .TemporaryItems .Trashes .VolumeIcon.icns .com.apple.timemachine.donotpresent # Directories potentially created on remote AFP share .AppleDB .AppleDesktop Network Trash Folder Temporary Items .apdisk .vscode .idea","title":"2.4 \u589e\u52a0 .gitignore"},{"location":"practices/web/#26-git","text":"git init git config user.name example git config user.email example@example.com git add . git commit -m \"feat: First commit!\"","title":"2.6 \u521d\u59cb Git \u63d0\u4ea4"},{"location":"practices/web/#25","text":"\u5c06\u9879\u76ee\u4ee5\u7f16\u8f91\u65b9\u5f0f\u5b89\u88c5\u5230\u73af\u5883\u4e2d\uff1a pip install -e . \u6ce8\u610f \u8fd9\u91cc\u4e0d\u8981\u4f7f\u7528 pipenv \u547d\u4ee4\uff0c\u5426\u5219\u4f1a\u5199\u5165 Pipfile \u3002","title":"2.5 \u5b89\u88c5\u5f00\u53d1\u5305"},{"location":"practices/web/#3","text":"","title":"3. \u9879\u76ee\u529f\u80fd\u5f00\u53d1"},{"location":"practices/web/#31","text":"\u547d\u4ee4\u884c\u5165\u53e3\u662f\u542f\u52a8\u9879\u76ee\u7684\u4e3b\u5165\u53e3\uff0c\u5e38\u89c1\u7684\u505a\u6cd5\u662f\u4f7f\u7528\u4e00\u4e2a __main__ \u51fd\u6570\uff0c\u8c03\u7528\u542f\u52a8\u4ee3\u7801\uff0c\u7136\u540e\u4f7f\u7528 python \u547d\u4ee4\u542f\u52a8\u8be5\u6587\u4ef6\u3002\u4f46\u5bf9\u4e8e\u591a\u7ea7\u547d\u4ee4\u53c2\u6570\u7684\u60c5\u51b5\u5c31\u6bd4\u8f83\u9ebb\u70e6\uff0c\u63a8\u8350\u4f7f\u7528 click \u5de5\u5177\u7f16\u5199\u5165\u53e3\u903b\u8f91\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install click \u7f16\u8f91 setup.cfg \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a install_requires = click \u521b\u5efa src/example_blog/cmdline.py \u6587\u4ef6\uff1a @click . group ( invoke_without_command = True ) @click . pass_context @click . option ( '-V' , '--version' , is_flag = True , help = 'Show version and exit.' ) def main ( ctx , version ): if version : click . echo ( __version__ ) elif ctx . invoked_subcommand is None : click . echo ( ctx . get_help ()) \u7f16\u8f91 setup.cfg \uff0c\u5c06\u547d\u4ee4\u884c\u5165\u53e3\u6ce8\u518c\u5230\u9879\u76ee\u63cf\u8ff0\u6587\u4ef6\u4e2d\uff1a [options.entry_points] console_scripts = example_blog = example_blog.cmdline:main \u91cd\u65b0\u5b89\u88c5\u9879\u76ee\uff1a pip install -e . \u6d4b\u8bd5\u547d\u4ee4\u662f\u5426\u751f\u6548\uff1a example_blog -V \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Add commline.\"","title":"3.1 \u521b\u5efa\u547d\u4ee4\u884c\u5165\u53e3"},{"location":"practices/web/#32","text":"\u9879\u76ee\u7684\u914d\u7f6e\u7cfb\u7edf\u662f\u4e00\u4e2a\u9879\u76ee\u7684\u6838\u5fc3\u9a71\u52a8\uff0c\u4f7f\u7528\u914d\u7f6e\u7cfb\u7edf\u4fbf\u4e8e\u7ba1\u7406\u6563\u843d\u5728\u5404\u5904\u7684\u914d\u7f6e\u53c2\u6570\uff0c\u4e5f\u65b9\u4fbf\u5728\u542f\u52a8\u524d\u901a\u8fc7\u8c03\u6574\u914d\u7f6e\uff0c\u6539\u53d8\u7cfb\u7edf\u884c\u4e3a\u3002 Dynaconf \u662f\u4e00\u4e2a\u9ad8\u5ea6\u7075\u6d3b\u7684\u914d\u7f6e\u7ba1\u7406\u5de5\u5177\uff0c\u652f\u6301\u591a\u73af\u5883\u5206\u5c42\uff0c\u591a\u79cd\u914d\u7f6e\u5bfc\u5165\u7b49\u6709\u70b9\u3002\u5728\u9879\u76ee\u5f00\u53d1\u4e2d\uff0c\u63a8\u8350\u4f7f\u7528\u5982\u4e0b\u5b9e\u8df5\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install dynaconf \u7f16\u8f91 setup.cfg \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a install_requires = click dynaconf \u5efa\u7acb\u914d\u7f6e\u5305\uff0c\u548c\u914d\u7f6e\u6587\u4ef6\uff1a mkdir src/example_blog/config touch src/example_blog/config/__init__.py touch src/example_blog/config/settings.yml \u7f16\u8f91 src/example_blog/config/__init__.py \uff0c \u521d\u59cb\u5316\u5168\u5c40\u914d\u7f6e\u5bf9\u8c61\uff1a import os import sys from pathlib import Path from dynaconf import Dynaconf _BASE_DIR = Path ( __file__ ) . parent . parent settings_files = [ Path ( __file__ ) . parent / 'settings.yml' , ] # \u6307\u5b9a\u7edd\u5bf9\u8def\u5f84\u52a0\u8f7d\u9ed8\u8ba4\u914d\u7f6e settings = Dynaconf ( envvar_prefix = \"EXAMPLE_BLOG\" , # \u73af\u5883\u53d8\u91cf\u524d\u7f00\u3002\u8bbe\u7f6e`EXAMPLE_BLOG_FOO='bar'`\uff0c\u4f7f\u7528`settings.FOO` settings_files = settings_files , environments = False , # \u542f\u7528\u591a\u5c42\u6b21\u65e5\u5fd7\uff0c\u652f\u6301 dev, pro load_dotenv = True , # \u52a0\u8f7d .env env_switcher = \"EXAMPLE_BLOG_ENV\" , # \u7528\u4e8e\u5207\u6362\u6a21\u5f0f\u7684\u73af\u5883\u53d8\u91cf\u540d\u79f0 EXAMPLE_BLOG_ENV=production lowercase_read = False , # \u7981\u7528\u5c0f\u5199\u8bbf\u95ee\uff0c settings.name \u662f\u4e0d\u5141\u8bb8\u7684 includes = [ os . path . join ( sys . prefix , 'etc' , 'example_blog' , 'settings.yml' )], # \u81ea\u5b9a\u4e49\u914d\u7f6e\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e base_dir = _BASE_DIR , # \u7f16\u7801\u4f20\u5165\u914d\u7f6e ) \u7f16\u8f91 src/example_blog/config/settings.yml \uff0c\u521d\u59cb\u5316\u914d\u7f6e\uff1a LOG_LEVEL : INFO \u7f16\u8f91 src/example_blog/config/settings.local.yml \uff0c\u589e\u52a0\u672c\u5730\u5f00\u53d1\u914d\u7f6e\uff1a LOG_LEVEL : DEBUG \u6839\u636e Dynaconf \u89c4\u5219\uff0c settings.local.yml \u7684\u914d\u7f6e\u4e3a\u672c\u5730\u914d\u7f6e\uff0c\u4e14\u4f18\u5148\u7ea7\u6bd4 settings.yml \u4f4e\uff0c\u6240\u4ee5\u672c\u5730\u914d\u7f6e\u4f1a\u5728\u540e\u9762\u52a0\u8f7d\uff0c\u8986\u76d6\u4e4b\u524d\u7684\u914d\u7f6e\u3002 \u7f16\u8f91 .gitignore \uff0c\u5c06\u6240\u6709\u672c\u5730\u914d\u7f6e\u6392\u9664\u7248\u672c\u63a7\u5236\u4e4b\u5916\u3002 **/settings.local.yml \u7f16\u8f91 setup.cfg \uff0c\u5c06\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\u5305\u542b\u6253\u5305\u8303\u56f4\u4e4b\u5185\uff1a [options.package_data] example_blog.config = settings.yml \u7f16\u8f91 setup.cfg \uff0c\u589e\u52a0\u5916\u90e8\u914d\u7f6e\u8def\u5f84\uff1a [options.data_files] etc/example_blog = src/example_blog/config/settings.yml \u6ce8\u610f\uff1a data_files \u4e2d\u7684\u76f8\u5bf9\u8def\u5f84\u4f1a\u5199\u5165\u5230 sys.prefix \u4f4d\u7f6e\u4e0b\u3002\u5f53\u5b89\u88c5\u540e\uff0c\u4f1a\u5728\u8be5\u76ee\u5f55\u4e0b\u751f\u6210 etc/example_blog/settings.yml \u7684\u914d\u7f6e\u6587\u4ef6\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u8be5\u6587\u4ef6\u9a71\u52a8\u9879\u76ee\u914d\u7f6e\u3002\u6b64\u6587\u4ef6\u5c5e\u4e8e\u7528\u6237\u7ea7\u522b\u914d\u7f6e\u3002\u4f1a\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e\u3002 \u63d0\u4ea4\u4ee3\u7801\u3002 git add . git commit -m \"feat: Add config.\"","title":"3.2 \u5f15\u5165\u9879\u76ee\u914d\u7f6e\u7cfb\u7edf"},{"location":"practices/web/#33","text":"\u521b\u5efa src/example_blog/log.py \uff0c\u521d\u59cb\u5316 log \uff1a from logging.config import dictConfig from example_blog.config import settings def init_log (): log_config = { 'version' : 1 , 'disable_existing_loggers' : False , 'formatters' : { 'sample' : { 'format' : ' %(asctime)s %(levelname)s %(message)s ' }, 'verbose' : { 'format' : ' %(asctime)s %(levelname)s %(name)s %(process)d %(thread)d %(message)s ' }, \"access\" : { \"()\" : \"uvicorn.logging.AccessFormatter\" , \"fmt\" : ' %(asctime)s %(levelprefix)s %(client_addr)s - \" %(request_line)s \" %(status_code)s ' , }, }, 'handlers' : { \"console\" : { \"formatter\" : 'verbose' , 'level' : 'DEBUG' , \"class\" : \"logging.StreamHandler\" , }, }, 'loggers' : { '' : { 'level' : settings . LOG_LEVEL , 'handlers' : [ 'console' ]}, }, } dictConfig ( log_config ) \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Add log\"","title":"3.3 \u5f15\u5165\u65e5\u5fd7"},{"location":"practices/web/#34","text":"\u6570\u636e\u5c42\u662f\u5e94\u7528\u7684\u6700\u5e95\u5c42\uff0c\u548c\u6570\u636e\u5b58\u50a8\u6253\u4ea4\u9053\u3002\u4f7f\u7528 sqlalchemy \u4f5c\u5e95\u5c42\u6570\u636e\u6a21\u578b\u5efa\u6a21\u548c\u6570\u636e\u8bbf\u95ee\u64cd\u4f5c\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install sqlalchemy mysqlclient \u7f16\u8f91 setup.cfg \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a install_requires = click dynaconf sqlalchemy mysqlclient \u7f16\u5199 src/example_blog/config/settings.yml \uff0c\u589e\u52a0\u6570\u636e\u5e93\u914d\u7f6e\u4fe1\u606f\uff1a # ###################################################################################################### # # https://docs.sqlalchemy.org/en/13/core/engines.html DATABASE : DRIVER : mysql NAME : example_blog HOST : 127.0.0.1 PORT : 3306 USERNAME : root PASSWORD : root QUERY : charset : utf8mb4 \u8b66\u544a settings.yml \u4e3a\u7cfb\u7edf\u9ed8\u8ba4\u914d\u7f6e\uff0c\u4f1a\u88ab git \u8ffd\u8e2a\u7ba1\u7406\uff0c\u4e0d\u8981\u586b\u5199\u771f\u6b63\u7684\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f\u3002\u771f\u5b9e\u914d\u7f6e\u4fe1\u606f\u53ef\u4ee5\u5199\u5728 settings.local.yml \u6587\u4ef6\u4e2d\uff0c\u4f1a\u8986\u76d6\u9ed8\u8ba4\u914d\u7f6e\u3002 \u65b0\u5efa src/example_blog/db.py \uff0c\u521b\u5efa sqlalchemy \u8bbf\u95ee\u5bf9\u8c61\uff1a \"\"\"Database connections\"\"\" from sqlalchemy.engine import create_engine from sqlalchemy.engine.base import Engine from sqlalchemy.engine.url import URL from sqlalchemy.orm import scoped_session , sessionmaker from example_blog.config import settings url = URL ( drivername = settings . DATABASE . DRIVER , username = settings . DATABASE . get ( 'USERNAME' , None ), password = settings . DATABASE . get ( 'PASSWORD' , None ), host = settings . DATABASE . get ( 'HOST' , None ), port = settings . DATABASE . get ( 'PORT' , None ), database = settings . DATABASE . get ( 'NAME' , None ), query = settings . DATABASE . get ( 'QUERY' , None ), ) engine : Engine = create_engine ( url , echo = True ) SessionFactory = sessionmaker ( bind = engine , autocommit = False , autoflush = True ) ScopedSession = scoped_session ( SessionFactory ) \u521b\u5efa src/example_blog/models.py \uff0c\u521b\u5efa\u6570\u636e\u6a21\u578b\uff1a \"\"\"Models\"\"\" from datetime import datetime from sqlalchemy import Column , DateTime , Integer , String , Text from sqlalchemy.ext.declarative import declarative_base , declared_attr class CustomBase : \"\"\"https://docs.sqlalchemy.org/en/13/orm/extensions/declarative/mixins.html\"\"\" @declared_attr def __tablename__ ( cls ): return cls . __name__ . lower () __table_args__ = { 'mysql_engine' : 'InnoDB' , 'mysql_collate' : 'utf8mb4_general_ci' } id = Column ( Integer , primary_key = True , autoincrement = True ) BaseModel = declarative_base ( cls = CustomBase ) class Article ( BaseModel ): \"\"\"Article table\"\"\" title = Column ( String ( 500 )) body = Column ( Text (), nullable = True ) create_time = Column ( DateTime , default = datetime . now , nullable = False ) update_time = Column ( DateTime , default = datetime . now , onupdate = datetime . now , nullable = False ) \u4e3a\u4e86\u5728\u5e94\u7528\u4e2d\u66f4\u65b9\u4fbf\u7684\u4f7f\u7528\u6570\u636e\u6a21\u578b\u5bf9\u8c61\uff0c\u5f15\u5165 pydantic \u6765\u5b9a\u4e49\u4e00\u4e9b\u5bf9\u8c61\u6a21\u578b\u7684\u57fa\u672c\u4fe1\u606f\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install pydantic \u7f16\u8f91 setup.cfg \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a install_requires = click dynaconf sqlalchemy mysqlclient pydantic \u521b\u5efa src/example_blog/schemas.py \uff0c\u521b\u5efa\u5bf9\u8c61\u6a21\u578b\uff1a from datetime import datetime from typing import Optional , TypeVar from pydantic import BaseModel , constr from example_blog.models import BaseModel as DBModel ModelType = TypeVar ( 'ModelType' , bound = DBModel ) CreateSchema = TypeVar ( 'CreateSchema' , bound = BaseModel ) UpdateSchema = TypeVar ( 'UpdateSchema' , bound = BaseModel ) class InDBMixin ( BaseModel ): id : int class Config : orm_mode = True class BaseArticle ( BaseModel ): title : constr ( max_length = 500 ) body : Optional [ str ] = None class ArticleSchema ( BaseArticle , InDBMixin ): create_time : datetime update_time : datetime class CreateArticleSchema ( BaseArticle ): pass class UpdateArticleSchema ( BaseArticle ): title : Optional [ constr ( max_length = 500 )] = None \u521b\u5efa src/example_blog/dao.py \uff0c\u521b\u5efa\u6570\u636e\u8bbf\u95ee\u5c42\uff1a from typing import Generic , List from fastapi.encoders import jsonable_encoder from sqlalchemy.orm import Session from example_blog.models import Article from example_blog.schemas import CreateSchema , ModelType , UpdateSchema , CreateArticleSchema , UpdateArticleSchema class BaseDAO ( Generic [ ModelType , CreateSchema , UpdateSchema ]): model : ModelType def get ( self , session : Session , offset = 0 , limit = 10 ) -> List [ ModelType ]: result = session . query ( self . model ) . offset ( offset ) . limit ( limit ) . all () return result def get_by_id ( self , session : Session , pk : int , ) -> ModelType : return session . query ( self . model ) . get ( pk ) def create ( self , session : Session , obj_in : CreateSchema ) -> ModelType : \"\"\"Create\"\"\" obj = self . model ( ** jsonable_encoder ( obj_in )) session . add ( obj ) session . commit () return obj def patch ( self , session : Session , pk : int , obj_in : UpdateSchema ) -> ModelType : \"\"\"Patch\"\"\" obj = self . get_by_id ( session , pk ) update_data = obj_in . dict ( exclude_unset = True ) for key , val in update_data . items (): setattr ( obj , key , val ) session . add ( obj ) session . commit () session . refresh ( obj ) return obj def delete ( self , session : Session , pk : int ) -> None : \"\"\"Delete\"\"\" obj = self . get_by_id ( session , pk ) session . delete ( obj ) session . commit () def count ( self , session : Session ): return session . query ( self . model ) . count () class ArticleDAO ( BaseDAO [ Article , CreateArticleSchema , UpdateArticleSchema ]): model = Article \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Add models and DAO\"","title":"3.4 \u6570\u636e\u8bbf\u95ee"},{"location":"practices/web/#35","text":"\u521b\u5efa src/example_blog/services.py \uff0c\u521b\u5efa\u670d\u52a1\uff1a \"\"\"Service\"\"\" from typing import Generic , List from sqlalchemy.orm import Session from example_blog.dao import ArticleDAO , BaseDAO from example_blog.models import Article from example_blog.schemas import CreateSchema , ModelType , UpdateSchema class BaseService ( Generic [ ModelType , CreateSchema , UpdateSchema ]): dao : BaseDAO def get ( self , session : Session , offset = 0 , limit = 10 ) -> List [ ModelType ]: \"\"\"\"\"\" return self . dao . get ( session , offset = offset , limit = limit ) def total ( self , session : Session ) -> int : return self . dao . count ( session ) def get_by_id ( self , session : Session , pk : int ) -> ModelType : \"\"\"Get by id\"\"\" return self . dao . get_by_id ( session , pk ) def create ( self , session : Session , obj_in : CreateSchema ) -> ModelType : \"\"\"Create a object\"\"\" return self . dao . create ( session , obj_in ) def patch ( self , session : Session , pk : int , obj_in : UpdateSchema ) -> ModelType : \"\"\"Update\"\"\" return self . dao . patch ( session , pk , obj_in ) def delete ( self , session : Session , pk : int ) -> None : \"\"\"Delete a object\"\"\" return self . dao . delete ( session , pk ) class ArticleService ( BaseService [ Article , CreateSchema , UpdateSchema ]): dao = ArticleDAO () \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Add services.\"","title":"3.5 \u670d\u52a1\u5c42"},{"location":"practices/web/#36-fastapi","text":"Fastapi \u662f\u4e00\u4e2a\u8f7b\u91cf\u7684 Web \u6846\u67b6\uff0c\u73b0\u5728\u5f15\u5165\uff0c\u4f7f\u5176\u4f5c\u4e3a API \u5c42 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install fastapi uvicorn \u7f16\u8f91 setup.cfg \uff0c\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a install_requires = click dynaconf sqlalchemy mysqlclient pydantic fastapi uvicorn \u521b\u5efa src/examp.e_blog/views.py \uff0c\u521b\u5efa\u89c6\u56fe\uff1a from fastapi import APIRouter , Depends from sqlalchemy.orm import Session from example_blog.dependencies import CommonQueryParams , get_db from example_blog.schemas import ( ArticleSchema , CreateArticleSchema , UpdateArticleSchema ) from example_blog.services import ArticleService router = APIRouter () _service = ArticleService () @router . get ( '/articles' ) def get ( session : Session = Depends ( get_db ), commons : CommonQueryParams = Depends () ): return _service . get ( session , offset = commons . offset , limit = commons . limit ) @router . get ( '/articles/ {pk} ' ) def get_by_id ( pk : int , session : Session = Depends ( get_db ) ): return _service . get_by_id ( session , pk ) @router . post ( '/articles' , response_model = ArticleSchema ) def create ( obj_in : CreateArticleSchema , session : Session = Depends ( get_db ), ): return _service . create ( session , obj_in ) @router . patch ( '/articles/ {pk} ' , response_model = ArticleSchema ) def patch ( pk : int , obj_in : UpdateArticleSchema , session : Session = Depends ( get_db ) ): return _service . patch ( session , pk , obj_in ) @router . delete ( '/articles/ {pk} ' ) def delete ( pk : int , session : Session = Depends ( get_db ) ): return _service . delete ( session , pk ) \u521b\u5efa src/example_blog/middlewares.py \uff0c\u521b\u5efa\u6570\u636e\u5e93\u4f1a\u8bdd\u4e2d\u95f4\u4ef6\uff1a from typing import Callable from fastapi import FastAPI , Request , Response from example_blog.db import SessionFactory async def db_session_middleware ( request : Request , call_next : Callable ) -> Response : response = Response ( 'Internal server error' , status_code = 500 ) try : request . state . db = SessionFactory () response = await call_next ( request ) finally : request . state . db . close () return response def init_middleware ( app : FastAPI ) -> None : app . middleware ( 'http' )( db_session_middleware ) \u521b\u5efa src/example_blog/dependencies.py \uff0c\u521b\u5efa Fastapi \u7684\u4f9d\u8d56\u9879\uff1a from fastapi import Request from sqlalchemy.orm import Session def get_db ( request : Request ) -> Session : return request . state . db class CommonQueryParams : def __init__ ( self , offset : int = 1 , limit : int = 10 ): self . offset = offset - 1 if self . offset < 0 : self . offset = 0 self . limit = limit if self . limit < 0 : self . limit = 10 \u521b\u5efa src/example_blog/routes.py \uff0c\u521b\u5efa\u8def\u7531\uff1a from fastapi import APIRouter , FastAPI from example_blog import views def router_v1 (): router = APIRouter () router . include_router ( views . router , tags = [ 'Article' ]) return router def init_routers ( app : FastAPI ): app . include_router ( router_v1 (), prefix = '/api/v1' , tags = [ 'v1' ]) \u521b\u5efa src/example_blog/server.py \uff0c\u521b\u5efa\u670d\u52a1\u542f\u52a8\u903b\u8f91\uff1a \"\"\"server\"\"\" import uvicorn from fastapi import FastAPI from example_blog import middlewares , routes from example_blog.config import settings from example_blog.log import init_log class Server : def __init__ ( self ): init_log () self . app = FastAPI () def init_app ( self ): middlewares . init_middleware ( self . app ) routes . init_routers ( self . app ) def run ( self ): self . init_app () uvicorn . run ( app = self . app , host = settings . HOST , port = settings . PORT , ) \u4fee\u6539 src/example_blog/config/settings.yml \uff0c\u589e\u52a0\u670d\u52a1\u914d\u7f6e\uff1a HOST: 127.0.0.1 PORT: 8000 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Add api service.\"","title":"3.6 \u5f15\u5165 Fastapi"},{"location":"practices/web/#37","text":"\u7f16\u8f91 src/example_blog/cmdline.py \uff0c\u589e\u52a0\u542f\u52a8 Server \u903b\u8f91\uff1a @main . command () @click . option ( '-h' , '--host' , show_default = True , help = f 'Host IP. Default: { settings . HOST } ' ) @click . option ( '-p' , '--port' , show_default = True , type = int , help = f 'Port. Default: { settings . PORT } ' ) @click . option ( '--level' , help = 'Log level' ) def server ( host , port , level ): \"\"\"Start server.\"\"\" kwargs = { 'LOGLEVEL' : level , 'HOST' : host , 'PORT' : port , } for name , value in kwargs . items (): if value : settings . set ( name , value ) Server () . run () \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Add server cmdline.\"","title":"3.7 \u7f16\u5199\u542f\u52a8\u547d\u4ee4"},{"location":"practices/web/#38-server","text":"\u547d\u4ee4\u884c\u8fd0\u884c\uff1a example_blog server \u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a INFO: Started server process [21687] 2020-12-28 18:11:56,341 INFO uvicorn.error 21687 139772921304768 Started server process [21687] INFO: Waiting for application startup. 2020-12-28 18:11:56,341 INFO uvicorn.error 21687 139772921304768 Waiting for application startup. INFO: Application startup complete. 2020-12-28 18:11:56,341 INFO uvicorn.error 21687 139772921304768 Application startup complete. INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) 2020-12-28 18:11:56,341 INFO uvicorn.error 21687 139772921304768 Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u6d4f\u89c8\u5668\u6253\u5f00 http://127.0.0.1:8000/docs \u5373\u53ef\u67e5\u770b\u63a5\u53e3\u6587\u6863\u3002 \u63d0\u4ea4\u4ee3\u7801","title":"3.8 \u542f\u52a8 Server"},{"location":"practices/web/#39","text":"\u4e3a\u4e86\u4fbf\u4e8e\u6570\u636e\u6a21\u578b\u53d8\u66f4\uff0c\u5f15\u5165 alembic \u505a\u6570\u636e\u5e93\u8fc1\u79fb\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install alembic \u7f16\u8f91 setup.cfg \uff0c\u5c06\u589e\u52a0\u5b89\u88c5\u4f9d\u8d56\uff1a install_requires = click dynaconf sqlalchemy mysqlclient pydantic fastapi uvicorn alembic \u521d\u59cb\u5316 alembic \uff1a alembic init migration mv alembic.ini src/example_blog/migration \u5c06 alembic \u7684\u76f8\u5173\u6587\u4ef6\u5168\u90e8\u653e\u5230 src/example_blog/migration \u76ee\u5f55\u4e2d \u4fee\u6539 src/example_blog/migration/alembic.ini \uff1a # A generic, single database configuration. [alembic] # path to migration scripts ;script_location = src/example_blog/migration script_location = . # template used to generate migration files # file_template = %%(rev)s_%%(slug)s # timezone to use when rendering the date # within the migration file as well as the filename. # string value is passed to dateutil.tz.gettz() # leave blank for localtime # timezone = # max length of characters to apply to the # \"slug\" field # truncate_slug_length = 40 # set to 'true' to run the environment during # the 'revision' command, regardless of autogenerate # revision_environment = false # set to 'true' to allow .pyc and .pyo files without # a source .py file to be detected as revisions in the # versions/ directory # sourceless = false # version location specification; this defaults # to src/example_blog/migration/versions. When using multiple version # directories, initial revisions must be specified with --version-path # version_locations = %(here)s/bar %(here)s/bat src/example_blog/migration/versions # the output encoding used when revision files # are written from script.py.mako # output_encoding = utf-8 ;sqlalchemy.url = driver://user:pass@localhost/dbname [post_write_hooks] # post_write_hooks defines scripts or Python functions that are run # on newly generated revision scripts. See the documentation for further # detail and examples # format using \"black\" - use the console_scripts runner, against the \"black\" entrypoint # hooks=black # black.type=console_scripts # black.entrypoint=black # black.options=-l 79 # Logging configuration [loggers] keys = root,sqlalchemy,alembic [handlers] keys = console [formatters] keys = generic [logger_root] level = WARN handlers = console qualname = [logger_sqlalchemy] level = WARN handlers = qualname = sqlalchemy.engine [logger_alembic] level = INFO handlers = qualname = alembic [handler_console] class = StreamHandler args = (sys.stderr,) level = NOTSET formatter = generic [formatter_generic] format = %(levelname)-5.5s [%(name)s] %(message)s datefmt = %H:%M:%S \u4fee\u6539 src/example_blog/migration/env.py \uff1a from logging.config import fileConfig from alembic import context from sqlalchemy import engine_from_config , pool from example_blog import db from example_blog.models import BaseModel # this is the Alembic Config object, which provides # access to the values within the .ini file in use. config = context . config # Interpret the config file for Python logging. # This line sets up loggers basically. fileConfig ( config . config_file_name ) # add your model's MetaData object here # for 'autogenerate' support # from myapp import mymodel # target_metadata = mymodel.Base.metadata # target_metadata = None target_metadata = BaseModel . metadata # other values from the config, defined by the needs of env.py, # can be acquired: # my_important_option = config.get_main_option(\"my_important_option\") # ... etc. def run_migrations_offline (): \"\"\"Run migrations in 'offline' mode. This configures the context with just a URL and not an Engine, though an Engine is acceptable here as well. By skipping the Engine creation we don't even need a DBAPI to be available. Calls to context.execute() here emit the given string to the script output. \"\"\" context . configure ( url = db . url , target_metadata = target_metadata , literal_binds = True , dialect_opts = { \"paramstyle\" : \"named\" }, ) with context . begin_transaction (): context . run_migrations () def run_migrations_online (): \"\"\"Run migrations in 'online' mode. In this scenario we need to create an Engine and associate a connection with the context. \"\"\" configuration = config . get_section ( config . config_ini_section ) configuration [ 'sqlalchemy.url' ] = str ( db . url ) connectable = engine_from_config ( configuration , prefix = \"sqlalchemy.\" , poolclass = pool . NullPool , ) with connectable . connect () as connection : context . configure ( connection = connection , target_metadata = target_metadata ) with context . begin_transaction (): context . run_migrations () if context . is_offline_mode (): run_migrations_offline () else : run_migrations_online () \u7f16\u5199 src/example_blog/cmdline.py \uff0c\u521b\u5efa\u8fc1\u79fb\u547d\u4ee4\uff1a from pathlib import Path from alembic import config from click import Context @main . command () @click . pass_context @click . option ( '-h' , '--help' , is_flag = True ) @click . argument ( 'args' , nargs =- 1 ) def migrate ( ctx : Context , help , args ): \"\"\"usage migrate -- arguments \"\"\" with utils . chdir ( Path ( __file__ ) . parent / 'migration' ): argv = list ( args ) if help : argv . append ( '--help' ) config . main ( prog = ctx . command_path , argv = argv ) \u521b\u5efa utils.py \uff1a \"\"\"Utils\"\"\" import contextlib import os from os import PathLike from typing import Union @contextlib . contextmanager def chdir ( path : Union [ str , PathLike ]): cwd = os . getcwd () os . chdir ( path ) yield os . chdir ( cwd ) \u63d0\u793a \u7531\u4e8e\u4f7f\u7528\u4e86 click \u5305\u88c5\u4e86 alembic \u547d\u4ee4\uff0c\u5728\u4f7f\u7528\u4e0a\u4f1a\u6709\u70b9\u4e0d\u540c\uff0c\u9ed8\u8ba4\u5e94\u8be5\u4f7f\u7528 migrate -- \u540e\u52a0 alembic \u7684\u5176\u4ed6\u53c2\u6570\uff0c\u5426\u5219\u591a\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u4f1a\u65e0\u6cd5\u8bc6\u522b\u3002 \u4e3a\u4e86\u5c06 src/example_blog/migration \u6253\u5305\u5230\u9879\u76ee\u4e2d\uff0c\u9700\u8981\u5c06\u5176\u53d8\u6210 Python \u5305\u3002 \u521b\u5efa src/example_blog/migration/__init__.py \u548c src/example_blog/migration/versions/__init__.py \u7f16\u8f91 setup.cfg \uff0c\u5c06\u8fc1\u79fb\u811a\u672c\u914d\u7f6e\u4fe1\u606f\u52a0\u5165\u6253\u5305\u7cfb\u7edf\uff1a [options.package_data] example_blog.config = settings.yml example_blog.migration = alembic.ini README script.py.mako \u521b\u5efa\u7a7a\u767d\u6570\u636e\u5e93\u8fc1\u79fb\u7248\u672c\uff1a example_blog migrate -- revision -m \"init\" \u6267\u884c\u8fc1\u79fb\uff1a example_blog migrate -- upgrade head \u521b\u5efa\u7b2c\u4e00\u4e2a\u6570\u636e\u5e93\u8fc1\u79fb\u7248\u672c\uff1a example_blog migrate -- revision --autogenerate -m \"init_table\" \u6267\u884c\u8fc1\u79fb\uff1a example_blog migrate -- upgrade head \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"Add alembic migrate.\"","title":"3.9 \u5f15\u5165\u8fc1\u79fb\u5de5\u5177"},{"location":"practices/web/#4","text":"\u6d4b\u8bd5\u662f\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u91cd\u8981\u7684\u4e00\u73af\uff0c\u80fd\u591f\u5728\u53d1\u5e03\u4e4b\u524d\u68c0\u67e5\u51fa\u66f4\u591a\u53ef\u80fd\u51fa\u73b0\u7684\u5f02\u5e38\u60c5\u51b5\u3002 \u6d4b\u8bd5\u6846\u67b6\u9009\u7528\u6bd4\u8f83\u5e38\u7528\u7684 pytest \uff0c\u5b83\u5177\u6709\u5f3a\u5927\u7684\u529f\u80fd\u548c\u5f88\u597d\u7684\u517c\u5bb9\u6027\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install -d pytest \u521b\u5efa tests/settings.yml \uff0c\u521d\u59cb\u5316\u6d4b\u8bd5\u914d\u7f6e\uff1a DEBUG: false LOG_LEVEL: INFO HOST: 127.0.0.1 PORT: 8000 DATABASE: DRIVER: mysql NAME: example_blog HOST: 127.0.0.1 PORT: 3306 USERNAME: root PASSWORD: root QUERY: charset: utf8mb4 \u7f16\u8f91 tests/__init__.py \uff0c\u52a0\u8f7d\u6d4b\u8bd5\u914d\u7f6e\uff1a import os from example_blog.config import settings settings . load_file ( os . path . join ( os . path . dirname ( __file__ ), 'settings.yml' )) settings . load_file ( os . path . join ( os . path . dirname ( __file__ ), 'settings.local.yml' )) \u867d\u7136\u672c\u5730\u5f00\u53d1\u914d\u7f6e\u53ef\u4ee5\u4e34\u65f6\u8c03\u6574\uff0c\u4f46\u5bf9\u4e8e\u5f00\u53d1\u73af\u5883\u548c\u6d4b\u8bd5\u73af\u5883\u4f9d\u7136\u6709\u4e9b\u4e0d\u4e00\u6837\u3002\u4ece\u4e0a\u9762\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u5230\u52a0\u8f7d\u4e86\u4e24\u4e2a\u6d4b\u8bd5\u914d\u7f6e\uff0c\u548c Dynaconf \u89c4\u5219\u4e00\u6837\uff0c settings.local.yml \u914d\u7f6e\u4e3a\u672c\u5730\u914d\u7f6e\uff0c\u4e0d\u4f1a\u88ab\u4ee3\u7801\u8ffd\u8e2a\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u662f\u624b\u52a8\u5b9e\u73b0\u7684\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"test: Init test.\"","title":"4. \u6d4b\u8bd5\u548c\u4f18\u5316\u4ee3\u7801"},{"location":"practices/web/#41","text":"\u7f16\u5199\u6d4b\u8bd5\u914d\u7f6e\uff1a \u65b0\u5efa tests/conftest.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u914d\u7f6e\uff1a \"\"\"Test config\"\"\" import os from pathlib import Path import pytest from alembic import command , config from sqlalchemy.orm import Session from example_blog import migration from example_blog.config import settings from example_blog.db import SessionFactory from example_blog.models import Article @pytest . fixture () def migrate (): \"\"\"Re-init database when run a test.\"\"\" os . chdir ( Path ( migration . __file__ ) . parent ) alembic_config = config . Config ( './alembic.ini' ) alembic_config . set_main_option ( 'script_location' , os . getcwd ()) print ( ' \\n ----- RUN ALEMBIC MIGRATION: ----- \\n ' ) command . downgrade ( alembic_config , 'base' ) command . upgrade ( alembic_config , 'head' ) try : yield finally : command . downgrade ( alembic_config , 'base' ) db_name = settings . DATABASE . get ( 'NAME' ) if settings . DATABASE . DRIVER == 'sqlite' and os . path . isfile ( db_name ): try : os . remove ( db_name ) except FileNotFoundError : pass @pytest . fixture () def session ( migrate ) -> Session : \"\"\"session fixture\"\"\" _s = SessionFactory () yield _s _s . close () @pytest . fixture () def init_article ( session ): \"\"\"Init article\"\"\" a_1 = Article ( title = 'Hello world' , body = 'Hello world, can you see me?' ) a_2 = Article ( title = 'Love baby' , body = 'I love you everyday, and i want with you.' ) a_3 = Article ( title = 'Tomorrow' , body = 'When the sun rises, this day is fine day, cheer up.' ) session . add_all ([ a_1 , a_2 , a_3 ]) session . commit () \u7f16\u5199\u6570\u636e\u8bbf\u95ee\u5c42\u7528\u4f8b\uff1a import pytest from example_blog.dao import ArticleDAO from example_blog.models import Article from example_blog.schemas import CreateArticleSchema , UpdateArticleSchema class TestArticle : @pytest . fixture () def dao ( self , init_article ): yield ArticleDAO () def test_get ( self , dao , session ): users = dao . get ( session ) assert len ( users ) == 3 users = dao . get ( session , limit = 2 ) assert len ( users ) == 2 users = dao . get ( session , offset = 4 ) assert not users def test_get_by_id ( self , dao , session ): user = dao . get_by_id ( session , 1 ) assert user . id == 1 def test_create ( self , dao , session ): origin_count = session . query ( dao . model ) . count () obj_in = CreateArticleSchema ( title = 'test' ) dao . create ( session , obj_in ) count = session . query ( dao . model ) . count () assert origin_count + 1 == count def test_patch ( self , dao , session ): obj : Article = session . query ( dao . model ) . first () body = obj . body obj_in = UpdateArticleSchema ( body = 'test' ) updated_obj : Article = dao . patch ( session , obj . id , obj_in ) assert body != updated_obj . body def test_delete ( self , dao , session ): origin_count = session . query ( dao . model ) . count () dao . delete ( session , 1 ) count = session . query ( dao . model ) . count () assert origin_count - 1 == count def test_count ( self , dao , session ): count = dao . count ( session ) assert count == 3 \u8fd0\u884c\u6d4b\u8bd5\uff1a pytest tests/test_dao.py \u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"test: Add dao test.\"","title":"4.1 \u6d4b\u8bd5\u6570\u636e\u8bbf\u95ee\u5c42"},{"location":"practices/web/#42","text":"\u521b\u5efa tests/test_services.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\uff1a import pytest from example_blog.schemas import CreateArticleSchema , UpdateArticleSchema from example_blog.services import ArticleService class TestArticleService : @pytest . fixture () def service ( self , init_article ): yield ArticleService () def test_get ( self , service , session ): objs = service . get ( session ) assert len ( objs ) == 3 objs = service . get ( session , limit = 2 ) assert len ( objs ) == 2 objs = service . get ( session , offset = 5 ) assert not objs def test_total ( self , service , session ): total = service . total ( session ) assert total == 3 def test_by_id ( self , service , session ): __obj = session . query ( service . dao . model ) . first () obj = service . get_by_id ( session , __obj . id ) assert obj . id == __obj . id def test_create ( self , service , session ): origin_count = service . total ( session ) obj_in = CreateArticleSchema ( title = 'test' ) service . create ( session , obj_in ) count = service . total ( session ) assert origin_count + 1 == count def test_patch ( self , service , session ): origin_obj = session . query ( service . dao . model ) . first () body = origin_obj . body obj_in = UpdateArticleSchema ( body = 'test' ) obj = service . patch ( session , origin_obj . id , obj_in ) assert body != obj . body def test_delete ( self , service , session ): origin_count = service . total ( session ) obj = session . query ( service . dao . model ) . first () service . delete ( session , obj . id ) count = service . total ( session ) assert origin_count - 1 == count \u8fd0\u884c\u6d4b\u8bd5\uff1a pytest tests/test_services.py \u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"test: Add service test.\"","title":"4.2 \u6d4b\u8bd5\u670d\u52a1\u5c42"},{"location":"practices/web/#43","text":"\u7f16\u8f91 tests/conftest.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u914d\u7f6e\uff1a from fastapi.testclient import TestClient from example_blog import migration , server @pytest . fixture def client (): \"\"\"Fast api test client factory\"\"\" _s = server . Server () _s . init_app () _c = TestClient ( app = _s . app ) yield _c \u7531\u4e8e Fastapi \u7684 TestClient \u4f9d\u8d56 requests \uff0c\u6240\u4ee5\u9700\u8981\u5148\u5b89\u88c5\uff1a pipenv install -d requests \u521b\u5efa tests/test_views.py \uff0c\u6d4b\u8bd5\u8bd5\u56fe\uff1a import pytest from fastapi.encoders import jsonable_encoder from fastapi.responses import Response from example_blog.models import Article from example_blog.schemas import ModelType def test_docs ( client ): \"\"\"Test view\"\"\" response = client . get ( '/docs' ) assert response . status_code == 200 class BaseTest : version = 'v1' base_url : str model : ModelType @pytest . fixture () def init_data ( self ): pass def url ( self , pk : int = None ) -> str : url_split = [ 'api' , self . version , self . base_url ] if pk : url_split . append ( str ( pk )) return '/' . join ( url_split ) def assert_response_ok ( self , response : Response ): assert response . status_code == 200 def test_get ( self , client , session , init_data ): count = session . query ( self . model ) . count () response = client . get ( self . url ()) self . assert_response_ok ( response ) assert count == len ( response . json ()) def test_get_by_id ( self , client , session , init_data ): obj = session . query ( self . model ) . first () response = client . get ( self . url ( obj . id )) self . assert_response_ok ( response ) assert jsonable_encoder ( obj ) == response . json () def test_delete ( self , client , session , init_data ): count = session . query ( self . model ) . count () session . close () response = client . delete ( self . url ( 1 )) self . assert_response_ok ( response ) after_count = session . query ( self . model ) . count () assert after_count == 2 assert count - 1 == after_count class TestArticle ( BaseTest ): model = Article base_url = 'articles' @pytest . fixture () def init_data ( self , init_article ): pass def test_create ( self , client , session , init_data ): response = client . post ( self . url (), json = { 'title' : 'xxx' } ) self . assert_response_ok ( response ) assert response . json () . get ( 'title' ) == 'xxx' def test_patch ( self , client , session , init_data ): obj = session . query ( Article ) . first () response = client . patch ( self . url ( obj . id ), json = { 'body' : 'xxx' }) self . assert_response_ok ( response ) assert response . json () . get ( 'body' ) != obj . body \u8fd0\u884c\u6d4b\u8bd5\uff1a pytest tests/test_views.py \u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"test: Add view test.\"","title":"4.3 \u6d4b\u8bd5\u8bd5\u56fe\u5c42"},{"location":"practices/web/#44","text":"\u7f16\u8f91 tests/conftest.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u914d\u7f6e\uff1a from click.testing import CliRunner @pytest . fixture def cli (): runner = CliRunner ( echo_stdin = True , mix_stderr = False ) yield runner \u521b\u5efa tests/test_cmdline.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\uff1a import uvicorn from alembic import config import example_blog from example_blog import cmdline def test_main ( cli ): result = cli . invoke ( cmdline . main ) assert result . exit_code == 0 result = cli . invoke ( cmdline . main , '-V' ) assert result . exit_code == 0 assert str ( result . output ) . strip () == example_blog . __version__ def test_run ( cli , mocker ): mock_run = mocker . patch . object ( uvicorn , 'run' ) result = cli . invoke ( cmdline . main , [ 'server' , '-h' , '127.0.0.1' , '-p' , '8080' ]) assert result . exit_code == 0 mock_run . assert_called_once_with ( app = mocker . ANY , host = '127.0.0.1' , port = 8080 ) def test_migrate ( cli , mocker ): mock_main = mocker . patch . object ( config , 'main' ) cli . invoke ( cmdline . main , [ 'migrate' , '--help' ]) mock_main . assert_called_once () \u56e0\u4e3a\u5355\u5143\u6d4b\u8bd5\u4e2d\u4f7f\u7528\u4e86 mock \uff0c\u6240\u4ee5\u5b89\u88c5\u914d\u5408 pytest \u4f7f\u7528\u7684 pytest-mock pipenv install -d pytest-mock \u8fd0\u884c\u6d4b\u8bd5\uff1a pytest tests/test_views.py \u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"test: Add cmdline test.\"","title":"4.4 \u6d4b\u8bd5\u547d\u4ee4\u884c"},{"location":"practices/web/#45","text":"\u521b\u5efa tests/test_dependencies.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\uff1a import pytest from example_blog.dependencies import CommonQueryParams @pytest . mark . parametrize ( [ 'args' , 'expect_value' ], [ ((), ( 0 , 10 )), (( 0 ,), ( 0 , 10 )), (( - 10 , - 10 ), ( 0 , 10 )), (( 5 , 100 ), ( 4 , 100 )), ] ) def test_common_query_params ( args , expect_value ): params = CommonQueryParams ( * args ) assert params . offset == expect_value [ 0 ] assert params . limit == expect_value [ 1 ] \u521b\u5efa tests/test_utils.py \uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u4f8b\uff1a import os from example_blog.utils import chdir def test_chdir (): path = '/tmp' cwd = os . getcwd () with chdir ( path ): assert path == os . getcwd () assert cwd == os . getcwd () \u8fd0\u884c\u6d4b\u8bd5\uff1a pytest \u5982\u679c\u8fd0\u884c\u6210\u529f\uff0c\u5219\u6d4b\u8bd5\u6b63\u786e\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"test: Add other test.\" \u81f3\u6b64\uff0c\u6240\u6709\u6d4b\u8bd5\u8fd0\u884c\u5b8c\u6bd5\uff0c\u9664\u4e86 src/example_blog/migration \u4e4b\u5916\u7684\u5305\u7684\u6d4b\u8bd5\u5df2\u7ecf\u53ef\u4ee5\u5168\u90e8\u8986\u76d6\u3002","title":"4.5 \u5176\u4ed6\u6d4b\u8bd5"},{"location":"practices/web/#46","text":"\u4ee3\u7801\u98ce\u683c\u548c\u4ee3\u7801\u89c4\u8303\u662f\u4e00\u4e2a\u5f00\u53d1\u4eba\u5458\u5f00\u53d1\u4fee\u517b\u7684\u4f53\u73b0\uff0c\u597d\u7684\u4ee3\u7801\u80fd\u591f\u8ba9\u4eba\u773c\u524d\u4e00\u4eae\u3002\u4e3a\u4e86\u89c4\u8303\uff0c\u793e\u533a\u5f00\u53d1\u8bb8\u591a\u5de5\u5177\u7528\u4e8e\u68c0\u6d4b\u4ee3\u7801\u3002","title":"4.6 \u4f18\u5316\u4ee3\u7801"},{"location":"practices/web/#461","text":"isort \u662f\u4e00\u4e2a\u81ea\u52a8\u683c\u5f0f\u5316\u5bfc\u5165\u7684\u5de5\u5177\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install -d isort \u683c\u5f0f\u5316\u4ee3\u7801\uff1a isort . \u6b64\u65f6\u53ef\u4ee5\u4e0d\u7528\u5148\u6025\u7740\u63d0\u4ea4\uff0c\u5728\u540e\u9762\u5bf9\u4ee3\u7801\u98ce\u683c\u68c0\u6d4b\u7684\u65f6\u5019\u53ef\u80fd\u8fd8\u4f1a\u518d\u6b21\u683c\u5f0f\u5316\u4ee3\u7801\u3002","title":"4.6.1 \u4f18\u5316\u5bfc\u5165"},{"location":"practices/web/#462","text":"flake8 \u662f\u4e00\u4e2a\u9075\u5faa PEP8 \u89c4\u8303\u68c0\u6d4b\u4ee3\u7801\u7684\u5de5\u5177\u3002\u4f7f\u7528\u8be5\u5de5\u5177\uff0c\u53ef\u4ee5\u68c0\u6d4b\u51fa\u54ea\u4e9b\u4ee3\u7801\u4e0d\u7b26\u5408 PEP8 \u89c4\u8303\u3002 \u5b89\u88c5\u4f9d\u8d56\uff1a pipenv install -d flake8 \u68c0\u6d4b\u4ee3\u7801\uff1a flake8 \u6839\u636e\u8f93\u51fa\u63d0\u793a\uff0c\u53c2\u7167 flake8 \u89c4\u5219 \u8fdb\u884c\u8c03\u6574\uff0c\u76f4\u81f3\u5b8c\u5168\u7b26\u5408\u4e3a\u6b62\u3002 \u63d0\u4ea4\u4ee3\u7801\uff1a git add . git commit -m \"feat: Lint code\"","title":"4.6.2 \u4f18\u5316\u4ee3\u7801\u98ce\u683c"},{"location":"practices/web/#5","text":"\u5230\u8fd9\u4e00\u6b65\uff0c setup.cfg \u6587\u4ef6\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a [metadata] name = example_blog version = attr: example_blog.__version__ author = huagang author_email = huagang517@126.com description = This is example blog system. keywords = blog example long_description = file: README.md long_description_content_type = text/markdown classifiers = Operating System :: OS Independent Programming Language :: Python :: 3.7 [options] python_requires > = 3.7 include_package_data = True packages = find: package_dir = = src install_requires = click dynaconf sqlalchemy mysqlclient pydantic fastapi uvicorn alembic [options.packages.find] where = src [options.entry_points] console_scripts = example_blog = example_blog.cmdline:main [options.package_data] example_blog.config = settings.yml example_blog.migration = alembic.ini README script.py.mako [options.data_files] etc/example_blog = src/example_blog/config/settings.yml \u5728\u6574\u4e2a\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u662f\u9010\u6b65\u4e30\u5bcc\u6b64\u6587\u4ef6\u7684\u3002\u8fd9\u662f\u9879\u76ee\u7684\u63cf\u8ff0\u6587\u4ef6\uff0c\u63cf\u8ff0\u4e86\u6253\u5305\u7684\u914d\u7f6e\u4fe1\u606f\u3002","title":"5. \u6253\u5305\u53d1\u5e03"},{"location":"practices/web/#51","text":"python setup.py sdist bdist_wheel \u5728 dist \u76ee\u5f55\u4e2d\u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f .tar.gz \u7684\u6e90\u7801\u6253\u5305\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f .whl \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002","title":"5.1 \u6253\u5305"},{"location":"practices/web/#52","text":"\u5c06\u5f00\u53d1\u597d\u7684\u9879\u76ee\u53d1\u5e03\u5230\u7d22\u5f15\u4ed3\u5e93\uff0c\u6216\u5185\u7f51\u7684\u79c1\u6709\u4ed3\u5e93\u3002 \u4f7f\u7528 twine \u4e0a\u4f20\uff1a twine upload dist/* https://www.python.org/doc/sunset-python-2/ \u21a9 \u73b0\u5728 Anaconda / Miniconda \u5728 Windows \u4e0a\u4f7f\u7528\u865a\u62df\u73af\u5883\u5de5\u5177 Virtualenv \u5b58\u5728\u4e00\u4e9b\u517c\u5bb9\u95ee\u9898\uff0c\u800c\u4e14 Pipenv \u662f\u4f9d\u8d56\u8fd9\u4e2a\u5de5\u5177\u7684\u3002\u8bf7\u53c2\u8003 conda support - Windows 3.7+ #1986 \u548c virtualenv==20.0.34 not compatible with python on windows #12094 \u21a9","title":"5.2 \u53d1\u5e03"},{"location":"standard/language_rules/","text":"Python \u8bed\u8a00\u89c4\u8303 \u672c\u6587\u6863\u4e3a Google Python Style Guide \u7b2c\u4e8c\u7ae0 Python Language Rules \u7684\u8bd1\u6587\u3002 \u6700\u540e\u66f4\u65b0\u65f6\u95f4\uff1a 2021-04-28 \u5982\u679c\u6709\u7ffb\u8bd1\u9519\u8bef\u6216\u8868\u8ff0\u4e0d\u51c6\u786e\u7684\u95ee\u9898\uff0c\u6b22\u8fce\u63d0\u4ea4 PR\uff0c\u611f\u8c22\u60a8\u7684\u53c2\u4e0e\u3002 1.1 Lint \u4f7f\u7528 pylintrc \u914d\u7f6e\uff0c\u5bf9\u4f60\u7684\u4ee3\u7801\u8fd0\u884c pylint \u3002 1.1.1 \u5b9a\u4e49 Pylint \u662f\u4e00\u4e2a\u5728 Python \u6e90\u4ee3\u7801\u4e2d\u67e5\u627e bug \u548c\u98ce\u683c\u95ee\u9898\u7684\u5de5\u5177\u3002\u5bf9\u4e8e C \u548c C++ \u8fd9\u6837\u7684\u4e0d\u90a3\u4e48\u52a8\u6001\u7684\u8bed\u8a00\uff0c\u8fd9\u4e9b\u95ee\u9898\u901a\u5e38\u7531\u7f16\u8bd1\u5668\u6765\u6355\u83b7\u3002\u7531\u4e8e Python \u7684\u52a8\u6001\u7279\u6027\uff0c\u6709\u4e9b\u8b66\u544a\u53ef\u80fd\u4e0d\u5bf9\u3002\u4e0d\u8fc7\u4f2a\u544a\u8b66\u5e94\u8be5\u5f88\u5c11\u3002 1.1.2 \u4f18\u70b9 \u53ef\u4ee5\u6355\u83b7\u5bb9\u6613\u5ffd\u89c6\u7684\u9519\u8bef\uff0c\u4f8b\u5982\u8f93\u5165\u9519\u8bef\uff0c\u4f7f\u7528\u672a\u8d4b\u503c\u7684\u53d8\u91cf\u7b49\u3002 1.1.3 \u7f3a\u70b9 pylint \u4e0d\u5b8c\u7f8e\u3002\u8981\u5229\u7528\u5176\u4f18\u52bf\uff0c\u6211\u4eec\u6709\u65f6\u4faf\u9700\u8981\uff1a\u56f4\u7ed5\u7740\u5b83\u6765\u5199\u4ee3\u7801\u3001\u6291\u5236\u5176\u544a\u8b66\u3001\u6539\u8fdb\u5b83\u6216\u8005\u5ffd\u7565\u5b83\u3002 1.1.4 \u7ed3\u8bba \u786e\u4fdd\u5bf9\u4f60\u7684\u4ee3\u7801\u8fd0\u884c pylint \u3002\u6291\u5236\u4e0d\u51c6\u786e\u7684\u8b66\u544a\uff0c\u4ee5\u4fbf\u80fd\u591f\u5c06\u5176\u4ed6\u8b66\u544a\u66b4\u9732\u51fa\u6765\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u4e00\u4e2a\u884c\u6ce8\u91ca\u6765\u6291\u5236\u544a\u8b66\u3002\u4f8b\u5982\uff1a dict = 'something awful' # Bad idea... pylint: disable=redefined-builtin pylint \u8b66\u544a\u662f\u4ee5\u4e00\u4e2a\u7b26\u53f7\u540d (\u5982 empty-docstring ) \u6765\u6807\u8bc6\u7684\uff0cGoogle \u7279\u5b9a\u7684\u8b66\u544a\u4ee5 g- \u5f00\u5934\u3002 \u5982\u679c\u4ece\u7b26\u53f7\u540d\u79f0\u4e2d\u770b\u4e0d\u51fa\u7981\u7528\u7684\u539f\u56e0\uff0c\u90a3\u4e48\u8bf7\u5bf9\u5176\u589e\u52a0\u4e00\u4e2a\u8be6\u7ec6\u89e3\u91ca\u3002 \u91c7\u7528\u8fd9\u79cd\u6291\u5236\u65b9\u5f0f\u7684\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u67e5\u627e\u6291\u5236\u5e76\u56de\u987e\u5b83\u4eec\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u6765\u83b7\u53d6 pylint \u8b66\u544a\u5217\u8868\uff1a pylint --list-msgs \u83b7\u53d6\u5173\u4e8e\u7279\u5b9a\u6d88\u606f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u6267\u884c\uff1a pylint --help-msg = C6409 \u76f8\u6bd4\u8f83\u4e8e\u4e4b\u524d\u4f7f\u7528\u7684 pylint: disable-msg \uff0c\u672c\u6587\u63a8\u8350\u4f7f\u7528 pylint: disable \u3002 \u672a\u4f7f\u7528\u53c2\u6570\u7684\u8b66\u544a\u53ef\u4ee5\u901a\u8fc7\u5220\u9664\u51fd\u6570\u5f00\u5934\u7684\u53d8\u91cf\u6765\u6d88\u9664\u3002\u5e76\u5305\u542b\u4e00\u4e2a\u6ce8\u91ca\u89e3\u91ca\u4e3a\u4ec0\u4e48\u5220\u9664\u5b83\u3002\u4f7f\u7528 \u201cUnused.\u201d \u6ce8\u91ca\u5c31\u8db3\u591f\u4e86\u3002\u4f8b\u5982\uff1a def viking_cafe_order ( spam , beans , eggs = None ): del beans , eggs # Unused by vikings. return spam + spam + spam \u8981\u6291\u5236\u8fd9\u79cd\u8b66\u544a\u7684\u5e38\u89c1\u5f62\u5f0f\u8fd8\u5305\u62ec\u4f7f\u7528 \u201c_\" \u4f5c\u4e3a\u672a\u4f7f\u7528\u53c2\u6570\u7684\u6807\u8bc6\u7b26\uff0c\u6216\u5728\u53c2\u6570\u540d\u524d\u52a0\u4e0a \u201cunused_\u201d\uff0c\u6216\u5c06\u5b83\u4eec\u8d4b\u503c\u7ed9 \u201c_\"\u3002 \u4e0a\u8ff0\u7684\u8fd9\u4e9b\u5f62\u5f0f\u90fd\u662f\u5141\u8bb8\u7684\uff0c\u4f46\u4e0d\u518d\u63a8\u8350\u3002\u8c03\u7528\u65b9\u6cd5\u65f6\u6309\u540d\u79f0\u4f20\u9012\u7684\u8fd9\u4e9b\u53c2\u6570\uff0c\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u4f7f\u7528\u3002 1.2 \u5bfc\u5165 \u53ea\u5bf9\u5305\u548c\u6a21\u5757\u4f7f\u7528 import \u8bed\u53e5\uff0c\u800c\u4e0d\u662f\u5355\u72ec\u7684\u7c7b\u6216\u51fd\u6570\u3002\u6ce8\u610f\uff1a typing \u6a21\u5757\u662f\u4e2a\u7279\u4f8b\u3002 1.2.1 \u5b9a\u4e49 \u6a21\u5757\u95f4\u5171\u4eab\u4ee3\u7801\u7684\u91cd\u7528\u673a\u5236\u3002 1.2.2 \u4f18\u70b9 \u547d\u540d\u7a7a\u95f4\u7ba1\u7406\u7ea6\u5b9a\u5341\u5206\u7b80\u5355\u3002\u6bcf\u4e2a\u6807\u8bc6\u7b26\u7684\u6765\u6e90\u90fd\u7528\u4e00\u79cd\u4e00\u81f4\u7684\u65b9\u5f0f\u6307\u793a\uff1a x.Obj \u8868\u793a Obj \u5bf9\u8c61\u5b9a\u4e49\u5728\u6a21\u5757 x \u4e2d\u3002 1.2.3 \u7f3a\u70b9 \u6a21\u5757\u540d\u4ecd\u53ef\u80fd\u51b2\u7a81\u3002\u6709\u4e9b\u6a21\u5757\u540d\u592a\u957f, \u4e0d\u592a\u65b9\u4fbf\u3002 1.2.4 \u7ed3\u8bba \u4f7f\u7528 import x \u6765\u5bfc\u5165\u5305\u548c\u6a21\u5757\u3002 \u4f7f\u7528 from x import y \uff0c\u5176\u4e2d x \u662f\u5305\u524d\u7f00\uff0c y \u662f\u4e0d\u5e26\u524d\u7f00\u7684\u6a21\u5757\u540d\u3002 \u4f7f\u7528 from x import y as z \uff0c\u5982\u679c\u4e24\u4e2a\u8981\u5bfc\u5165\u7684\u6a21\u5757\u90fd\u53eb\u505a z \u6216\u8005 y \u592a\u957f\u4e86\u3002 \u53ea\u6709\u5f53 z \u662f\u6807\u51c6\u7f29\u5199\uff08\u4f8b\u5982\uff0c numpy \u4e3a np \uff09\u65f6\uff0c\u624d\u4f7f\u7528 import y as z \u3002 \u4f8b\u5982\uff0c\u6a21\u5757 sound.effects.echo \u53ef\u4ee5\u7528\u5982\u4e0b\u65b9\u5f0f\u5bfc\u5165\uff1a from sound.effects import echo ... echo . EchoFilter ( input , output , delay = 0.7 , atten = 4 ) \u5bfc\u5165\u65f6\u4e0d\u8981\u4f7f\u7528\u76f8\u5bf9\u540d\u79f0\u3002\u5373\u4f7f\u6a21\u5757\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\uff0c\u4e5f\u8981\u4f7f\u7528\u5b8c\u6574\u5305\u540d\u3002\u8fd9\u80fd\u5e2e\u52a9\u4f60\u907f\u514d\u65e0\u610f\u95f4\u5bfc\u5165\u4e00\u4e2a\u5305\u4e24\u6b21\u3002 \u4ece typing \u6a21\u5757\u548c six.moves \u6a21\u5757\u5bfc\u5165\u4e0d\u53d7\u6b64\u89c4\u5219\u7ea6\u675f\u3002 1.3 \u5305 \u4f7f\u7528\u6a21\u5757\u7684\u5168\u8def\u5f84\u540d\u6765\u5bfc\u5165\u6bcf\u4e2a\u6a21\u5757 1.3.1 \u4f18\u70b9 \u907f\u514d\u6a21\u5757\u540d\u51b2\u7a81\u3002\u67e5\u627e\u5305\u66f4\u5bb9\u6613\u3002 1.3.2 \u7f3a\u70b9 \u90e8\u7f72\u4ee3\u7801\u53d8\u96be\uff0c\u56e0\u4e3a\u4f60\u5fc5\u987b\u590d\u5236\u5305\u5c42\u6b21\u3002 1.3.3 \u7ed3\u8bba \u6240\u6709\u7684\u65b0\u4ee3\u7801\u90fd\u5e94\u8be5\u7528\u5b8c\u6574\u5305\u540d\u6765\u5bfc\u5165\u6bcf\u4e2a\u6a21\u5757\u3002 \u5e94\u8be5\u50cf\u4e0b\u9762\u8fd9\u6837\u5bfc\u5165\uff1a \u63a8\u8350 # Reference absl.flags in code with the complete name (verbose). import absl.flags from doctor.who import jodie FLAGS = absl . flags . FLAGS \u63a8\u8350 # Reference flags in code with just the module name (common). from absl import flags from doctor.who import jodie FLAGS = flags . FLAGS \u4e0d\u63a8\u8350 ( \u5047\u8bbe jodie.py \u6587\u4ef6\u5728 doctor/who/where \u4e2d ) # Unclear what module the author wanted and what will be imported. The actual # import behavior depends on external factors controlling sys.path. # Which possible jodie module did the author intend to import? import jodie \u5c3d\u7ba1\u5728\u67d0\u4e9b\u73af\u5883\u4e2d\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f46\u4e0d\u5e94\u5047\u5b9a\u4e3b\u4e8c\u8fdb\u5236\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u4f4d\u4e8e sys.path \u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ee3\u7801\u5e94\u5047\u5b9a import jodie \u5f15\u7528\u4e86\u540d\u4e3a jodie \u7684\u7b2c\u4e09\u65b9\u6216\u9876\u7ea7\u7a0b\u5e8f\u5305\uff0c\u800c\u4e0d\u662f\u672c\u5730\u7684 jodie.py \u3002 1.4 \u5f02\u5e38 \u5141\u8bb8\u4f7f\u7528\u5f02\u5e38\uff0c\u4f46\u5fc5\u987b\u5c0f\u5fc3\u3002 1.4.1 \u5b9a\u4e49 \u5f02\u5e38\u662f\u4e00\u79cd\u8df3\u51fa\u4ee3\u7801\u5757\u7684\u6b63\u5e38\u63a7\u5236\u6d41\u6765\u5904\u7406\u9519\u8bef\u6216\u8005\u5176\u5b83\u5f02\u5e38\u6761\u4ef6\u7684\u65b9\u5f0f\u3002 1.4.1 \u4f18\u70b9 \u6b63\u5e38\u64cd\u4f5c\u4ee3\u7801\u7684\u63a7\u5236\u6d41\u4e0d\u4f1a\u548c\u9519\u8bef\u5904\u7406\u4ee3\u7801\u6df7\u5728\u4e00\u8d77\u3002\u5f53\u67d0\u79cd\u6761\u4ef6\u53d1\u751f\u65f6\uff0c\u5b83\u4e5f\u5141\u8bb8\u63a7\u5236\u6d41\u8df3\u8fc7\u591a\u4e2a\u6846\u67b6\u3002\u4f8b\u5982\uff0c\u4e00\u6b65\u8df3\u51fa N \u4e2a\u5d4c\u5957\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u5fc5\u7ee7\u7eed\u6267\u884c\u9519\u8bef\u7684\u4ee3\u7801\u3002 1.4.2 \u7f3a\u70b9 \u53ef\u80fd\u4f1a\u5bfc\u81f4\u8ba9\u4eba\u56f0\u60d1\u7684\u63a7\u5236\u6d41\u3002\u8c03\u7528\u5e93\u65f6\u5bb9\u6613\u9519\u8fc7\u9519\u8bef\u60c5\u51b5\u3002 1.4.4 \u7ed3\u8bba \u5f02\u5e38\u5fc5\u987b\u9075\u5b88\u7279\u5b9a\u6761\u4ef6\uff1a \u5982\u679c\u6709\u5fc5\u8981\uff0c\u8bf7\u4f7f\u7528\u5185\u7f6e\u5f02\u5e38\u7c7b\u3002\u4f8b\u5982\uff0c\u629b\u51fa ValureError \u6765\u6307\u793a\u7f16\u7a0b\u9519\u8bef\u3002\u6bd4\u5982\u8fdd\u53cd\u4e86\u524d\u7f6e\u6761\u4ef6\uff08\u9700\u8981\u4e00\u4e2a\u6b63\u6570\uff0c\u4f46\u4f20\u9012\u4e86\u4e00\u4e2a\u8d1f\u6570\uff09\u3002\u4e0d\u8981\u4f7f\u7528 assert \u8bed\u53e5\u9a8c\u8bc1\u516c\u5171 API \u7684\u53c2\u6570\u503c\u3002 assert \u7528\u4e8e\u786e\u4fdd\u5185\u90e8\u6b63\u786e\u6027\uff0c\u4e0d\u5f97\u5f3a\u5236\u4f7f\u7528\uff0c\u4e5f\u4e0d\u8868\u793a\u53d1\u751f\u4e86\u67d0\u4e9b\u610f\u5916\u4e8b\u4ef6\u3002\u5982\u679c\u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528\u5f02\u5e38\uff0c\u8bf7\u4f7f\u7528 raise \u8bed\u53e5\u3002\u4f8b\u5982\uff1a \u63a8\u8350 def connect_to_next_port ( self , minimum ): \"\"\"Connects to the next available port. Args: minimum: A port value greater or equal to 1024. Returns: The new minimum port. Raises: ConnectionError: If no available port is found. \"\"\" if minimum < 1024 : # Note that this raising of ValueError is not mentioned in the doc # string's \"Raises:\" section because it is not appropriate to # guarantee this specific behavioral reaction to API misuse. raise ValueError ( f 'Min. port must be at least 1024, not { minimum } .' ) port = self . _find_next_open_port ( minimum ) if not port : raise ConnectionError ( f 'Could not connect to service on port { minimum } or higher.' ) assert port >= minimum , ( f 'Unexpected port { port } when minimum was { minimum } .' ) return port \u4e0d\u63a8\u8350 def connect_to_next_port ( self , minimum ): \"\"\"Connects to the next available port. Args: minimum: A port value greater or equal to 1024. Returns: The new minimum port. \"\"\" assert minimum >= 1024 , 'Minimum port must be at least 1024.' port = self . _find_next_open_port ( minimum ) assert port is not None return port \u6a21\u5757\u6216\u5305\u5e94\u8be5\u5b9a\u4e49\u81ea\u5df1\u7684\u7279\u5b9a\u57df\u7684\u5f02\u5e38\u57fa\u7c7b\u3002\u8fd9\u4e2a\u57fa\u7c7b\u5e94\u8be5\u4ece\u5185\u5efa\u7684 Exception \u7c7b\u7ee7\u627f\u3002\u5f02\u5e38\u540d\u79f0\u5e94\u8be5\u4ee5 Error \u7ed3\u5c3e\uff0c\u800c\u4e14\u4e0d\u5e94\u8be5\u96be\u4ee5\u7406\u89e3\uff08 foo.FooError \uff09\u3002 \u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528 expect: \u8bed\u53e5\u6765\u6355\u83b7\u6240\u6709\u5f02\u5e38\uff0c\u4e5f\u4e0d\u8981\u6355\u83b7 Exception \u6216\u8005 StandardError \uff0c\u9664\u975e\uff1a \u91cd\u65b0\u89e6\u53d1\u8be5\u5f02\u5e38\uff0c\u6216 \u4f60\u5df2\u7ecf\u5728\u5f53\u524d\u7ebf\u7a0b\u7684\u6700\u5916\u5c42\uff08\u8bb0\u5f97\u8fd8\u662f\u8981\u6253\u5370\u4e00\u6761\u9519\u8bef\u6d88\u606f\uff09 \u5728\u5f02\u5e38\u8fd9\u65b9\u9762, Python \u975e\u5e38\u5bbd\u5bb9\uff0c expect: \u53ef\u4ee5\u6355\u83b7\u6240\u6709\u62fc\u5199\u9519\u8bef\u7684\u540d\u79f0\uff0c sys.exit() \u8c03\u7528\uff0c Ctrl+C \u4e2d\u65ad\uff0c unittest \u5931\u8d25\u548c\u6240\u6709\u4f60\u4e0d\u60f3\u6355\u83b7\u7684\u5176\u4ed6\u5f02\u5e38\u3002 \u5c3d\u91cf\u51cf\u5c11 try/except \u5757\u4e2d\u7684\u4ee3\u7801\u91cf\u3002 try \u5757\u7684\u4f53\u79ef\u8d8a\u5927\uff0c\u671f\u671b\u4e4b\u5916\u7684\u5f02\u5e38\u5c31\u8d8a\u5bb9\u6613\u88ab\u89e6\u53d1\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c try/except \u5757\u5c06\u9690\u85cf\u771f\u6b63\u7684\u9519\u8bef\u3002 \u4f7f\u7528 finally \u5b50\u53e5\u6765\u6267\u884c\u90a3\u4e9b\u65e0\u8bba try \u5757\u4e2d\u6709\u6ca1\u6709\u5f02\u5e38\u90fd\u5e94\u8be5\u88ab\u6267\u884c\u7684\u4ee3\u7801\u3002\u8fd9\u5bf9\u4e8e\u6e05\u7406\u8d44\u6e90\u5e38\u5e38\u5f88\u6709\u7528\uff0c\u4f8b\u5982\u5173\u95ed\u6587\u4ef6\u3002 1.5 \u5168\u5c40\u53d8\u91cf \u907f\u514d\u5168\u5c40\u53d8\u91cf\u3002 1.5.1 \u5b9a\u4e49 \u5b9a\u4e49\u5728\u6a21\u5757\u7ea7\u7684\u53d8\u91cf\u3002 1.5.2 \u4f18\u70b9 \u5076\u5c14\u6709\u7528\u3002 1.5.3 \u7f3a\u70b9 \u5bfc\u5165\u65f6\u53ef\u80fd\u6539\u53d8\u6a21\u5757\u884c\u4e3a\uff0c\u56e0\u4e3a\u5bfc\u5165\u6a21\u5757\u65f6\u4f1a\u5bf9\u6a21\u5757\u7ea7\u53d8\u91cf\u8d4b\u503c\u3002 1.5.4 \u7ed3\u8bba \u907f\u514d\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u3002 \u867d\u7136\u6a21\u5757\u7ea7\u5e38\u91cf\u5728\u6280\u672f\u4e0a\u662f\u53d8\u91cf\uff0c\u4f46\u662f\u5141\u8bb8\u548c\u9f13\u52b1\u4f7f\u7528\u3002\u4f8b\u5982\uff1a MAX_HOLY_HANDGRENADE_COUNT = 3 \u3002\u5e38\u91cf\u7684\u547d\u540d\u5fc5\u987b\u4f7f\u7528\u5168\u5927\u5199\u548c\u4e0b\u5212\u7ebf\u3002\u5177\u4f53\u8bf7\u53c2\u9605\u547d\u540d\u89c4\u8303\u3002 \u5982\u679c\u9700\u8981\uff0c\u5168\u5c40\u53d8\u91cf\u5e94\u8be5\u4ec5\u5728\u6a21\u5757\u5185\u90e8\u53ef\u7528\uff0c\u5e76\u901a\u8fc7\u5728\u540d\u79f0\u524d\u52a0\u4e0a _ \u524d\u7f00\u4f7f\u5176\u6210\u4e3a\u6a21\u5757\u7684\u5185\u90e8\u53d8\u91cf\u3002\u5916\u90e8\u8bbf\u95ee\u5fc5\u987b\u901a\u8fc7\u6a21\u5757\u7ea7\u7684\u516c\u5171\u51fd\u6570\u6765\u8bbf\u95ee\u3002\u5177\u4f53\u8bf7\u53c2\u9605\u547d\u540d\u89c4\u8303\u3002 1.6 \u5d4c\u5957/\u5c40\u90e8/\u5185\u90e8\u7c7b\u6216\u51fd\u6570 \u5728\u9700\u8981\u5173\u95ed\u5c40\u90e8\u53d8\u91cf\u65f6\u9f13\u52b1\u4f7f\u7528\u5d4c\u5957\u672c\u5730\u5185\u90e8\u7c7b\u6216\u51fd\u6570\uff0c\u5d4c\u5957\u7c7b\u66f4\u597d\u3002 1.6.1 \u5b9a\u4e49 \u7c7b\u53ef\u4ee5\u5b9a\u4e49\u5728\u65b9\u6cd5\u3001\u51fd\u6570\u6216\u8005\u7c7b\u4e2d\u3002\u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u5728\u65b9\u6cd5\u6216\u51fd\u6570\u4e2d\u3002\u5c01\u95ed\u533a\u95f4\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u5bf9\u5d4c\u5957\u51fd\u6570\u662f\u53ea\u8bfb\u7684\u3002 1.6.2 \u4f18\u70b9 \u5141\u8bb8\u5b9a\u4e49\u4ec5\u7528\u4e8e\u6709\u6548\u8303\u56f4\u7684\u5de5\u5177\u7c7b\u548c\u51fd\u6570\u3002\u975e\u5e38\u50cf ADT -y \u3002\u901a\u5e38\u7528\u4e8e\u5b9e\u73b0\u88c5\u9970\u5668\u3002 1.6.3 \u7f3a\u70b9 \u4e0d\u80fd\u76f4\u63a5\u6d4b\u8bd5\u5d4c\u5957\u51fd\u6570\u548c\u7c7b\u3002 \u5d4c\u5957\u4f1a\u4f7f\u5916\u90e8\u51fd\u6570\u66f4\u957f\u3002 \u53ef\u8bfb\u6027\u66f4\u5dee\u3002 1.6.4 \u7ed3\u8bba \u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u6709\u4e00\u4e9b\u9650\u5236\u3002\u907f\u514d\u4f7f\u7528\u5d4c\u5957\u51fd\u6570\u6216\u7c7b\uff0c\u9664\u975e\u8981\u5173\u95ed\u5c40\u90e8\u503c\u3002\u4e0d\u8981\u4ec5\u4ec5\u4e3a\u4e86\u5bf9\u7528\u6237\u9690\u85cf\u6a21\u5757\u7684\u67d0\u4e2a\u51fd\u6570\u800c\u8fdb\u884c\u5d4c\u5957\u3002\u76f8\u53cd\uff0c\u5e94\u8be5\u5728\u6a21\u5757\u7ea7\u522b\u7684\u540d\u79f0\u4e0a\u52a0 _ \u524d\u7f00\uff0c\u8fd9\u6837\u65b9\u4fbf\u6d4b\u8bd5\u3002 1.7 \u63a8\u5bfc\u5f0f\u548c\u751f\u6210\u8868\u8fbe\u5f0f \u53ef\u4ee5\u5728\u7b80\u5355\u60c5\u51b5\u4e0b\u4f7f\u7528\u3002 1.7.1 \u5b9a\u4e49 List \u3001 Dict \u548c Set \u63a8\u5bfc\u5f0f\u4e0e\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u6d01\u800c\u6709\u6548\u7684\u65b9\u6cd5\u6765\u521b\u5efa\u5217\u8868\u548c\u8fed\u4ee3\u5668\uff0c\u800c\u4e0d\u5fc5\u501f\u52a9\u4f20\u7edf\u7684\u5faa\u73af\u3001 map() \u3001 filter() \u6216\u8005 lambda \u3002 1.7.2 \u4f18\u70b9 \u7b80\u5355\u7684\u63a8\u5bfc\u5f0f\u53ef\u4ee5\u6bd4\u5176\u4ed6\u7684\u5b57\u5178\u3001\u5217\u8868\u6216\u96c6\u5408\u521b\u5efa\u6280\u672f\u66f4\u52a0\u6e05\u6670\u7b80\u5355\u3002\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5341\u5206\u9ad8\u6548\uff0c\u56e0\u4e3a\u5b83\u4eec\u907f\u514d\u4e86\u521b\u5efa\u6574\u4e2a\u5217\u8868\u3002 1.7.3 \u7f3a\u70b9 \u590d\u6742\u7684\u63a8\u5bfc\u5f0f\u6216\u8005\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u53ef\u80fd\u96be\u4ee5\u9605\u8bfb\u3002 1.7.4 \u7ed3\u8bba \u9002\u7528\u4e8e\u7b80\u5355\u60c5\u51b5\u3002\u6bcf\u4e2a\u90e8\u5206\u5e94\u8be5\u5355\u72ec\u7f6e\u4e8e\u4e00\u884c\uff1a mapping \u8868\u8fbe\u5f0f\uff0c for \u5b50\u53e5\uff0c filter \u8868\u8fbe\u5f0f\u3002\u7981\u6b62\u591a\u91cd for \u8bed\u53e5\u6216\u8fc7\u6ee4\u5668\u8868\u8fbe\u5f0f\u3002\u590d\u6742\u60c5\u51b5\u4e0b\u8fd8\u662f\u4f7f\u7528\u5faa\u73af\u3002 \u63a8\u8350 result = [ mapping_expr for value in iterable if filter_expr ] result = [{ 'key' : value } for value in iterable if a_long_filter_expression ( value )] result = [ complicated_transform ( x ) for x in iterable if predicate ( x )] descriptive_name = [ transform ({ 'key' : key , 'value' : value }, color = 'black' ) for key , value in generate_iterable ( some_input ) if complicated_condition_is_met ( key , value ) ] result = [] for x in range ( 10 ): for y in range ( 5 ): if x * y > 10 : result . append (( x , y )) return { x : complicated_transform ( x ) for x in long_generator_function ( parameter ) if x is not None } squares_generator = ( x ** 2 for x in range ( 10 )) unique_names = { user . name for user in users if user is not None } eat ( jelly_bean for jelly_bean in jelly_beans if jelly_bean . color == 'black' ) \u4e0d\u63a8\u8350 result = [ complicated_transform ( x , some_argument = x + 1 ) for x in iterable if predicate ( x )] result = [( x , y ) for x in range ( 10 ) for y in range ( 5 ) if x * y > 10 ] return (( x , y , z ) for x in range ( 5 ) for y in range ( 5 ) if x != y for z in range ( 5 ) if y != z ) 1.8 \u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u64cd\u4f5c\u7b26 \u5982\u679c\u7c7b\u578b\u652f\u6301\uff0c\u5c31\u4f7f\u7528\u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u64cd\u4f5c\u7b26\u3002\u6bd4\u5982\u5217\u8868\uff0c\u5b57\u5178\u53ca\u6587\u4ef6\u7b49\u3002 1.8.1 \u5b9a\u4e49 \u5bb9\u5668\u7c7b\u578b\uff0c\u50cf\u5b57\u5178\u548c\u5217\u8868\uff0c\u5b9a\u4e49\u4e86\u9ed8\u8ba4\u7684\u8fed\u4ee3\u5668\u548c\u5173\u7cfb\u6d4b\u8bd5\u64cd\u4f5c\u7b26\uff08 in \u548c not in \uff09 1.8.2 \u4f18\u70b9 \u9ed8\u8ba4\u64cd\u4f5c\u7b26\u548c\u8fed\u4ee3\u5668\u7b80\u5355\u9ad8\u6548\uff0c\u5b83\u4eec\u76f4\u63a5\u8868\u8fbe\u4e86\u64cd\u4f5c\uff0c\u6ca1\u6709\u989d\u5916\u7684\u65b9\u6cd5\u8c03\u7528\u3002\u4f7f\u7528\u9ed8\u8ba4\u64cd\u4f5c\u7b26\u7684\u51fd\u6570\u662f\u901a\u7528\u7684\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u652f\u6301\u8be5\u64cd\u4f5c\u7684\u4efb\u4f55\u7c7b\u578b\u3002 1.8.3 \u7f3a\u70b9 \u4f60\u6ca1\u6cd5\u901a\u8fc7\u9605\u8bfb\u65b9\u6cd5\u540d\u6765\u533a\u5206\u5bf9\u8c61\u7684\u7c7b\u578b\uff08\u4f8b\u5982\uff0c has_key() \u610f\u5473\u7740\u5b57\u5178\uff09\u3002\u4e0d\u8fc7\u8fd9\u4e5f\u662f\u4f18\u70b9\u3002 1.8.4 \u7ed3\u8bba \u5982\u679c\u7c7b\u578b\u652f\u6301\uff0c\u5c31\u4f7f\u7528\u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u64cd\u4f5c\u7b26\uff0c\u4f8b\u5982\u5217\u8868\u3001\u5b57\u5178\u548c\u6587\u4ef6\u3002\u5185\u5efa\u7c7b\u578b\u4e5f\u5b9a\u4e49\u4e86\u8fed\u4ee3\u5668\u65b9\u6cd5\u3002\u4f18\u5148\u8003\u8651\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u90a3\u4e9b\u8fd4\u56de\u5217\u8868\u7684\u65b9\u6cd5\u3002\u5f53\u7136\uff0c\u8fd9\u6837\u904d\u5386\u5bb9\u5668\u65f6\uff0c\u4f60\u5c06\u4e0d\u80fd\u4fee\u6539\u5bb9\u5668\u3002\u9664\u975e\u7279\u6b8a\u60c5\u51b5\uff0c\u5426\u5219\u4e0d\u8981\u4f7f\u7528 Python 2 \u7279\u5b9a\u7684\u8fed\u4ee3\u65b9\u6cd5 dict.iter*() \u3002 \u63a8\u8350 for key in adict : ... if key not in adict : ... if obj in alist : ... for line in afile : ... for k , v in adict . items (): ... for k , v in six . iteritems ( adict ): ... \u4e0d\u63a8\u8350 for key in adict . keys (): ... if not adict . has_key ( key ): ... for line in afile . readlines (): ... for k , v in dict . iteritems (): ... 1.9 \u751f\u6210\u5668 \u6309\u9700\u4f7f\u7528\u751f\u6210\u5668\u3002 1.9.1 \u5b9a\u4e49 \u6240\u8c13\u751f\u6210\u5668\u51fd\u6570\uff0c\u5c31\u662f\u6bcf\u5f53\u5b83\u6267\u884c\u4e00\u6b21\u751f\u6210 yield \u8bed\u53e5\uff0c\u5b83\u5c31\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8fd9\u4e2a\u8fed\u4ee3\u5668\u751f\u6210\u4e00\u4e2a\u503c\u3002\u751f\u6210\u503c\u540e\uff0c\u751f\u6210\u5668\u51fd\u6570\u7684\u8fd0\u884c\u72b6\u6001\u5c06\u88ab\u6302\u8d77\uff0c\u76f4\u5230\u4e0b\u4e00\u6b21\u751f\u6210\u3002 1.9.2 \u4f18\u70b9 \u7b80\u5316\u4ee3\u7801\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8c03\u7528\u65f6\uff0c\u5c40\u90e8\u53d8\u91cf\u548c\u63a7\u5236\u6d41\u7684\u72b6\u6001\u90fd\u4f1a\u88ab\u4fdd\u5b58\u3002\u6bd4\u8d77\u4e00\u6b21\u521b\u5efa\u4e00\u7cfb\u5217\u503c\u7684\u51fd\u6570\uff0c\u751f\u6210\u5668\u4f7f\u7528\u7684\u5185\u5b58\u66f4\u5c11\u3002 1.9.3 \u7f3a\u70b9 \u6ca1\u6709\u3002 1.9.4 \u7ed3\u8bba \u9f13\u52b1\u4f7f\u7528\u3002\u6ce8\u610f\u5728\u751f\u6210\u5668\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\u201c Yields: \u201d\u800c\u4e0d\u662f\u201c Returns: \u201d\u3002 1.10 Lambda \u51fd\u6570 \u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570\u3002 1.10.1 \u5b9a\u4e49 \u4e0e\u8bed\u53e5\u76f8\u53cd\uff0c Lambdas \u5728\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u5b9a\u4e49\u533f\u540d\u51fd\u6570\u3002\u5e38\u7528\u4e8e\u4e3a map() \u548c filter() \u4e4b\u7c7b\u7684\u9ad8\u9636\u51fd\u6570\u5b9a\u4e49\u56de\u8c03\u51fd\u6570\u6216\u8005\u64cd\u4f5c\u7b26\u3002 1.10.2 \u4f18\u70b9 \u65b9\u4fbf\u3002 1.10.3 \u7f3a\u70b9 \u6bd4\u672c\u5730\u51fd\u6570\u66f4\u96be\u9605\u8bfb\u548c\u8c03\u8bd5\u3002\u6ca1\u6709\u51fd\u6570\u540d\u610f\u5473\u7740\u5806\u6808\u8ddf\u8e2a\u66f4\u96be\u7406\u89e3\u3002\u7531\u4e8e lambda \u51fd\u6570\u901a\u5e38\u53ea\u5305\u542b\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u56e0\u6b64\u5176\u8868\u8fbe\u80fd\u529b\u6709\u9650\u3002 1.10.4 \u7ed3\u8bba \u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570\u3002\u5982\u679c\u4ee3\u7801\u8d85\u8fc760-80\u4e2a\u5b57\u7b26\uff0c\u6700\u597d\u8fd8\u662f\u5b9a\u4e49\u6210\u5e38\u89c4\uff08\u5d4c\u5957\uff09\u51fd\u6570\u3002 \u5bf9\u4e8e\u5e38\u89c1\u7684\u64cd\u4f5c\u7b26\uff0c\u4f8b\u5982\u4e58\u6cd5\u64cd\u4f5c\u7b26\uff0c\u4f7f\u7528 operator \u6a21\u5757\u4e2d\u7684\u51fd\u6570\u4ee5\u4ee3\u66ff lambda \u51fd\u6570\u3002\u4f8b\u5982\uff0c\u63a8\u8350\u4f7f\u7528 operator.mul \u800c\u4e0d\u662f lambda x, y: x * y \u3002 1.11 \u6761\u4ef6\u8868\u8fbe\u5f0f \u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570\u3002 1.11.1 \u5b9a\u4e49 \u6761\u4ef6\u8868\u8fbe\u5f0f\u662f\u5bf9\u4e8e if \u8bed\u53e5\u7684\u4e00\u79cd\u66f4\u4e3a\u7b80\u77ed\u7684\u53e5\u6cd5\u89c4\u5219\u3002\u4f8b\u5982 x = 1 if cond else 2 \u3002 1.11.2 \u4f18\u70b9 \u6bd4 if \u8bed\u53e5\u66f4\u52a0\u7b80\u77ed\u548c\u65b9\u4fbf\u3002 1.11.2 \u7f3a\u70b9 \u6bd4 if \u8bed\u53e5\u96be\u4e8e\u9605\u8bfb\u3002\u5982\u679c\u8868\u8fbe\u5f0f\u5f88\u957f\uff0c\u96be\u4e8e\u5b9a\u4f4d\u6761\u4ef6\u3002 1.11.4 \u7ed3\u8bba \u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570\u3002\u6bcf\u4e2a\u90e8\u5206\u5fc5\u987b\u653e\u5728\u4e00\u884c\u4e0a\uff1a true-expression, if-expression, else-expression \u3002\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u63a8\u8350\u4f7f\u7528\u5b8c\u6574\u7684 if \u8bed\u53e5\u3002 one_line = 'yes' if predicate ( value ) else 'no' slightly_split = ( 'yes' if predicate ( value ) else 'no, nein, nyet' ) the_longest_ternary_style_that_can_be_done = ( 'yes, true, affirmative, confirmed, correct' if predicate ( value ) else 'no, false, negative, nay' ) bad_line_breaking = ( 'yes' if predicate ( value ) else 'no' ) portion_too_long = ( 'yes' if some_long_module . some_long_predicate_function ( really_long_variable_name ) else 'no, false, negative, nay' ) 1.12 \u9ed8\u8ba4\u53c2\u6570\u503c \u9002\u7528\u4e8e\u5927\u90e8\u5206\u60c5\u51b5\u3002 1.12.1 \u5b9a\u4e49 \u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u53c2\u6570\u5217\u8868\u7684\u6700\u540e\u6307\u5b9a\u53d8\u91cf\u7684\u503c\uff0c\u4f8b\u5982\uff0c def(a, b=0): \u3002\u5982\u679c\u8c03\u7528 foo \u65f6\u53ea\u5e26\u4e00\u4e2a\u53c2\u6570\uff0c\u5219 b \u88ab\u8bbe\u4e3a 0 \uff0c\u5982\u679c\u5e26\u4e24\u4e2a\u53c2\u6570\uff0c\u5219 b \u7684\u503c\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002 1.12.2 \u4f18\u70b9 \u4f60\u7ecf\u5e38\u4f1a\u78b0\u5230\u4e00\u4e9b\u4f7f\u7528\u5927\u91cf\u9ed8\u8ba4\u503c\u7684\u51fd\u6570\uff0c\u4f46\u5076\u5c14\uff08\u6bd4\u8f83\u5c11\u89c1\uff09\u4f60\u60f3\u8981\u8986\u76d6\u8fd9\u4e9b\u9ed8\u8ba4\u503c\u3002\u9ed8\u8ba4\u53c2\u6570\u503c\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u5b8c\u6210\u8fd9\u4ef6\u4e8b\uff0c\u4f60\u4e0d\u9700\u8981\u4e3a\u8fd9\u4e9b\u7f55\u89c1\u7684\u4f8b\u5916\u5b9a\u4e49\u5927\u91cf\u51fd\u6570\u3002\u540c\u65f6\uff0c Python \u4e5f\u4e0d\u652f\u6301\u91cd\u8f7d\u65b9\u6cd5\u548c\u51fd\u6570\uff0c\u9ed8\u8ba4\u53c2\u6570\u662f\u4e00\u79cd\u201c\u6a21\u62df\u201d\u91cd\u8f7d\u884c\u4e3a\u7684\u7b80\u5355\u65b9\u5f0f\u3002 1.12.3 \u7f3a\u70b9 \u9ed8\u8ba4\u53c2\u6570\u53ea\u5728\u6a21\u5757\u52a0\u8f7d\u65f6\u6c42\u503c\u4e00\u6b21\u3002\u5982\u679c\u53c2\u6570\u662f\u5217\u8868\u6216\u5b57\u5178\u4e4b\u7c7b\u7684\u53ef\u53d8\u7c7b\u578b\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u95ee\u9898\u3002\u5982\u679c\u51fd\u6570\u4fee\u6539\u4e86\u5bf9\u8c61\uff08\u4f8b\u5982\uff0c\u5411\u5217\u8868\u8ffd\u52a0\u9879\uff09\uff0c\u9ed8\u8ba4\u503c\u5c31\u88ab\u4fee\u6539\u4e86\u3002 1.12.4 \u7ed3\u8bba \u9f13\u52b1\u4f7f\u7528\uff0c\u4e0d\u8981\u5728\u51fd\u6570\u6216\u65b9\u6cd5\u5b9a\u4e49\u4e2d\u4f7f\u7528\u53ef\u53d8\u5bf9\u8c61\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u63a8\u8350 def foo ( a , b = None ): if b is None : b = [] def foo ( a , b : Optional [ Sequence ] = None ): if b is None : b = [] def foo ( a , b : Sequence = ()): # Empty tuple OK since tuples are immutable ... \u4e0d\u63a8\u8350 def foo ( a , b = []): ... def foo ( a , b = time . time ()): # The time the module was loaded??? ... def foo ( a , b = FLAGS . my_thing ): # sys.argv has not yet been parsed... ... def foo ( a , b : Mapping = {}): # Could still get passed to unchecked code ... 1.13 \u5c5e\u6027\uff08properties\uff09 \u8bbf\u95ee\u548c\u8bbe\u7f6e\u6570\u636e\u6210\u5458\u65f6\uff0c\u4f60\u901a\u5e38\u4f1a\u4f7f\u7528\u7b80\u5355\uff0c\u8f7b\u91cf\u7ea7\u7684\u8bbf\u95ee\u548c\u8bbe\u7f6e\u51fd\u6570\u3002\u5efa\u8bae\u7528\u5c5e\u6027\uff08properties\uff09\u6765\u4ee3\u66ff\u5b83\u4eec\u3002 1.13.1 \u5b9a\u4e49 \u4e00\u79cd\u7528\u4e8e\u5305\u88c5\u65b9\u6cd5\u8c03\u7528\u7684\u65b9\u5f0f\u3002\u5f53\u8fd0\u7b97\u91cf\u4e0d\u5927\uff0c\u5b83\u662f\u83b7\u53d6\u548c\u8bbe\u7f6e\u5c5e\u6027\u7684\u6807\u51c6\u65b9\u5f0f\u3002 1.13.2 \u4f18\u70b9 \u901a\u8fc7\u6d88\u9664\u7b80\u5355\u7684\u5c5e\u6027\u8bbf\u95ee\u65f6\u663e\u5f0f\u7684 get \u548c set \u65b9\u6cd5\u8c03\u7528\uff0c\u53ef\u8bfb\u6027\u63d0\u9ad8\u4e86\u3002\u5141\u8bb8\u5ef6\u8fdf\u52a0\u8f7d\u3002\u7528 Pythonic \u7684\u65b9\u5f0f\u6765\u7ef4\u62a4\u7c7b\u7684\u63a5\u53e3\u3002\u5c31\u6027\u80fd\u800c\u8a00\uff0c\u5f53\u76f4\u63a5\u8bbf\u95ee\u53d8\u91cf\u662f\u5408\u7406\u7684\uff0c\u6dfb\u52a0\u8bbf\u95ee\u65b9\u6cd5\u5c31\u663e\u5f97\u7410\u788e\u800c\u65e0\u610f\u4e49\u3002\u4f7f\u7528\u5c5e\u6027\u53ef\u4ee5\u7ed5\u8fc7\u8fd9\u4e2a\u95ee\u9898\u3002\u5c06\u6765\u4e5f\u53ef\u4ee5\u5728\u4e0d\u7834\u574f\u63a5\u53e3\u7684\u60c5\u51b5\u4e0b\u5c06\u8bbf\u95ee\u65b9\u6cd5\u52a0\u4e0a\u3002 1.13.3 \u7f3a\u70b9 \u4f1a\u9690\u85cf\u7c7b\u4f3c\u64cd\u4f5c\u7b26\u91cd\u8f7d\u7684\u526f\u4f5c\u7528\u3002 \u5bf9\u4e8e\u5b50\u7c7b\u53ef\u80fd\u4f1a\u9020\u6210\u6df7\u6dc6\u3002 1.13.4 \u7ed3\u8bba \u4f60\u901a\u5e38\u4e60\u60ef\u4e8e\u4f7f\u7528\u8bbf\u95ee\u6216\u8bbe\u7f6e\u65b9\u6cd5\u6765\u8bbf\u95ee\u6216\u8bbe\u7f6e\u6570\u636e\uff0c\u5b83\u4eec\u7b80\u5355\u800c\u8f7b\u91cf\u3002\u4e0d\u8fc7\u6211\u4eec\u5efa\u8bae\u4f60\u5728\u65b0\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u5c5e\u6027\u3002\u53ea\u8bfb\u5c5e\u6027\u5e94\u8be5\u7528 @property \u88c5\u9970\u5668\u6765\u521b\u5efa\u3002 \u5982\u679c\u5b50\u7c7b\u6ca1\u6709\u8986\u76d6\u5c5e\u6027\uff0c\u90a3\u4e48\u5c5e\u6027\u7684\u7ee7\u627f\u53ef\u80fd\u770b\u4e0a\u53bb\u4e0d\u660e\u663e\u3002\u56e0\u6b64\u4f7f\u7528\u8005\u5fc5\u987b\u786e\u4fdd\u8bbf\u95ee\u65b9\u6cd5\u95f4\u63a5\u88ab\u8c03\u7528\uff0c\u4ee5\u4fdd\u8bc1\u5b50\u7c7b\u4e2d\u7684\u91cd\u8f7d\u65b9\u6cd5\u88ab\u5c5e\u6027\u8c03\u7528\uff08\u4f7f\u7528 \u6a21\u677f\u65b9\u6cd5\u8bbe\u8ba1\u6a21\u5f0f \uff09\u3002 \u63a8\u8350 import math class Square : \"\"\"A square with two properties: a writable area and a read-only perimeter. To use: >>> sq = Square(3) >>> sq.area 9 >>> sq.perimeter 12 >>> sq.area = 16 >>> sq.side 4 >>> sq.perimeter 16 \"\"\" def __init__ ( self , side ): self . side = side @property def area ( self ): \"\"\"Area of the square.\"\"\" return self . _get_area () @area . setter def area ( self , area ): return self . _set_area ( area ) def _get_area ( self ): \"\"\"Indirect accessor to calculate the 'area' property.\"\"\" return self . side ** 2 def _set_area ( self , area ): \"\"\"Indirect setter to set the 'area' property.\"\"\" self . side = math . sqrt ( area ) @property def perimeter ( self ): return self . side * 4 1.14 True / False \u7684\u6c42\u503c \u5c3d\u53ef\u80fd\u4f7f\u7528\u9690\u5f0f False \u3002 1.14.1 \u5b9a\u4e49 Python \u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u4f1a\u5c06\u67d0\u4e9b\u503c\u6c42\u503c\u4e3a False \u3002\u6309\u7b80\u5355\u7684\u76f4\u89c9\u6765\u8bb2\uff0c\u5c31\u662f\u6240\u6709\u7684\u7a7a\u503c\u90fd\u88ab\u8ba4\u4e3a\u662f False \uff0c\u56e0\u6b64 0 , None \uff0c [] \uff0c {} \uff0c '' \u90fd\u88ab\u8ba4\u4e3a\u662f False \u3002 1.14.2 \u4f18\u70b9 \u4f7f\u7528 Python \u5e03\u5c14\u503c\u7684\u6761\u4ef6\u8bed\u53e5\u66f4\u6613\u8bfb\u4e5f\u66f4\u4e0d\u6613\u72af\u9519\u3002\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e5f\u66f4\u5feb\u3002 1.14.3 \u7f3a\u70b9 \u5bf9\u4e8e C / C ++ \u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u53ef\u80fd\u770b\u8d77\u6765\u6709\u70b9\u602a\u3002 1.14.4 \u7ed3\u8bba \u5c3d\u53ef\u80fd\u4f7f\u7528\u9690\u5f0f\u7684 false \uff0c\u4f8b\u5982\uff1a\u4f7f\u7528 if foo: \u800c\u4e0d\u662f if foo !=[]: \u3002\u4e0d\u8fc7\u8fd8\u662f\u6709\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\u9700\u8981\u4f60\u94ed\u8bb0\u5728\u5fc3\uff1a \u603b\u662f\u4f7f\u7528 if foo is None: \u6216 if foo is not None: \u6765\u68c0\u67e5 None \u503c\u3002\u4f8b\u5982\uff0c\u5f53\u4f60\u8981\u6d4b\u8bd5\u4e00\u4e2a\u9ed8\u8ba4\u503c\u662f None \u7684\u53d8\u91cf\u6216\u53c2\u6570\u662f\u5426\u88ab\u8bbe\u4e3a\u5176\u5b83\u503c\u3002\u8fd9\u4e2a\u503c\u5728\u5e03\u5c14\u8bed\u4e49\u4e0b\u53ef\u80fd\u662f false ! \u6c38\u8fdc\u4e0d\u8981\u7528 == \u5c06\u4e00\u4e2a\u5e03\u5c14\u91cf\u4e0e False \u76f8\u6bd4\u8f83\u3002\u4f7f\u7528 if not x: \u4ee3\u66ff\u3002\u5982\u679c\u4f60\u9700\u8981\u533a\u5206 False \u548c None \uff0c\u4f60\u5e94\u8be5\u7528\u50cf if not x and x is not None: \u8fd9\u6837\u7684\u8bed\u53e5\u3002 \u5bf9\u4e8e\u5e8f\u5217\uff08\u5b57\u7b26\u4e32\u3001\u5217\u8868\u3001\u5143\u7ec4\uff09\uff0c \u8981\u6ce8\u610f\u7a7a\u5e8f\u5217\u662f False \u3002\u56e0\u6b64\uff1a if seq: \u6216\u8005 if not seq: \u6bd4 if len(seq): \u6216 if not len(seq) \u8981\u66f4\u597d\u3002 \u5904\u7406\u6574\u6570\u65f6\uff0c\u4f7f\u7528\u9690\u5f0f False \u53ef\u80fd\u4f1a\u5f97\u4e0d\u507f\u5931\uff08\u5373\u4e0d\u5c0f\u5fc3\u5c06 None \u5f53\u505a 0 \u6765\u5904\u7406\uff09\u3002\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5df2\u77e5\u662f\u6574\u578b\uff08\u4e14\u4e0d\u662f len() \u7684\u8fd4\u56de\u7ed3\u679c\uff09\u7684\u503c\u4e0e 0 \u6bd4\u8f83\u3002 \u63a8\u8350 if not users : print ( 'no users' ) if foo == 0 : self . handle_zero () if i % 10 == 0 : self . handle_multiple_of_ten () def f ( x = None ): if x is None : x = [] \u4e0d\u63a8\u8350 if len ( users ) == 0 : print ( 'no users' ) if foo is not None and not foo : self . handle_zero () if not i % 10 : self . handle_multiple_of_ten () def f ( x = None ): x = x or [] \u6ce8\u610f\uff1a '0' \uff08\u5373\uff1a 0 \u4f5c\u4e3a\u5b57\u7b26\u4e32\uff09\u7684\u8ba1\u7b97\u7ed3\u679c\u662f True \u3002 1.16 \u8bcd\u6cd5\u4f5c\u7528\u57df\uff08Lexical Scoping\uff09 \u63a8\u8350\u4f7f\u7528 1.16.1 \u5b9a\u4e49 \u5d4c\u5957\u7684 Python \u51fd\u6570\u53ef\u4ee5\u5f15\u7528\u5916\u5c42\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u591f\u5bf9\u5b83\u4eec\u8d4b\u503c\u3002\u53d8\u91cf\u7ed1\u5b9a\u7684\u89e3\u6790\u662f\u4f7f\u7528\u8bcd\u6cd5\u4f5c\u7528\u57df\uff0c\u4e5f\u5c31\u662f\u57fa\u4e8e\u9759\u6001\u7684\u7a0b\u5e8f\u6587\u672c\u3002\u5bf9\u4e00\u4e2a\u5757\u4e2d\u7684\u67d0\u4e2a\u540d\u79f0\u7684\u4efb\u4f55\u8d4b\u503c\u90fd\u4f1a\u5bfc\u81f4 Python \u5c06\u5bf9\u8be5\u540d\u79f0\u7684\u5168\u90e8\u5f15\u7528\u5f53\u505a\u5c40\u90e8\u53d8\u91cf\uff0c\u751a\u81f3\u662f\u8d4b\u503c\u524d\u7684\u5904\u7406\u3002\u5982\u679c\u78b0\u5230 global \u58f0\u660e\uff0c\u8be5\u540d\u79f0\u5c31\u4f1a\u88ab\u89c6\u4f5c\u5168\u5c40\u53d8\u91cf\u3002 \u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\u7684\u4f8b\u5b50\uff1a def get_adder ( summand1 ): \"\"\"Returns a function that adds numbers to a given number.\"\"\" def adder ( summand2 ): return summand1 + summand2 return adder 1.16.2 \u4f18\u70b9 \u901a\u5e38\u53ef\u4ee5\u5e26\u6765\u66f4\u52a0\u6e05\u6670\uff0c\u4f18\u96c5\u7684\u4ee3\u7801\u3002\u5c24\u5176\u4f1a\u8ba9\u6709\u7ecf\u9a8c\u7684 Lisp \u548c Scheme \uff08\u8fd8\u6709 Haskell\uff0c ML \u7b49\uff09\u7a0b\u5e8f\u5458\u611f\u5230\u6b23\u6170\u3002 1.16.3 \u7f3a\u70b9 \u53ef\u80fd\u5bfc\u81f4\u8ba9\u4eba\u8ff7\u60d1\u7684 bug\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f9d\u636e PEP-0227 \u7684\u4f8b\u5b50\uff1a i = 4 def foo ( x ): def bar (): print ( i , end = '' ) # ... # A bunch of code here # ... for i in x : # Ah, i *is* local to foo, so this is what bar sees print ( i , end = '' ) bar () \u56e0\u6b64 foo([1, 2, 3]) \u4f1a\u6253\u5370 1 2 3 3 \u800c\u4e0d\u662f 1 2 3 4 1.16.4 \u7ed3\u8bba \u9f13\u52b1\u4f7f\u7528\u3002 1.17 \u51fd\u6570\u4e0e\u65b9\u6cd5\u88c5\u9970\u5668 \u5982\u679c\u597d\u5904\u5f88\u663e\u7136\uff0c\u5c31\u660e\u667a\u800c\u8c28\u614e\u7684\u4f7f\u7528\u88c5\u9970\u5668\u3002\u907f\u514d\u4f7f\u7528 staticmethod \uff0c\u9650\u5236\u4f7f\u7528 classmethod \u3002 1.17.1 \u5b9a\u4e49 \u7528\u4e8e \u51fd\u6570\u53ca\u65b9\u6cd5\u7684\u88c5\u9970\u5668 \uff08\u4e5f\u5c31\u662f @ \u6807\u8bb0\uff09\u3002\u6700\u5e38\u89c1\u7684\u88c5\u9970\u5668\u662f @property \uff0c\u7528\u4e8e\u5c06\u666e\u901a\u65b9\u6cd5\u8f6c\u6362\u4e3a\u52a8\u6001\u8fd0\u7b97\u7684\u5c5e\u6027\u3002\u4e0d\u8fc7\uff0c\u88c5\u9970\u5668\u8bed\u6cd5\u4e5f\u5141\u8bb8\u7528\u6237\u81ea\u5b9a\u4e49\u88c5\u9970\u5668\u3002\u7279\u522b\u5730\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u51fd\u6570 my_decorator \uff0c\u4e0b\u9762\u7684\u4e24\u6bb5\u4ee3\u7801\u662f\u7b49\u6548\u7684\uff1a class C : @my_decorator def method ( self ): # method body ... \u76f8\u5f53\u4e8e\uff1a class C : def method ( self ): # method body ... method = my_decorator ( method ) 1.17.2 \u4f18\u70b9 \u4f18\u96c5\u7684\u5728\u51fd\u6570\u4e0a\u6307\u5b9a\u4e00\u4e9b\u8f6c\u6362\u3002\u8be5\u8f6c\u6362\u53ef\u80fd\u51cf\u5c11\u4e00\u4e9b\u91cd\u590d\u4ee3\u7801\uff0c\u4fdd\u6301\u5df2\u6709\u51fd\u6570\u4e0d\u53d8\uff08enforce invariants)\uff09\u7b49\u3002 1.17.3 \u7f3a\u70b9 \u88c5\u9970\u5668\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u53c2\u6570\u6216\u8fd4\u56de\u503c\u4e0a\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u8ba9\u4eba\u60ca\u5f02\u7684\u9690\u85cf\u884c\u4e3a\u3002\u800c\u4e14\uff0c\u9970\u5668\u5728\u5bfc\u5165\u65f6\u6267\u884c\u3002\u4ece\u88c5\u9970\u5668\u4ee3\u7801\u7684\u5931\u8d25\u4e2d\u6062\u590d\u66f4\u52a0\u4e0d\u53ef\u80fd\u3002 1.17.4 \u7ed3\u8bba \u5982\u679c\u597d\u5904\u5f88\u663e\u7136\uff0c\u5c31\u660e\u667a\u800c\u8c28\u614e\u7684\u4f7f\u7528\u88c5\u9970\u5668\u3002 \u88c5\u9970\u5668\u5e94\u8be5\u9075\u5b88\u548c\u51fd\u6570\u4e00\u6837\u7684\u5bfc\u5165\u548c\u547d\u540d\u89c4\u5219\u3002 \u88c5\u9970\u5668\u7684 Python \u6587\u6863\u5e94\u8be5\u6e05\u6670\u7684\u8bf4\u660e\u8be5\u51fd\u6570\u662f\u4e00\u4e2a\u88c5\u9970\u5668\u3002 \u8bf7\u4e3a\u88c5\u9970\u5668\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u3002 \u907f\u514d\u88c5\u9970\u5668\u81ea\u8eab\u5bf9\u5916\u754c\u7684\u4f9d\u8d56\uff08\u5373\u4e0d\u8981\u4f9d\u8d56\u4e8e\u6587\u4ef6\uff0c socket \uff0c\u6570\u636e\u5e93\u8fde\u63a5\u7b49\uff09\uff0c\u56e0\u4e3a\u88c5\u9970\u5668\u8fd0\u884c\u65f6\u8fd9\u4e9b\u8d44\u6e90\u53ef\u80fd\u4e0d\u53ef\u7528\uff08\u7531 pydoc \u6216\u5176\u5b83\u5de5\u5177\u5bfc\u5165\uff09\u3002\u5e94\u8be5\u4fdd\u8bc1\u4e00\u4e2a\u7528\u6709\u6548\u53c2\u6570\u8c03\u7528\u7684\u88c5\u9970\u5668\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u662f\u6210\u529f\u7684\u3002 \u88c5\u9970\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\u7684\u201c\u9876\u7ea7\u4ee3\u7801\u201d\u3002\u53c2\u8003\u540e\u9762\u5173\u4e8e Main \u7684\u8bdd\u9898\u3002 \u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528 staticmethod \uff0c\u9664\u975e\u4e3a\u4e86\u4e0e\u73b0\u6709\u5e93\u4e2d\u5b9a\u4e49\u7684 API \u96c6\u6210\u800c\u88ab\u8feb\u4f7f\u7528\u3002\u53ef\u4ee5\u5199\u4e00\u4e2a\u6a21\u5757\u7ea7\u51fd\u6570\u4ee3\u66ff\u3002 \u53ea\u6709\u5728\u7f16\u5199\u547d\u540d\u6784\u9020\u51fd\u6570\u6216\u4fee\u6539\u5fc5\u8981\u7684\u5168\u5c40\u72b6\u6001\uff08\u5982\u8fdb\u7a0b\u7ea7\u7f13\u5b58\uff09\u7684\u7279\u5b9a\u7c7b\u64cd\u4f5c\u65f6\u624d\u4f7f\u7528 classmethod \u3002 1.18 \u7ebf\u7a0b \u4e0d\u8981\u4f9d\u8d56\u5185\u5efa\u7c7b\u578b\u7684\u539f\u5b50\u6027\u3002 \u867d\u7136 Python \u7684\u5185\u5efa\u7c7b\u578b\u4f8b\u5982\u5b57\u5178\u770b\u4e0a\u53bb\u62e5\u6709\u539f\u5b50\u64cd\u4f5c\uff0c\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u5f62\u4e0b\u5b83\u4eec\u4ecd\u7136\u4e0d\u662f\u539f\u5b50\u7684\uff08\u5373\uff0c\u5982\u679c __hash__ \u6216 __eq__ \u88ab\u5b9e\u73b0\u4e3a Python \u65b9\u6cd5\uff09\u4e14\u5b83\u4eec\u7684\u539f\u5b50\u6027\u662f\u9760\u4e0d\u4f4f\u7684\u3002\u4f60\u4e5f\u4e0d\u80fd\u6307\u671b\u539f\u5b50\u53d8\u91cf\u8d4b\u503c\uff08\u56e0\u4e3a\u8fd9\u4e2a\u53cd\u8fc7\u6765\u4f9d\u8d56\u5b57\u5178\uff09\u3002 \u4f18\u5148\u4f7f\u7528 Queue \u6a21\u5757\u7684 Queue \u6570\u636e\u7c7b\u578b\u4f5c\u4e3a\u7ebf\u7a0b\u95f4\u7684\u6570\u636e\u901a\u4fe1\u65b9\u5f0f\u3002\u53e6\u5916\uff0c\u4f7f\u7528 threading \u6a21\u5757\u53ca\u5176\u9501\u539f\u8bed\uff08 locking primitives \uff09\u3002\u4e86\u89e3\u6761\u4ef6\u53d8\u91cf\u7684\u5408\u9002\u4f7f\u7528\u65b9\u5f0f\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528 threading.Condition \u6765\u53d6\u4ee3\u4f4e\u7ea7\u522b\u7684\u9501\u4e86\u3002 1.19 \u5a01\u529b\u8fc7\u5927\u7684\u7279\u6027 \u907f\u514d\u4f7f\u7528\u8fd9\u4e9b\u7279\u6027\u3002 1.19.1 \u5b9a\u4e49 Python \u662f\u4e00\u79cd\u5f02\u5e38\u7075\u6d3b\u7684\u8bed\u8a00\uff0c\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u5f88\u591a\u82b1\u54e8\u7684\u7279\u6027\uff0c\u8bf8\u5982\u5143\u7c7b\uff08 metaclasses \uff09\u3001\u5b57\u8282\u7801\u8bbf\u95ee\u3001\u4efb\u610f\u7f16\u8bd1\uff08 on-the-fly compilation \uff09\u3001\u52a8\u6001\u7ee7\u627f\u3001\u5bf9\u8c61\u7236\u7c7b\u91cd\u5b9a\u4e49\uff08 object reparenting \uff09\u3001\u5bfc\u5165\u4fee\u6539\uff08 import hacks \uff09\u3001\u53cd\u5c04\uff08\u4f8b\u5982 getattr() \u7684\u4e00\u4e9b\u4f7f\u7528\uff09\u3001\u7cfb\u7edf\u5185\u4fee\u6539\uff08 modification of system internals \uff09\u7b49\u7b49\u3002 1.19.2 \u4f18\u70b9 \u5f3a\u5927\u7684\u8bed\u8a00\u7279\u6027\uff0c\u80fd\u8ba9\u4f60\u7684\u4ee3\u7801\u66f4\u7d27\u51d1\u3002 1.19.3 \u7f3a\u70b9 \u4f7f\u7528\u8fd9\u4e9b\u5f88\u201c\u9177\u201d\u7684\u7279\u6027\u5341\u5206\u8bf1\u4eba\uff0c\u4f46\u4e0d\u662f\u7edd\u5bf9\u5fc5\u8981\u3002\u4f7f\u7528\u5947\u6280\u6deb\u5de7\u7684\u4ee3\u7801\u5c06\u66f4\u52a0\u96be\u4ee5\u9605\u8bfb\u548c\u8c03\u8bd5\u3002\u5f00\u59cb\u53ef\u80fd\u8fd8\u597d\uff08\u5bf9\u539f\u4f5c\u8005\u800c\u8a00\uff09, \u4f46\u5f53\u4f60\u56de\u987e\u4ee3\u7801, \u5b83\u4eec\u53ef\u80fd\u4f1a\u6bd4\u90a3\u4e9b\u7a0d\u957f\u4e00\u70b9\u4f46\u662f\u5f88\u76f4\u63a5\u7684\u4ee3\u7801\u66f4\u52a0\u96be\u4ee5\u7406\u89e3. 1.19.4 \u7ed3\u8bba \u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u907f\u514d\u8fd9\u4e9b\u7279\u6027\u3002 \u5185\u90e8\u9700\u8981\u4f7f\u7528\u8fd9\u4e9b\u7279\u6027\u7684\u6807\u51c6\u5e93\u6a21\u5757\u548c\u7c7b\u53ef\u4ee5\u4f7f\u7528\uff08\u4f8b\u5982\uff0c abc.ABCMeta \u3001 dataclasses \u548c enum \uff09\u3002 1.20 \u65b0\u7248 Python \uff1a Python 3 \u548c from __future__ imports \u5f53\u524d\u63a8\u8350 Python 3 \u3002\u867d\u7136\u4e0d\u662f\u6bcf\u4e2a\u9879\u76ee\u90fd\u5fc5\u987b\u4f7f\u7528\uff0c\u4f46\u6240\u6709\u7f16\u5199\u7684\u4ee3\u7801\u90fd\u5e94\u8be5\u517c\u5bb9 Python 3 \uff08\u5e76\u5c3d\u53ef\u80fd\u7684\u901a\u8fc7 Python 3 \u7684\u6d4b\u8bd5\uff09\u3002 1.20.1 \u5b9a\u4e49 Python 3 \u662f Python \u8bed\u8a00\u7684\u91cd\u5927\u53d8\u5316\u3002\u867d\u7136\u73b0\u6709\u7684\u4ee3\u7801\u901a\u5e38\u662f\u8003\u8651\u7528 Python 2.7 \u7f16\u5199\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u4e8b\u60c5\u6765\u4f7f\u4ee3\u7801\u66f4\u660e\u786e\u5730\u8868\u8fbe\u5176\u610f\u56fe\uff0c\u4ece\u800c\u65e0\u9700\u4fee\u6539\u5c31\u80fd\u66f4\u597d\u5730\u5728 Python 3 \u4e0b\u4f7f\u7528\u3002 1.20.2 \u4f18\u70b9 \u5f53\u6240\u6709\u9879\u76ee\u4f9d\u8d56\u90fd\u517c\u5bb9 Python 3 \u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u7f16\u5199 Python 3 \u7684\u4ee3\u7801\u4e86\uff0c\u8fd9\u6837\u4e5f\u66f4\u5bb9\u6613\u5728 Python 3 \u4e2d\u8fd0\u884c\u3002 1.20.3 \u7f3a\u70b9 \u89c9\u5f97\u8fd9\u4e9b\u989d\u5916\u7684\u6837\u677f\u6587\u4ef6\u5f88\u96be\u770b\u3002 \u5bfc\u5165\u5b9e\u9645\u5e76\u4e0d\u9700\u8981\u7684\u7279\u6027\u6a21\u5757\u770b\u8d77\u6765\u602a\u602a\u7684\u3002 1.20.4 \u7ed3\u8bba from __future__ imports \u63a8\u8350\u4f7f\u7528 from __future__ import \u8bed\u53e5\u3002\u6240\u6709\u7684\u65b0\u4ee3\u7801\u90fd\u5e94\u8be5\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff0c\u73b0\u6709\u7684\u4ee3\u7801\u4e5f\u5e94\u8be5\u5728\u6709\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u517c\u5bb9\u66f4\u65b0\uff1a from __future__ import absolute_import from __future__ import division from __future__ import print_function \u83b7\u53d6\u6709\u5173\u8fd9\u4e9b\u5bfc\u5165\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 absolute imports \u3001 division behavior \u548c the print function \u3002 \u5373\u4f7f\u5f53\u524d\u5728\u6a21\u5757\u4e2d\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e9b\u5bfc\u5165\uff0c\u4e5f\u8bf7\u4e0d\u8981\u5ffd\u7565\u6216\u5220\u9664\u5b83\u4eec\uff0c\u9664\u975e\u4ee3\u7801\u4ec5\u9002\u7528\u4e8e Python 3 \u7248\u672c\u3002\u6700\u597d\u59cb\u7ec8\u5728\u6240\u6709\u6587\u4ef6\u4e2d\u5305\u542b future \u7684\u5bfc\u5165\uff0c\u4ee5\u4fbf\u5728\u6709\u4eba\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e9b\u7279\u6027\u65f6\uff0c\u4e0d\u4f1a\u5728\u4ee5\u540e\u7684\u7f16\u8f91\u4e2d\u5fd8\u8bb0\u5b83\u4eec\u3002 \u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684 from __future__ \u8bed\u53e5\uff0c\u53ef\u4ee5\u5728\u9700\u8981\u7684\u65f6\u5019\u4f7f\u7528\u3002\u6211\u4eec\u5728\u63a8\u8350\u4e2d\u5e76\u6ca1\u6709\u5305\u62ec unicode_literals \uff0c\u90a3\u662f\u56e0\u4e3a\u53ea\u6709\u5728 Python 2.7 \u4e2d\u624d\u4f1a\u5f15\u5165\u8bb8\u591a\u9690\u5f0f\u7684\u9ed8\u8ba4\u7f16\u7801\u8f6c\u6362\u3002\u5927\u591a\u6570\u4ee3\u7801\u6700\u597d\u6839\u636e\u9700\u8981\u660e\u786e\u4f7f\u7528 b'' \u548c u'' \u5b57\u7b26\u4ee5\u53ca unicode \u5b57\u7b26\u4e32\u3002 six \u3001 future \u548c past \u5f53\u9879\u76ee\u540c\u65f6\u9700\u8981\u652f\u6301 Python 2 \u548c 3 \u7248\u672c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 six \u3001 future \u548c past \u3002\u8fd9\u4e9b\u5e93\u5c31\u662f\u4e3a\u4e86\u8ba9\u4ee3\u7801\u5b9e\u73b0\u66f4\u6e05\u6670\u7b80\u5355\u800c\u5b58\u5728\u7684\u3002 1.21 \u4ee3\u7801\u7c7b\u578b\u6807\u6ce8 Python 3 \u7684\u4ee3\u7801\u53ef\u4ee5\u6839\u636e PEP-484 \u4f7f\u7528\u7c7b\u578b\u6807\u6ce8\uff0c\u5e76\u4f7f\u7528\u7c7b\u4f3c pytype \u7684\u7c7b\u578b\u68c0\u67e5\u5de5\u5177\u5728\u6784\u5efa\u65f6\u5bf9\u4ee3\u7801\u8fdb\u884c\u68c0\u67e5\u3002 \u7c7b\u578b\u6807\u6ce8\u53ef\u4ee5\u5728\u539f\u6587\u4ef6\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5728 stub pyi \u6587\u4ef6\u4e2d\u3002\u5c3d\u53ef\u80fd\u5728\u6e90\u4ee3\u7801\u4e2d\u8fdb\u884c\u6807\u6ce8\uff0c\u5bf9\u4e8e\u7b2c\u4e09\u65b9\u5e93\u6216\u6269\u5c55\u6a21\u5757\u53ef\u4ee5\u4f7f\u7528 pyi \u6587\u4ef6\u3002 1.21.1 \u5b9a\u4e49 \u7c7b\u578b\u6807\u6ce8\uff08\u6216\u7c7b\u578b\u63d0\u793a\uff09\u53ef\u4ee5\u7528\u4e8e\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c def func ( a : int ) -> List [ int ]: \u8fd8\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c PEP-526 \u7684\u8bed\u6cd5\u58f0\u660e\u53d8\u91cf\u7684\u7c7b\u578b\uff1a a : SomeType = some_func () \u6216\u8005\u5728\u5fc5\u987b\u652f\u6301\u65e7\u7248 Python \u7248\u672c\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u7c7b\u578b\u6ce8\u91ca\u3002 a = some_func () # type: SomeType 1.21.2 \u4f18\u70b9 \u7c7b\u578b\u6807\u6ce8\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002\u7c7b\u578b\u68c0\u67e5\u5668\u53ef\u4ee5\u628a\u8bb8\u591a\u8fd0\u884c\u65f6\u9519\u8bef\u8f6c\u6362\u4e3a\u6784\u5efa\u65f6\u9519\u8bef\uff0c\u5e76\u51cf\u5c11\u5a01\u529b\u8fc7\u5927\u7279\u6027\u5730\u4f7f\u7528\u3002 1.21.3 \u7f3a\u70b9 \u5fc5\u987b\u4fdd\u6301\u7c7b\u578b\u6807\u6ce8\u66f4\u65b0\u3002 \u60a8\u53ef\u80fd\u4f1a\u770b\u5230\u60a8\u8ba4\u4e3a\u662f\u6b63\u786e\u4ee3\u7801\u7684\u9519\u8bef\u4fe1\u606f\u3002 \u4f7f\u7528\u7c7b\u578b\u68c0\u67e5\u5668\u53ef\u80fd\u4f1a\u51cf\u5c11\u5a01\u529b\u8fc7\u5927\u7279\u6027\u5730\u4f7f\u7528\u3002 1.21.4 \u7ed3\u8bba \u5f3a\u70c8\u5efa\u8bae\u60a8\u5728\u66f4\u6539\u4ee3\u7801\u65f6\u542f\u7528 Python \u7c7b\u578b\u5206\u6790\u3002\u5f53\u6dfb\u52a0\u6216\u4fee\u6539\u516c\u5171 API \u65f6\uff0c\u8bf7\u5305\u542b\u7c7b\u578b\u6807\u6ce8\uff0c\u5e76\u5728\u6784\u5efa\u7cfb\u7edf\u4e2d\u542f\u7528 pytype \u8fdb\u884c\u68c0\u67e5\u3002\u7531\u4e8e\u9759\u6001\u5206\u6790\u5bf9 Python \u6765\u8bf4\u76f8\u5bf9\u8f83\u65b0\uff0c\u6211\u4eec\u627f\u8ba4\u4f1a\u6709\u4e00\u4e9b\u526f\u4f5c\u7528\uff08\u6bd4\u5982\u9519\u8bef\u7684\u7c7b\u578b\u63a8\u65ad\uff09\u53ef\u80fd\u4f1a\u963b\u6b62\u4e00\u4e9b\u9879\u76ee\u91c7\u7528\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9f13\u52b1\u4f5c\u8005\u6dfb\u52a0\u4e00\u4e2a\u5e26\u6709 TODO \u7684\u6ce8\u91ca\uff0c\u6216\u8005\u5728 BUILD \u6587\u4ef6\u6216\u4ee3\u7801\u672c\u8eab\u4e2d\u901a\u8fc7 bug \u94fe\u63a5\u63cf\u8ff0\u5f53\u524d\u4e0d\u91c7\u7528\u7c7b\u578b\u6807\u6ce8\u7684\u95ee\u9898\u3002","title":"\u8bed\u8a00\u89c4\u8303"},{"location":"standard/language_rules/#python","text":"\u672c\u6587\u6863\u4e3a Google Python Style Guide \u7b2c\u4e8c\u7ae0 Python Language Rules \u7684\u8bd1\u6587\u3002 \u6700\u540e\u66f4\u65b0\u65f6\u95f4\uff1a 2021-04-28 \u5982\u679c\u6709\u7ffb\u8bd1\u9519\u8bef\u6216\u8868\u8ff0\u4e0d\u51c6\u786e\u7684\u95ee\u9898\uff0c\u6b22\u8fce\u63d0\u4ea4 PR\uff0c\u611f\u8c22\u60a8\u7684\u53c2\u4e0e\u3002","title":"Python \u8bed\u8a00\u89c4\u8303"},{"location":"standard/language_rules/#11-lint","text":"\u4f7f\u7528 pylintrc \u914d\u7f6e\uff0c\u5bf9\u4f60\u7684\u4ee3\u7801\u8fd0\u884c pylint \u3002","title":"1.1 Lint"},{"location":"standard/language_rules/#111","text":"Pylint \u662f\u4e00\u4e2a\u5728 Python \u6e90\u4ee3\u7801\u4e2d\u67e5\u627e bug \u548c\u98ce\u683c\u95ee\u9898\u7684\u5de5\u5177\u3002\u5bf9\u4e8e C \u548c C++ \u8fd9\u6837\u7684\u4e0d\u90a3\u4e48\u52a8\u6001\u7684\u8bed\u8a00\uff0c\u8fd9\u4e9b\u95ee\u9898\u901a\u5e38\u7531\u7f16\u8bd1\u5668\u6765\u6355\u83b7\u3002\u7531\u4e8e Python \u7684\u52a8\u6001\u7279\u6027\uff0c\u6709\u4e9b\u8b66\u544a\u53ef\u80fd\u4e0d\u5bf9\u3002\u4e0d\u8fc7\u4f2a\u544a\u8b66\u5e94\u8be5\u5f88\u5c11\u3002","title":"1.1.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#112","text":"\u53ef\u4ee5\u6355\u83b7\u5bb9\u6613\u5ffd\u89c6\u7684\u9519\u8bef\uff0c\u4f8b\u5982\u8f93\u5165\u9519\u8bef\uff0c\u4f7f\u7528\u672a\u8d4b\u503c\u7684\u53d8\u91cf\u7b49\u3002","title":"1.1.2 \u4f18\u70b9"},{"location":"standard/language_rules/#113","text":"pylint \u4e0d\u5b8c\u7f8e\u3002\u8981\u5229\u7528\u5176\u4f18\u52bf\uff0c\u6211\u4eec\u6709\u65f6\u4faf\u9700\u8981\uff1a\u56f4\u7ed5\u7740\u5b83\u6765\u5199\u4ee3\u7801\u3001\u6291\u5236\u5176\u544a\u8b66\u3001\u6539\u8fdb\u5b83\u6216\u8005\u5ffd\u7565\u5b83\u3002","title":"1.1.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#114","text":"\u786e\u4fdd\u5bf9\u4f60\u7684\u4ee3\u7801\u8fd0\u884c pylint \u3002\u6291\u5236\u4e0d\u51c6\u786e\u7684\u8b66\u544a\uff0c\u4ee5\u4fbf\u80fd\u591f\u5c06\u5176\u4ed6\u8b66\u544a\u66b4\u9732\u51fa\u6765\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u4e00\u4e2a\u884c\u6ce8\u91ca\u6765\u6291\u5236\u544a\u8b66\u3002\u4f8b\u5982\uff1a dict = 'something awful' # Bad idea... pylint: disable=redefined-builtin pylint \u8b66\u544a\u662f\u4ee5\u4e00\u4e2a\u7b26\u53f7\u540d (\u5982 empty-docstring ) \u6765\u6807\u8bc6\u7684\uff0cGoogle \u7279\u5b9a\u7684\u8b66\u544a\u4ee5 g- \u5f00\u5934\u3002 \u5982\u679c\u4ece\u7b26\u53f7\u540d\u79f0\u4e2d\u770b\u4e0d\u51fa\u7981\u7528\u7684\u539f\u56e0\uff0c\u90a3\u4e48\u8bf7\u5bf9\u5176\u589e\u52a0\u4e00\u4e2a\u8be6\u7ec6\u89e3\u91ca\u3002 \u91c7\u7528\u8fd9\u79cd\u6291\u5236\u65b9\u5f0f\u7684\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u67e5\u627e\u6291\u5236\u5e76\u56de\u987e\u5b83\u4eec\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u6765\u83b7\u53d6 pylint \u8b66\u544a\u5217\u8868\uff1a pylint --list-msgs \u83b7\u53d6\u5173\u4e8e\u7279\u5b9a\u6d88\u606f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u53ef\u4ee5\u6267\u884c\uff1a pylint --help-msg = C6409 \u76f8\u6bd4\u8f83\u4e8e\u4e4b\u524d\u4f7f\u7528\u7684 pylint: disable-msg \uff0c\u672c\u6587\u63a8\u8350\u4f7f\u7528 pylint: disable \u3002 \u672a\u4f7f\u7528\u53c2\u6570\u7684\u8b66\u544a\u53ef\u4ee5\u901a\u8fc7\u5220\u9664\u51fd\u6570\u5f00\u5934\u7684\u53d8\u91cf\u6765\u6d88\u9664\u3002\u5e76\u5305\u542b\u4e00\u4e2a\u6ce8\u91ca\u89e3\u91ca\u4e3a\u4ec0\u4e48\u5220\u9664\u5b83\u3002\u4f7f\u7528 \u201cUnused.\u201d \u6ce8\u91ca\u5c31\u8db3\u591f\u4e86\u3002\u4f8b\u5982\uff1a def viking_cafe_order ( spam , beans , eggs = None ): del beans , eggs # Unused by vikings. return spam + spam + spam \u8981\u6291\u5236\u8fd9\u79cd\u8b66\u544a\u7684\u5e38\u89c1\u5f62\u5f0f\u8fd8\u5305\u62ec\u4f7f\u7528 \u201c_\" \u4f5c\u4e3a\u672a\u4f7f\u7528\u53c2\u6570\u7684\u6807\u8bc6\u7b26\uff0c\u6216\u5728\u53c2\u6570\u540d\u524d\u52a0\u4e0a \u201cunused_\u201d\uff0c\u6216\u5c06\u5b83\u4eec\u8d4b\u503c\u7ed9 \u201c_\"\u3002 \u4e0a\u8ff0\u7684\u8fd9\u4e9b\u5f62\u5f0f\u90fd\u662f\u5141\u8bb8\u7684\uff0c\u4f46\u4e0d\u518d\u63a8\u8350\u3002\u8c03\u7528\u65b9\u6cd5\u65f6\u6309\u540d\u79f0\u4f20\u9012\u7684\u8fd9\u4e9b\u53c2\u6570\uff0c\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u4f7f\u7528\u3002","title":"1.1.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#12","text":"\u53ea\u5bf9\u5305\u548c\u6a21\u5757\u4f7f\u7528 import \u8bed\u53e5\uff0c\u800c\u4e0d\u662f\u5355\u72ec\u7684\u7c7b\u6216\u51fd\u6570\u3002\u6ce8\u610f\uff1a typing \u6a21\u5757\u662f\u4e2a\u7279\u4f8b\u3002","title":"1.2 \u5bfc\u5165"},{"location":"standard/language_rules/#121","text":"\u6a21\u5757\u95f4\u5171\u4eab\u4ee3\u7801\u7684\u91cd\u7528\u673a\u5236\u3002","title":"1.2.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#122","text":"\u547d\u540d\u7a7a\u95f4\u7ba1\u7406\u7ea6\u5b9a\u5341\u5206\u7b80\u5355\u3002\u6bcf\u4e2a\u6807\u8bc6\u7b26\u7684\u6765\u6e90\u90fd\u7528\u4e00\u79cd\u4e00\u81f4\u7684\u65b9\u5f0f\u6307\u793a\uff1a x.Obj \u8868\u793a Obj \u5bf9\u8c61\u5b9a\u4e49\u5728\u6a21\u5757 x \u4e2d\u3002","title":"1.2.2 \u4f18\u70b9"},{"location":"standard/language_rules/#123","text":"\u6a21\u5757\u540d\u4ecd\u53ef\u80fd\u51b2\u7a81\u3002\u6709\u4e9b\u6a21\u5757\u540d\u592a\u957f, \u4e0d\u592a\u65b9\u4fbf\u3002","title":"1.2.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#124","text":"\u4f7f\u7528 import x \u6765\u5bfc\u5165\u5305\u548c\u6a21\u5757\u3002 \u4f7f\u7528 from x import y \uff0c\u5176\u4e2d x \u662f\u5305\u524d\u7f00\uff0c y \u662f\u4e0d\u5e26\u524d\u7f00\u7684\u6a21\u5757\u540d\u3002 \u4f7f\u7528 from x import y as z \uff0c\u5982\u679c\u4e24\u4e2a\u8981\u5bfc\u5165\u7684\u6a21\u5757\u90fd\u53eb\u505a z \u6216\u8005 y \u592a\u957f\u4e86\u3002 \u53ea\u6709\u5f53 z \u662f\u6807\u51c6\u7f29\u5199\uff08\u4f8b\u5982\uff0c numpy \u4e3a np \uff09\u65f6\uff0c\u624d\u4f7f\u7528 import y as z \u3002 \u4f8b\u5982\uff0c\u6a21\u5757 sound.effects.echo \u53ef\u4ee5\u7528\u5982\u4e0b\u65b9\u5f0f\u5bfc\u5165\uff1a from sound.effects import echo ... echo . EchoFilter ( input , output , delay = 0.7 , atten = 4 ) \u5bfc\u5165\u65f6\u4e0d\u8981\u4f7f\u7528\u76f8\u5bf9\u540d\u79f0\u3002\u5373\u4f7f\u6a21\u5757\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\uff0c\u4e5f\u8981\u4f7f\u7528\u5b8c\u6574\u5305\u540d\u3002\u8fd9\u80fd\u5e2e\u52a9\u4f60\u907f\u514d\u65e0\u610f\u95f4\u5bfc\u5165\u4e00\u4e2a\u5305\u4e24\u6b21\u3002 \u4ece typing \u6a21\u5757\u548c six.moves \u6a21\u5757\u5bfc\u5165\u4e0d\u53d7\u6b64\u89c4\u5219\u7ea6\u675f\u3002","title":"1.2.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#13","text":"\u4f7f\u7528\u6a21\u5757\u7684\u5168\u8def\u5f84\u540d\u6765\u5bfc\u5165\u6bcf\u4e2a\u6a21\u5757","title":"1.3 \u5305"},{"location":"standard/language_rules/#131","text":"\u907f\u514d\u6a21\u5757\u540d\u51b2\u7a81\u3002\u67e5\u627e\u5305\u66f4\u5bb9\u6613\u3002","title":"1.3.1 \u4f18\u70b9"},{"location":"standard/language_rules/#132","text":"\u90e8\u7f72\u4ee3\u7801\u53d8\u96be\uff0c\u56e0\u4e3a\u4f60\u5fc5\u987b\u590d\u5236\u5305\u5c42\u6b21\u3002","title":"1.3.2 \u7f3a\u70b9"},{"location":"standard/language_rules/#133","text":"\u6240\u6709\u7684\u65b0\u4ee3\u7801\u90fd\u5e94\u8be5\u7528\u5b8c\u6574\u5305\u540d\u6765\u5bfc\u5165\u6bcf\u4e2a\u6a21\u5757\u3002 \u5e94\u8be5\u50cf\u4e0b\u9762\u8fd9\u6837\u5bfc\u5165\uff1a \u63a8\u8350 # Reference absl.flags in code with the complete name (verbose). import absl.flags from doctor.who import jodie FLAGS = absl . flags . FLAGS \u63a8\u8350 # Reference flags in code with just the module name (common). from absl import flags from doctor.who import jodie FLAGS = flags . FLAGS \u4e0d\u63a8\u8350 ( \u5047\u8bbe jodie.py \u6587\u4ef6\u5728 doctor/who/where \u4e2d ) # Unclear what module the author wanted and what will be imported. The actual # import behavior depends on external factors controlling sys.path. # Which possible jodie module did the author intend to import? import jodie \u5c3d\u7ba1\u5728\u67d0\u4e9b\u73af\u5883\u4e2d\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f46\u4e0d\u5e94\u5047\u5b9a\u4e3b\u4e8c\u8fdb\u5236\u6587\u4ef6\u6240\u5728\u7684\u76ee\u5f55\u4f4d\u4e8e sys.path \u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ee3\u7801\u5e94\u5047\u5b9a import jodie \u5f15\u7528\u4e86\u540d\u4e3a jodie \u7684\u7b2c\u4e09\u65b9\u6216\u9876\u7ea7\u7a0b\u5e8f\u5305\uff0c\u800c\u4e0d\u662f\u672c\u5730\u7684 jodie.py \u3002","title":"1.3.3 \u7ed3\u8bba"},{"location":"standard/language_rules/#14","text":"\u5141\u8bb8\u4f7f\u7528\u5f02\u5e38\uff0c\u4f46\u5fc5\u987b\u5c0f\u5fc3\u3002","title":"1.4 \u5f02\u5e38"},{"location":"standard/language_rules/#141","text":"\u5f02\u5e38\u662f\u4e00\u79cd\u8df3\u51fa\u4ee3\u7801\u5757\u7684\u6b63\u5e38\u63a7\u5236\u6d41\u6765\u5904\u7406\u9519\u8bef\u6216\u8005\u5176\u5b83\u5f02\u5e38\u6761\u4ef6\u7684\u65b9\u5f0f\u3002","title":"1.4.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#141_1","text":"\u6b63\u5e38\u64cd\u4f5c\u4ee3\u7801\u7684\u63a7\u5236\u6d41\u4e0d\u4f1a\u548c\u9519\u8bef\u5904\u7406\u4ee3\u7801\u6df7\u5728\u4e00\u8d77\u3002\u5f53\u67d0\u79cd\u6761\u4ef6\u53d1\u751f\u65f6\uff0c\u5b83\u4e5f\u5141\u8bb8\u63a7\u5236\u6d41\u8df3\u8fc7\u591a\u4e2a\u6846\u67b6\u3002\u4f8b\u5982\uff0c\u4e00\u6b65\u8df3\u51fa N \u4e2a\u5d4c\u5957\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u5fc5\u7ee7\u7eed\u6267\u884c\u9519\u8bef\u7684\u4ee3\u7801\u3002","title":"1.4.1 \u4f18\u70b9"},{"location":"standard/language_rules/#142","text":"\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8ba9\u4eba\u56f0\u60d1\u7684\u63a7\u5236\u6d41\u3002\u8c03\u7528\u5e93\u65f6\u5bb9\u6613\u9519\u8fc7\u9519\u8bef\u60c5\u51b5\u3002","title":"1.4.2 \u7f3a\u70b9"},{"location":"standard/language_rules/#144","text":"\u5f02\u5e38\u5fc5\u987b\u9075\u5b88\u7279\u5b9a\u6761\u4ef6\uff1a \u5982\u679c\u6709\u5fc5\u8981\uff0c\u8bf7\u4f7f\u7528\u5185\u7f6e\u5f02\u5e38\u7c7b\u3002\u4f8b\u5982\uff0c\u629b\u51fa ValureError \u6765\u6307\u793a\u7f16\u7a0b\u9519\u8bef\u3002\u6bd4\u5982\u8fdd\u53cd\u4e86\u524d\u7f6e\u6761\u4ef6\uff08\u9700\u8981\u4e00\u4e2a\u6b63\u6570\uff0c\u4f46\u4f20\u9012\u4e86\u4e00\u4e2a\u8d1f\u6570\uff09\u3002\u4e0d\u8981\u4f7f\u7528 assert \u8bed\u53e5\u9a8c\u8bc1\u516c\u5171 API \u7684\u53c2\u6570\u503c\u3002 assert \u7528\u4e8e\u786e\u4fdd\u5185\u90e8\u6b63\u786e\u6027\uff0c\u4e0d\u5f97\u5f3a\u5236\u4f7f\u7528\uff0c\u4e5f\u4e0d\u8868\u793a\u53d1\u751f\u4e86\u67d0\u4e9b\u610f\u5916\u4e8b\u4ef6\u3002\u5982\u679c\u5728\u540e\u4e00\u79cd\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528\u5f02\u5e38\uff0c\u8bf7\u4f7f\u7528 raise \u8bed\u53e5\u3002\u4f8b\u5982\uff1a \u63a8\u8350 def connect_to_next_port ( self , minimum ): \"\"\"Connects to the next available port. Args: minimum: A port value greater or equal to 1024. Returns: The new minimum port. Raises: ConnectionError: If no available port is found. \"\"\" if minimum < 1024 : # Note that this raising of ValueError is not mentioned in the doc # string's \"Raises:\" section because it is not appropriate to # guarantee this specific behavioral reaction to API misuse. raise ValueError ( f 'Min. port must be at least 1024, not { minimum } .' ) port = self . _find_next_open_port ( minimum ) if not port : raise ConnectionError ( f 'Could not connect to service on port { minimum } or higher.' ) assert port >= minimum , ( f 'Unexpected port { port } when minimum was { minimum } .' ) return port \u4e0d\u63a8\u8350 def connect_to_next_port ( self , minimum ): \"\"\"Connects to the next available port. Args: minimum: A port value greater or equal to 1024. Returns: The new minimum port. \"\"\" assert minimum >= 1024 , 'Minimum port must be at least 1024.' port = self . _find_next_open_port ( minimum ) assert port is not None return port \u6a21\u5757\u6216\u5305\u5e94\u8be5\u5b9a\u4e49\u81ea\u5df1\u7684\u7279\u5b9a\u57df\u7684\u5f02\u5e38\u57fa\u7c7b\u3002\u8fd9\u4e2a\u57fa\u7c7b\u5e94\u8be5\u4ece\u5185\u5efa\u7684 Exception \u7c7b\u7ee7\u627f\u3002\u5f02\u5e38\u540d\u79f0\u5e94\u8be5\u4ee5 Error \u7ed3\u5c3e\uff0c\u800c\u4e14\u4e0d\u5e94\u8be5\u96be\u4ee5\u7406\u89e3\uff08 foo.FooError \uff09\u3002 \u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528 expect: \u8bed\u53e5\u6765\u6355\u83b7\u6240\u6709\u5f02\u5e38\uff0c\u4e5f\u4e0d\u8981\u6355\u83b7 Exception \u6216\u8005 StandardError \uff0c\u9664\u975e\uff1a \u91cd\u65b0\u89e6\u53d1\u8be5\u5f02\u5e38\uff0c\u6216 \u4f60\u5df2\u7ecf\u5728\u5f53\u524d\u7ebf\u7a0b\u7684\u6700\u5916\u5c42\uff08\u8bb0\u5f97\u8fd8\u662f\u8981\u6253\u5370\u4e00\u6761\u9519\u8bef\u6d88\u606f\uff09 \u5728\u5f02\u5e38\u8fd9\u65b9\u9762, Python \u975e\u5e38\u5bbd\u5bb9\uff0c expect: \u53ef\u4ee5\u6355\u83b7\u6240\u6709\u62fc\u5199\u9519\u8bef\u7684\u540d\u79f0\uff0c sys.exit() \u8c03\u7528\uff0c Ctrl+C \u4e2d\u65ad\uff0c unittest \u5931\u8d25\u548c\u6240\u6709\u4f60\u4e0d\u60f3\u6355\u83b7\u7684\u5176\u4ed6\u5f02\u5e38\u3002 \u5c3d\u91cf\u51cf\u5c11 try/except \u5757\u4e2d\u7684\u4ee3\u7801\u91cf\u3002 try \u5757\u7684\u4f53\u79ef\u8d8a\u5927\uff0c\u671f\u671b\u4e4b\u5916\u7684\u5f02\u5e38\u5c31\u8d8a\u5bb9\u6613\u88ab\u89e6\u53d1\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c try/except \u5757\u5c06\u9690\u85cf\u771f\u6b63\u7684\u9519\u8bef\u3002 \u4f7f\u7528 finally \u5b50\u53e5\u6765\u6267\u884c\u90a3\u4e9b\u65e0\u8bba try \u5757\u4e2d\u6709\u6ca1\u6709\u5f02\u5e38\u90fd\u5e94\u8be5\u88ab\u6267\u884c\u7684\u4ee3\u7801\u3002\u8fd9\u5bf9\u4e8e\u6e05\u7406\u8d44\u6e90\u5e38\u5e38\u5f88\u6709\u7528\uff0c\u4f8b\u5982\u5173\u95ed\u6587\u4ef6\u3002","title":"1.4.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#15","text":"\u907f\u514d\u5168\u5c40\u53d8\u91cf\u3002","title":"1.5 \u5168\u5c40\u53d8\u91cf"},{"location":"standard/language_rules/#151","text":"\u5b9a\u4e49\u5728\u6a21\u5757\u7ea7\u7684\u53d8\u91cf\u3002","title":"1.5.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#152","text":"\u5076\u5c14\u6709\u7528\u3002","title":"1.5.2 \u4f18\u70b9"},{"location":"standard/language_rules/#153","text":"\u5bfc\u5165\u65f6\u53ef\u80fd\u6539\u53d8\u6a21\u5757\u884c\u4e3a\uff0c\u56e0\u4e3a\u5bfc\u5165\u6a21\u5757\u65f6\u4f1a\u5bf9\u6a21\u5757\u7ea7\u53d8\u91cf\u8d4b\u503c\u3002","title":"1.5.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#154","text":"\u907f\u514d\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u3002 \u867d\u7136\u6a21\u5757\u7ea7\u5e38\u91cf\u5728\u6280\u672f\u4e0a\u662f\u53d8\u91cf\uff0c\u4f46\u662f\u5141\u8bb8\u548c\u9f13\u52b1\u4f7f\u7528\u3002\u4f8b\u5982\uff1a MAX_HOLY_HANDGRENADE_COUNT = 3 \u3002\u5e38\u91cf\u7684\u547d\u540d\u5fc5\u987b\u4f7f\u7528\u5168\u5927\u5199\u548c\u4e0b\u5212\u7ebf\u3002\u5177\u4f53\u8bf7\u53c2\u9605\u547d\u540d\u89c4\u8303\u3002 \u5982\u679c\u9700\u8981\uff0c\u5168\u5c40\u53d8\u91cf\u5e94\u8be5\u4ec5\u5728\u6a21\u5757\u5185\u90e8\u53ef\u7528\uff0c\u5e76\u901a\u8fc7\u5728\u540d\u79f0\u524d\u52a0\u4e0a _ \u524d\u7f00\u4f7f\u5176\u6210\u4e3a\u6a21\u5757\u7684\u5185\u90e8\u53d8\u91cf\u3002\u5916\u90e8\u8bbf\u95ee\u5fc5\u987b\u901a\u8fc7\u6a21\u5757\u7ea7\u7684\u516c\u5171\u51fd\u6570\u6765\u8bbf\u95ee\u3002\u5177\u4f53\u8bf7\u53c2\u9605\u547d\u540d\u89c4\u8303\u3002","title":"1.5.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#16","text":"\u5728\u9700\u8981\u5173\u95ed\u5c40\u90e8\u53d8\u91cf\u65f6\u9f13\u52b1\u4f7f\u7528\u5d4c\u5957\u672c\u5730\u5185\u90e8\u7c7b\u6216\u51fd\u6570\uff0c\u5d4c\u5957\u7c7b\u66f4\u597d\u3002","title":"1.6 \u5d4c\u5957/\u5c40\u90e8/\u5185\u90e8\u7c7b\u6216\u51fd\u6570"},{"location":"standard/language_rules/#161","text":"\u7c7b\u53ef\u4ee5\u5b9a\u4e49\u5728\u65b9\u6cd5\u3001\u51fd\u6570\u6216\u8005\u7c7b\u4e2d\u3002\u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u5728\u65b9\u6cd5\u6216\u51fd\u6570\u4e2d\u3002\u5c01\u95ed\u533a\u95f4\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u5bf9\u5d4c\u5957\u51fd\u6570\u662f\u53ea\u8bfb\u7684\u3002","title":"1.6.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#162","text":"\u5141\u8bb8\u5b9a\u4e49\u4ec5\u7528\u4e8e\u6709\u6548\u8303\u56f4\u7684\u5de5\u5177\u7c7b\u548c\u51fd\u6570\u3002\u975e\u5e38\u50cf ADT -y \u3002\u901a\u5e38\u7528\u4e8e\u5b9e\u73b0\u88c5\u9970\u5668\u3002","title":"1.6.2 \u4f18\u70b9"},{"location":"standard/language_rules/#163","text":"\u4e0d\u80fd\u76f4\u63a5\u6d4b\u8bd5\u5d4c\u5957\u51fd\u6570\u548c\u7c7b\u3002 \u5d4c\u5957\u4f1a\u4f7f\u5916\u90e8\u51fd\u6570\u66f4\u957f\u3002 \u53ef\u8bfb\u6027\u66f4\u5dee\u3002","title":"1.6.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#164","text":"\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u6709\u4e00\u4e9b\u9650\u5236\u3002\u907f\u514d\u4f7f\u7528\u5d4c\u5957\u51fd\u6570\u6216\u7c7b\uff0c\u9664\u975e\u8981\u5173\u95ed\u5c40\u90e8\u503c\u3002\u4e0d\u8981\u4ec5\u4ec5\u4e3a\u4e86\u5bf9\u7528\u6237\u9690\u85cf\u6a21\u5757\u7684\u67d0\u4e2a\u51fd\u6570\u800c\u8fdb\u884c\u5d4c\u5957\u3002\u76f8\u53cd\uff0c\u5e94\u8be5\u5728\u6a21\u5757\u7ea7\u522b\u7684\u540d\u79f0\u4e0a\u52a0 _ \u524d\u7f00\uff0c\u8fd9\u6837\u65b9\u4fbf\u6d4b\u8bd5\u3002","title":"1.6.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#17","text":"\u53ef\u4ee5\u5728\u7b80\u5355\u60c5\u51b5\u4e0b\u4f7f\u7528\u3002","title":"1.7 \u63a8\u5bfc\u5f0f\u548c\u751f\u6210\u8868\u8fbe\u5f0f"},{"location":"standard/language_rules/#171","text":"List \u3001 Dict \u548c Set \u63a8\u5bfc\u5f0f\u4e0e\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u6d01\u800c\u6709\u6548\u7684\u65b9\u6cd5\u6765\u521b\u5efa\u5217\u8868\u548c\u8fed\u4ee3\u5668\uff0c\u800c\u4e0d\u5fc5\u501f\u52a9\u4f20\u7edf\u7684\u5faa\u73af\u3001 map() \u3001 filter() \u6216\u8005 lambda \u3002","title":"1.7.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#172","text":"\u7b80\u5355\u7684\u63a8\u5bfc\u5f0f\u53ef\u4ee5\u6bd4\u5176\u4ed6\u7684\u5b57\u5178\u3001\u5217\u8868\u6216\u96c6\u5408\u521b\u5efa\u6280\u672f\u66f4\u52a0\u6e05\u6670\u7b80\u5355\u3002\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5341\u5206\u9ad8\u6548\uff0c\u56e0\u4e3a\u5b83\u4eec\u907f\u514d\u4e86\u521b\u5efa\u6574\u4e2a\u5217\u8868\u3002","title":"1.7.2 \u4f18\u70b9"},{"location":"standard/language_rules/#173","text":"\u590d\u6742\u7684\u63a8\u5bfc\u5f0f\u6216\u8005\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u53ef\u80fd\u96be\u4ee5\u9605\u8bfb\u3002","title":"1.7.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#174","text":"\u9002\u7528\u4e8e\u7b80\u5355\u60c5\u51b5\u3002\u6bcf\u4e2a\u90e8\u5206\u5e94\u8be5\u5355\u72ec\u7f6e\u4e8e\u4e00\u884c\uff1a mapping \u8868\u8fbe\u5f0f\uff0c for \u5b50\u53e5\uff0c filter \u8868\u8fbe\u5f0f\u3002\u7981\u6b62\u591a\u91cd for \u8bed\u53e5\u6216\u8fc7\u6ee4\u5668\u8868\u8fbe\u5f0f\u3002\u590d\u6742\u60c5\u51b5\u4e0b\u8fd8\u662f\u4f7f\u7528\u5faa\u73af\u3002 \u63a8\u8350 result = [ mapping_expr for value in iterable if filter_expr ] result = [{ 'key' : value } for value in iterable if a_long_filter_expression ( value )] result = [ complicated_transform ( x ) for x in iterable if predicate ( x )] descriptive_name = [ transform ({ 'key' : key , 'value' : value }, color = 'black' ) for key , value in generate_iterable ( some_input ) if complicated_condition_is_met ( key , value ) ] result = [] for x in range ( 10 ): for y in range ( 5 ): if x * y > 10 : result . append (( x , y )) return { x : complicated_transform ( x ) for x in long_generator_function ( parameter ) if x is not None } squares_generator = ( x ** 2 for x in range ( 10 )) unique_names = { user . name for user in users if user is not None } eat ( jelly_bean for jelly_bean in jelly_beans if jelly_bean . color == 'black' ) \u4e0d\u63a8\u8350 result = [ complicated_transform ( x , some_argument = x + 1 ) for x in iterable if predicate ( x )] result = [( x , y ) for x in range ( 10 ) for y in range ( 5 ) if x * y > 10 ] return (( x , y , z ) for x in range ( 5 ) for y in range ( 5 ) if x != y for z in range ( 5 ) if y != z )","title":"1.7.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#18","text":"\u5982\u679c\u7c7b\u578b\u652f\u6301\uff0c\u5c31\u4f7f\u7528\u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u64cd\u4f5c\u7b26\u3002\u6bd4\u5982\u5217\u8868\uff0c\u5b57\u5178\u53ca\u6587\u4ef6\u7b49\u3002","title":"1.8 \u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u64cd\u4f5c\u7b26"},{"location":"standard/language_rules/#181","text":"\u5bb9\u5668\u7c7b\u578b\uff0c\u50cf\u5b57\u5178\u548c\u5217\u8868\uff0c\u5b9a\u4e49\u4e86\u9ed8\u8ba4\u7684\u8fed\u4ee3\u5668\u548c\u5173\u7cfb\u6d4b\u8bd5\u64cd\u4f5c\u7b26\uff08 in \u548c not in \uff09","title":"1.8.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#182","text":"\u9ed8\u8ba4\u64cd\u4f5c\u7b26\u548c\u8fed\u4ee3\u5668\u7b80\u5355\u9ad8\u6548\uff0c\u5b83\u4eec\u76f4\u63a5\u8868\u8fbe\u4e86\u64cd\u4f5c\uff0c\u6ca1\u6709\u989d\u5916\u7684\u65b9\u6cd5\u8c03\u7528\u3002\u4f7f\u7528\u9ed8\u8ba4\u64cd\u4f5c\u7b26\u7684\u51fd\u6570\u662f\u901a\u7528\u7684\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u652f\u6301\u8be5\u64cd\u4f5c\u7684\u4efb\u4f55\u7c7b\u578b\u3002","title":"1.8.2 \u4f18\u70b9"},{"location":"standard/language_rules/#183","text":"\u4f60\u6ca1\u6cd5\u901a\u8fc7\u9605\u8bfb\u65b9\u6cd5\u540d\u6765\u533a\u5206\u5bf9\u8c61\u7684\u7c7b\u578b\uff08\u4f8b\u5982\uff0c has_key() \u610f\u5473\u7740\u5b57\u5178\uff09\u3002\u4e0d\u8fc7\u8fd9\u4e5f\u662f\u4f18\u70b9\u3002","title":"1.8.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#184","text":"\u5982\u679c\u7c7b\u578b\u652f\u6301\uff0c\u5c31\u4f7f\u7528\u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u64cd\u4f5c\u7b26\uff0c\u4f8b\u5982\u5217\u8868\u3001\u5b57\u5178\u548c\u6587\u4ef6\u3002\u5185\u5efa\u7c7b\u578b\u4e5f\u5b9a\u4e49\u4e86\u8fed\u4ee3\u5668\u65b9\u6cd5\u3002\u4f18\u5148\u8003\u8651\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u90a3\u4e9b\u8fd4\u56de\u5217\u8868\u7684\u65b9\u6cd5\u3002\u5f53\u7136\uff0c\u8fd9\u6837\u904d\u5386\u5bb9\u5668\u65f6\uff0c\u4f60\u5c06\u4e0d\u80fd\u4fee\u6539\u5bb9\u5668\u3002\u9664\u975e\u7279\u6b8a\u60c5\u51b5\uff0c\u5426\u5219\u4e0d\u8981\u4f7f\u7528 Python 2 \u7279\u5b9a\u7684\u8fed\u4ee3\u65b9\u6cd5 dict.iter*() \u3002 \u63a8\u8350 for key in adict : ... if key not in adict : ... if obj in alist : ... for line in afile : ... for k , v in adict . items (): ... for k , v in six . iteritems ( adict ): ... \u4e0d\u63a8\u8350 for key in adict . keys (): ... if not adict . has_key ( key ): ... for line in afile . readlines (): ... for k , v in dict . iteritems (): ...","title":"1.8.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#19","text":"\u6309\u9700\u4f7f\u7528\u751f\u6210\u5668\u3002","title":"1.9 \u751f\u6210\u5668"},{"location":"standard/language_rules/#191","text":"\u6240\u8c13\u751f\u6210\u5668\u51fd\u6570\uff0c\u5c31\u662f\u6bcf\u5f53\u5b83\u6267\u884c\u4e00\u6b21\u751f\u6210 yield \u8bed\u53e5\uff0c\u5b83\u5c31\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8fd9\u4e2a\u8fed\u4ee3\u5668\u751f\u6210\u4e00\u4e2a\u503c\u3002\u751f\u6210\u503c\u540e\uff0c\u751f\u6210\u5668\u51fd\u6570\u7684\u8fd0\u884c\u72b6\u6001\u5c06\u88ab\u6302\u8d77\uff0c\u76f4\u5230\u4e0b\u4e00\u6b21\u751f\u6210\u3002","title":"1.9.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#192","text":"\u7b80\u5316\u4ee3\u7801\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8c03\u7528\u65f6\uff0c\u5c40\u90e8\u53d8\u91cf\u548c\u63a7\u5236\u6d41\u7684\u72b6\u6001\u90fd\u4f1a\u88ab\u4fdd\u5b58\u3002\u6bd4\u8d77\u4e00\u6b21\u521b\u5efa\u4e00\u7cfb\u5217\u503c\u7684\u51fd\u6570\uff0c\u751f\u6210\u5668\u4f7f\u7528\u7684\u5185\u5b58\u66f4\u5c11\u3002","title":"1.9.2 \u4f18\u70b9"},{"location":"standard/language_rules/#193","text":"\u6ca1\u6709\u3002","title":"1.9.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#194","text":"\u9f13\u52b1\u4f7f\u7528\u3002\u6ce8\u610f\u5728\u751f\u6210\u5668\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\u201c Yields: \u201d\u800c\u4e0d\u662f\u201c Returns: \u201d\u3002","title":"1.9.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#110-lambda","text":"\u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570\u3002","title":"1.10 Lambda \u51fd\u6570"},{"location":"standard/language_rules/#1101","text":"\u4e0e\u8bed\u53e5\u76f8\u53cd\uff0c Lambdas \u5728\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u5b9a\u4e49\u533f\u540d\u51fd\u6570\u3002\u5e38\u7528\u4e8e\u4e3a map() \u548c filter() \u4e4b\u7c7b\u7684\u9ad8\u9636\u51fd\u6570\u5b9a\u4e49\u56de\u8c03\u51fd\u6570\u6216\u8005\u64cd\u4f5c\u7b26\u3002","title":"1.10.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#1102","text":"\u65b9\u4fbf\u3002","title":"1.10.2 \u4f18\u70b9"},{"location":"standard/language_rules/#1103","text":"\u6bd4\u672c\u5730\u51fd\u6570\u66f4\u96be\u9605\u8bfb\u548c\u8c03\u8bd5\u3002\u6ca1\u6709\u51fd\u6570\u540d\u610f\u5473\u7740\u5806\u6808\u8ddf\u8e2a\u66f4\u96be\u7406\u89e3\u3002\u7531\u4e8e lambda \u51fd\u6570\u901a\u5e38\u53ea\u5305\u542b\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u56e0\u6b64\u5176\u8868\u8fbe\u80fd\u529b\u6709\u9650\u3002","title":"1.10.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#1104","text":"\u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570\u3002\u5982\u679c\u4ee3\u7801\u8d85\u8fc760-80\u4e2a\u5b57\u7b26\uff0c\u6700\u597d\u8fd8\u662f\u5b9a\u4e49\u6210\u5e38\u89c4\uff08\u5d4c\u5957\uff09\u51fd\u6570\u3002 \u5bf9\u4e8e\u5e38\u89c1\u7684\u64cd\u4f5c\u7b26\uff0c\u4f8b\u5982\u4e58\u6cd5\u64cd\u4f5c\u7b26\uff0c\u4f7f\u7528 operator \u6a21\u5757\u4e2d\u7684\u51fd\u6570\u4ee5\u4ee3\u66ff lambda \u51fd\u6570\u3002\u4f8b\u5982\uff0c\u63a8\u8350\u4f7f\u7528 operator.mul \u800c\u4e0d\u662f lambda x, y: x * y \u3002","title":"1.10.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#111_1","text":"\u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570\u3002","title":"1.11 \u6761\u4ef6\u8868\u8fbe\u5f0f"},{"location":"standard/language_rules/#1111","text":"\u6761\u4ef6\u8868\u8fbe\u5f0f\u662f\u5bf9\u4e8e if \u8bed\u53e5\u7684\u4e00\u79cd\u66f4\u4e3a\u7b80\u77ed\u7684\u53e5\u6cd5\u89c4\u5219\u3002\u4f8b\u5982 x = 1 if cond else 2 \u3002","title":"1.11.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#1112","text":"\u6bd4 if \u8bed\u53e5\u66f4\u52a0\u7b80\u77ed\u548c\u65b9\u4fbf\u3002","title":"1.11.2 \u4f18\u70b9"},{"location":"standard/language_rules/#1112_1","text":"\u6bd4 if \u8bed\u53e5\u96be\u4e8e\u9605\u8bfb\u3002\u5982\u679c\u8868\u8fbe\u5f0f\u5f88\u957f\uff0c\u96be\u4e8e\u5b9a\u4f4d\u6761\u4ef6\u3002","title":"1.11.2 \u7f3a\u70b9"},{"location":"standard/language_rules/#1114","text":"\u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570\u3002\u6bcf\u4e2a\u90e8\u5206\u5fc5\u987b\u653e\u5728\u4e00\u884c\u4e0a\uff1a true-expression, if-expression, else-expression \u3002\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u63a8\u8350\u4f7f\u7528\u5b8c\u6574\u7684 if \u8bed\u53e5\u3002 one_line = 'yes' if predicate ( value ) else 'no' slightly_split = ( 'yes' if predicate ( value ) else 'no, nein, nyet' ) the_longest_ternary_style_that_can_be_done = ( 'yes, true, affirmative, confirmed, correct' if predicate ( value ) else 'no, false, negative, nay' ) bad_line_breaking = ( 'yes' if predicate ( value ) else 'no' ) portion_too_long = ( 'yes' if some_long_module . some_long_predicate_function ( really_long_variable_name ) else 'no, false, negative, nay' )","title":"1.11.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#112_1","text":"\u9002\u7528\u4e8e\u5927\u90e8\u5206\u60c5\u51b5\u3002","title":"1.12 \u9ed8\u8ba4\u53c2\u6570\u503c"},{"location":"standard/language_rules/#1121","text":"\u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u53c2\u6570\u5217\u8868\u7684\u6700\u540e\u6307\u5b9a\u53d8\u91cf\u7684\u503c\uff0c\u4f8b\u5982\uff0c def(a, b=0): \u3002\u5982\u679c\u8c03\u7528 foo \u65f6\u53ea\u5e26\u4e00\u4e2a\u53c2\u6570\uff0c\u5219 b \u88ab\u8bbe\u4e3a 0 \uff0c\u5982\u679c\u5e26\u4e24\u4e2a\u53c2\u6570\uff0c\u5219 b \u7684\u503c\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002","title":"1.12.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#1122","text":"\u4f60\u7ecf\u5e38\u4f1a\u78b0\u5230\u4e00\u4e9b\u4f7f\u7528\u5927\u91cf\u9ed8\u8ba4\u503c\u7684\u51fd\u6570\uff0c\u4f46\u5076\u5c14\uff08\u6bd4\u8f83\u5c11\u89c1\uff09\u4f60\u60f3\u8981\u8986\u76d6\u8fd9\u4e9b\u9ed8\u8ba4\u503c\u3002\u9ed8\u8ba4\u53c2\u6570\u503c\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u5b8c\u6210\u8fd9\u4ef6\u4e8b\uff0c\u4f60\u4e0d\u9700\u8981\u4e3a\u8fd9\u4e9b\u7f55\u89c1\u7684\u4f8b\u5916\u5b9a\u4e49\u5927\u91cf\u51fd\u6570\u3002\u540c\u65f6\uff0c Python \u4e5f\u4e0d\u652f\u6301\u91cd\u8f7d\u65b9\u6cd5\u548c\u51fd\u6570\uff0c\u9ed8\u8ba4\u53c2\u6570\u662f\u4e00\u79cd\u201c\u6a21\u62df\u201d\u91cd\u8f7d\u884c\u4e3a\u7684\u7b80\u5355\u65b9\u5f0f\u3002","title":"1.12.2 \u4f18\u70b9"},{"location":"standard/language_rules/#1123","text":"\u9ed8\u8ba4\u53c2\u6570\u53ea\u5728\u6a21\u5757\u52a0\u8f7d\u65f6\u6c42\u503c\u4e00\u6b21\u3002\u5982\u679c\u53c2\u6570\u662f\u5217\u8868\u6216\u5b57\u5178\u4e4b\u7c7b\u7684\u53ef\u53d8\u7c7b\u578b\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u95ee\u9898\u3002\u5982\u679c\u51fd\u6570\u4fee\u6539\u4e86\u5bf9\u8c61\uff08\u4f8b\u5982\uff0c\u5411\u5217\u8868\u8ffd\u52a0\u9879\uff09\uff0c\u9ed8\u8ba4\u503c\u5c31\u88ab\u4fee\u6539\u4e86\u3002","title":"1.12.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#1124","text":"\u9f13\u52b1\u4f7f\u7528\uff0c\u4e0d\u8981\u5728\u51fd\u6570\u6216\u65b9\u6cd5\u5b9a\u4e49\u4e2d\u4f7f\u7528\u53ef\u53d8\u5bf9\u8c61\u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u63a8\u8350 def foo ( a , b = None ): if b is None : b = [] def foo ( a , b : Optional [ Sequence ] = None ): if b is None : b = [] def foo ( a , b : Sequence = ()): # Empty tuple OK since tuples are immutable ... \u4e0d\u63a8\u8350 def foo ( a , b = []): ... def foo ( a , b = time . time ()): # The time the module was loaded??? ... def foo ( a , b = FLAGS . my_thing ): # sys.argv has not yet been parsed... ... def foo ( a , b : Mapping = {}): # Could still get passed to unchecked code ...","title":"1.12.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#113-properties","text":"\u8bbf\u95ee\u548c\u8bbe\u7f6e\u6570\u636e\u6210\u5458\u65f6\uff0c\u4f60\u901a\u5e38\u4f1a\u4f7f\u7528\u7b80\u5355\uff0c\u8f7b\u91cf\u7ea7\u7684\u8bbf\u95ee\u548c\u8bbe\u7f6e\u51fd\u6570\u3002\u5efa\u8bae\u7528\u5c5e\u6027\uff08properties\uff09\u6765\u4ee3\u66ff\u5b83\u4eec\u3002","title":"1.13 \u5c5e\u6027\uff08properties\uff09"},{"location":"standard/language_rules/#1131","text":"\u4e00\u79cd\u7528\u4e8e\u5305\u88c5\u65b9\u6cd5\u8c03\u7528\u7684\u65b9\u5f0f\u3002\u5f53\u8fd0\u7b97\u91cf\u4e0d\u5927\uff0c\u5b83\u662f\u83b7\u53d6\u548c\u8bbe\u7f6e\u5c5e\u6027\u7684\u6807\u51c6\u65b9\u5f0f\u3002","title":"1.13.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#1132","text":"\u901a\u8fc7\u6d88\u9664\u7b80\u5355\u7684\u5c5e\u6027\u8bbf\u95ee\u65f6\u663e\u5f0f\u7684 get \u548c set \u65b9\u6cd5\u8c03\u7528\uff0c\u53ef\u8bfb\u6027\u63d0\u9ad8\u4e86\u3002\u5141\u8bb8\u5ef6\u8fdf\u52a0\u8f7d\u3002\u7528 Pythonic \u7684\u65b9\u5f0f\u6765\u7ef4\u62a4\u7c7b\u7684\u63a5\u53e3\u3002\u5c31\u6027\u80fd\u800c\u8a00\uff0c\u5f53\u76f4\u63a5\u8bbf\u95ee\u53d8\u91cf\u662f\u5408\u7406\u7684\uff0c\u6dfb\u52a0\u8bbf\u95ee\u65b9\u6cd5\u5c31\u663e\u5f97\u7410\u788e\u800c\u65e0\u610f\u4e49\u3002\u4f7f\u7528\u5c5e\u6027\u53ef\u4ee5\u7ed5\u8fc7\u8fd9\u4e2a\u95ee\u9898\u3002\u5c06\u6765\u4e5f\u53ef\u4ee5\u5728\u4e0d\u7834\u574f\u63a5\u53e3\u7684\u60c5\u51b5\u4e0b\u5c06\u8bbf\u95ee\u65b9\u6cd5\u52a0\u4e0a\u3002","title":"1.13.2 \u4f18\u70b9"},{"location":"standard/language_rules/#1133","text":"\u4f1a\u9690\u85cf\u7c7b\u4f3c\u64cd\u4f5c\u7b26\u91cd\u8f7d\u7684\u526f\u4f5c\u7528\u3002 \u5bf9\u4e8e\u5b50\u7c7b\u53ef\u80fd\u4f1a\u9020\u6210\u6df7\u6dc6\u3002","title":"1.13.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#1134","text":"\u4f60\u901a\u5e38\u4e60\u60ef\u4e8e\u4f7f\u7528\u8bbf\u95ee\u6216\u8bbe\u7f6e\u65b9\u6cd5\u6765\u8bbf\u95ee\u6216\u8bbe\u7f6e\u6570\u636e\uff0c\u5b83\u4eec\u7b80\u5355\u800c\u8f7b\u91cf\u3002\u4e0d\u8fc7\u6211\u4eec\u5efa\u8bae\u4f60\u5728\u65b0\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u5c5e\u6027\u3002\u53ea\u8bfb\u5c5e\u6027\u5e94\u8be5\u7528 @property \u88c5\u9970\u5668\u6765\u521b\u5efa\u3002 \u5982\u679c\u5b50\u7c7b\u6ca1\u6709\u8986\u76d6\u5c5e\u6027\uff0c\u90a3\u4e48\u5c5e\u6027\u7684\u7ee7\u627f\u53ef\u80fd\u770b\u4e0a\u53bb\u4e0d\u660e\u663e\u3002\u56e0\u6b64\u4f7f\u7528\u8005\u5fc5\u987b\u786e\u4fdd\u8bbf\u95ee\u65b9\u6cd5\u95f4\u63a5\u88ab\u8c03\u7528\uff0c\u4ee5\u4fdd\u8bc1\u5b50\u7c7b\u4e2d\u7684\u91cd\u8f7d\u65b9\u6cd5\u88ab\u5c5e\u6027\u8c03\u7528\uff08\u4f7f\u7528 \u6a21\u677f\u65b9\u6cd5\u8bbe\u8ba1\u6a21\u5f0f \uff09\u3002 \u63a8\u8350 import math class Square : \"\"\"A square with two properties: a writable area and a read-only perimeter. To use: >>> sq = Square(3) >>> sq.area 9 >>> sq.perimeter 12 >>> sq.area = 16 >>> sq.side 4 >>> sq.perimeter 16 \"\"\" def __init__ ( self , side ): self . side = side @property def area ( self ): \"\"\"Area of the square.\"\"\" return self . _get_area () @area . setter def area ( self , area ): return self . _set_area ( area ) def _get_area ( self ): \"\"\"Indirect accessor to calculate the 'area' property.\"\"\" return self . side ** 2 def _set_area ( self , area ): \"\"\"Indirect setter to set the 'area' property.\"\"\" self . side = math . sqrt ( area ) @property def perimeter ( self ): return self . side * 4","title":"1.13.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#114-true-false","text":"\u5c3d\u53ef\u80fd\u4f7f\u7528\u9690\u5f0f False \u3002","title":"1.14 True / False \u7684\u6c42\u503c"},{"location":"standard/language_rules/#1141","text":"Python \u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u4f1a\u5c06\u67d0\u4e9b\u503c\u6c42\u503c\u4e3a False \u3002\u6309\u7b80\u5355\u7684\u76f4\u89c9\u6765\u8bb2\uff0c\u5c31\u662f\u6240\u6709\u7684\u7a7a\u503c\u90fd\u88ab\u8ba4\u4e3a\u662f False \uff0c\u56e0\u6b64 0 , None \uff0c [] \uff0c {} \uff0c '' \u90fd\u88ab\u8ba4\u4e3a\u662f False \u3002","title":"1.14.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#1142","text":"\u4f7f\u7528 Python \u5e03\u5c14\u503c\u7684\u6761\u4ef6\u8bed\u53e5\u66f4\u6613\u8bfb\u4e5f\u66f4\u4e0d\u6613\u72af\u9519\u3002\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4e5f\u66f4\u5feb\u3002","title":"1.14.2 \u4f18\u70b9"},{"location":"standard/language_rules/#1143","text":"\u5bf9\u4e8e C / C ++ \u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u53ef\u80fd\u770b\u8d77\u6765\u6709\u70b9\u602a\u3002","title":"1.14.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#1144","text":"\u5c3d\u53ef\u80fd\u4f7f\u7528\u9690\u5f0f\u7684 false \uff0c\u4f8b\u5982\uff1a\u4f7f\u7528 if foo: \u800c\u4e0d\u662f if foo !=[]: \u3002\u4e0d\u8fc7\u8fd8\u662f\u6709\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\u9700\u8981\u4f60\u94ed\u8bb0\u5728\u5fc3\uff1a \u603b\u662f\u4f7f\u7528 if foo is None: \u6216 if foo is not None: \u6765\u68c0\u67e5 None \u503c\u3002\u4f8b\u5982\uff0c\u5f53\u4f60\u8981\u6d4b\u8bd5\u4e00\u4e2a\u9ed8\u8ba4\u503c\u662f None \u7684\u53d8\u91cf\u6216\u53c2\u6570\u662f\u5426\u88ab\u8bbe\u4e3a\u5176\u5b83\u503c\u3002\u8fd9\u4e2a\u503c\u5728\u5e03\u5c14\u8bed\u4e49\u4e0b\u53ef\u80fd\u662f false ! \u6c38\u8fdc\u4e0d\u8981\u7528 == \u5c06\u4e00\u4e2a\u5e03\u5c14\u91cf\u4e0e False \u76f8\u6bd4\u8f83\u3002\u4f7f\u7528 if not x: \u4ee3\u66ff\u3002\u5982\u679c\u4f60\u9700\u8981\u533a\u5206 False \u548c None \uff0c\u4f60\u5e94\u8be5\u7528\u50cf if not x and x is not None: \u8fd9\u6837\u7684\u8bed\u53e5\u3002 \u5bf9\u4e8e\u5e8f\u5217\uff08\u5b57\u7b26\u4e32\u3001\u5217\u8868\u3001\u5143\u7ec4\uff09\uff0c \u8981\u6ce8\u610f\u7a7a\u5e8f\u5217\u662f False \u3002\u56e0\u6b64\uff1a if seq: \u6216\u8005 if not seq: \u6bd4 if len(seq): \u6216 if not len(seq) \u8981\u66f4\u597d\u3002 \u5904\u7406\u6574\u6570\u65f6\uff0c\u4f7f\u7528\u9690\u5f0f False \u53ef\u80fd\u4f1a\u5f97\u4e0d\u507f\u5931\uff08\u5373\u4e0d\u5c0f\u5fc3\u5c06 None \u5f53\u505a 0 \u6765\u5904\u7406\uff09\u3002\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5df2\u77e5\u662f\u6574\u578b\uff08\u4e14\u4e0d\u662f len() \u7684\u8fd4\u56de\u7ed3\u679c\uff09\u7684\u503c\u4e0e 0 \u6bd4\u8f83\u3002 \u63a8\u8350 if not users : print ( 'no users' ) if foo == 0 : self . handle_zero () if i % 10 == 0 : self . handle_multiple_of_ten () def f ( x = None ): if x is None : x = [] \u4e0d\u63a8\u8350 if len ( users ) == 0 : print ( 'no users' ) if foo is not None and not foo : self . handle_zero () if not i % 10 : self . handle_multiple_of_ten () def f ( x = None ): x = x or [] \u6ce8\u610f\uff1a '0' \uff08\u5373\uff1a 0 \u4f5c\u4e3a\u5b57\u7b26\u4e32\uff09\u7684\u8ba1\u7b97\u7ed3\u679c\u662f True \u3002","title":"1.14.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#116-lexical-scoping","text":"\u63a8\u8350\u4f7f\u7528","title":"1.16 \u8bcd\u6cd5\u4f5c\u7528\u57df\uff08Lexical Scoping\uff09"},{"location":"standard/language_rules/#1161","text":"\u5d4c\u5957\u7684 Python \u51fd\u6570\u53ef\u4ee5\u5f15\u7528\u5916\u5c42\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u591f\u5bf9\u5b83\u4eec\u8d4b\u503c\u3002\u53d8\u91cf\u7ed1\u5b9a\u7684\u89e3\u6790\u662f\u4f7f\u7528\u8bcd\u6cd5\u4f5c\u7528\u57df\uff0c\u4e5f\u5c31\u662f\u57fa\u4e8e\u9759\u6001\u7684\u7a0b\u5e8f\u6587\u672c\u3002\u5bf9\u4e00\u4e2a\u5757\u4e2d\u7684\u67d0\u4e2a\u540d\u79f0\u7684\u4efb\u4f55\u8d4b\u503c\u90fd\u4f1a\u5bfc\u81f4 Python \u5c06\u5bf9\u8be5\u540d\u79f0\u7684\u5168\u90e8\u5f15\u7528\u5f53\u505a\u5c40\u90e8\u53d8\u91cf\uff0c\u751a\u81f3\u662f\u8d4b\u503c\u524d\u7684\u5904\u7406\u3002\u5982\u679c\u78b0\u5230 global \u58f0\u660e\uff0c\u8be5\u540d\u79f0\u5c31\u4f1a\u88ab\u89c6\u4f5c\u5168\u5c40\u53d8\u91cf\u3002 \u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\u7684\u4f8b\u5b50\uff1a def get_adder ( summand1 ): \"\"\"Returns a function that adds numbers to a given number.\"\"\" def adder ( summand2 ): return summand1 + summand2 return adder","title":"1.16.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#1162","text":"\u901a\u5e38\u53ef\u4ee5\u5e26\u6765\u66f4\u52a0\u6e05\u6670\uff0c\u4f18\u96c5\u7684\u4ee3\u7801\u3002\u5c24\u5176\u4f1a\u8ba9\u6709\u7ecf\u9a8c\u7684 Lisp \u548c Scheme \uff08\u8fd8\u6709 Haskell\uff0c ML \u7b49\uff09\u7a0b\u5e8f\u5458\u611f\u5230\u6b23\u6170\u3002","title":"1.16.2 \u4f18\u70b9"},{"location":"standard/language_rules/#1163","text":"\u53ef\u80fd\u5bfc\u81f4\u8ba9\u4eba\u8ff7\u60d1\u7684 bug\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f9d\u636e PEP-0227 \u7684\u4f8b\u5b50\uff1a i = 4 def foo ( x ): def bar (): print ( i , end = '' ) # ... # A bunch of code here # ... for i in x : # Ah, i *is* local to foo, so this is what bar sees print ( i , end = '' ) bar () \u56e0\u6b64 foo([1, 2, 3]) \u4f1a\u6253\u5370 1 2 3 3 \u800c\u4e0d\u662f 1 2 3 4","title":"1.16.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#1164","text":"\u9f13\u52b1\u4f7f\u7528\u3002","title":"1.16.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#117","text":"\u5982\u679c\u597d\u5904\u5f88\u663e\u7136\uff0c\u5c31\u660e\u667a\u800c\u8c28\u614e\u7684\u4f7f\u7528\u88c5\u9970\u5668\u3002\u907f\u514d\u4f7f\u7528 staticmethod \uff0c\u9650\u5236\u4f7f\u7528 classmethod \u3002","title":"1.17 \u51fd\u6570\u4e0e\u65b9\u6cd5\u88c5\u9970\u5668"},{"location":"standard/language_rules/#1171","text":"\u7528\u4e8e \u51fd\u6570\u53ca\u65b9\u6cd5\u7684\u88c5\u9970\u5668 \uff08\u4e5f\u5c31\u662f @ \u6807\u8bb0\uff09\u3002\u6700\u5e38\u89c1\u7684\u88c5\u9970\u5668\u662f @property \uff0c\u7528\u4e8e\u5c06\u666e\u901a\u65b9\u6cd5\u8f6c\u6362\u4e3a\u52a8\u6001\u8fd0\u7b97\u7684\u5c5e\u6027\u3002\u4e0d\u8fc7\uff0c\u88c5\u9970\u5668\u8bed\u6cd5\u4e5f\u5141\u8bb8\u7528\u6237\u81ea\u5b9a\u4e49\u88c5\u9970\u5668\u3002\u7279\u522b\u5730\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u51fd\u6570 my_decorator \uff0c\u4e0b\u9762\u7684\u4e24\u6bb5\u4ee3\u7801\u662f\u7b49\u6548\u7684\uff1a class C : @my_decorator def method ( self ): # method body ... \u76f8\u5f53\u4e8e\uff1a class C : def method ( self ): # method body ... method = my_decorator ( method )","title":"1.17.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#1172","text":"\u4f18\u96c5\u7684\u5728\u51fd\u6570\u4e0a\u6307\u5b9a\u4e00\u4e9b\u8f6c\u6362\u3002\u8be5\u8f6c\u6362\u53ef\u80fd\u51cf\u5c11\u4e00\u4e9b\u91cd\u590d\u4ee3\u7801\uff0c\u4fdd\u6301\u5df2\u6709\u51fd\u6570\u4e0d\u53d8\uff08enforce invariants)\uff09\u7b49\u3002","title":"1.17.2 \u4f18\u70b9"},{"location":"standard/language_rules/#1173","text":"\u88c5\u9970\u5668\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u53c2\u6570\u6216\u8fd4\u56de\u503c\u4e0a\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u8ba9\u4eba\u60ca\u5f02\u7684\u9690\u85cf\u884c\u4e3a\u3002\u800c\u4e14\uff0c\u9970\u5668\u5728\u5bfc\u5165\u65f6\u6267\u884c\u3002\u4ece\u88c5\u9970\u5668\u4ee3\u7801\u7684\u5931\u8d25\u4e2d\u6062\u590d\u66f4\u52a0\u4e0d\u53ef\u80fd\u3002","title":"1.17.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#1174","text":"\u5982\u679c\u597d\u5904\u5f88\u663e\u7136\uff0c\u5c31\u660e\u667a\u800c\u8c28\u614e\u7684\u4f7f\u7528\u88c5\u9970\u5668\u3002 \u88c5\u9970\u5668\u5e94\u8be5\u9075\u5b88\u548c\u51fd\u6570\u4e00\u6837\u7684\u5bfc\u5165\u548c\u547d\u540d\u89c4\u5219\u3002 \u88c5\u9970\u5668\u7684 Python \u6587\u6863\u5e94\u8be5\u6e05\u6670\u7684\u8bf4\u660e\u8be5\u51fd\u6570\u662f\u4e00\u4e2a\u88c5\u9970\u5668\u3002 \u8bf7\u4e3a\u88c5\u9970\u5668\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u3002 \u907f\u514d\u88c5\u9970\u5668\u81ea\u8eab\u5bf9\u5916\u754c\u7684\u4f9d\u8d56\uff08\u5373\u4e0d\u8981\u4f9d\u8d56\u4e8e\u6587\u4ef6\uff0c socket \uff0c\u6570\u636e\u5e93\u8fde\u63a5\u7b49\uff09\uff0c\u56e0\u4e3a\u88c5\u9970\u5668\u8fd0\u884c\u65f6\u8fd9\u4e9b\u8d44\u6e90\u53ef\u80fd\u4e0d\u53ef\u7528\uff08\u7531 pydoc \u6216\u5176\u5b83\u5de5\u5177\u5bfc\u5165\uff09\u3002\u5e94\u8be5\u4fdd\u8bc1\u4e00\u4e2a\u7528\u6709\u6548\u53c2\u6570\u8c03\u7528\u7684\u88c5\u9970\u5668\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u662f\u6210\u529f\u7684\u3002 \u88c5\u9970\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\u7684\u201c\u9876\u7ea7\u4ee3\u7801\u201d\u3002\u53c2\u8003\u540e\u9762\u5173\u4e8e Main \u7684\u8bdd\u9898\u3002 \u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528 staticmethod \uff0c\u9664\u975e\u4e3a\u4e86\u4e0e\u73b0\u6709\u5e93\u4e2d\u5b9a\u4e49\u7684 API \u96c6\u6210\u800c\u88ab\u8feb\u4f7f\u7528\u3002\u53ef\u4ee5\u5199\u4e00\u4e2a\u6a21\u5757\u7ea7\u51fd\u6570\u4ee3\u66ff\u3002 \u53ea\u6709\u5728\u7f16\u5199\u547d\u540d\u6784\u9020\u51fd\u6570\u6216\u4fee\u6539\u5fc5\u8981\u7684\u5168\u5c40\u72b6\u6001\uff08\u5982\u8fdb\u7a0b\u7ea7\u7f13\u5b58\uff09\u7684\u7279\u5b9a\u7c7b\u64cd\u4f5c\u65f6\u624d\u4f7f\u7528 classmethod \u3002","title":"1.17.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#118","text":"\u4e0d\u8981\u4f9d\u8d56\u5185\u5efa\u7c7b\u578b\u7684\u539f\u5b50\u6027\u3002 \u867d\u7136 Python \u7684\u5185\u5efa\u7c7b\u578b\u4f8b\u5982\u5b57\u5178\u770b\u4e0a\u53bb\u62e5\u6709\u539f\u5b50\u64cd\u4f5c\uff0c\u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u5f62\u4e0b\u5b83\u4eec\u4ecd\u7136\u4e0d\u662f\u539f\u5b50\u7684\uff08\u5373\uff0c\u5982\u679c __hash__ \u6216 __eq__ \u88ab\u5b9e\u73b0\u4e3a Python \u65b9\u6cd5\uff09\u4e14\u5b83\u4eec\u7684\u539f\u5b50\u6027\u662f\u9760\u4e0d\u4f4f\u7684\u3002\u4f60\u4e5f\u4e0d\u80fd\u6307\u671b\u539f\u5b50\u53d8\u91cf\u8d4b\u503c\uff08\u56e0\u4e3a\u8fd9\u4e2a\u53cd\u8fc7\u6765\u4f9d\u8d56\u5b57\u5178\uff09\u3002 \u4f18\u5148\u4f7f\u7528 Queue \u6a21\u5757\u7684 Queue \u6570\u636e\u7c7b\u578b\u4f5c\u4e3a\u7ebf\u7a0b\u95f4\u7684\u6570\u636e\u901a\u4fe1\u65b9\u5f0f\u3002\u53e6\u5916\uff0c\u4f7f\u7528 threading \u6a21\u5757\u53ca\u5176\u9501\u539f\u8bed\uff08 locking primitives \uff09\u3002\u4e86\u89e3\u6761\u4ef6\u53d8\u91cf\u7684\u5408\u9002\u4f7f\u7528\u65b9\u5f0f\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528 threading.Condition \u6765\u53d6\u4ee3\u4f4e\u7ea7\u522b\u7684\u9501\u4e86\u3002","title":"1.18 \u7ebf\u7a0b"},{"location":"standard/language_rules/#119","text":"\u907f\u514d\u4f7f\u7528\u8fd9\u4e9b\u7279\u6027\u3002","title":"1.19 \u5a01\u529b\u8fc7\u5927\u7684\u7279\u6027"},{"location":"standard/language_rules/#1191","text":"Python \u662f\u4e00\u79cd\u5f02\u5e38\u7075\u6d3b\u7684\u8bed\u8a00\uff0c\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u5f88\u591a\u82b1\u54e8\u7684\u7279\u6027\uff0c\u8bf8\u5982\u5143\u7c7b\uff08 metaclasses \uff09\u3001\u5b57\u8282\u7801\u8bbf\u95ee\u3001\u4efb\u610f\u7f16\u8bd1\uff08 on-the-fly compilation \uff09\u3001\u52a8\u6001\u7ee7\u627f\u3001\u5bf9\u8c61\u7236\u7c7b\u91cd\u5b9a\u4e49\uff08 object reparenting \uff09\u3001\u5bfc\u5165\u4fee\u6539\uff08 import hacks \uff09\u3001\u53cd\u5c04\uff08\u4f8b\u5982 getattr() \u7684\u4e00\u4e9b\u4f7f\u7528\uff09\u3001\u7cfb\u7edf\u5185\u4fee\u6539\uff08 modification of system internals \uff09\u7b49\u7b49\u3002","title":"1.19.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#1192","text":"\u5f3a\u5927\u7684\u8bed\u8a00\u7279\u6027\uff0c\u80fd\u8ba9\u4f60\u7684\u4ee3\u7801\u66f4\u7d27\u51d1\u3002","title":"1.19.2 \u4f18\u70b9"},{"location":"standard/language_rules/#1193","text":"\u4f7f\u7528\u8fd9\u4e9b\u5f88\u201c\u9177\u201d\u7684\u7279\u6027\u5341\u5206\u8bf1\u4eba\uff0c\u4f46\u4e0d\u662f\u7edd\u5bf9\u5fc5\u8981\u3002\u4f7f\u7528\u5947\u6280\u6deb\u5de7\u7684\u4ee3\u7801\u5c06\u66f4\u52a0\u96be\u4ee5\u9605\u8bfb\u548c\u8c03\u8bd5\u3002\u5f00\u59cb\u53ef\u80fd\u8fd8\u597d\uff08\u5bf9\u539f\u4f5c\u8005\u800c\u8a00\uff09, \u4f46\u5f53\u4f60\u56de\u987e\u4ee3\u7801, \u5b83\u4eec\u53ef\u80fd\u4f1a\u6bd4\u90a3\u4e9b\u7a0d\u957f\u4e00\u70b9\u4f46\u662f\u5f88\u76f4\u63a5\u7684\u4ee3\u7801\u66f4\u52a0\u96be\u4ee5\u7406\u89e3.","title":"1.19.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#1194","text":"\u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u907f\u514d\u8fd9\u4e9b\u7279\u6027\u3002 \u5185\u90e8\u9700\u8981\u4f7f\u7528\u8fd9\u4e9b\u7279\u6027\u7684\u6807\u51c6\u5e93\u6a21\u5757\u548c\u7c7b\u53ef\u4ee5\u4f7f\u7528\uff08\u4f8b\u5982\uff0c abc.ABCMeta \u3001 dataclasses \u548c enum \uff09\u3002","title":"1.19.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#120-python-python-3-from-__future__-imports","text":"\u5f53\u524d\u63a8\u8350 Python 3 \u3002\u867d\u7136\u4e0d\u662f\u6bcf\u4e2a\u9879\u76ee\u90fd\u5fc5\u987b\u4f7f\u7528\uff0c\u4f46\u6240\u6709\u7f16\u5199\u7684\u4ee3\u7801\u90fd\u5e94\u8be5\u517c\u5bb9 Python 3 \uff08\u5e76\u5c3d\u53ef\u80fd\u7684\u901a\u8fc7 Python 3 \u7684\u6d4b\u8bd5\uff09\u3002","title":"1.20 \u65b0\u7248 Python \uff1a Python 3 \u548c from __future__ imports"},{"location":"standard/language_rules/#1201","text":"Python 3 \u662f Python \u8bed\u8a00\u7684\u91cd\u5927\u53d8\u5316\u3002\u867d\u7136\u73b0\u6709\u7684\u4ee3\u7801\u901a\u5e38\u662f\u8003\u8651\u7528 Python 2.7 \u7f16\u5199\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u505a\u4e00\u4e9b\u7b80\u5355\u7684\u4e8b\u60c5\u6765\u4f7f\u4ee3\u7801\u66f4\u660e\u786e\u5730\u8868\u8fbe\u5176\u610f\u56fe\uff0c\u4ece\u800c\u65e0\u9700\u4fee\u6539\u5c31\u80fd\u66f4\u597d\u5730\u5728 Python 3 \u4e0b\u4f7f\u7528\u3002","title":"1.20.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#1202","text":"\u5f53\u6240\u6709\u9879\u76ee\u4f9d\u8d56\u90fd\u517c\u5bb9 Python 3 \u7684\u65f6\u5019\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u7f16\u5199 Python 3 \u7684\u4ee3\u7801\u4e86\uff0c\u8fd9\u6837\u4e5f\u66f4\u5bb9\u6613\u5728 Python 3 \u4e2d\u8fd0\u884c\u3002","title":"1.20.2 \u4f18\u70b9"},{"location":"standard/language_rules/#1203","text":"\u89c9\u5f97\u8fd9\u4e9b\u989d\u5916\u7684\u6837\u677f\u6587\u4ef6\u5f88\u96be\u770b\u3002 \u5bfc\u5165\u5b9e\u9645\u5e76\u4e0d\u9700\u8981\u7684\u7279\u6027\u6a21\u5757\u770b\u8d77\u6765\u602a\u602a\u7684\u3002","title":"1.20.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#1204","text":"from __future__ imports \u63a8\u8350\u4f7f\u7528 from __future__ import \u8bed\u53e5\u3002\u6240\u6709\u7684\u65b0\u4ee3\u7801\u90fd\u5e94\u8be5\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff0c\u73b0\u6709\u7684\u4ee3\u7801\u4e5f\u5e94\u8be5\u5728\u6709\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u517c\u5bb9\u66f4\u65b0\uff1a from __future__ import absolute_import from __future__ import division from __future__ import print_function \u83b7\u53d6\u6709\u5173\u8fd9\u4e9b\u5bfc\u5165\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 absolute imports \u3001 division behavior \u548c the print function \u3002 \u5373\u4f7f\u5f53\u524d\u5728\u6a21\u5757\u4e2d\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e9b\u5bfc\u5165\uff0c\u4e5f\u8bf7\u4e0d\u8981\u5ffd\u7565\u6216\u5220\u9664\u5b83\u4eec\uff0c\u9664\u975e\u4ee3\u7801\u4ec5\u9002\u7528\u4e8e Python 3 \u7248\u672c\u3002\u6700\u597d\u59cb\u7ec8\u5728\u6240\u6709\u6587\u4ef6\u4e2d\u5305\u542b future \u7684\u5bfc\u5165\uff0c\u4ee5\u4fbf\u5728\u6709\u4eba\u5f00\u59cb\u4f7f\u7528\u8fd9\u4e9b\u7279\u6027\u65f6\uff0c\u4e0d\u4f1a\u5728\u4ee5\u540e\u7684\u7f16\u8f91\u4e2d\u5fd8\u8bb0\u5b83\u4eec\u3002 \u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684 from __future__ \u8bed\u53e5\uff0c\u53ef\u4ee5\u5728\u9700\u8981\u7684\u65f6\u5019\u4f7f\u7528\u3002\u6211\u4eec\u5728\u63a8\u8350\u4e2d\u5e76\u6ca1\u6709\u5305\u62ec unicode_literals \uff0c\u90a3\u662f\u56e0\u4e3a\u53ea\u6709\u5728 Python 2.7 \u4e2d\u624d\u4f1a\u5f15\u5165\u8bb8\u591a\u9690\u5f0f\u7684\u9ed8\u8ba4\u7f16\u7801\u8f6c\u6362\u3002\u5927\u591a\u6570\u4ee3\u7801\u6700\u597d\u6839\u636e\u9700\u8981\u660e\u786e\u4f7f\u7528 b'' \u548c u'' \u5b57\u7b26\u4ee5\u53ca unicode \u5b57\u7b26\u4e32\u3002 six \u3001 future \u548c past \u5f53\u9879\u76ee\u540c\u65f6\u9700\u8981\u652f\u6301 Python 2 \u548c 3 \u7248\u672c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 six \u3001 future \u548c past \u3002\u8fd9\u4e9b\u5e93\u5c31\u662f\u4e3a\u4e86\u8ba9\u4ee3\u7801\u5b9e\u73b0\u66f4\u6e05\u6670\u7b80\u5355\u800c\u5b58\u5728\u7684\u3002","title":"1.20.4 \u7ed3\u8bba"},{"location":"standard/language_rules/#121_1","text":"Python 3 \u7684\u4ee3\u7801\u53ef\u4ee5\u6839\u636e PEP-484 \u4f7f\u7528\u7c7b\u578b\u6807\u6ce8\uff0c\u5e76\u4f7f\u7528\u7c7b\u4f3c pytype \u7684\u7c7b\u578b\u68c0\u67e5\u5de5\u5177\u5728\u6784\u5efa\u65f6\u5bf9\u4ee3\u7801\u8fdb\u884c\u68c0\u67e5\u3002 \u7c7b\u578b\u6807\u6ce8\u53ef\u4ee5\u5728\u539f\u6587\u4ef6\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u5728 stub pyi \u6587\u4ef6\u4e2d\u3002\u5c3d\u53ef\u80fd\u5728\u6e90\u4ee3\u7801\u4e2d\u8fdb\u884c\u6807\u6ce8\uff0c\u5bf9\u4e8e\u7b2c\u4e09\u65b9\u5e93\u6216\u6269\u5c55\u6a21\u5757\u53ef\u4ee5\u4f7f\u7528 pyi \u6587\u4ef6\u3002","title":"1.21 \u4ee3\u7801\u7c7b\u578b\u6807\u6ce8"},{"location":"standard/language_rules/#1211","text":"\u7c7b\u578b\u6807\u6ce8\uff08\u6216\u7c7b\u578b\u63d0\u793a\uff09\u53ef\u4ee5\u7528\u4e8e\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c def func ( a : int ) -> List [ int ]: \u8fd8\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c PEP-526 \u7684\u8bed\u6cd5\u58f0\u660e\u53d8\u91cf\u7684\u7c7b\u578b\uff1a a : SomeType = some_func () \u6216\u8005\u5728\u5fc5\u987b\u652f\u6301\u65e7\u7248 Python \u7248\u672c\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u7c7b\u578b\u6ce8\u91ca\u3002 a = some_func () # type: SomeType","title":"1.21.1 \u5b9a\u4e49"},{"location":"standard/language_rules/#1212","text":"\u7c7b\u578b\u6807\u6ce8\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002\u7c7b\u578b\u68c0\u67e5\u5668\u53ef\u4ee5\u628a\u8bb8\u591a\u8fd0\u884c\u65f6\u9519\u8bef\u8f6c\u6362\u4e3a\u6784\u5efa\u65f6\u9519\u8bef\uff0c\u5e76\u51cf\u5c11\u5a01\u529b\u8fc7\u5927\u7279\u6027\u5730\u4f7f\u7528\u3002","title":"1.21.2 \u4f18\u70b9"},{"location":"standard/language_rules/#1213","text":"\u5fc5\u987b\u4fdd\u6301\u7c7b\u578b\u6807\u6ce8\u66f4\u65b0\u3002 \u60a8\u53ef\u80fd\u4f1a\u770b\u5230\u60a8\u8ba4\u4e3a\u662f\u6b63\u786e\u4ee3\u7801\u7684\u9519\u8bef\u4fe1\u606f\u3002 \u4f7f\u7528\u7c7b\u578b\u68c0\u67e5\u5668\u53ef\u80fd\u4f1a\u51cf\u5c11\u5a01\u529b\u8fc7\u5927\u7279\u6027\u5730\u4f7f\u7528\u3002","title":"1.21.3 \u7f3a\u70b9"},{"location":"standard/language_rules/#1214","text":"\u5f3a\u70c8\u5efa\u8bae\u60a8\u5728\u66f4\u6539\u4ee3\u7801\u65f6\u542f\u7528 Python \u7c7b\u578b\u5206\u6790\u3002\u5f53\u6dfb\u52a0\u6216\u4fee\u6539\u516c\u5171 API \u65f6\uff0c\u8bf7\u5305\u542b\u7c7b\u578b\u6807\u6ce8\uff0c\u5e76\u5728\u6784\u5efa\u7cfb\u7edf\u4e2d\u542f\u7528 pytype \u8fdb\u884c\u68c0\u67e5\u3002\u7531\u4e8e\u9759\u6001\u5206\u6790\u5bf9 Python \u6765\u8bf4\u76f8\u5bf9\u8f83\u65b0\uff0c\u6211\u4eec\u627f\u8ba4\u4f1a\u6709\u4e00\u4e9b\u526f\u4f5c\u7528\uff08\u6bd4\u5982\u9519\u8bef\u7684\u7c7b\u578b\u63a8\u65ad\uff09\u53ef\u80fd\u4f1a\u963b\u6b62\u4e00\u4e9b\u9879\u76ee\u91c7\u7528\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9f13\u52b1\u4f5c\u8005\u6dfb\u52a0\u4e00\u4e2a\u5e26\u6709 TODO \u7684\u6ce8\u91ca\uff0c\u6216\u8005\u5728 BUILD \u6587\u4ef6\u6216\u4ee3\u7801\u672c\u8eab\u4e2d\u901a\u8fc7 bug \u94fe\u63a5\u63cf\u8ff0\u5f53\u524d\u4e0d\u91c7\u7528\u7c7b\u578b\u6807\u6ce8\u7684\u95ee\u9898\u3002","title":"1.21.4 \u7ed3\u8bba"},{"location":"standard/style_rules/","text":"Python \u98ce\u683c\u89c4\u8303 \u672c\u6587\u6863\u4e3a Google Python Style Guide \u7b2c\u4e8c\u7ae0 Python Style Rules \u7684\u8bd1\u6587\u3002 \u6700\u540e\u66f4\u65b0\u65f6\u95f4\uff1a 2021-05-12 \u5982\u679c\u6709\u7ffb\u8bd1\u9519\u8bef\u6216\u8868\u8ff0\u4e0d\u51c6\u786e\u7684\u95ee\u9898\uff0c\u6b22\u8fce\u63d0\u4ea4 PR\uff0c\u611f\u8c22\u60a8\u7684\u53c2\u4e0e\u3002 3.1 \u5206\u53f7 \u4e0d\u8981\u5728\u884c\u5c3e\u52a0\u5206\u53f7\uff0c\u4e5f\u4e0d\u8981\u7528\u5206\u53f7\u5c06\u4e24\u6761\u547d\u4ee4\u653e\u5728\u540c\u4e00\u884c\u3002 3.2 \u884c\u957f\u5ea6 \u6bcf\u884c\u4e0d\u8d85\u8fc780\u4e2a\u5b57\u7b26\u3002 \u4f8b\u5916\uff1a \u957f\u7684\u5bfc\u5165\u6a21\u5757\u8bed\u53e5 \u6ce8\u91ca\u91cc\u7684 URL \u3001\u8def\u5f84\u540d\u548c\u957f\u6807\u8bc6 \u4e0d\u5305\u542b\u7a7a\u683c\uff0c\u4e0d\u65b9\u4fbf\u8de8\u884c\u62c6\u5206\u7684\u957f\u5b57\u7b26\u4e32\u6a21\u5757\u7ea7\u5e38\u91cf\uff0c\u5982 URL \u6216\u8def\u5f84\u540d Pylint \u7981\u7528\u6ce8\u91ca\u3002\uff08\u4f8b\u5982\uff1a # pylint: disable=invalid-name \uff09 \u9664\u975e with \u8bed\u53e5\u9700\u8981\u4e09\u4e2a\u6216\u66f4\u591a\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5426\u5219\u4e0d\u8981\u4f7f\u7528\u53cd\u659c\u6760\u8fde\u63a5\u884c\u3002 Python \u4f1a\u5c06 \u5706\u62ec\u53f7\u3001\u65b9\u62ec\u53f7\u548c\u82b1\u62ec\u53f7\u4e2d\u7684\u884c\u9690\u5f0f\u7684\u8fde\u63a5\u8d77\u6765 \uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7279\u70b9 \u3002\u5982\u679c\u9700\u8981\uff0c\u4f60\u53ef\u4ee5\u5728\u8868\u8fbe\u5f0f\u5916\u56f4\u589e\u52a0\u4e00\u5bf9\u989d\u5916\u7684\u5706\u62ec\u53f7\u3002 \u63a8\u8350 foo_bar ( self , width , height , color = 'black' , design = None , x = 'foo' , emphasis = None , highlight = 0 ) if ( width == 0 and height == 0 and color == 'red' and emphasis == 'strong' ): \u5982\u679c\u4e00\u4e2a\u6587\u672c\u5b57\u7b26\u4e32\u5728\u4e00\u884c\u653e\u4e0d\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u5706\u62ec\u53f7\u6765\u5b9e\u73b0\u9690\u5f0f\u884c\u8fde\u63a5\u3002 x = ( 'This will build a very long long ' 'long long long long long long string' ) \u5728\u6ce8\u91ca\u4e2d\uff0c\u5982\u679c\u5fc5\u8981\uff0c\u5c06\u957f\u7684 URL \u653e\u5728\u4e00\u884c\u4e0a\u3002 \u63a8\u8350 # See details at # http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html \u4e0d\u63a8\u8350 # See details at # http://www.example.com/us/developer/documentation/api/content/\\ # v2.0/csv_file_name_extension_full_specification.html \u5728\u5b9a\u4e49\u8868\u8fbe\u5f0f\u8de8\u8d8a\u4e09\u884c\u6216\u66f4\u591a\u884c\u7684 with \u8bed\u53e5\u65f6\uff0c\u5141\u8bb8\u4f7f\u7528\u53cd\u659c\u6760\u8fde\u63a5\u3002\u5bf9\u4e8e\u4e24\u884c\u8868\u8fbe\u5f0f\uff0c\u8bf7\u4f7f\u7528\u5d4c\u5957 with \u8bed\u53e5\uff1a \u63a8\u8350 with very_long_first_expression_function () as spam , \\ very_long_second_expression_function () as beans , \\ third_thing () as eggs : place_order ( eggs , beans , spam , beans ) \u4e0d\u63a8\u8350 with VeryLongFirstExpressionFunction () as spam , \\ VeryLongSecondExpressionFunction () as beans : PlaceOrder ( eggs , beans , spam , beans ) \u63a8\u8350 with very_long_first_expression_function () as spam : with very_long_second_expression_function () as beans : place_order ( beans , spam ) \u6ce8\u610f\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u5143\u7d20\u7f29\u8fdb\u3002\u4f60\u53ef\u4ee5\u5728\u672c\u6587\u7684 \u7f29\u8fdb \u90e8\u5206\u627e\u5230\u89e3\u91ca\u3002 \u5728\u6240\u6709\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e00\u884c\u8d85\u8fc780\u4e2a\u5b57\u7b26\uff0c\u5e76\u4e14 yapf \u81ea\u52a8\u683c\u5f0f\u5316\u7a0b\u5e8f\u65e0\u6cd5\u5e2e\u52a9\u4f7f\u8be5\u884c\u4f4e\u4e8e\u9650\u5236\uff0c\u5219\u5141\u8bb8\u8be5\u884c\u8d85\u8fc7\u6b64\u6700\u5927\u503c\u3002\u5efa\u8bae\u4f5c\u8005\u5728\u5408\u7406\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u4e0a\u8ff0\u6ce8\u91ca\u624b\u52a8\u62c6\u5206\u884c\u3002 3.3 \u62ec\u53f7 \u5b81\u7f3a\u6bcb\u6ee5\u7684\u4f7f\u7528\u62ec\u53f7\u3002 \u9664\u975e\u662f\u7528\u4e8e\u5b9e\u73b0\u884c\u8fde\u63a5\uff0c\u5426\u5219\u4e0d\u8981\u5728\u8fd4\u56de\u8bed\u53e5\u6216\u6761\u4ef6\u8bed\u53e5\u4e2d\u4f7f\u7528\u62ec\u53f7\uff0c\u4e0d\u8fc7\u5728\u5143\u7ec4\u4e24\u8fb9\u4f7f\u7528\u62ec\u53f7\u662f\u53ef\u4ee5\u7684\u3002 \u63a8\u8350 if foo : bar () while x : x = bar () if x and y : bar () if not x : bar () # For a 1 item tuple the ()s are more visually obvious than the comma. onesie = ( foo ,) return foo return spam , beans for x , y in dict . items (): ... \u4e0d\u63a8\u8350 if ( x ): bar () if not ( x ): bar () return ( foo ) return ( spam , beans ) for ( x , y ) in dict . items (): ... 3.4 \u7f29\u8fdb \u75284\u4e2a\u7a7a\u683c\u6765\u7f29\u8fdb\u4ee3\u7801\u3002 \u7edd\u5bf9\u4e0d\u8981\u7528 tab \uff0c\u4e5f\u4e0d\u8981 tab \u548c\u7a7a\u683c\u6df7\u7528\u3002\u5bf9\u4e8e\u884c\u8fde\u63a5\u7684\u60c5\u51b5\uff0c\u4f60\u5e94\u8be5\u8981\u4e48\u5782\u76f4\u5bf9\u9f50\u6362\u884c\u7684\u5143\u7d20\uff08\u89c1 \u884c\u957f \u90e8\u5206\u7684\u793a\u4f8b\uff09\uff0c\u6216\u8005\u4f7f\u75284\u7a7a\u683c\u7684\u60ac\u6302\u5f0f\u7f29\u8fdb\uff08\u8fd9\u65f6\u7b2c\u4e00\u884c\u4e0d\u5e94\u8be5\u6709\u53c2\u6570\uff09\u3002 \u63a8\u8350 # Aligned with opening delimiter foo = long_function_name ( var_one , var_two , var_three , var_four ) meal = ( spam , beans ) # Aligned with opening delimiter in a dictionary foo = { long_dictionary_key : value1 + value2 , ... } # 4-space hanging indent; nothing on first line foo = long_function_name ( var_one , var_two , var_three , var_four ) meal = ( spam , beans ) # 4-space hanging indent in a dictionary foo = { long_dictionary_key : long_dictionary_value , ... } \u4e0d\u63a8\u8350 # Stuff on first line forbidden foo = long_function_name ( var_one , var_two , var_three , var_four ) meal = ( spam , beans ) # 2-space hanging indent forbidden foo = long_function_name ( var_one , var_two , var_three , var_four ) # No hanging indent in a dictionary foo = { long_dictionary_key : long_dictionary_value , ... } 3.4.1 \u5728\u5e8f\u5217\u7684\u672b\u5c3e\u662f\u5426\u52a0\u9017\u53f7\uff1f \u53ea\u6709\u5728\u5e8f\u5217\u7ed3\u675f\u7b26 ] \u3001 ) \u6216 } \u4e0e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0d\u5728\u540c\u4e00\u884c\u65f6\u624d\u5efa\u8bae\u4f7f\u7528\u3002\u672b\u5c3e\u9017\u53f7\u7684\u5b58\u5728\u8fd8\u7528\u4f5c\u5bf9\u4ee3\u7801\u81ea\u52a8\u683c\u5f0f\u5316\u7a0b\u5e8f YAPF \u7684\u63d0\u793a\uff0c\u4ee5\u5f15\u5bfc\u5b83\u5728\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u51fa\u73b0\u65f6\uff0c\u81ea\u52a8\u5c06\u5bb9\u5668\u4e2d\u6bcf\u4e2a\u6761\u76ee\u683c\u5f0f\u5316\u4e3a\u4e00\u884c\u3002 \u63a8\u8350 golomb3 = [ 0 , 1 , 3 ] golomb4 = [ 0 , 1 , 4 , 6 , ] \u4e0d\u63a8\u8350 golomb4 = [ 0 , 1 , 4 , 6 ] 3.5 \u7a7a\u884c \u9876\u7ea7\u5b9a\u4e49\u4e4b\u95f4\u7a7a\u4e24\u884c, \u65b9\u6cd5\u5b9a\u4e49\u4e4b\u95f4\u7a7a\u4e00\u884c \u9876\u7ea7\u5b9a\u4e49\u4e4b\u95f4\u7a7a\u4e24\u884c\uff0c\u6bd4\u5982\u51fd\u6570\u6216\u8005\u7c7b\u5b9a\u4e49\u3002 \u65b9\u6cd5\u5b9a\u4e49\uff0c\u7c7b\u5b9a\u4e49\u4e0e\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u4e4b\u95f4\uff0c\u90fd\u5e94\u8be5\u7a7a\u4e00\u884c\u3002 \u5728 def \u51fd\u6570\u5b9a\u4e49\u4e4b\u540e\u4e0d\u9700\u8981\u7a7a\u884c\u3002 \u51fd\u6570\u6216\u65b9\u6cd5\u4e2d\uff0c\u67d0\u4e9b\u5730\u65b9\u8981\u662f\u4f60\u89c9\u5f97\u5408\u9002\uff0c\u5c31\u7a7a\u4e00\u884c\u3002 3.6 \u7a7a\u683c \u6309\u7167\u6807\u51c6\u7684\u6392\u7248\u89c4\u8303\u6765\u4f7f\u7528\u6807\u70b9\u4e24\u8fb9\u7684\u7a7a\u683c\u3002 \u62ec\u53f7\u5185\u4e0d\u8981\u6709\u7a7a\u683c\u3002 \u63a8\u8350 spam ( ham [ 1 ], { eggs : 2 }, []) \u4e0d\u63a8\u8350 spam ( ham [ 1 ], { eggs : 2 }, [ ] ) \u4e0d\u8981\u5728\u9017\u53f7\uff0c\u5206\u53f7\uff0c\u5192\u53f7\u524d\u9762\u52a0\u7a7a\u683c\u3002\u4f46\u5e94\u8be5\u5728\u5b83\u4eec\u540e\u9762\u52a0\uff08\u9664\u4e86\u5728\u884c\u5c3e\uff09\u3002 \u63a8\u8350 if x == 4 : print ( x , y ) x , y = y , x \u4e0d\u63a8\u8350 if x == 4 : print ( x , y ) x , y = y , x \u53c2\u6570\u5217\u8868\u3001\u7d22\u5f15\u6216\u5207\u7247\u7684\u5de6\u62ec\u53f7\u524d\u4e0d\u5e94\u52a0\u7a7a\u683c\u3002 \u63a8\u8350 spam ( 1 ) \u4e0d\u63a8\u8350 spam ( 1 ) \u63a8\u8350 dict [ 'key' ] = list [ index ] \u4e0d\u63a8\u8350 dict [ 'key' ] = list [ index ] \u884c\u5c3e\u4e0d\u9700\u8981\u7a7a\u683c\u3002 \u5728\u4e8c\u5143\u64cd\u4f5c\u7b26\u4e24\u8fb9\u90fd\u52a0\u4e0a\u4e00\u4e2a\u7a7a\u683c\uff0c\u6bd4\u5982\u8d4b\u503c\uff08 = \uff09\u3001\u6bd4\u8f83\uff08 == \u3001 < \u3001 > \u3001 != \u3001 <> \u3001 <= \u3001 >= \u3001 in \u3001 not in \u3001 is \u3001 is not \uff09\uff0c\u5e03\u5c14\uff08 and \u3001 or \u3001 not \uff09\u3002 \u81f3\u4e8e\u7b97\u672f\u64cd\u4f5c\u7b26\uff08 + \u3001 - \u3001 * \u3001 / \u3001 // \u3001 % \u3001 ** \u3001 @ \uff09\u4e24\u8fb9\u7684\u7a7a\u683c\u8be5\u5982\u4f55\u4f7f\u7528\uff0c\u9700\u8981\u4f60\u81ea\u5df1\u597d\u597d\u5224\u65ad\u3002\u4e0d\u8fc7\u4e24\u4fa7\u52a1\u5fc5\u8981\u4fdd\u6301\u4e00\u81f4\u3002 \u63a8\u8350 x == 1 \u4e0d\u63a8\u8350 x < 1 \u5f53 = \u7528\u4e8e\u6307\u793a\u5173\u952e\u5b57\u53c2\u6570\u6216\u9ed8\u8ba4\u53c2\u6570\u503c\u65f6\uff0c\u4e0d\u8981\u5728\u5176\u4e24\u4fa7\u4f7f\u7528\u7a7a\u683c\u3002\u4f46\u6709\u4e00\u4e2a\u4f8b\u5916\uff1a \u5f53\u5b58\u5728\u7c7b\u578b\u6ce8\u91ca\u65f6 \uff0c\u5728\u9ed8\u8ba4\u53c2\u6570\u503c\u7684 = \u5468\u56f4\u4f7f\u7528\u7a7a\u683c\u3002 \u63a8\u8350 def complex ( real , imag = 0.0 ): return Magic ( r = real , i = imag ) def complex ( real , imag : float = 0.0 ): return Magic ( r = real , i = imag ) \u4e0d\u63a8\u8350 def complex ( real , imag = 0.0 ): return Magic ( r = real , i = imag ) def complex ( real , imag : float = 0.0 ): return Magic ( r = real , i = imag ) \u4e0d\u8981\u7528\u7a7a\u683c\u6765\u5782\u76f4\u5bf9\u9f50\u591a\u884c\u95f4\u7684\u6807\u8bb0\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u9020\u6210\u7ef4\u62a4\u7684\u8d1f\u62c5\uff08\u9002\u7528\u4e8e : \u3001 # \u3001 = \u7b49\uff09\uff1a \u63a8\u8350 foo = 1000 # comment long_name = 2 # comment that should not be aligned dictionary = { 'foo' : 1 , 'long_name' : 2 , } \u4e0d\u63a8\u8350 foo = 1000 # comment long_name = 2 # comment that should not be aligned dictionary = { 'foo' : 1 , 'long_name' : 2 , } 3.7 Shebang \u5927\u90e8\u5206 .py \u6587\u4ef6\u4e0d\u5fc5\u4ee5 #! \u4f5c\u4e3a\u6587\u4ef6\u7684\u5f00\u59cb\u3002\u6839\u636e PEP-394 \uff0c\u7a0b\u5e8f\u7684 main \u6587\u4ef6\u5e94\u8be5\u4ee5 #!/usr/bin/env python3 \uff08\u7528\u4e8e\u652f\u6301\u865a\u62df\u73af\u5883\uff09\u6216\u8005 #!/usr/bin/python3 \u5f00\u59cb\u3002 \u5185\u6838\u4f7f\u7528\u8fd9\u4e00\u884c\u6765\u67e5\u627e Python \u89e3\u91ca\u5668\uff0c\u4f46\u662f Python \u5728\u5bfc\u5165\u6a21\u5757\u65f6\u4f1a\u5ffd\u7565\u8fd9\u4e00\u884c\u3002\u56e0\u6b64\u53ea\u6709\u5728\u6253\u7b97\u76f4\u63a5\u6267\u884c\u7684\u6587\u4ef6\u4e0a\u6dfb\u52a0\u624d\u6709\u5fc5\u8981\u3002 3.8 \u6ce8\u91ca\u548c\u6587\u6863\u5b57\u7b26\u4e32 \u786e\u4fdd\u5bf9\u6a21\u5757, \u51fd\u6570, \u65b9\u6cd5\u548c\u884c\u5185\u6ce8\u91ca\u4f7f\u7528\u6b63\u786e\u7684\u98ce\u683c\u3002 3.8.1 \u6587\u6863\u5b57\u7b26\u4e32 Python \u6709\u4e00\u79cd\u72ec\u4e00\u65e0\u4e8c\u7684\u7684\u6ce8\u91ca\u65b9\u5f0f\uff1a \u4f7f\u7528\u6587\u6863\u5b57\u7b26\u4e32\u3002\u6587\u6863\u5b57\u7b26\u4e32\u662f\u5305\u3001\u6a21\u5757\u3001\u7c7b\u6216\u51fd\u6570\u91cc\u7684\u7b2c\u4e00\u4e2a\u8bed\u53e5\u3002\u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u7684 __doc__ \u6210\u5458\u88ab\u81ea\u52a8\u63d0\u53d6\uff0c\u5e76\u4e14\u88ab pydoc \u6240\u7528\uff08\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u6a21\u5757\u4e0a\u8fd0\u884c pydoc \u8bd5\u4e00\u628a\uff0c\u770b\u770b\u5b83\u957f\u4ec0\u4e48\u6837\uff09\u3002 \u6211\u4eec\u5bf9\u6587\u6863\u5b57\u7b26\u4e32\u7684\u60ef\u4f8b\u662f\u4f7f\u7528\u4e09\u91cd\u53cc\u5f15\u53f7 \"\"\" \uff08\u53c2\u89c1\uff1a PEP-257 \uff09\u3002\u4e00\u4e2a\u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u8fd9\u6837\u7ec4\u7ec7\uff08\u901a\u5e38\u4e00\u884c\u4e0d\u8d85\u8fc7 80 \u4e2a\u5b57\u7b26\uff09\uff0c\u5148\u662f\u4e00\u884c\u4ee5\u53e5\u53f7\uff0c\u95ee\u53f7\u6216\u60ca\u53f9\u53f7\u7ed3\u5c3e\u7684\u6982\u8ff0\uff08\u6216\u8005\u8be5\u6587\u6863\u5b57\u7b26\u4e32\u5355\u7eaf\u53ea\u6709\u4e00\u884c\uff09\u3002\u63a5\u7740\u662f\u4e00\u4e2a\u7a7a\u884c\uff0c\u63a5\u7740\u662f\u6587\u6863\u5b57\u7b26\u4e32\u5269\u4e0b\u7684\u90e8\u5206\uff0c\u5b83\u5e94\u8be5\u4e0e\u6587\u6863\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u5f15\u53f7\u5bf9\u9f50\u3002\u4e0b\u9762\u6709\u66f4\u591a\u6587\u6863\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5316\u89c4\u8303\u3002 3.8.2 \u6a21\u5757 \u6bcf\u4e2a\u6587\u4ef6\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u8bb8\u53ef\u6837\u677f\u3002\u6839\u636e\u9879\u76ee\u4f7f\u7528\u7684\u8bb8\u53ef\uff08\u4f8b\u5982\uff1a Apache 2.0 \u3001 BSD \u3001 LGPL \u3001 GPL \uff09\uff0c\u9009\u62e9\u5408\u9002\u7684\u6837\u677f\u3002 \u6587\u4ef6\u5e94\u8be5\u4ee5\u63cf\u8ff0\u6a21\u5757\u5185\u5bb9\u548c\u7528\u6cd5\u7684\u6587\u6863\u5b57\u7b26\u4e32\u5f00\u59cb\u3002 \"\"\"A one line summary of the module or program, terminated by a period. Leave one blank line. The rest of this docstring should contain an overall description of the module or program. Optionally, it may also contain a brief description of exported classes and functions and/or usage examples. Typical usage example: foo = ClassFoo() bar = foo.FunctionBar() \"\"\" 3.8.3 \u51fd\u6570\u548c\u65b9\u6cd5 \u4e0b\u6587\u6240\u6307\u7684\u51fd\u6570\uff0c\u5305\u62ec\u51fd\u6570\uff0c\u65b9\u6cd5\uff0c\u4ee5\u53ca\u751f\u6210\u5668\u3002 \u4e00\u4e2a\u51fd\u6570\u5fc5\u987b\u8981\u6709\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u9664\u975e\u5b83\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \u5916\u90e8\u4e0d\u53ef\u89c1 \u975e\u5e38\u77ed\u5c0f \u7b80\u5355\u660e\u4e86 \u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u63d0\u4f9b\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u5f53\u522b\u4eba\u7f16\u5199\u4ee3\u7801\u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u4ed6\u4e0d\u9700\u8981\u770b\u4e00\u884c\u4ee3\u7801\uff0c\u53ea\u8981\u770b\u6587\u6863\u5b57\u7b26\u4e32\u5c31\u53ef\u4ee5\u4e86\u3002\u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u662f\u63cf\u8ff0\u6027\u7684\uff08 \"\"\"Fetches rows from a Bigtable.\"\"\" \uff09 \u800c\u4e0d\u662f\u547d\u4ee4\u5f0f\u7684\uff08 \"\"\"Fetch rows from a Bigtable.\"\"\" \uff09 \uff0c\u9664\u4e86 @property \u6570\u636e\u63cf\u8ff0\u7b26\uff0c\u5b83\u5e94\u8be5\u4f7f\u7528 \u4e0e\u5c5e\u6027\u76f8\u540c\u7684\u6837\u5f0f \u3002\u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u5305\u542b\u51fd\u6570\u505a\u4ec0\u4e48\uff0c\u4ee5\u53ca\u8f93\u5165\u548c\u8f93\u51fa\u7684\u8be6\u7ec6\u63cf\u8ff0\u3002\u901a\u5e38\uff0c\u4e0d\u5e94\u8be5\u63cf\u8ff0\u201c\u600e\u4e48\u505a\u201d\uff0c\u9664\u975e\u662f\u4e00\u4e9b\u590d\u6742\u7684\u7b97\u6cd5\u3002\u5bf9\u4e8e\u590d\u6742\u7684\u4ee3\u7801\uff0c\u5728\u4ee3\u7801\u65c1\u8fb9\u52a0\u6ce8\u91ca\u4f1a\u6bd4\u4f7f\u7528\u6587\u6863\u5b57\u7b26\u4e32\u66f4\u6709\u610f\u4e49\u3002 \u91cd\u5199\u57fa\u7c7b\u4e2d\u7684\u65b9\u6cd5\u65f6\uff0c\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6587\u6863\u5b57\u7b26\u4e32\u5f15\u5bfc\u8bfb\u8005\u67e5\u770b\u88ab\u8986\u76d6\u65b9\u6cd5\u7684\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1a \"\"\"See base class.\"\"\" \u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u65e0\u9700\u91cd\u590d\u57fa\u672c\u65b9\u6cd5\u4e2d\u7684\u6587\u6863\u5b57\u7b26\u4e32\u4fe1\u606f\u3002\u4f46\u662f\uff0c\u5982\u679c\u91cd\u5199\u65b9\u6cd5\u7684\u884c\u4e3a\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u6216\u8005\u9700\u8981\u63d0\u4f9b\u8be6\u7ec6\u4fe1\u606f\uff08\u4f8b\u5982\uff1a\u8bb0\u5f55\u989d\u5916\u526f\u4f5c\u7528\uff09\uff0c\u90a3\u4e48\u91cd\u5199\u65b9\u6cd5\u81f3\u5c11\u9700\u8981\u901a\u8fc7\u6587\u6863\u5b57\u7b26\u4e32\u6765\u63cf\u8ff0\u8fd9\u4e9b\u5dee\u5f02\u3002 \u5173\u4e8e\u51fd\u6570\u7684\u51e0\u4e2a\u65b9\u9762\u5e94\u8be5\u5728\u7279\u5b9a\u7684\u5c0f\u8282\u4e2d\u8fdb\u884c\u63cf\u8ff0\u8bb0\u5f55\u3002\u8fd9\u51e0\u4e2a\u65b9\u9762\u5982\u4e0b\u6587\u6240\u8ff0\uff0c\u6bcf\u8282\u5e94\u8be5\u4ee5\u4e00\u4e2a\u6807\u9898\u884c\u5f00\u59cb\uff0c\u6807\u9898\u884c\u4ee5\u5192\u53f7\u7ed3\u5c3e\u3002\u9664\u6807\u9898\u884c\u5916\uff0c\u5c0f\u8282\u7684\u5176\u4ed6\u5185\u5bb9\u5e94\u88ab\u7f29\u8fdb\u4e24\u4e2a\u6216\u56db\u4e2a\u7a7a\u683c\uff08\u5728\u6587\u4ef6\u5185\u4fdd\u6301\u4e00\u81f4\uff09\u3002\u5982\u679c\u51fd\u6570\u7684\u540d\u79f0\u548c\u7b7e\u540d\u5177\u6709\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528\u5355\u884c\u6587\u6863\u5b57\u7b26\u4e32\u8fdb\u884c\u9002\u5f53\u63cf\u8ff0\uff0c\u90a3\u5c31\u53ef\u4ee5\u7701\u7565\u8fd9\u4e9b\u90e8\u5206\u3002 Args: \u5217\u51fa\u6bcf\u4e2a\u53c2\u6570\u7684\u540d\u5b57\uff0c\u5728\u540d\u5b57\u540e\u4f7f\u7528\u4e00\u4e2a\u5192\u53f7\u548c\u4e00\u4e2a\u7a7a\u683c\uff0c\u5206\u9694\u5bf9\u8be5\u53c2\u6570\u7684\u63cf\u8ff0\u3002\u5982\u679c\u63cf\u8ff0\u592a\u957f\u8d85\u8fc7\u4e86\u5355\u884c80\u5b57\u7b26\uff0c\u4f7f\u75282\u6216\u80054\u4e2a\u7a7a\u683c\u7684\u60ac\u6302\u7f29\u8fdb\uff08\u4e0e\u6587\u4ef6\u5176\u4ed6\u90e8\u5206\u4fdd\u6301\u4e00\u81f4\uff09\u3002\u63cf\u8ff0\u5e94\u8be5\u5305\u62ec\u6240\u9700\u7684\u7c7b\u578b\u548c\u542b\u4e49\u3002\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u63a5\u53d7 *foo \uff08\u53ef\u53d8\u957f\u5ea6\u53c2\u6570\u5217\u8868\uff09\u6216\u8005 **bar \uff08\u4efb\u610f\u5173\u952e\u5b57\u53c2\u6570\uff09\uff0c\u5e94\u8be5\u8be6\u7ec6\u5217\u51fa *foo \u548c **bar \u3002 Returns:\uff08\u6216\u8005 Yields: \u7528\u4e8e\u751f\u6210\u5668\uff09 \u63cf\u8ff0\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u548c\u8bed\u4e49\u3002 \u5982\u679c\u51fd\u6570\u8fd4\u56de None \uff0c\u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u7701\u7565\u3002 \u5982\u679c\u6587\u6863\u5b57\u7b26\u4e32\u4ee5 Returns \u6216 Yields \u5f00\u5934\uff08\u4f8b\u5982\uff1a \"\"\"Returns row from Bigtable as a tuple of strings.\"\"\" \uff09\uff0c\u5e76\u4e14\u5f00\u59cb\u7684\u53e5\u5b50\u8db3\u4ee5\u63cf\u8ff0\u8fd4\u56de\u503c\uff0c\u90a3\u4e48\u4e5f\u53ef\u4ee5\u7701\u7565\u3002 Raises: \u5217\u51fa\u4e0e\u63a5\u53e3\u6709\u5173\u7684\u6240\u6709\u5f02\u5e38\uff0c\u7136\u540e\u7ed9\u51fa\u8bf4\u660e\u3002\u4f7f\u7528\u7c7b\u4f3c\u7684\u5f02\u5e38\u540d\u79f0 + \u5192\u53f7 + \u7a7a\u683c\u6216\u6362\u884c\u7b26\uff0c\u5e76\u6309 Args\uff1a \u4e2d\u6240\u8ff0\u60ac\u6302\u7f29\u8fdb\u6837\u5f0f\u3002\u5982\u679c\u8fdd\u53cd\u4e86\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u6307\u5b9a\u7684 API\uff0c\u5219\u4e0d\u5e94\u8be5\u8bb0\u5f55\u5f15\u53d1\u7684\u5f02\u5e38\uff08\u56e0\u4e3a\u8fd9\u4f1a\u4f7f\u8fdd\u53cd API \u7684\u884c\u4e3a\u6210\u4e3a API \u7684\u4e00\u90e8\u5206\uff09\u3002 def fetch_smalltable_rows ( table_handle : smalltable . Table , keys : Sequence [ Union [ bytes , str ]], require_all_keys : bool = False , ) -> Mapping [ bytes , Tuple [ str ]]: \"\"\"Fetches rows from a Smalltable. Retrieves rows pertaining to the given keys from the Table instance represented by table_handle. String keys will be UTF-8 encoded. Args: table_handle: An open smalltable.Table instance. keys: A sequence of strings representing the key of each table row to fetch. String keys will be UTF-8 encoded. require_all_keys: Optional; If require_all_keys is True only rows with values set for all keys will be returned. Returns: A dict mapping keys to the corresponding table row data fetched. Each row is represented as a tuple of strings. For example: {b'Serak': ('Rigel VII', 'Preparer'), b'Zim': ('Irk', 'Invader'), b'Lrrr': ('Omicron Persei 8', 'Emperor')} Returned keys are always bytes. If a key from the keys argument is missing from the dictionary, then that row was not found in the table (and require_all_keys must have been False). Raises: IOError: An error occurred accessing the smalltable. \"\"\" \u5982\u4e0b\u6240\u793a\uff0c Args \u4e2d\u53c2\u6570\u6362\u884c\u4e5f\u662f\u5141\u8bb8\u7684\uff1a def fetch_smalltable_rows ( table_handle : smalltable . Table , keys : Sequence [ Union [ bytes , str ]], require_all_keys : bool = False , ) -> Mapping [ bytes , Tuple [ str ]]: \"\"\"Fetches rows from a Smalltable. Retrieves rows pertaining to the given keys from the Table instance represented by table_handle. String keys will be UTF-8 encoded. Args: table_handle: An open smalltable.Table instance. keys: A sequence of strings representing the key of each table row to fetch. String keys will be UTF-8 encoded. require_all_keys: Optional; If require_all_keys is True only rows with values set for all keys will be returned. Returns: A dict mapping keys to the corresponding table row data fetched. Each row is represented as a tuple of strings. For example: {b'Serak': ('Rigel VII', 'Preparer'), b'Zim': ('Irk', 'Invader'), b'Lrrr': ('Omicron Persei 8', 'Emperor')} Returned keys are always bytes. If a key from the keys argument is missing from the dictionary, then that row was not found in the table (and require_all_keys must have been False). Raises: IOError: An error occurred accessing the smalltable. \"\"\" 3.8.4 \u7c7b \u7c7b\u5e94\u8be5\u5728\u5176\u5b9a\u4e49\u4e0b\u6709\u4e00\u4e2a\u7528\u4e8e\u63cf\u8ff0\u8be5\u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32\u3002\u5982\u679c\u4f60\u7684\u7c7b\u6709\u516c\u5171\u5c5e\u6027\uff08 Attributes \uff09\uff0c\u90a3\u4e48\u6587\u6863\u4e2d\u5e94\u8be5\u6709\u4e00\u4e2a\u5c5e\u6027\uff08 Attributes \uff09\u6bb5\uff0c\u5e76\u4e14\u5e94\u8be5\u9075\u5b88\u548c \u51fd\u6570\u53c2\u6570 \u76f8\u540c\u7684\u683c\u5f0f\uff1a class SampleClass : \"\"\"Summary of class here. Longer class information.... Longer class information.... Attributes: likes_spam: A boolean indicating if we like SPAM or not. eggs: An integer count of the eggs we have laid. \"\"\" def __init__ ( self , likes_spam = False ): \"\"\"Inits SampleClass with blah.\"\"\" self . likes_spam = likes_spam self . eggs = 0 def public_method ( self ): \"\"\"Performs operation blah.\"\"\" 3.8.5 \u5757\u6ce8\u91ca\u548c\u884c\u6ce8\u91ca \u6700\u9700\u8981\u5199\u6ce8\u91ca\u7684\u662f\u4ee3\u7801\u4e2d\u90a3\u4e9b\u6280\u5de7\u6027\u7684\u90e8\u5206\u3002\u5982\u679c\u4f60\u5728\u4e0b\u6b21 \u4ee3\u7801\u5ba1\u67e5 \u7684\u65f6\u5019\u5fc5\u987b\u89e3\u91ca\u4e00\u4e0b\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u73b0\u5728\u5c31\u7ed9\u5b83\u5199\u6ce8\u91ca\u3002\u5bf9\u4e8e\u590d\u6742\u7684\u64cd\u4f5c\uff0c\u5e94\u8be5\u5728\u5176\u64cd\u4f5c\u5f00\u59cb\u524d\u5199\u4e0a\u82e5\u5e72\u884c\u6ce8\u91ca\uff0c\u5bf9\u4e8e\u4e0d\u662f\u4e00\u76ee\u4e86\u7136\u7684\u4ee3\u7801\uff0c\u5e94\u5728\u5176\u884c\u5c3e\u6dfb\u52a0\u6ce8\u91ca\u3002 # We use a weighted dictionary search to find out where i is in # the array. We extrapolate position based on the largest num # in the array and the array size and then do binary search to # get the exact number. if i & ( i - 1 ) == 0 : # True if i is 0 or a power of 2. \u4e3a\u4e86\u63d0\u9ad8\u53ef\u8bfb\u6027\uff0c\u6ce8\u91ca\u5b57\u7b26 # \u5e94\u8be5\u81f3\u5c11\u79bb\u5f00\u4ee3\u7801\u4e24\u4e2a\u7a7a\u683c\uff0c\u7136\u540e\u5728\u6ce8\u91ca\u672c\u8eab\u7684\u6587\u672c\u4e4b\u524d\u81f3\u5c11\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u7edd\u4e0d\u8981\u63cf\u8ff0\u4ee3\u7801\u3002\u5047\u8bbe\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\u6bd4\u4f60\u66f4\u61c2 Python\uff0c\u4ed6\u53ea\u662f\u4e0d\u77e5\u9053\u4f60\u7684\u4ee3\u7801\u8981\u505a\u4ec0\u4e48\u3002 # BAD COMMENT: Now go through the b array and make sure whenever i occurs # the next element is i+1 3.8.6 \u6807\u70b9\u7b26\u53f7\u3001\u62fc\u5199\u548c\u8bed\u6cd5 \u6ce8\u610f\u6807\u70b9\u7b26\u53f7\u3001\u62fc\u5199\u548c\u8bed\u6cd5\u3002\u597d\u7684\u6ce8\u91ca\u66f4\u5bb9\u6613\u9605\u8bfb\u3002 \u6ce8\u91ca\u5e94\u8be5\u50cf\u53d9\u4e8b\u6587\u672c\u4e00\u6837\u53ef\u8bfb\uff0c\u6709\u9002\u5f53\u7684\u5927\u5199\u548c\u6807\u70b9\u7b26\u53f7\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5b8c\u6574\u7684\u53e5\u5b50\u6bd4\u53e5\u5b50\u7247\u6bb5\u66f4\u5177\u53ef\u8bfb\u6027\u3002\u8f83\u77ed\u7684\u6ce8\u91ca\uff0c\u4f8b\u5982\u4ee3\u7801\u884c\u672b\u5c3e\u7684\u6ce8\u91ca\uff0c\u6709\u65f6\u53ef\u80fd\u4e0d\u90a3\u4e48\u6b63\u5f0f\uff0c\u4f46\u5e94\u8be5\u4e0e\u4f60\u7684\u98ce\u683c\u4fdd\u6301\u4e00\u81f4\u3002 \u867d\u7136\u88ab\u4ee3\u7801\u5ba1\u9605\u8005\u6307\u51fa\u6807\u70b9\u7b26\u53f7\u4f7f\u7528\u4e0d\u51c6\u786e\uff08\u5728\u7528\u5206\u53f7\u7684\u5730\u65b9\u7528\u4e86\u9017\u53f7\uff09\u7684\u611f\u89c9\u4f1a\u5f88\u4e0d\u723d\uff0c\u4f46\u6e90\u4ee3\u7801\u4fdd\u6301\u9ad8\u5ea6\u7684\u6e05\u6670\u6027\u548c\u53ef\u8bfb\u6027\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u6b63\u786e\u7684\u6807\u70b9\u3001\u62fc\u5199\u548c\u8bed\u6cd5\u6709\u52a9\u4e8e\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u3002 3.10 \u5b57\u7b26\u4e32 \u5373\u4f7f\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u8981\u4f7f\u7528 f-string \uff0c % \u64cd\u4f5c\u7b26\u6216\u8005 format \u65b9\u6cd5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002\u4e0d\u8fc7\u4e5f\u4e0d\u80fd\u4e00\u6982\u800c\u8bba\uff0c\u4f60\u9700\u8981\u5728 + \u548c % \uff08\u6216 format \uff09\u4e4b\u95f4\u597d\u597d\u5224\u5b9a\u3002\u4e0d\u8981\u5c06 % \u6216 format \u65b9\u6cd5\u7528\u4e8e\u7eaf\u8fde\u63a5\u3002 \u63a8\u8350 x = a + b x = ' %s , %s !' % ( imperative , expletive ) x = ' {} , {} ' . format ( first , second ) x = 'name: %s ; score: %d ' % ( name , n ) x = 'name: {} ; score: {} ' . format ( name , n ) x = f 'name: { name } ; score: { n } ' # Python 3.6+ \u4e0d\u63a8\u8350 x = ' %s%s ' % ( a , b ) # use + in this case x = ' {}{} ' . format ( a , b ) # use + in this case x = first + ', ' + second x = 'name: ' + name + '; score: ' + str ( n ) \u907f\u514d\u5728\u5faa\u73af\u4e2d\u7528 + \u548c += \u64cd\u4f5c\u7b26\u6765\u7d2f\u52a0\u5b57\u7b26\u4e32\u3002 \u7531\u4e8e\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u6837\u505a\u4f1a\u521b\u5efa\u4e0d\u5fc5\u8981\u7684\u4e34\u65f6\u5bf9\u8c61\uff0c\u4e14\u5bfc\u81f4\u4e8c\u6b21\u65b9\u800c\u4e0d\u662f\u7ebf\u6027\u7684\u8fd0\u884c\u65f6\u95f4\u3002\u5c3d\u7ba1\u8fd9\u79cd\u5e38\u89c1\u7684\u7d2f\u52a0\u53ef\u4ee5\u5728 CPython \u4e0a\u8fdb\u884c\u4f18\u5316\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u5b9e\u73b0\u7ec6\u8282\u3002\u5e94\u7528\u4f18\u5316\u7684\u6761\u4ef6\u4e0d\u5bb9\u6613\u9884\u6d4b\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u6539\u53d8\u3002\u4f5c\u4e3a\u66ff\u4ee3\u65b9\u6848\uff0c\u4f60\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5b50\u4e32\u52a0\u5165\u5217\u8868\uff0c\u7136\u540e\u5728\u5faa\u73af\u7ed3\u675f\u540e\u7528 ''.join \u8fde\u63a5\u5217\u8868\uff08\u4e5f\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5b50\u4e32\u5199\u5165\u4e00\u4e2a io.StringIO \u7f13\u5b58\u4e2d\uff09\u3002 \u63a8\u8350 items = [ '<table>' ] for last_name , first_name in employee_list : items . append ( '<tr><td> %s , %s </td></tr>' % ( last_name , first_name )) items . append ( '</table>' ) employee_table = '' . join ( items ) \u4e0d\u63a8\u8350 employee_table = '<table>' for last_name , first_name in employee_list : employee_table += '<tr><td> %s , %s </td></tr>' % ( last_name , first_name ) employee_table += '</table>' \u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4fdd\u6301\u4f7f\u7528\u5b57\u7b26\u4e32\u5f15\u53f7\u7684\u4e00\u81f4\u6027\u3002\u4f7f\u7528\u5355\u5f15\u53f7 ' \u6216\u8005\u53cc\u5f15\u53f7 \" \u4e4b\u4e00\u7528\u4ee5\u5f15\u7528\u5b57\u7b26\u4e32\uff0c\u5e76\u5728\u540c\u4e00\u6587\u4ef6\u4e2d\u6cbf\u7528\u3002\u5728\u5b57\u7b26\u4e32\u5185\u53ef\u4ee5\u4f7f\u7528\u53e6\u5916\u4e00\u79cd\u5f15\u53f7\uff0c\u4ee5\u907f\u514d\u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528 \\\\ \u8f6c\u4e49\u3002 \u63a8\u8350 Python ( 'Why are you hiding your eyes?' ) Gollum ( \"I'm scared of lint errors.\" ) Narrator ( '\"Good!\" thought a happy Python reviewer.' ) \u4e0d\u63a8\u8350 Python ( \"Why are you hiding your eyes?\" ) Gollum ( 'The lint. It burns. It burns us.' ) Gollum ( \"Always the great lint. Watching. Watching.\" ) \u4e3a\u591a\u884c\u5b57\u7b26\u4e32\u4f7f\u7528\u4e09\u91cd\u53cc\u5f15\u53f7 \"\"\" \u800c\u975e\u4e09\u91cd\u5355\u5f15\u53f7 ''' \u3002\u5f53\u4e14\u4ec5\u5f53\u9879\u76ee\u4e2d\u4f7f\u7528\u5355\u5f15\u53f7 ' \u6765\u5f15\u7528\u5b57\u7b26\u4e32\u65f6\uff0c\u624d\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e09\u91cd ''' \u4e3a\u975e\u6587\u6863\u5b57\u7b26\u4e32\u7684\u591a\u884c\u5b57\u7b26\u4e32\u6765\u6807\u8bc6\u5f15\u7528\u3002\u6587\u6863\u5b57\u7b26\u4e32\u5fc5\u987b\u4f7f\u7528\u4e09\u91cd\u53cc\u5f15\u53f7 \"\"\" \u3002 \u591a\u884c\u5b57\u7b26\u4e32\u4e0d\u4f1a\u968f\u7a0b\u5e8f\u5176\u4f59\u90e8\u5206\u7684\u7f29\u8fdb\u800c\u7f29\u8fdb\u3002\u5982\u679c\u8981\u907f\u514d\u5728\u5b57\u7b26\u4e32\u4e2d\u5d4c\u5165\u989d\u5916\u7684\u7a7a\u767d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e32\u8054\u7684\u5355\u884c\u5b57\u7b26\u4e32\u6216\u5e26\u6709 textwrap.dedent() \u7684\u591a\u884c\u5b57\u7b26\u4e32\u6765\u5220\u9664\u6bcf\u884c\u4e0a\u7684\u521d\u59cb\u7a7a\u767d\u3002 \u63a8\u8350 long_string = \"\"\"This is fine if your use case can accept extraneous leading spaces.\"\"\" long_string = ( \"And this is fine if you cannot accept \\n \" + \"extraneous leading spaces.\" ) long_string = textwrap . dedent ( \"\"\" \\ This is also fine, because textwrap.dedent() will collapse common leading spaces in each line.\"\"\" ) \u4e0d\u63a8\u8350 def foo (): long_string = \"\"\"This is pretty ugly. Don't do this. \"\"\" 3.10.1 \u65e5\u5fd7 \u5bf9\u4e8e\u671f\u671b\u4ee5\u6a21\u5f0f\u5b57\u7b26\u4e32\uff08\u5e26\u6709 % - \u5360\u4f4d\u7b26\uff09\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u65e5\u5fd7\u51fd\u6570\uff1a\u59cb\u7ec8\u4f7f\u7528\u5b57\u7b26\u4e32\u6587\u672c\uff08\u800c\u4e0d\u662f f-string \uff09\u4f5c\u4e3a\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5e76\u4f7f\u7528\u6a21\u5f0f\u53c2\u6570\uff08pattern-parameters\uff09\u4f5c\u4e3a\u540e\u7eed\u53c2\u6570\u3002\u4e00\u4e9b\u65e5\u5fd7\u5b9e\u73b0\u5c06\u672a\u5c55\u5f00\u7684\u6a21\u5f0f\u5b57\u7b26\u4e32\u6536\u96c6\u4e3a\u53ef\u67e5\u8be2\u5b57\u6bb5\u3002\u5b83\u8fd8\u9632\u6b62\u82b1\u8d39\u65f6\u95f4\u5448\u73b0\u6ca1\u6709\u914d\u7f6e\u8bb0\u5f55\u5668\u8f93\u51fa\u7684\u6d88\u606f\u3002 \u63a8\u8350 import tensorflow as tf logger = tf . get_logger () logger . info ( 'TensorFlow Version is: %s ' , tf . __version__ ) \u63a8\u8350 import os from absl import logging logging . info ( 'Current $PAGER is: %s ' , os . getenv ( 'PAGER' , default = '' )) homedir = os . getenv ( 'HOME' ) if homedir is None or not os . access ( homedir , os . W_OK ): logging . error ( 'Cannot write to home directory, $HOME= %r ' , homedir ) \u4e0d\u63a8\u8350 import os from absl import logging logging . info ( 'Current $PAGER is:' ) logging . info ( os . getenv ( 'PAGER' , default = '' )) homedir = os . getenv ( 'HOME' ) if homedir is None or not os . access ( homedir , os . W_OK ): logging . error ( f 'Cannot write to home directory, $HOME= { homedir !r} ' ) 3.10.2 \u9519\u8bef\u6d88\u606f \u9519\u8bef\u6d88\u606f\uff08\u4f8b\u5982\uff1a ValueError \u7b49\u5f02\u5e38\u7684\u6d88\u606f\u5b57\u7b26\u4e32\uff0c\u6216\u663e\u793a\u7ed9\u7528\u6237\u7684\u6d88\u606f\uff09\u5e94\u9075\u5faa\u4e09\u4e2a\u51c6\u5219\uff1a \u6d88\u606f\u9700\u8981\u4e0e\u5b9e\u9645\u9519\u8bef\u6761\u4ef6\u7cbe\u786e\u5339\u914d\u3002 \u63d2\u5165\u7684\u7247\u6bb5\u5fc5\u987b\u59cb\u7ec8\u80fd\u591f\u6e05\u695a\u5730\u8bc6\u522b\u3002 \u5b83\u4eec\u5e94\u8be5\u5141\u8bb8\u7b80\u5355\u7684\u81ea\u52a8\u5316\u5904\u7406\uff08\u4f8b\u5982 grepping \uff09\u3002 \u63a8\u8350 if not 0 <= p <= 1 : raise ValueError ( f 'Not a probability: { p !r} ' ) try : os . rmdir ( workdir ) except OSError as error : logging . warning ( 'Could not remove directory (reason: %r ): %r ' , error , workdir ) \u4e0d\u63a8\u8350 if p < 0 or p > 1 : # PROBLEM: also false for float('nan')! raise ValueError ( f 'Not a probability: { p !r} ' ) try : os . rmdir ( workdir ) except OSError : # PROBLEM: Message makes an assumption that might not be true: # Deletion might have failed for some other reason, misleading # whoever has to debug this. logging . warning ( 'Directory already was deleted: %s ' , workdir ) try : os . rmdir ( workdir ) except OSError : # PROBLEM: The message is harder to grep for than necessary, and # not universally non-confusing for all possible values of `workdir`. # Imagine someone calling a library function with such code # using a name such as workdir = 'deleted'. The warning would read: # \"The deleted directory could not be deleted.\" logging . warning ( 'The %s directory could not be deleted.' , workdir ) 3.11 \u6587\u4ef6\u548c Sockets \u5728\u6587\u4ef6\u548c sockets \u7ed3\u675f\u65f6\uff0c\u663e\u5f0f\u7684\u5173\u95ed\u5b83\u3002 \u9664\u6587\u4ef6\u5916\uff0csockets \u6216\u5176\u4ed6\u7c7b\u4f3c\u6587\u4ef6\u7684\u5bf9\u8c61\u5728\u6ca1\u6709\u5fc5\u8981\u7684\u60c5\u51b5\u4e0b\u6253\u5f00\uff0c\u4f1a\u6709\u8bb8\u591a\u526f\u4f5c\u7528\uff0c\u4f8b\u5982\uff1a \u5b83\u4eec\u53ef\u80fd\u4f1a\u6d88\u8017\u6709\u9650\u7684\u7cfb\u7edf\u8d44\u6e90\u3002\u5982\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u5982\u679c\u8fd9\u4e9b\u8d44\u6e90\u5728\u4f7f\u7528\u540e\u6ca1\u6709\u53ca\u65f6\u5f52\u8fd8\u7cfb\u7edf\uff0c\u90a3\u4e48\u7528\u4e8e\u5904\u7406\u8fd9\u4e9b\u5bf9\u8c61\u7684\u4ee3\u7801\u4f1a\u5c06\u8d44\u6e90\u6d88\u8017\u6b86\u5c3d\u3002 \u6301\u6709\u6587\u4ef6\u5c06\u4f1a\u963b\u6b62\u5bf9\u4e8e\u6587\u4ef6\u7684\u5176\u4ed6\u8bf8\u5982\u79fb\u52a8\u3001\u5220\u9664\u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002 \u4ec5\u4ec5\u662f\u4ece\u903b\u8f91\u4e0a\u5173\u95ed\u6587\u4ef6\u548c Sockets\uff0c\u90a3\u4e48\u5b83\u4eec\u4ecd\u7136\u53ef\u80fd\u4f1a\u88ab\u5176\u5171\u4eab\u7684\u7a0b\u5e8f\u5728\u65e0\u610f\u4e2d\u8fdb\u884c\u8bfb\u6216\u8005\u5199\u64cd\u4f5c\u3002\u53ea\u6709\u5f53\u5b83\u4eec\u771f\u6b63\u88ab\u5173\u95ed\u540e\uff0c\u5bf9\u4e8e\u5b83\u4eec\u5c1d\u8bd5\u8fdb\u884c\u8bfb\u6216\u8005\u5199\u64cd\u4f5c\u5c06\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u5e76\u4f7f\u5f97\u95ee\u9898\u5feb\u901f\u663e\u73b0\u51fa\u6765\u3002 \u800c\u4e14\uff0c\u5e7b\u60f3\u5f53\u6587\u4ef6\u5bf9\u8c61\u6790\u6784\u65f6\uff0c\u6587\u4ef6\u548c sockets \u4f1a\u81ea\u52a8\u5173\u95ed\uff0c \u8bd5\u56fe\u5c06\u6587\u4ef6\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u548c\u6587\u4ef6\u7684\u72b6\u6001\u7ed1\u5b9a\u5728\u4e00\u8d77\u7684\u60f3\u6cd5\uff0c\u90fd\u662f\u4e0d\u73b0\u5b9e\u7684\u3002\u56e0\u4e3a\u6709\u5982\u4e0b\u539f\u56e0\uff1a \u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u8fd0\u884c\u73af\u5883\u4f1a\u771f\u6b63\u7684\u6267\u884c\u6587\u4ef6\u7684\u6790\u6784\u3002\u4e0d\u540c\u7684 Python \u5b9e\u73b0\u91c7\u7528\u4e0d\u540c\u7684\u5185\u5b58\u7ba1\u7406\u6280\u672f\uff0c\u6bd4\u5982\u5ef6\u65f6\u5783\u573e\u5904\u7406\u673a\u5236\u3002\u5ef6\u65f6\u5783\u573e\u5904\u7406\u673a\u5236\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5bf9\u8c61\u751f\u547d\u5468\u671f\u88ab\u4efb\u610f\u65e0\u9650\u5236\u7684\u5ef6\u957f\u3002 \u5bf9\u4e8e\u6587\u4ef6\u610f\u5916\u7684\u5f15\u7528\uff0c\u4f1a\u5bfc\u81f4\u5bf9\u4e8e\u6587\u4ef6\u7684\u6301\u6709\u65f6\u95f4\u8d85\u51fa\u9884\u671f\uff08\u6bd4\u5982\u5bf9\u4e8e\u5f02\u5e38\u7684\u8ddf\u8e2a\uff0c\u5305\u542b\u6709\u5168\u5c40\u53d8\u91cf\u7b49\uff09\u3002 \u7ba1\u7406\u6587\u4ef6\u7684\u9996\u9009\u65b9\u6cd5\u662f\u4f7f\u7528 with \u8bed\u53e5 \uff1a with open ( \"hello.txt\" ) as hello_file : for line in hello_file : print ( line ) \u5bf9\u4e8e\u4e0d\u652f\u6301 with \u8bed\u53e5\u7684\u7c7b\u6587\u4ef6\u5bf9\u8c61\uff0c\u8bf7\u4f7f\u7528 contextlib.closing() \uff1a import contextlib with contextlib . closing ( urllib . urlopen ( \"http://www.python.org/\" )) as front_page : for line in front_page : print ( line ) 3.12 TODO \u6ce8\u91ca \u4e3a\u4e34\u65f6\u4ee3\u7801\u4f7f\u7528 TODO \u6ce8\u91ca\uff0c\u5b83\u662f\u4e00\u79cd\u77ed\u671f\u89e3\u51b3\u65b9\u6848\uff0c\u4e0d\u7b97\u5b8c\u7f8e\uff0c\u4f46\u591f\u597d\u4e86\u3002 TODO \u6ce8\u91ca\u5e94\u8be5\u5728\u6240\u6709\u5f00\u5934\u5904\u5305\u542b TODO \u5b57\u7b26\u4e32\uff0c\u7d27\u8ddf\u7740\u662f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4f60\u7684\u540d\u5b57\uff0c\u90ae\u7bb1\u5730\u5740\u6216\u5176\u5b83\u6807\u8bc6\u7b26\u3002\u7136\u540e\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u5192\u53f7\u3002\u63a5\u7740\u5fc5\u987b\u6709\u4e00\u884c\u6ce8\u91ca\uff0c\u89e3\u91ca\u8981\u505a\u4ec0\u4e48\u3002 \u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u6709\u4e00\u4e2a\u7edf\u4e00\u7684 TODO \u683c\u5f0f\uff0c\u8fd9\u6837\u6dfb\u52a0\u6ce8\u91ca\u7684\u4eba\u5c31\u53ef\u4ee5\u641c\u7d22\u5230\uff08\u5e76\u53ef\u4ee5\u6309\u9700\u63d0\u4f9b\u66f4\u591a\u7ec6\u8282\uff09\u3002\u5199\u4e86 TODO \u6ce8\u91ca\u5e76\u4e0d\u4fdd\u8bc1\u5199\u7684\u4eba\u4f1a\u4eb2\u81ea\u89e3\u51b3\u95ee\u9898\u3002\u5f53\u4f60\u5199\u4e86\u4e00\u4e2a TODO \uff0c\u8bf7\u6ce8\u4e0a\u4f60\u7684\u540d\u5b57\u3002 # TODO(kl@gmail.com): Use a \"*\" here for string repetition. # TODO(Zeke) Change this to use relations. \u5982\u679c\u4f60\u7684 TODO \u662f \u201c\u5c06\u6765\u505a\u67d0\u4e8b\u201d \u7684\u5f62\u5f0f\uff0c\u90a3\u4e48\u8bf7\u786e\u4fdd\u4f60\u5305\u542b\u4e86\u4e00\u4e2a\u6307\u5b9a\u7684\u65e5\u671f\uff082009\u5e7411\u6708\u89e3\u51b3\uff09\u6216\u8005\u4e00\u4e2a\u7279\u5b9a\u7684\u4e8b\u4ef6\uff08\u7b49\u5230\u6240\u6709\u7684\u5ba2\u6237\u90fd\u53ef\u4ee5\u5904\u7406 XML \u8bf7\u6c42\u5c31\u79fb\u9664\u8fd9\u4e9b\u4ee3\u7801\uff09\u3002 3.13 \u5bfc\u5165\u683c\u5f0f \u6bcf\u4e2a\u5bfc\u5165\u5e94\u8be5\u72ec\u5360\u4e00\u884c\uff0c typing \u5bfc\u5165\u662f\u4e2a\u4f8b\u5916 \u3002 \u63a8\u8350 import os import sys from typing import Mapping , Sequence \u4e0d\u63a8\u8350 import os , sys \u5bfc\u5165\u603b\u5e94\u8be5\u653e\u5728\u6587\u4ef6\u9876\u90e8\uff0c\u4f4d\u4e8e\u6a21\u5757\u6ce8\u91ca\u548c\u6587\u6863\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c\u6a21\u5757\u5168\u5c40\u53d8\u91cf\u548c\u5e38\u91cf\u4e4b\u524d\u3002\u5bfc\u5165\u5e94\u8be5\u6309\u7167\u4ece\u6700\u901a\u7528\u5230\u6700\u4e0d\u901a\u7528\u7684\u987a\u5e8f\u5206\u7ec4\uff1a Future \u5bfc\u5165\u8bed\u53e5\uff1a from __future__ import absolute_import from __future__ import division from __future__ import print_function \u8bf7\u53c2\u9605 \u4e0a\u9762 \u7684\u66f4\u591a\u4fe1\u606f\u3002 \u6807\u51c6\u5e93\u5bfc\u5165\uff1a import sys \u7b2c\u4e09\u65b9 \u6a21\u5757\u6216\u5305\u5bfc\u5165\uff1a import tensorflow as tf \u4ee3\u7801\u5e93\u5b50\u5305\u5bfc\u5165\uff1a from otherproject.ai import mind \u5df2\u5f03\u7528\uff1a \u4e0e\u6b64\u6587\u4ef6\u5c5e\u4e8e\u540c\u4e00\u9876\u7ea7\u5b50\u5305\u7684\u5e94\u7528\u7a0b\u5e8f\u7279\u5b9a\u5bfc\u5165\u3002\u4f8b\u5982\uff1a from myproject.backend.hgwells import time_machine \u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u4e4b\u524d\u7684 Google Python \u98ce\u683c\u662f\u8fd9\u4e48\u505a\u7684\uff0c\u4f46\u73b0\u5728\u5df2\u7ecf\u4e0d\u63a8\u8350\u4e86\u3002 \u65b0\u7684\u4ee3\u7801\u4e0d\u8981\u8fd9\u4e48\u505a \u3002\u53ea\u9700\u5c06\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u5b50\u5305\u5bfc\u5165\u4e0e\u5176\u4ed6\u5b50\u5305\u5bfc\u5165\u4e00\u6837\u5bf9\u5f85\u5373\u53ef\u3002 \u6bcf\u79cd\u5206\u7ec4\u4e2d\uff0c\u5e94\u8be5\u6839\u636e\u6bcf\u4e2a\u6a21\u5757\u7684\u5b8c\u6574\u5305\u8def\u5f84\uff08 from path import ... \u4e2d\u7684 path \uff09\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u5ffd\u7565\u5927\u5c0f\u5199\u3002\u4ee3\u7801\u53ef\u4ee5\u9009\u62e9\u5728\u5bfc\u5165\u8282\u4e4b\u95f4\u653e\u7f6e\u4e00\u4e2a\u7a7a\u884c\u3002 import collections import queue import sys from absl import app from absl import flags import bs4 import cryptography import tensorflow as tf from book.genres import scifi from myproject.backend import huxley from myproject.backend.hgwells import time_machine from myproject.backend.state_machine import main_loop from otherproject.ai import body from otherproject.ai import mind from otherproject.ai import soul # \u4e4b\u524d\u98ce\u683c\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5c06\u4e00\u4e9b\u5bfc\u5165\u653e\u5728\u8fd9\u91cc: #from myproject.backend.hgwells import time_machine #from myproject.backend.state_machine import main_loop 3.14 \u8bed\u53e5 \u901a\u5e38\u6bcf\u4e2a\u8bed\u53e5\u5e94\u8be5\u72ec\u5360\u4e00\u884c\u3002 \u4e0d\u8fc7\uff0c\u5982\u679c\u6d4b\u8bd5\u7ed3\u679c\u4e0e\u6d4b\u8bd5\u8bed\u53e5\u5728\u4e00\u884c\u653e\u5f97\u4e0b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5728\u540c\u4e00\u884c\u3002\u5982\u679c\u662f if \u8bed\u53e5\uff0c\u53ea\u6709\u5728\u6ca1\u6709 else \u65f6\u624d\u80fd\u8fd9\u6837\u505a\u3002\u7279\u522b\u5730\uff0c\u7edd\u4e0d\u8981\u5bf9 try/except \u8fd9\u6837\u505a\uff0c\u56e0\u4e3a try \u548c except \u4e0d\u80fd\u653e\u5728\u540c\u4e00\u884c\u3002 \u63a8\u8350 if foo : bar ( foo ) \u4e0d\u63a8\u8350 if foo : bar ( foo ) else : baz ( foo ) try : bar ( foo ) except ValueError : baz ( foo ) try : bar ( foo ) except ValueError : baz ( foo ) 3.15 \u8bbf\u95ee\u63a7\u5236 \u5728 Python \u4e2d\uff0c \u5bf9\u4e8e\u7410\u788e\u53c8\u4e0d\u592a\u91cd\u8981\u7684\u8bbf\u95ee\u51fd\u6570\uff0c\u4f60\u5e94\u8be5\u76f4\u63a5\u4f7f\u7528\u516c\u6709\u53d8\u91cf\u6765\u53d6\u4ee3\u5b83\u4eec\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u989d\u5916\u7684\u51fd\u6570\u8c03\u7528\u5f00\u9500\u3002\u5f53\u6dfb\u52a0\u66f4\u591a\u529f\u80fd\u65f6\uff0c\u4f60\u53ef\u4ee5\u7528\u5c5e\u6027\uff08 property \uff09\u6765\u4fdd\u6301\u8bed\u6cd5\u7684\u4e00\u81f4\u6027\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u8bbf\u95ee\u66f4\u590d\u6742\uff0c\u6216\u8005\u53d8\u91cf\u7684\u8bbf\u95ee\u5f00\u9500\u5f88\u663e\u8457\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u4f7f\u7528\u50cf get_foo() \u548c set_foo() \u8fd9\u6837\u7684\u51fd\u6570\u8c03\u7528\uff08\u9075\u5faa \u547d\u540d \u51c6\u5219\uff09\u3002\u5982\u679c\u4e4b\u524d\u7684\u4ee3\u7801\u884c\u4e3a\u5141\u8bb8\u901a\u8fc7\u5c5e\u6027\uff08 property \uff09\u8bbf\u95ee\uff0c\u90a3\u4e48\u5c31\u4e0d\u8981\u5c06\u65b0\u7684\u8bbf\u95ee\u51fd\u6570\u4e0e\u5c5e\u6027\u7ed1\u5b9a\u3002\u8fd9\u6837\uff0c\u4efb\u4f55\u8bd5\u56fe\u901a\u8fc7\u8001\u65b9\u6cd5\u8bbf\u95ee\u53d8\u91cf\u7684\u4ee3\u7801\u5c31\u6ca1\u6cd5\u8fd0\u884c\uff0c\u4f7f\u7528\u8005\u4e5f\u5c31\u4f1a\u610f\u8bc6\u5230\u590d\u6742\u6027\u53d1\u751f\u4e86\u53d8\u5316\u3002 3.16 \u547d\u540d module_name \u3001 package_name \u3001 ClassName \u3001 method_name \u3001 ExceptionName \u3001 function_name \u3001 GLOBAL_CONSTANT_NAME \u3001 global_var_name \u3001 instance_var_name \u3001 function_parameter_name \u3001 local_var_name \u3002 \u51fd\u6570\u540d\u3001\u53d8\u91cf\u540d\u548c\u6587\u4ef6\u540d\u5e94\u8be5\u90fd\u662f\u63cf\u8ff0\u6027\u7684\uff0c\u907f\u514d\u4f7f\u7528\u7f29\u5199\u3002\u7279\u522b\u662f\uff0c\u4e0d\u8981\u4f7f\u7528\u5bf9\u9879\u76ee\u4ee5\u5916\u7684\u8bfb\u8005\u6765\u8bf4\u6a21\u68f1\u4e24\u53ef\u6216\u4e0d\u719f\u6089\u7684\u7f29\u5199\uff0c\u4e5f\u4e0d\u8981\u901a\u8fc7\u5220\u9664\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\u6765\u7f29\u5199\u3002 \u603b\u662f\u4f7f\u7528 .py \u6587\u4ef6\u6269\u5c55\u540d\uff0c\u4e0d\u8981\u4f7f\u7528\u8fde\u5b57\u7b26\u3002 3.16.1 \u5e94\u8be5\u907f\u514d\u7684\u540d\u79f0 \u5355\u5b57\u7b26\u540d\u79f0\uff0c\u9664\u4e86\u4ee5\u4e0b\u7279\u6b8a\u60c5\u51b5\uff1a \u8ba1\u6570\u5668\u548c\u8fed\u4ee3\u5668\uff08\u4f8b\u5982\uff1a i \uff0c j \uff0c k \uff0c v \u7b49\u7b49\uff09 \u4f5c\u4e3a try/except \u8bed\u53e5\u7684\u5f02\u5e38\u6807\u8bc6\u7b26 e \u3002 \u4f5c\u4e3a with \u8bed\u53e5\u58f0\u660e\u7684\u6587\u4ef6\u5bf9\u8c61 f \u6ce8\u610f\u4e0d\u8981\u6ee5\u7528\u5355\u5b57\u7b26\u547d\u540d\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u63cf\u8ff0\u6027\u5e94\u4e0e\u540d\u79f0\u7684\u53ef\u89c1\u6027\u8303\u56f4\u6210\u6bd4\u4f8b\u3002\u4f8b\u5982\uff1a i \u53ef\u80fd\u662f\u4e94\u884c\u4ee3\u7801\u5757\u7684\u597d\u540d\u79f0\uff0c\u4f46\u5728\u591a\u4e2a\u5d4c\u5957\u8303\u56f4\u5185\uff0c\u5b83\u53ef\u80fd\u592a\u6a21\u7cca\u4e86\u3002 \u5305/\u6a21\u5757\u540d\u4e2d\u7684\u8fde\u5b57\u7b26\uff08 - \uff09 __double_leading_and_trailing_underscore__ \u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u5e76\u7ed3\u5c3e\u7684\u540d\u79f0\uff08Python\u4fdd\u7559\uff09 \u4e0d\u793c\u8c8c\u7684\u7528\u8bed \u4e0d\u9700\u8981\u5305\u542b\u53d8\u91cf\u7c7b\u578b\u7684\u540d\u79f0\uff08\u4f8b\u5982\uff1a id_to_name_dict \uff09 3.16.2 \u547d\u540d\u7ea6\u5b9a \u6240\u8c13\u201c\u5185\u90e8\uff08 Internal \uff09\u201d\u8868\u793a\u4ec5\u6a21\u5757\u5185\u53ef\u7528\uff0c\u6216\u8005\u5728\u7c7b\u5185\u662f\u4fdd\u62a4\u6216\u79c1\u6709\u7684\u3002 \u7528\u5355\u4e0b\u5212\u7ebf\uff08 _ \uff09\u5f00\u5934\u8868\u793a\u6a21\u5757\u53d8\u91cf\u6216\u51fd\u6570\u662f protected \u7684\uff08\u4f7f\u7528 import * from \u65f6\u4e0d\u4f1a\u5305\u542b\uff09\u3002\u7528\u53cc\u4e0b\u5212\u7ebf\uff08 __ \uff09\u5f00\u5934\u7684\u5b9e\u4f8b\u53d8\u91cf\u6216\u65b9\u6cd5\u8868\u793a\u7c7b\u5185\u79c1\u6709\uff0c\u4f46\u5e76\u4e0d\u63a8\u8350\u8fd9\u4e48\u505a\uff0c\u56e0\u4e3a\u4f1a\u5f71\u54cd\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u6216\u53ef\u6d4b\u8bd5\u6027\uff0c\u800c\u4e14\u4e5f\u4e0d\u662f\u771f\u6b63\u7684\u79c1\u6709\u3002 \u5c06\u76f8\u5173\u7684\u7c7b\u548c\u9876\u7ea7\u51fd\u6570\u653e\u5728\u540c\u4e00\u4e2a\u6a21\u5757\u91cc\u3002\u4e0d\u50cf Java \uff0c\u6ca1\u5fc5\u8981\u9650\u5236\u4e00\u4e2a\u7c7b\u4e00\u4e2a\u6a21\u5757\u3002 \u5bf9\u7c7b\u540d\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd\uff08\u5982 CapWords \uff0c\u5373 Pascal \u98ce\u683c\uff09\uff0c\u4f46\u662f\u6a21\u5757\u540d\u5e94\u8be5\u7528\u5c0f\u5199\u52a0\u4e0b\u5212\u7ebf\u7684\u65b9\u5f0f\uff08\u5982 lower_with_under.py \uff09\u3002 \u5c3d\u7ba1\u5df2\u7ecf\u6709\u5f88\u591a\u73b0\u5b58\u7684\u6a21\u5757\u4f7f\u7528\u7c7b\u4f3c\u4e8e CapWords.py \u8fd9\u6837\u7684\u547d\u540d\uff0c\u4f46\u73b0\u5728\u5df2\u7ecf\u4e0d\u9f13\u52b1\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5982\u679c\u6a21\u5757\u540d\u78b0\u5de7\u548c\u7c7b\u540d\u4e00\u81f4\uff0c\u8fd9\u4f1a\u8ba9\u4eba\u56f0\u6270\u3002\uff08\u201c\u60f3\u60f3 - \u6211\u5e94\u8be5\u7528 import StringIO \u8fd8\u662f from StringIO import StringIO \uff1f\u201d\uff09 \u4e0b\u5212\u7ebf\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u4ee5 test \u5f00\u5934\u7684 unittest \u65b9\u6cd5\u540d\u79f0\u4e2d\uff0c\u5e38\u7528\u4e8e\u5206\u9694\u903b\u8f91\u7ec4\u4ef6\u7684\u540d\u79f0\uff0c\u5373\u4f7f\u7ec4\u4ef6\u540d\u79f0\u4f7f\u7528 CapWords \u4e5f\u5e94\u5982\u6b64\u3002\u4e00\u79cd\u53ef\u7528\u7684\u6a21\u5f0f\u662f\uff1a test<MethodUnderTest>_<state> \uff0c\u4f8b\u5982\u3000 testPop_EmptyStack \u3002\u5176\u5b9e\u5bf9\u4e8e\u6d4b\u8bd5\u65b9\u6cd5\u7684\u547d\u540d\u5e76\u6ca1\u6709\u5f3a\u5236\u89c4\u5b9a\u3002 3.16.3 \u6587\u4ef6\u547d\u540d Python \u6587\u4ef6\u540d\u5fc5\u987b\u4ee5 .py \u6269\u5c55\u540d\u7ed3\u5c3e\uff0c\u5e76\u4e14\u4e0d\u8981\u5305\u542b\u8fde\u5b57\u7b26\uff08 - \uff09\u3002\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5bfc\u5165\u548c\u5355\u5143\u6d4b\u8bd5\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528\u6ca1\u6709\u6269\u5c55\u540d\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f6f\u8fde\u63a5\u65b9\u5f0f\u6216\u8005\u5305\u542b exec \"$0.py\" \"$@\" \u7684\u7b80\u5355\u5305\u88c5\u811a\u672c\u3002 3.16.4 \u57fa\u4e8e Guido\u2019s \u63a8\u8350\u7684\u6d3e\u751f\u51c6\u5219 Type Public Internal Packages lower_with_under Modules lower_with_under _lower_with_under Classes CapWords _CapWords Exceptions CapWords Functions lower_with_under() _lower_with_under() Global/Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER Global/Class Variables lower_with_under _lower_with_under Instance Variables lower_with_under _lower_with_under (protected) Method Names lower_with_under() _lower_with_under() (protected) Function/Method Parameters lower_with_under Local Variables lower_with_under 3.16.5 \u6570\u5b66\u7b26\u53f7 \u5bf9\u4e8e\u504f\u6570\u5b66\u8fd0\u7b97\u7684\u4ee3\u7801\uff0c\u5f53\u5b83\u4eec\u5339\u914d\u53c2\u8003\u8bba\u6587\u6216\u7b97\u6cd5\u4e2d\u5df2\u5efa\u7acb\u7684\u7b26\u53f7\u65f6\uff0c\u8f83\u77ed\u7684\u53d8\u91cf\u540d\u4f1a\u8fdd\u53cd\u6837\u5f0f\u6307\u5357\u3002\u6267\u884c\u6b64\u64cd\u4f5c\u65f6\uff0c\u8bf7\u5728\u6ce8\u91ca\u6216\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u5f15\u7528\u6240\u6709\u547d\u540d\u7ea6\u5b9a\u7684\u6765\u6e90\uff0c\u5982\u679c\u6765\u6e90\u65e0\u6cd5\u8bbf\u95ee\uff0c\u8bf7\u6e05\u695a\u5730\u8bb0\u5f55\u547d\u540d\u7ea6\u5b9a\u3002\u5bf9\u4e8e\u516c\u5171 API\uff0c\u6700\u597d\u4f7f\u7528\u7b26\u5408 PEP8 \u7684\u63cf\u8ff0\u6027\u540d\u79f0\uff08 descriptive_names \uff09\uff0c\u8fd9\u6837\u66f4\u5bb9\u6613\u8131\u79bb\u4e0a\u4e0b\u6587\u3002 3.17 Main \u5728 Python \u4e2d\uff0c pydoc \u4ee5\u53ca\u5355\u5143\u6d4b\u8bd5\u8981\u6c42\u6a21\u5757\u5fc5\u987b\u662f\u53ef\u5bfc\u5165\u7684\u3002\u5982\u679c\u6587\u4ef6\u6253\u7b97\u4f5c\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u4f7f\u7528\uff0c\u90a3\u4e48\u5b83\u7684\u4e3b\u8981\u529f\u80fd\u5e94\u8be5\u653e\u5728 main() \u51fd\u6570\u4e2d\u3002\u4f60\u7684\u4ee3\u7801\u5e94\u8be5\u5728\u6267\u884c\u4e3b\u7a0b\u5e8f\u524d\u603b\u662f\u68c0\u67e5 if __name__ == '__main__' \uff0c\u8fd9\u6837\u5f53\u6a21\u5757\u88ab\u5bfc\u5165\u65f6\u4e3b\u7a0b\u5e8f\u5c31\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u5f53\u4f7f\u7528 absl \u65f6\uff0c\u8bf7\u4f7f\u7528 app.run \uff1a from absl import app ... def main ( argv ): # process non-flag arguments ... if __name__ == '__main__' : app . run ( main ) \u6216\u8005\uff1a def main (): ... if __name__ == '__main__' : main () \u6240\u6709\u7684\u9876\u7ea7\u4ee3\u7801\u5728\u6a21\u5757\u5bfc\u5165\u65f6\u90fd\u4f1a\u88ab\u6267\u884c\u3002\u8981\u5c0f\u5fc3\u4e0d\u8981\u53bb\u8c03\u7528\u51fd\u6570\u3001\u521b\u5efa\u5bf9\u8c61\u6216\u8005\u6267\u884c\u90a3\u4e9b\u4e0d\u5e94\u8be5\u5728\u4f7f\u7528 pydoc \u65f6\u6267\u884c\u7684\u64cd\u4f5c\u3002 3.18 \u51fd\u6570\u957f\u5ea6 \u559c\u6b22\u5c0f\u800c\u7f8e\u7684\u51fd\u6570\u3002 \u957f\u51fd\u6570\u6709\u65f6\u5019\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u5bf9\u51fd\u6570\u7684\u957f\u5ea6\u6ca1\u6709\u786c\u6027\u9650\u5236\u3002\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u8d85\u8fc7\u4e8640\u884c\uff0c\u5c31\u9700\u8981\u601d\u8003\u4e00\u4e0b\uff0c\u5728\u4e0d\u7834\u574f\u7a0b\u5e8f\u7ed3\u6784\u7684\u60c5\u51b5\u4e0b\u662f\u5426\u9700\u8981\u62c6\u5206\u3002 \u5373\u4f7f\u4f60\u7684\u957f\u51fd\u6570\u73b0\u5728\u8fd0\u884c\u826f\u597d\uff0c\u5c06\u6765\u4fee\u6539\u5b83\u7684\u4eba\u4e5f\u53ef\u80fd\u4f1a\u6dfb\u52a0\u65b0\u7684\u529f\u80fd\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4 BUG \u5f88\u96be\u67e5\u627e\u3002\u4fdd\u6301\u51fd\u6570\u7684\u7b80\u77ed\u548c\u7b80\u5355\u53ef\u4ee5\u4f7f\u5176\u4ed6\u4eba\u66f4\u5bb9\u6613\u9605\u8bfb\u548c\u4fee\u6539\u4f60\u7684\u4ee3\u7801\u3002 \u5728\u5904\u7406\u67d0\u4e9b\u4ee3\u7801\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u957f\u5e76\u4e14\u590d\u6742\u7684\u51fd\u6570\u3002\u5148\u4e0d\u8981\u88ab\u4fee\u6539\u8fd9\u4e9b\u4ee3\u7801\u6240\u5413\u5012\uff1a\u5982\u679c\u611f\u5230\u51fd\u6570\u4f7f\u7528\u56f0\u96be\uff0c\u9519\u8bef\u4e5f\u5f88\u96be\u8c03\u8bd5\uff0c\u6216\u8005\u60f3\u5728\u51e0\u4e2a\u4e0d\u540c\u7684\u5730\u65b9\u4f7f\u7528\u76f8\u540c\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u8003\u8651\u5c06\u51fd\u6570\u62c6\u5206\u6210\u66f4\u5c0f\u548c\u66f4\u6613\u4e8e\u7ba1\u7406\u7684\u4ee3\u7801\u6bb5\u3002 3.19 \u7c7b\u578b\u6807\u6ce8 3.19.1 \u901a\u7528\u89c4\u5219 \u719f\u6089 PEP-484 \u5728\u65b9\u6cd5\u4e2d\uff0c\u53ea\u6709\u5728\u9700\u8981\u6b63\u786e\u7684\u7c7b\u578b\u4fe1\u606f\u65f6\u624d\u6807\u6ce8 self \u6216 cls \u3002\u4f8b\u5982\uff1a @classmethod def create ( cls : Type [ T ]) -> T : return cls () \u5982\u679c\u65e0\u6cd5\u8868\u793a\u4efb\u4f55\u5176\u4ed6\u53d8\u91cf\u6216\u8fd4\u56de\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528 Any \u3002 \u4f60\u4e0d\u9700\u8981\u6807\u6ce8\u6a21\u5757\u4e2d\u7684\u6240\u6709\u51fd\u6570\u3002 \u81f3\u5c11\u8981\u6807\u6ce8\u516c\u5171 API\u3002 \u5728\u5b89\u5168\u6027\u548c\u6e05\u6670\u6027\u4e0e\u7075\u6d3b\u6027\u4e4b\u95f4\u627e\u5230\u4e00\u4e2a\u5e73\u8861\u70b9\u3002 \u6807\u6ce8\u90a3\u4e9b\u5bb9\u6613\u51fa\u73b0\u7c7b\u578b\u76f8\u5173\u9519\u8bef\uff08\u4ee5\u524d\u7684 BUG \u6216\u590d\u6742\u6027\uff09\u7684\u4ee3\u7801 \u6807\u6ce8\u90a3\u4e9b\u96be\u4ee5\u7406\u89e3\u7684\u4ee3\u7801\u3002 \u6807\u6ce8\u90a3\u4e9b\u4ece\u7c7b\u578b\u7684\u89d2\u5ea6\u6765\u770b\u5df2\u7ecf\u7a33\u5b9a\u7684\u4ee3\u7801\u3002\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5728\u7a33\u5b9a\u7684\u4ee3\u7801\u4e2d\u6807\u6ce8\u6240\u6709\u51fd\u6570\uff0c\u800c\u4e0d\u4f1a\u5931\u53bb\u592a\u591a\u7075\u6d3b\u6027\u3002 3.19.2 \u65ad\u884c \u9075\u5faa\u73b0\u6709 \u7f29\u8fdb\u89c4\u5219 \u3002 \u5728\u6807\u6ce8\u4e4b\u540e\uff0c\u8bb8\u591a\u51fd\u6570\u7b7e\u540d\u5c06\u53d8\u6210\u201c\u6bcf\u884c\u4e00\u4e2a\u53c2\u6570\u201d\u3002 def my_method ( self , first_var : int , second_var : Foo , third_var : Optional [ Bar ]) -> int : ... \u5c3d\u91cf\u5728\u53d8\u91cf\u4e4b\u95f4\u65ad\u884c\uff0c\u4e0d\u8981\u5728\u53d8\u91cf\u540d\u548c\u7c7b\u578b\u6807\u6ce8\u4e4b\u95f4\u65ad\u884c\u3002\u5982\u679c\u6240\u6709\u5185\u5bb9\u90fd\u5728\u4e00\u884c\u4e0a\uff0c\u5c31\u4e0d\u8981\u7ba1\u4e86\u3002 def my_method ( self , first_var : int ) -> int : ... \u5982\u679c\u51fd\u6570\u540d\u3001\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u7ec4\u5408\u8d77\u6765\u592a\u957f\u4e86\uff0c\u53ef\u4ee5\u65b0\u6362\u4e00\u884c\u5e76\u7f29\u8fdb4\u4e2a\u5b57\u7b26\u3002 def my_method ( self , first_var : int ) -> Tuple [ MyLongType1 , MyLongType1 ]: ... \u5f53\u8fd4\u56de\u7c7b\u578b\u4e0e\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4e0d\u5728\u540c\u4e00\u884c\u65f6\uff0c\u63a8\u8350\u7684\u505a\u6cd5\u662f\u5728\u65b0\u884c\u4e2d\u5c06\u53c2\u6570\u7f29\u8fdb4\u4e2a\u5b57\u7b26\uff0c\u5e76\u5c06\u53f3\u62ec\u53f7\u4e0e def \u5bf9\u9f50\u3002 \u63a8\u8350 def my_method ( self , other_arg : Optional [ MyLongType ] ) -> Dict [ OtherLongType , MyLongType ]: ... Pylint \u5141\u8bb8\u60a8\u5c06\u53f3\u62ec\u53f7\u79fb\u5230\u65b0\u884c\uff0c\u5e76\u4e0e\u5de6\u62ec\u53f7\u5bf9\u9f50\uff0c\u4f46\u8fd9\u4e48\u505a\u53ef\u8bfb\u6027\u4f1a\u6bd4\u8f83\u5dee\u3002 \u4e0d\u63a8\u8350 def my_method ( self , other_arg : Optional [ MyLongType ] ) -> Dict [ OtherLongType , MyLongType ]: ... \u5c31\u50cf\u4e0a\u9762\u7684\u4f8b\u5b50\u4e00\u6837\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u622a\u65ad\u7c7b\u578b\u3002\u4f46\u662f\uff0c\u6709\u65f6\u5019\u5b83\u4eec\u653e\u5728\u4e00\u884c\u4e0a\u5b9e\u5728\u592a\u957f\u4e86\uff08\u5c3d\u91cf\u4fdd\u6301\u5b50\u7c7b\u578b\u4e0d\u88ab\u622a\u65ad\uff09\uff1a def my_method ( self , first_var : Tuple [ List [ MyLongType1 ], List [ MyLongType2 ]], second_var : List [ Dict [ MyLongType3 , MyLongType4 ]]) -> None : ... \u5982\u679c\u5355\u4e2a\u540d\u79f0\u548c\u7c7b\u578b\u592a\u957f\uff0c\u8bf7\u8003\u8651\u4f7f\u7528\u7c7b\u578b\u7684\u522b\u540d\u3002\u6700\u540e\u4e00\u79cd\u65b9\u6cd5\u662f\u5728\u5192\u53f7\u540e\u9762\u622a\u65ad\uff0c\u5e76\u7f29\u8fdb4\u4e2a\u5b57\u7b26\u3002 \u63a8\u8350 def my_function ( long_variable_name : long_module_name . LongTypeName , ) -> None : ... \u4e0d\u63a8\u8350 def my_function ( long_variable_name : long_module_name . LongTypeName , ) -> None : ... 3.19.3 \u524d\u7f6e\u58f0\u660e \u5982\u679c\u4f60\u9700\u8981\u5728\u540c\u4e00\u6a21\u5757\u4e2d\u4f7f\u7528\u6ca1\u6709\u5b9a\u4e49\u7684\u7c7b\u540d\uff08\u4f8b\u5982\uff0c\u9700\u8981\u5728\u58f0\u660e\u7c7b\u4e2d\u4f7f\u7528\u7c7b\u540d\uff0c\u6216\u8005\u7c7b\u4f3c\u4e0b\u9762\u7684\u5b9a\u4e49\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u4f5c\u4e3a\u7c7b\u540d\u3002 class MyClass : def __init__ ( self , stack : List [ \"MyClass\" ]) -> None : 3.19.4 \u9ed8\u8ba4\u503c \u6839\u636e PEP-008 \uff0c\u4ec5\u5728\u540c\u65f6\u5177\u6709\u7c7b\u578b\u6807\u6ce8\u548c\u9ed8\u8ba4\u503c\u53c2\u6570\u7684 = \u5de6\u53f3\u4e24\u8fb9\u4f7f\u7528\u7a7a\u683c\u3002 \u63a8\u8350 def func ( a : int = 0 ) -> int : ... \u4e0d\u63a8\u8350 def func ( a : int = 0 ) -> int : ... 3.19.5 NoneType \u5728 Python \u7c7b\u578b\u7cfb\u7edf\u4e2d\uff0c NoneType \u662f\u201c\u7b2c\u4e00\u7c7b\uff08first class\uff09\u201d\u7c7b\u578b\uff0c\u800c\u4e14\u4e3a\u4e86\u65b9\u4fbf\u62fc\u5199\uff0c\u5b9a\u4e49\u4e86 None \u4f5c\u4e3a NoneType \u7684\u522b\u540d\u3002\u5982\u679c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u4e3a None \uff0c\u5c31\u5fc5\u987b\u58f0\u660e\u5b83\uff01\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 Union \uff0c\u4f46\u5982\u679c\u53ea\u6709\u4e00\u79cd\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528 Optional \u3002 \u4f7f\u7528\u663e\u5f0f Optional \u66ff\u4ee3\u9690\u5f0f Optional \u3002PEP-484 \u7684\u65e9\u671f\u7248\u672c\u5141\u8bb8\u5c06 a: str = None \u89e3\u91ca\u4e3a a: Optional[str] = None \uff0c\u4f46\u73b0\u5728\u5df2\u7ecf\u4e0d\u63a8\u8350\u4e86\u3002 \u63a8\u8350 def func ( a : Optional [ str ], b : Optional [ str ] = None ) -> str : ... def multiple_nullable_union ( a : Union [ None , str , int ]) -> str ... \u4e0d\u63a8\u8350 def nullable_union ( a : Union [ None , str ]) -> str : ... def implicit_optional ( a : str = None ) -> str : ... 3.19.6 \u7c7b\u578b\u522b\u540d \u53ef\u4ee5\u4e3a\u590d\u6742\u7c7b\u578b\u58f0\u660e\u522b\u540d\u3002\u522b\u540d\u5e94\u8be5\u662f\u5927\u5199\u7684\uff08 CapWorded \uff09\u3002\u5982\u679c\u522b\u540d\u4ec5\u5728\u6a21\u5757\u4e2d\u4f7f\u7528\uff0c\u90a3\u4e48\u5e94\u8be5\u4f7f\u7528\u524d\u7f6e\u4e0b\u5212\u7ebf\u8ba9\u5176\u53d8\u6210\u79c1\u6709\u7684\uff08\u5982 _Private \uff09\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6a21\u5757\u540d\u79f0\u548c\u7c7b\u578b\u5728\u4e00\u8d77\u592a\u957f\u4e86\uff1a _ShortName = module_with_long_name . TypeWithLongName ComplexMap = Mapping [ Text , List [ Tuple [ int , int ]]] \u5176\u4ed6\u4f8b\u5b50\u8fd8\u6709\u590d\u6742\u7684\u5d4c\u5957\u7c7b\u578b\u548c\u51fd\u6570\u7684\u591a\u4e2a\u8fd4\u56de\u53d8\u91cf\uff08\u4f5c\u4e3a\u5143\u7ec4\uff09\u3002 3.19.7 \u5ffd\u7565\u7c7b\u578b \u53ef\u4ee5\u5728\u884c\u4e0a\u4f7f\u7528\u7279\u6b8a\u6ce8\u91ca # type: ignore \u7981\u7528\u7c7b\u578b\u68c0\u67e5\u3002 pytype \u6709\u4e00\u4e2a\u9488\u5bf9\u7279\u5b9a\u9519\u8bef\u7684\u7981\u7528\u9009\u9879\uff08\u7c7b\u4f3c\u4e8e lint\uff09 # pytype: disable=attribute-error 3.19.8 \u6807\u6ce8\u53d8\u91cf \u5982\u679c\u5185\u90e8\u53d8\u91cf\u7684\u7c7b\u578b\u5f88\u96be\u63a8\u65ad\u6216\u8005\u65e0\u6cd5\u63a8\u65ad\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u6307\u5b9a\u5176\u7c7b\u578b\u3002 \u7c7b\u578b\u6ce8\u91ca \u5728\u884c\u672b\u5c3e\u4f7f\u7528 # type: \u7c7b\u578b\u6ce8\u91ca\u3002 a = SomeUndecoratedFunction () # type: Foo \u8d4b\u503c\u6807\u6ce8 \u5728\u53d8\u91cf\u540d\u548c\u503c\u4e4b\u95f4\u4f7f\u7528\u5192\u53f7\u548c\u7c7b\u578b\uff0c\u5c31\u50cf\u51fd\u6570\u53c2\u6570\u4e00\u6837\uff1a a : Foo = SomeUndecoratedFunction () 3.19.9 \u5143\u7ec4 vs \u5217\u8868 \u7c7b\u578b\u5316\u5217\u8868\u53ea\u80fd\u5305\u542b\u5355\u4e00\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u7c7b\u578b\u5316\u5143\u7ec4\u53ef\u4ee5\u5177\u6709\u5355\u4e2a\u91cd\u590d\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u5177\u6709\u4e00\u7ec4\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\u3002\u540e\u8005\u901a\u5e38\u7528\u4f5c\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002 a = [ 1 , 2 , 3 ] # type: List[int] b = ( 1 , 2 , 3 ) # type: Tuple[int, ...] c = ( 1 , \"2\" , 3.5 ) # type: Tuple[int, str, float] 3.19.10 TypeVars Python \u7c7b\u578b\u7cfb\u7edf\u4e2d\u6709 \u6cdb\u578b \uff0c\u5de5\u5382\u51fd\u6570 TypeVar \u662f\u4f7f\u7528\u5b83\u4eec\u7684\u5e38\u7528\u65b9\u6cd5\u3002 \u4f8b\u5982\uff1a from typing import List , TypeVar T = TypeVar ( \"T\" ) ... def next ( l : List [ T ]) -> T : return l . pop () TypeVar \u53ef\u4ee5\u88ab\u7ea6\u675f\uff1a AddableType = TypeVar ( \"AddableType\" , int , float , str ) def add ( a : AddableType , b : AddableType ) -> AddableType : return a + b typing \u6a21\u5757\u4e2d\u4e00\u4e2a\u5e38\u89c1\u7684\u9884\u5b9a\u4e49\u7c7b\u578b\u53d8\u91cf\u662f AnyStr \u3002\u53ef\u4ee5\u7528\u4e8e\u6807\u6ce8 bytes \u6216 unicode \uff0c\u4f46\u662f\u5fc5\u987b\u662f\u5728\u76f8\u540c\u7c7b\u578b\u4e2d\u4f7f\u7528\u3002 from typing import AnyStr def check_length ( x : AnyStr ) -> AnyStr : if len ( x ) <= 42 : return x raise ValueError () 3.19.11 \u5b57\u7b26\u4e32\u7c7b\u578b \u60f3\u8981\u6b63\u786e\u7684\u6807\u6ce8\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u53d6\u51b3\u4e8e\u4ee3\u7801\u5c06\u4f7f\u7528\u54ea\u4e2a\u7248\u672c\u7684 Python \u3002 \u5bf9\u4e8e Python 3 \u4ee3\u7801\uff0c\u6700\u597d\u4f7f\u7528 str \u3002 Text \u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4f7f\u7528\u65f6\u8bf7\u4fdd\u6301\u4e00\u81f4\u6027\u3002 \u5bf9\u4e8e\u8981\u517c\u5bb9 Python 2 \u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u4f7f\u7528 Text \u3002\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 str \u53ef\u80fd\u662f\u6709\u610f\u4e49\u7684\uff1b\u901a\u5e38\uff0c\u5f53\u4e24\u4e2a Python \u7248\u672c\u4e4b\u95f4\u7684\u8fd4\u56de\u7c7b\u578b\u4e0d\u540c\u65f6\uff0c\u53ef\u4ee5\u63d0\u9ad8\u517c\u5bb9\u6027\u3002 \u907f\u514d\u4f7f\u7528 unicode \uff0c\u56e0\u4e3a\u5b83\u5728 Python 3 \u4e2d\u4e0d\u5b58\u5728\u3002 \u4e4b\u6240\u4ee5\u5b58\u5728\u8fd9\u79cd\u5dee\u5f02\uff0c\u662f\u56e0\u4e3a str \u7684\u542b\u4e49\u548c Python \u7248\u672c\u6709\u5173\u3002 \u4e0d\u63a8\u8350 def py2_code ( x : str ) -> unicode : ... \u5bf9\u4e8e\u5904\u7406\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u4ee3\u7801\uff0c\u8bf7\u4f7f\u7528 bytes \uff1a def deals_with_binary_data ( x : bytes ) -> bytes : ... \u5bf9\u4e8e\u5904\u7406\u6587\u672c\u6570\u636e\u7684 python 2 \u517c\u5bb9\u4ee3\u7801\uff08Python 2 \u4e2d\u7684 str \u6216 unicode \uff0cPython 3 \u4e2d\u7684 str \uff09\uff0c\u8bf7\u4f7f\u7528 Text \u3002\u5bf9\u4e8e\u4ec5\u5904\u7406\u6587\u672c\u6570\u636e\u7684 python 3 \u4ee3\u7801\uff0c\u9996\u9009 str \u3002 from typing import Text ... def py2_compatible ( x : Text ) -> Text : ... def py3_only ( x : str ) -> str : ... \u5982\u679c\u7c7b\u578b\u53ef\u4ee5\u662f bytes \u6216 text \uff0c\u8bf7\u4f7f\u7528 Unicode \u548c\u9002\u5f53\u7684\u6587\u672c\u7c7b\u578b\u3002 from typing import Text , Union ... def py2_compatible ( x : Union [ bytes , Text ]) -> Union [ bytes , Text ]: ... def py3_only ( x : Union [ bytes , str ]) -> Union [ bytes , str ]: ... \u5982\u679c\u51fd\u6570\u7684\u6240\u6709\u5b57\u7b26\u4e32\u7c7b\u578b\u59cb\u7ec8\u76f8\u540c\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u8fd4\u56de\u7c7b\u578b\u4e0e\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7684\u53c2\u6570\u7c7b\u578b\u76f8\u540c\uff0c\u5219\u4f7f\u7528 AnyStr\u3002 \u8fd9\u6837\u7f16\u5199\u53ef\u4ee5\u7b80\u5316\u5c06\u4ee3\u7801\u79fb\u690d\u5230 python 3 \u7684\u8fc7\u7a0b\u3002 3.19.12 \u7c7b\u578b\u5bfc\u5165 \u5bf9\u4e8e typing \u6a21\u5757\u4e2d\u7684\u7c7b\uff0c\u8bf7\u59cb\u7ec8\u5bfc\u5165\u7c7b\u672c\u8eab\u3002\u660e\u786e\u5141\u8bb8\u5728\u4e00\u884c\u4e0a\u4ece typing \u6a21\u5757\u5bfc\u5165\u591a\u4e2a\u7279\u5b9a\u7684\u7c7b\u3002\u4f8b\u5982\uff1a from typing import Any , Dict , Optional \u65e2\u7136\u8fd9\u79cd\u4ece typing \u6a21\u5757\u5bfc\u5165\u7684\u65b9\u5f0f\u4f1a\u5c06\u5bfc\u5165\u9879\u6dfb\u52a0\u5230\u672c\u5730\u547d\u540d\u7a7a\u95f4\uff0c \u90a3\u4e48 typing \u4e2d\u7684\u4efb\u4f55\u540d\u79f0\u90fd\u5e94\u8be5\u7c7b\u4f3c\u4e8e\u5173\u952e\u5b57\uff0c\u800c\u4e14\u4e0d\u8981\u5728\u4f60\u7684 Python \u4ee3\u7801\u4e2d\u53bb\u5b9a\u4e49\uff08\u65e0\u8bba\u662f\u5426\u6709\u7c7b\u578b\uff09\u3002\u5982\u679c\u6a21\u5757\u4e2d\u7684\u7c7b\u578b\u548c\u73b0\u6709\u540d\u79f0\u4e4b\u95f4\u5b58\u5728\u51b2\u7a81\uff0c\u8bf7\u4f7f\u7528 import x as y \u5bfc\u5165\u3002 from typing import Any as AnyType 3.19.13 \u6761\u4ef6\u5bfc\u5165 \u4ec5\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u624d\u4f7f\u7528\u6761\u4ef6\u5bfc\u5165\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u907f\u514d\u7c7b\u578b\u68c0\u67e5\u6240\u9700\u7684\u5176\u4ed6\u5bfc\u5165\u3002\u4e0d\u63a8\u8350\u8fd9\u79cd\u65b9\u5f0f\uff1b\u5e94\u8be5\u9996\u9009\u5176\u4ed6\u65b9\u6cd5\uff0c\u6bd4\u5982\u91cd\u6784\u4ee3\u7801\u4ee5\u5141\u8bb8\u9876\u7ea7\u5bfc\u5165\u3002 \u53ef\u4ee5\u5c06\u4ec5\u7528\u4e8e\u7c7b\u578b\u6807\u6ce8\u7684\u5bfc\u5165\u653e\u5728 if TYPE_CHECKING: \u4ee3\u7801\u5757\u4e2d\u3002 \u6709\u6761\u4ef6\u5bfc\u5165\u7684\u7c7b\u578b\u9700\u8981\u4f5c\u4e3a\u5b57\u7b26\u4e32\u5f15\u7528\uff0c\u4ee5\u4fbf\u6807\u6ce8\u8868\u8fbe\u5f0f\u5b9e\u9645\u8fd0\u884c\u65f6\u80fd\u5411\u524d\u517c\u5bb9 Python 3.6\u3002 \u8fd9\u91cc\u53ea\u5e94\u8be5\u5b9a\u4e49\u7528\u4e8e\u7c7b\u578b\u6807\u6ce8\u7684\u5b9e\u4f53\uff1b\u5305\u62ec\u522b\u540d\u3002\u5426\u5219\u5c06\u4f1a\u6709\u4e00\u4e2a\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u56e0\u4e3a\u6a21\u5757\u5c06\u4e0d\u4f1a\u5728\u8fd0\u884c\u65f6\u5bfc\u5165\u3002 \u6240\u6709\u6b63\u5e38\u5bfc\u5165\u540e\u7684\u4ee3\u7801\u5757\u5e94\u8be5\u662f\u6b63\u786e\u7684\u3002 \u7c7b\u578b\u5bfc\u5165\u5217\u8868\u4e2d\u4e0d\u5e94\u8be5\u6709\u7a7a\u884c\u3002 \u5c06\u6b64\u5217\u8868\u6309\u7167\u5e38\u89c4\u5bfc\u5165\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 import typing if typing . TYPE_CHECKING : import sketch def f ( x : \"sketch.Sketch\" ): ... 3.19.14 \u5faa\u73af\u4f9d\u8d56 \u7531\u7c7b\u578b\u5f15\u8d77\u7684\u5faa\u73af\u4f9d\u8d56\u662f\u4e00\u79cd\u4ee3\u7801\u5473\u9053\u3002\u8fd9\u4e9b\u4ee3\u7801\u9700\u8981\u8fdb\u884c\u91cd\u6784\u3002\u867d\u7136\u5728\u6280\u672f\u4e0a\u53ef\u4ee5\u4fdd\u6301\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f46\u662f\u5404\u79cd\u6784\u5efa\u7cfb\u7edf\u4e0d\u5141\u8bb8\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6a21\u5757\u90fd\u5fc5\u987b\u4f9d\u8d56\u4e8e\u5176\u4ed6\u6a21\u5757\u3002 \u5c06\u5f15\u8d77\u5faa\u73af\u4f9d\u8d56\u5bfc\u5165\u7684\u6a21\u5757\u66ff\u6362\u4e3a Any \u3002\u8bbe\u7f6e\u4e00\u4e2a\u6709\u610f\u4e49\u7684 \u522b\u540d \uff0c\u5e76\u4f7f\u7528\u6b64\u6a21\u5757\u4e2d\u7684\u5b9e\u9645\u7c7b\u578b\u540d\u79f0\uff08Any \u7684\u4efb\u4f55\u5c5e\u6027\u90fd\u662f Any\uff09\u3002\u522b\u540d\u5b9a\u4e49\u5e94\u8be5\u4e0e\u6700\u540e\u5bfc\u5165\u5206\u5f00\u4e00\u884c\u3002 from typing import Any some_mod = Any # some_mod.py imports this module. ... def my_method ( self , var : \"some_mod.SomeType\" ) -> None : ... 3.19.15 \u6cdb\u578b \u8fdb\u884c\u6807\u6ce8\u65f6\uff0c\u6700\u597d\u4e3a\u6cdb\u578b\u7c7b\u578b\u6307\u5b9a\u7c7b\u578b\u53c2\u6570\uff1b\u5426\u5219\uff0c \u6cdb\u578b\u53c2\u6570\u5c06\u88ab\u5047\u5b9a\u4e3a Any \u3002 def get_names ( employee_ids : List [ int ]) -> Dict [ int , Any ]: ... # These are both interpreted as get_names(employee_ids: List[Any]) -> Dict[Any, Any] def get_names ( employee_ids : list ) -> Dict : ... def get_names ( employee_ids : List ) -> Dict : ... \u5982\u679c\u6cdb\u578b\u7684\u6700\u4f73\u7c7b\u578b\u53c2\u6570\u662f Any \uff0c\u8bf7\u4f7f\u7528\u663e\u5f0f\u8bbe\u7f6e\u3002\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b TypeVar \u53ef\u80fd\u66f4\u5408\u9002\u3002 def get_names ( employee_ids : List [ Any ]) -> Dict [ Any , Text ]: \"\"\"Returns a mapping from employee ID to employee name for given IDs.\"\"\" T = TypeVar ( 'T' ) def get_names ( employee_ids : List [ T ]) -> Dict [ T , Text ]: \"\"\"Returns a mapping from employee ID to employee name for given IDs.\"\"\"","title":"\u98ce\u683c\u89c4\u8303"},{"location":"standard/style_rules/#python","text":"\u672c\u6587\u6863\u4e3a Google Python Style Guide \u7b2c\u4e8c\u7ae0 Python Style Rules \u7684\u8bd1\u6587\u3002 \u6700\u540e\u66f4\u65b0\u65f6\u95f4\uff1a 2021-05-12 \u5982\u679c\u6709\u7ffb\u8bd1\u9519\u8bef\u6216\u8868\u8ff0\u4e0d\u51c6\u786e\u7684\u95ee\u9898\uff0c\u6b22\u8fce\u63d0\u4ea4 PR\uff0c\u611f\u8c22\u60a8\u7684\u53c2\u4e0e\u3002","title":"Python \u98ce\u683c\u89c4\u8303"},{"location":"standard/style_rules/#31","text":"\u4e0d\u8981\u5728\u884c\u5c3e\u52a0\u5206\u53f7\uff0c\u4e5f\u4e0d\u8981\u7528\u5206\u53f7\u5c06\u4e24\u6761\u547d\u4ee4\u653e\u5728\u540c\u4e00\u884c\u3002","title":"3.1 \u5206\u53f7"},{"location":"standard/style_rules/#32","text":"\u6bcf\u884c\u4e0d\u8d85\u8fc780\u4e2a\u5b57\u7b26\u3002 \u4f8b\u5916\uff1a \u957f\u7684\u5bfc\u5165\u6a21\u5757\u8bed\u53e5 \u6ce8\u91ca\u91cc\u7684 URL \u3001\u8def\u5f84\u540d\u548c\u957f\u6807\u8bc6 \u4e0d\u5305\u542b\u7a7a\u683c\uff0c\u4e0d\u65b9\u4fbf\u8de8\u884c\u62c6\u5206\u7684\u957f\u5b57\u7b26\u4e32\u6a21\u5757\u7ea7\u5e38\u91cf\uff0c\u5982 URL \u6216\u8def\u5f84\u540d Pylint \u7981\u7528\u6ce8\u91ca\u3002\uff08\u4f8b\u5982\uff1a # pylint: disable=invalid-name \uff09 \u9664\u975e with \u8bed\u53e5\u9700\u8981\u4e09\u4e2a\u6216\u66f4\u591a\u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5426\u5219\u4e0d\u8981\u4f7f\u7528\u53cd\u659c\u6760\u8fde\u63a5\u884c\u3002 Python \u4f1a\u5c06 \u5706\u62ec\u53f7\u3001\u65b9\u62ec\u53f7\u548c\u82b1\u62ec\u53f7\u4e2d\u7684\u884c\u9690\u5f0f\u7684\u8fde\u63a5\u8d77\u6765 \uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7279\u70b9 \u3002\u5982\u679c\u9700\u8981\uff0c\u4f60\u53ef\u4ee5\u5728\u8868\u8fbe\u5f0f\u5916\u56f4\u589e\u52a0\u4e00\u5bf9\u989d\u5916\u7684\u5706\u62ec\u53f7\u3002 \u63a8\u8350 foo_bar ( self , width , height , color = 'black' , design = None , x = 'foo' , emphasis = None , highlight = 0 ) if ( width == 0 and height == 0 and color == 'red' and emphasis == 'strong' ): \u5982\u679c\u4e00\u4e2a\u6587\u672c\u5b57\u7b26\u4e32\u5728\u4e00\u884c\u653e\u4e0d\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u5706\u62ec\u53f7\u6765\u5b9e\u73b0\u9690\u5f0f\u884c\u8fde\u63a5\u3002 x = ( 'This will build a very long long ' 'long long long long long long string' ) \u5728\u6ce8\u91ca\u4e2d\uff0c\u5982\u679c\u5fc5\u8981\uff0c\u5c06\u957f\u7684 URL \u653e\u5728\u4e00\u884c\u4e0a\u3002 \u63a8\u8350 # See details at # http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html \u4e0d\u63a8\u8350 # See details at # http://www.example.com/us/developer/documentation/api/content/\\ # v2.0/csv_file_name_extension_full_specification.html \u5728\u5b9a\u4e49\u8868\u8fbe\u5f0f\u8de8\u8d8a\u4e09\u884c\u6216\u66f4\u591a\u884c\u7684 with \u8bed\u53e5\u65f6\uff0c\u5141\u8bb8\u4f7f\u7528\u53cd\u659c\u6760\u8fde\u63a5\u3002\u5bf9\u4e8e\u4e24\u884c\u8868\u8fbe\u5f0f\uff0c\u8bf7\u4f7f\u7528\u5d4c\u5957 with \u8bed\u53e5\uff1a \u63a8\u8350 with very_long_first_expression_function () as spam , \\ very_long_second_expression_function () as beans , \\ third_thing () as eggs : place_order ( eggs , beans , spam , beans ) \u4e0d\u63a8\u8350 with VeryLongFirstExpressionFunction () as spam , \\ VeryLongSecondExpressionFunction () as beans : PlaceOrder ( eggs , beans , spam , beans ) \u63a8\u8350 with very_long_first_expression_function () as spam : with very_long_second_expression_function () as beans : place_order ( beans , spam ) \u6ce8\u610f\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u5143\u7d20\u7f29\u8fdb\u3002\u4f60\u53ef\u4ee5\u5728\u672c\u6587\u7684 \u7f29\u8fdb \u90e8\u5206\u627e\u5230\u89e3\u91ca\u3002 \u5728\u6240\u6709\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e00\u884c\u8d85\u8fc780\u4e2a\u5b57\u7b26\uff0c\u5e76\u4e14 yapf \u81ea\u52a8\u683c\u5f0f\u5316\u7a0b\u5e8f\u65e0\u6cd5\u5e2e\u52a9\u4f7f\u8be5\u884c\u4f4e\u4e8e\u9650\u5236\uff0c\u5219\u5141\u8bb8\u8be5\u884c\u8d85\u8fc7\u6b64\u6700\u5927\u503c\u3002\u5efa\u8bae\u4f5c\u8005\u5728\u5408\u7406\u7684\u60c5\u51b5\u4e0b\uff0c\u6839\u636e\u4e0a\u8ff0\u6ce8\u91ca\u624b\u52a8\u62c6\u5206\u884c\u3002","title":"3.2 \u884c\u957f\u5ea6"},{"location":"standard/style_rules/#33","text":"\u5b81\u7f3a\u6bcb\u6ee5\u7684\u4f7f\u7528\u62ec\u53f7\u3002 \u9664\u975e\u662f\u7528\u4e8e\u5b9e\u73b0\u884c\u8fde\u63a5\uff0c\u5426\u5219\u4e0d\u8981\u5728\u8fd4\u56de\u8bed\u53e5\u6216\u6761\u4ef6\u8bed\u53e5\u4e2d\u4f7f\u7528\u62ec\u53f7\uff0c\u4e0d\u8fc7\u5728\u5143\u7ec4\u4e24\u8fb9\u4f7f\u7528\u62ec\u53f7\u662f\u53ef\u4ee5\u7684\u3002 \u63a8\u8350 if foo : bar () while x : x = bar () if x and y : bar () if not x : bar () # For a 1 item tuple the ()s are more visually obvious than the comma. onesie = ( foo ,) return foo return spam , beans for x , y in dict . items (): ... \u4e0d\u63a8\u8350 if ( x ): bar () if not ( x ): bar () return ( foo ) return ( spam , beans ) for ( x , y ) in dict . items (): ...","title":"3.3 \u62ec\u53f7"},{"location":"standard/style_rules/#34","text":"\u75284\u4e2a\u7a7a\u683c\u6765\u7f29\u8fdb\u4ee3\u7801\u3002 \u7edd\u5bf9\u4e0d\u8981\u7528 tab \uff0c\u4e5f\u4e0d\u8981 tab \u548c\u7a7a\u683c\u6df7\u7528\u3002\u5bf9\u4e8e\u884c\u8fde\u63a5\u7684\u60c5\u51b5\uff0c\u4f60\u5e94\u8be5\u8981\u4e48\u5782\u76f4\u5bf9\u9f50\u6362\u884c\u7684\u5143\u7d20\uff08\u89c1 \u884c\u957f \u90e8\u5206\u7684\u793a\u4f8b\uff09\uff0c\u6216\u8005\u4f7f\u75284\u7a7a\u683c\u7684\u60ac\u6302\u5f0f\u7f29\u8fdb\uff08\u8fd9\u65f6\u7b2c\u4e00\u884c\u4e0d\u5e94\u8be5\u6709\u53c2\u6570\uff09\u3002 \u63a8\u8350 # Aligned with opening delimiter foo = long_function_name ( var_one , var_two , var_three , var_four ) meal = ( spam , beans ) # Aligned with opening delimiter in a dictionary foo = { long_dictionary_key : value1 + value2 , ... } # 4-space hanging indent; nothing on first line foo = long_function_name ( var_one , var_two , var_three , var_four ) meal = ( spam , beans ) # 4-space hanging indent in a dictionary foo = { long_dictionary_key : long_dictionary_value , ... } \u4e0d\u63a8\u8350 # Stuff on first line forbidden foo = long_function_name ( var_one , var_two , var_three , var_four ) meal = ( spam , beans ) # 2-space hanging indent forbidden foo = long_function_name ( var_one , var_two , var_three , var_four ) # No hanging indent in a dictionary foo = { long_dictionary_key : long_dictionary_value , ... }","title":"3.4 \u7f29\u8fdb"},{"location":"standard/style_rules/#341","text":"\u53ea\u6709\u5728\u5e8f\u5217\u7ed3\u675f\u7b26 ] \u3001 ) \u6216 } \u4e0e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0d\u5728\u540c\u4e00\u884c\u65f6\u624d\u5efa\u8bae\u4f7f\u7528\u3002\u672b\u5c3e\u9017\u53f7\u7684\u5b58\u5728\u8fd8\u7528\u4f5c\u5bf9\u4ee3\u7801\u81ea\u52a8\u683c\u5f0f\u5316\u7a0b\u5e8f YAPF \u7684\u63d0\u793a\uff0c\u4ee5\u5f15\u5bfc\u5b83\u5728\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u51fa\u73b0\u65f6\uff0c\u81ea\u52a8\u5c06\u5bb9\u5668\u4e2d\u6bcf\u4e2a\u6761\u76ee\u683c\u5f0f\u5316\u4e3a\u4e00\u884c\u3002 \u63a8\u8350 golomb3 = [ 0 , 1 , 3 ] golomb4 = [ 0 , 1 , 4 , 6 , ] \u4e0d\u63a8\u8350 golomb4 = [ 0 , 1 , 4 , 6 ]","title":"3.4.1 \u5728\u5e8f\u5217\u7684\u672b\u5c3e\u662f\u5426\u52a0\u9017\u53f7\uff1f"},{"location":"standard/style_rules/#35","text":"\u9876\u7ea7\u5b9a\u4e49\u4e4b\u95f4\u7a7a\u4e24\u884c, \u65b9\u6cd5\u5b9a\u4e49\u4e4b\u95f4\u7a7a\u4e00\u884c \u9876\u7ea7\u5b9a\u4e49\u4e4b\u95f4\u7a7a\u4e24\u884c\uff0c\u6bd4\u5982\u51fd\u6570\u6216\u8005\u7c7b\u5b9a\u4e49\u3002 \u65b9\u6cd5\u5b9a\u4e49\uff0c\u7c7b\u5b9a\u4e49\u4e0e\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u4e4b\u95f4\uff0c\u90fd\u5e94\u8be5\u7a7a\u4e00\u884c\u3002 \u5728 def \u51fd\u6570\u5b9a\u4e49\u4e4b\u540e\u4e0d\u9700\u8981\u7a7a\u884c\u3002 \u51fd\u6570\u6216\u65b9\u6cd5\u4e2d\uff0c\u67d0\u4e9b\u5730\u65b9\u8981\u662f\u4f60\u89c9\u5f97\u5408\u9002\uff0c\u5c31\u7a7a\u4e00\u884c\u3002","title":"3.5 \u7a7a\u884c"},{"location":"standard/style_rules/#36","text":"\u6309\u7167\u6807\u51c6\u7684\u6392\u7248\u89c4\u8303\u6765\u4f7f\u7528\u6807\u70b9\u4e24\u8fb9\u7684\u7a7a\u683c\u3002 \u62ec\u53f7\u5185\u4e0d\u8981\u6709\u7a7a\u683c\u3002 \u63a8\u8350 spam ( ham [ 1 ], { eggs : 2 }, []) \u4e0d\u63a8\u8350 spam ( ham [ 1 ], { eggs : 2 }, [ ] ) \u4e0d\u8981\u5728\u9017\u53f7\uff0c\u5206\u53f7\uff0c\u5192\u53f7\u524d\u9762\u52a0\u7a7a\u683c\u3002\u4f46\u5e94\u8be5\u5728\u5b83\u4eec\u540e\u9762\u52a0\uff08\u9664\u4e86\u5728\u884c\u5c3e\uff09\u3002 \u63a8\u8350 if x == 4 : print ( x , y ) x , y = y , x \u4e0d\u63a8\u8350 if x == 4 : print ( x , y ) x , y = y , x \u53c2\u6570\u5217\u8868\u3001\u7d22\u5f15\u6216\u5207\u7247\u7684\u5de6\u62ec\u53f7\u524d\u4e0d\u5e94\u52a0\u7a7a\u683c\u3002 \u63a8\u8350 spam ( 1 ) \u4e0d\u63a8\u8350 spam ( 1 ) \u63a8\u8350 dict [ 'key' ] = list [ index ] \u4e0d\u63a8\u8350 dict [ 'key' ] = list [ index ] \u884c\u5c3e\u4e0d\u9700\u8981\u7a7a\u683c\u3002 \u5728\u4e8c\u5143\u64cd\u4f5c\u7b26\u4e24\u8fb9\u90fd\u52a0\u4e0a\u4e00\u4e2a\u7a7a\u683c\uff0c\u6bd4\u5982\u8d4b\u503c\uff08 = \uff09\u3001\u6bd4\u8f83\uff08 == \u3001 < \u3001 > \u3001 != \u3001 <> \u3001 <= \u3001 >= \u3001 in \u3001 not in \u3001 is \u3001 is not \uff09\uff0c\u5e03\u5c14\uff08 and \u3001 or \u3001 not \uff09\u3002 \u81f3\u4e8e\u7b97\u672f\u64cd\u4f5c\u7b26\uff08 + \u3001 - \u3001 * \u3001 / \u3001 // \u3001 % \u3001 ** \u3001 @ \uff09\u4e24\u8fb9\u7684\u7a7a\u683c\u8be5\u5982\u4f55\u4f7f\u7528\uff0c\u9700\u8981\u4f60\u81ea\u5df1\u597d\u597d\u5224\u65ad\u3002\u4e0d\u8fc7\u4e24\u4fa7\u52a1\u5fc5\u8981\u4fdd\u6301\u4e00\u81f4\u3002 \u63a8\u8350 x == 1 \u4e0d\u63a8\u8350 x < 1 \u5f53 = \u7528\u4e8e\u6307\u793a\u5173\u952e\u5b57\u53c2\u6570\u6216\u9ed8\u8ba4\u53c2\u6570\u503c\u65f6\uff0c\u4e0d\u8981\u5728\u5176\u4e24\u4fa7\u4f7f\u7528\u7a7a\u683c\u3002\u4f46\u6709\u4e00\u4e2a\u4f8b\u5916\uff1a \u5f53\u5b58\u5728\u7c7b\u578b\u6ce8\u91ca\u65f6 \uff0c\u5728\u9ed8\u8ba4\u53c2\u6570\u503c\u7684 = \u5468\u56f4\u4f7f\u7528\u7a7a\u683c\u3002 \u63a8\u8350 def complex ( real , imag = 0.0 ): return Magic ( r = real , i = imag ) def complex ( real , imag : float = 0.0 ): return Magic ( r = real , i = imag ) \u4e0d\u63a8\u8350 def complex ( real , imag = 0.0 ): return Magic ( r = real , i = imag ) def complex ( real , imag : float = 0.0 ): return Magic ( r = real , i = imag ) \u4e0d\u8981\u7528\u7a7a\u683c\u6765\u5782\u76f4\u5bf9\u9f50\u591a\u884c\u95f4\u7684\u6807\u8bb0\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u9020\u6210\u7ef4\u62a4\u7684\u8d1f\u62c5\uff08\u9002\u7528\u4e8e : \u3001 # \u3001 = \u7b49\uff09\uff1a \u63a8\u8350 foo = 1000 # comment long_name = 2 # comment that should not be aligned dictionary = { 'foo' : 1 , 'long_name' : 2 , } \u4e0d\u63a8\u8350 foo = 1000 # comment long_name = 2 # comment that should not be aligned dictionary = { 'foo' : 1 , 'long_name' : 2 , }","title":"3.6 \u7a7a\u683c"},{"location":"standard/style_rules/#37-shebang","text":"\u5927\u90e8\u5206 .py \u6587\u4ef6\u4e0d\u5fc5\u4ee5 #! \u4f5c\u4e3a\u6587\u4ef6\u7684\u5f00\u59cb\u3002\u6839\u636e PEP-394 \uff0c\u7a0b\u5e8f\u7684 main \u6587\u4ef6\u5e94\u8be5\u4ee5 #!/usr/bin/env python3 \uff08\u7528\u4e8e\u652f\u6301\u865a\u62df\u73af\u5883\uff09\u6216\u8005 #!/usr/bin/python3 \u5f00\u59cb\u3002 \u5185\u6838\u4f7f\u7528\u8fd9\u4e00\u884c\u6765\u67e5\u627e Python \u89e3\u91ca\u5668\uff0c\u4f46\u662f Python \u5728\u5bfc\u5165\u6a21\u5757\u65f6\u4f1a\u5ffd\u7565\u8fd9\u4e00\u884c\u3002\u56e0\u6b64\u53ea\u6709\u5728\u6253\u7b97\u76f4\u63a5\u6267\u884c\u7684\u6587\u4ef6\u4e0a\u6dfb\u52a0\u624d\u6709\u5fc5\u8981\u3002","title":"3.7 Shebang"},{"location":"standard/style_rules/#38","text":"\u786e\u4fdd\u5bf9\u6a21\u5757, \u51fd\u6570, \u65b9\u6cd5\u548c\u884c\u5185\u6ce8\u91ca\u4f7f\u7528\u6b63\u786e\u7684\u98ce\u683c\u3002","title":"3.8 \u6ce8\u91ca\u548c\u6587\u6863\u5b57\u7b26\u4e32"},{"location":"standard/style_rules/#381","text":"Python \u6709\u4e00\u79cd\u72ec\u4e00\u65e0\u4e8c\u7684\u7684\u6ce8\u91ca\u65b9\u5f0f\uff1a \u4f7f\u7528\u6587\u6863\u5b57\u7b26\u4e32\u3002\u6587\u6863\u5b57\u7b26\u4e32\u662f\u5305\u3001\u6a21\u5757\u3001\u7c7b\u6216\u51fd\u6570\u91cc\u7684\u7b2c\u4e00\u4e2a\u8bed\u53e5\u3002\u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u7684 __doc__ \u6210\u5458\u88ab\u81ea\u52a8\u63d0\u53d6\uff0c\u5e76\u4e14\u88ab pydoc \u6240\u7528\uff08\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u6a21\u5757\u4e0a\u8fd0\u884c pydoc \u8bd5\u4e00\u628a\uff0c\u770b\u770b\u5b83\u957f\u4ec0\u4e48\u6837\uff09\u3002 \u6211\u4eec\u5bf9\u6587\u6863\u5b57\u7b26\u4e32\u7684\u60ef\u4f8b\u662f\u4f7f\u7528\u4e09\u91cd\u53cc\u5f15\u53f7 \"\"\" \uff08\u53c2\u89c1\uff1a PEP-257 \uff09\u3002\u4e00\u4e2a\u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u8fd9\u6837\u7ec4\u7ec7\uff08\u901a\u5e38\u4e00\u884c\u4e0d\u8d85\u8fc7 80 \u4e2a\u5b57\u7b26\uff09\uff0c\u5148\u662f\u4e00\u884c\u4ee5\u53e5\u53f7\uff0c\u95ee\u53f7\u6216\u60ca\u53f9\u53f7\u7ed3\u5c3e\u7684\u6982\u8ff0\uff08\u6216\u8005\u8be5\u6587\u6863\u5b57\u7b26\u4e32\u5355\u7eaf\u53ea\u6709\u4e00\u884c\uff09\u3002\u63a5\u7740\u662f\u4e00\u4e2a\u7a7a\u884c\uff0c\u63a5\u7740\u662f\u6587\u6863\u5b57\u7b26\u4e32\u5269\u4e0b\u7684\u90e8\u5206\uff0c\u5b83\u5e94\u8be5\u4e0e\u6587\u6863\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u5f15\u53f7\u5bf9\u9f50\u3002\u4e0b\u9762\u6709\u66f4\u591a\u6587\u6863\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5316\u89c4\u8303\u3002","title":"3.8.1 \u6587\u6863\u5b57\u7b26\u4e32"},{"location":"standard/style_rules/#382","text":"\u6bcf\u4e2a\u6587\u4ef6\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u8bb8\u53ef\u6837\u677f\u3002\u6839\u636e\u9879\u76ee\u4f7f\u7528\u7684\u8bb8\u53ef\uff08\u4f8b\u5982\uff1a Apache 2.0 \u3001 BSD \u3001 LGPL \u3001 GPL \uff09\uff0c\u9009\u62e9\u5408\u9002\u7684\u6837\u677f\u3002 \u6587\u4ef6\u5e94\u8be5\u4ee5\u63cf\u8ff0\u6a21\u5757\u5185\u5bb9\u548c\u7528\u6cd5\u7684\u6587\u6863\u5b57\u7b26\u4e32\u5f00\u59cb\u3002 \"\"\"A one line summary of the module or program, terminated by a period. Leave one blank line. The rest of this docstring should contain an overall description of the module or program. Optionally, it may also contain a brief description of exported classes and functions and/or usage examples. Typical usage example: foo = ClassFoo() bar = foo.FunctionBar() \"\"\"","title":"3.8.2 \u6a21\u5757"},{"location":"standard/style_rules/#383","text":"\u4e0b\u6587\u6240\u6307\u7684\u51fd\u6570\uff0c\u5305\u62ec\u51fd\u6570\uff0c\u65b9\u6cd5\uff0c\u4ee5\u53ca\u751f\u6210\u5668\u3002 \u4e00\u4e2a\u51fd\u6570\u5fc5\u987b\u8981\u6709\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u9664\u975e\u5b83\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a \u5916\u90e8\u4e0d\u53ef\u89c1 \u975e\u5e38\u77ed\u5c0f \u7b80\u5355\u660e\u4e86 \u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u63d0\u4f9b\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u5f53\u522b\u4eba\u7f16\u5199\u4ee3\u7801\u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u4ed6\u4e0d\u9700\u8981\u770b\u4e00\u884c\u4ee3\u7801\uff0c\u53ea\u8981\u770b\u6587\u6863\u5b57\u7b26\u4e32\u5c31\u53ef\u4ee5\u4e86\u3002\u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u662f\u63cf\u8ff0\u6027\u7684\uff08 \"\"\"Fetches rows from a Bigtable.\"\"\" \uff09 \u800c\u4e0d\u662f\u547d\u4ee4\u5f0f\u7684\uff08 \"\"\"Fetch rows from a Bigtable.\"\"\" \uff09 \uff0c\u9664\u4e86 @property \u6570\u636e\u63cf\u8ff0\u7b26\uff0c\u5b83\u5e94\u8be5\u4f7f\u7528 \u4e0e\u5c5e\u6027\u76f8\u540c\u7684\u6837\u5f0f \u3002\u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u5305\u542b\u51fd\u6570\u505a\u4ec0\u4e48\uff0c\u4ee5\u53ca\u8f93\u5165\u548c\u8f93\u51fa\u7684\u8be6\u7ec6\u63cf\u8ff0\u3002\u901a\u5e38\uff0c\u4e0d\u5e94\u8be5\u63cf\u8ff0\u201c\u600e\u4e48\u505a\u201d\uff0c\u9664\u975e\u662f\u4e00\u4e9b\u590d\u6742\u7684\u7b97\u6cd5\u3002\u5bf9\u4e8e\u590d\u6742\u7684\u4ee3\u7801\uff0c\u5728\u4ee3\u7801\u65c1\u8fb9\u52a0\u6ce8\u91ca\u4f1a\u6bd4\u4f7f\u7528\u6587\u6863\u5b57\u7b26\u4e32\u66f4\u6709\u610f\u4e49\u3002 \u91cd\u5199\u57fa\u7c7b\u4e2d\u7684\u65b9\u6cd5\u65f6\uff0c\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6587\u6863\u5b57\u7b26\u4e32\u5f15\u5bfc\u8bfb\u8005\u67e5\u770b\u88ab\u8986\u76d6\u65b9\u6cd5\u7684\u6587\u6863\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff1a \"\"\"See base class.\"\"\" \u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u65e0\u9700\u91cd\u590d\u57fa\u672c\u65b9\u6cd5\u4e2d\u7684\u6587\u6863\u5b57\u7b26\u4e32\u4fe1\u606f\u3002\u4f46\u662f\uff0c\u5982\u679c\u91cd\u5199\u65b9\u6cd5\u7684\u884c\u4e3a\u53d1\u751f\u4e86\u6539\u53d8\uff0c\u6216\u8005\u9700\u8981\u63d0\u4f9b\u8be6\u7ec6\u4fe1\u606f\uff08\u4f8b\u5982\uff1a\u8bb0\u5f55\u989d\u5916\u526f\u4f5c\u7528\uff09\uff0c\u90a3\u4e48\u91cd\u5199\u65b9\u6cd5\u81f3\u5c11\u9700\u8981\u901a\u8fc7\u6587\u6863\u5b57\u7b26\u4e32\u6765\u63cf\u8ff0\u8fd9\u4e9b\u5dee\u5f02\u3002 \u5173\u4e8e\u51fd\u6570\u7684\u51e0\u4e2a\u65b9\u9762\u5e94\u8be5\u5728\u7279\u5b9a\u7684\u5c0f\u8282\u4e2d\u8fdb\u884c\u63cf\u8ff0\u8bb0\u5f55\u3002\u8fd9\u51e0\u4e2a\u65b9\u9762\u5982\u4e0b\u6587\u6240\u8ff0\uff0c\u6bcf\u8282\u5e94\u8be5\u4ee5\u4e00\u4e2a\u6807\u9898\u884c\u5f00\u59cb\uff0c\u6807\u9898\u884c\u4ee5\u5192\u53f7\u7ed3\u5c3e\u3002\u9664\u6807\u9898\u884c\u5916\uff0c\u5c0f\u8282\u7684\u5176\u4ed6\u5185\u5bb9\u5e94\u88ab\u7f29\u8fdb\u4e24\u4e2a\u6216\u56db\u4e2a\u7a7a\u683c\uff08\u5728\u6587\u4ef6\u5185\u4fdd\u6301\u4e00\u81f4\uff09\u3002\u5982\u679c\u51fd\u6570\u7684\u540d\u79f0\u548c\u7b7e\u540d\u5177\u6709\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u4f7f\u7528\u5355\u884c\u6587\u6863\u5b57\u7b26\u4e32\u8fdb\u884c\u9002\u5f53\u63cf\u8ff0\uff0c\u90a3\u5c31\u53ef\u4ee5\u7701\u7565\u8fd9\u4e9b\u90e8\u5206\u3002","title":"3.8.3 \u51fd\u6570\u548c\u65b9\u6cd5"},{"location":"standard/style_rules/#args","text":"\u5217\u51fa\u6bcf\u4e2a\u53c2\u6570\u7684\u540d\u5b57\uff0c\u5728\u540d\u5b57\u540e\u4f7f\u7528\u4e00\u4e2a\u5192\u53f7\u548c\u4e00\u4e2a\u7a7a\u683c\uff0c\u5206\u9694\u5bf9\u8be5\u53c2\u6570\u7684\u63cf\u8ff0\u3002\u5982\u679c\u63cf\u8ff0\u592a\u957f\u8d85\u8fc7\u4e86\u5355\u884c80\u5b57\u7b26\uff0c\u4f7f\u75282\u6216\u80054\u4e2a\u7a7a\u683c\u7684\u60ac\u6302\u7f29\u8fdb\uff08\u4e0e\u6587\u4ef6\u5176\u4ed6\u90e8\u5206\u4fdd\u6301\u4e00\u81f4\uff09\u3002\u63cf\u8ff0\u5e94\u8be5\u5305\u62ec\u6240\u9700\u7684\u7c7b\u578b\u548c\u542b\u4e49\u3002\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u63a5\u53d7 *foo \uff08\u53ef\u53d8\u957f\u5ea6\u53c2\u6570\u5217\u8868\uff09\u6216\u8005 **bar \uff08\u4efb\u610f\u5173\u952e\u5b57\u53c2\u6570\uff09\uff0c\u5e94\u8be5\u8be6\u7ec6\u5217\u51fa *foo \u548c **bar \u3002","title":"Args:"},{"location":"standard/style_rules/#returns-yields","text":"\u63cf\u8ff0\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u548c\u8bed\u4e49\u3002 \u5982\u679c\u51fd\u6570\u8fd4\u56de None \uff0c\u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u7701\u7565\u3002 \u5982\u679c\u6587\u6863\u5b57\u7b26\u4e32\u4ee5 Returns \u6216 Yields \u5f00\u5934\uff08\u4f8b\u5982\uff1a \"\"\"Returns row from Bigtable as a tuple of strings.\"\"\" \uff09\uff0c\u5e76\u4e14\u5f00\u59cb\u7684\u53e5\u5b50\u8db3\u4ee5\u63cf\u8ff0\u8fd4\u56de\u503c\uff0c\u90a3\u4e48\u4e5f\u53ef\u4ee5\u7701\u7565\u3002","title":"Returns:\uff08\u6216\u8005 Yields: \u7528\u4e8e\u751f\u6210\u5668\uff09"},{"location":"standard/style_rules/#raises","text":"\u5217\u51fa\u4e0e\u63a5\u53e3\u6709\u5173\u7684\u6240\u6709\u5f02\u5e38\uff0c\u7136\u540e\u7ed9\u51fa\u8bf4\u660e\u3002\u4f7f\u7528\u7c7b\u4f3c\u7684\u5f02\u5e38\u540d\u79f0 + \u5192\u53f7 + \u7a7a\u683c\u6216\u6362\u884c\u7b26\uff0c\u5e76\u6309 Args\uff1a \u4e2d\u6240\u8ff0\u60ac\u6302\u7f29\u8fdb\u6837\u5f0f\u3002\u5982\u679c\u8fdd\u53cd\u4e86\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u6307\u5b9a\u7684 API\uff0c\u5219\u4e0d\u5e94\u8be5\u8bb0\u5f55\u5f15\u53d1\u7684\u5f02\u5e38\uff08\u56e0\u4e3a\u8fd9\u4f1a\u4f7f\u8fdd\u53cd API \u7684\u884c\u4e3a\u6210\u4e3a API \u7684\u4e00\u90e8\u5206\uff09\u3002 def fetch_smalltable_rows ( table_handle : smalltable . Table , keys : Sequence [ Union [ bytes , str ]], require_all_keys : bool = False , ) -> Mapping [ bytes , Tuple [ str ]]: \"\"\"Fetches rows from a Smalltable. Retrieves rows pertaining to the given keys from the Table instance represented by table_handle. String keys will be UTF-8 encoded. Args: table_handle: An open smalltable.Table instance. keys: A sequence of strings representing the key of each table row to fetch. String keys will be UTF-8 encoded. require_all_keys: Optional; If require_all_keys is True only rows with values set for all keys will be returned. Returns: A dict mapping keys to the corresponding table row data fetched. Each row is represented as a tuple of strings. For example: {b'Serak': ('Rigel VII', 'Preparer'), b'Zim': ('Irk', 'Invader'), b'Lrrr': ('Omicron Persei 8', 'Emperor')} Returned keys are always bytes. If a key from the keys argument is missing from the dictionary, then that row was not found in the table (and require_all_keys must have been False). Raises: IOError: An error occurred accessing the smalltable. \"\"\" \u5982\u4e0b\u6240\u793a\uff0c Args \u4e2d\u53c2\u6570\u6362\u884c\u4e5f\u662f\u5141\u8bb8\u7684\uff1a def fetch_smalltable_rows ( table_handle : smalltable . Table , keys : Sequence [ Union [ bytes , str ]], require_all_keys : bool = False , ) -> Mapping [ bytes , Tuple [ str ]]: \"\"\"Fetches rows from a Smalltable. Retrieves rows pertaining to the given keys from the Table instance represented by table_handle. String keys will be UTF-8 encoded. Args: table_handle: An open smalltable.Table instance. keys: A sequence of strings representing the key of each table row to fetch. String keys will be UTF-8 encoded. require_all_keys: Optional; If require_all_keys is True only rows with values set for all keys will be returned. Returns: A dict mapping keys to the corresponding table row data fetched. Each row is represented as a tuple of strings. For example: {b'Serak': ('Rigel VII', 'Preparer'), b'Zim': ('Irk', 'Invader'), b'Lrrr': ('Omicron Persei 8', 'Emperor')} Returned keys are always bytes. If a key from the keys argument is missing from the dictionary, then that row was not found in the table (and require_all_keys must have been False). Raises: IOError: An error occurred accessing the smalltable. \"\"\"","title":"Raises:"},{"location":"standard/style_rules/#384","text":"\u7c7b\u5e94\u8be5\u5728\u5176\u5b9a\u4e49\u4e0b\u6709\u4e00\u4e2a\u7528\u4e8e\u63cf\u8ff0\u8be5\u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32\u3002\u5982\u679c\u4f60\u7684\u7c7b\u6709\u516c\u5171\u5c5e\u6027\uff08 Attributes \uff09\uff0c\u90a3\u4e48\u6587\u6863\u4e2d\u5e94\u8be5\u6709\u4e00\u4e2a\u5c5e\u6027\uff08 Attributes \uff09\u6bb5\uff0c\u5e76\u4e14\u5e94\u8be5\u9075\u5b88\u548c \u51fd\u6570\u53c2\u6570 \u76f8\u540c\u7684\u683c\u5f0f\uff1a class SampleClass : \"\"\"Summary of class here. Longer class information.... Longer class information.... Attributes: likes_spam: A boolean indicating if we like SPAM or not. eggs: An integer count of the eggs we have laid. \"\"\" def __init__ ( self , likes_spam = False ): \"\"\"Inits SampleClass with blah.\"\"\" self . likes_spam = likes_spam self . eggs = 0 def public_method ( self ): \"\"\"Performs operation blah.\"\"\"","title":"3.8.4 \u7c7b"},{"location":"standard/style_rules/#385","text":"\u6700\u9700\u8981\u5199\u6ce8\u91ca\u7684\u662f\u4ee3\u7801\u4e2d\u90a3\u4e9b\u6280\u5de7\u6027\u7684\u90e8\u5206\u3002\u5982\u679c\u4f60\u5728\u4e0b\u6b21 \u4ee3\u7801\u5ba1\u67e5 \u7684\u65f6\u5019\u5fc5\u987b\u89e3\u91ca\u4e00\u4e0b\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u73b0\u5728\u5c31\u7ed9\u5b83\u5199\u6ce8\u91ca\u3002\u5bf9\u4e8e\u590d\u6742\u7684\u64cd\u4f5c\uff0c\u5e94\u8be5\u5728\u5176\u64cd\u4f5c\u5f00\u59cb\u524d\u5199\u4e0a\u82e5\u5e72\u884c\u6ce8\u91ca\uff0c\u5bf9\u4e8e\u4e0d\u662f\u4e00\u76ee\u4e86\u7136\u7684\u4ee3\u7801\uff0c\u5e94\u5728\u5176\u884c\u5c3e\u6dfb\u52a0\u6ce8\u91ca\u3002 # We use a weighted dictionary search to find out where i is in # the array. We extrapolate position based on the largest num # in the array and the array size and then do binary search to # get the exact number. if i & ( i - 1 ) == 0 : # True if i is 0 or a power of 2. \u4e3a\u4e86\u63d0\u9ad8\u53ef\u8bfb\u6027\uff0c\u6ce8\u91ca\u5b57\u7b26 # \u5e94\u8be5\u81f3\u5c11\u79bb\u5f00\u4ee3\u7801\u4e24\u4e2a\u7a7a\u683c\uff0c\u7136\u540e\u5728\u6ce8\u91ca\u672c\u8eab\u7684\u6587\u672c\u4e4b\u524d\u81f3\u5c11\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u7edd\u4e0d\u8981\u63cf\u8ff0\u4ee3\u7801\u3002\u5047\u8bbe\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\u6bd4\u4f60\u66f4\u61c2 Python\uff0c\u4ed6\u53ea\u662f\u4e0d\u77e5\u9053\u4f60\u7684\u4ee3\u7801\u8981\u505a\u4ec0\u4e48\u3002 # BAD COMMENT: Now go through the b array and make sure whenever i occurs # the next element is i+1","title":"3.8.5 \u5757\u6ce8\u91ca\u548c\u884c\u6ce8\u91ca"},{"location":"standard/style_rules/#386","text":"\u6ce8\u610f\u6807\u70b9\u7b26\u53f7\u3001\u62fc\u5199\u548c\u8bed\u6cd5\u3002\u597d\u7684\u6ce8\u91ca\u66f4\u5bb9\u6613\u9605\u8bfb\u3002 \u6ce8\u91ca\u5e94\u8be5\u50cf\u53d9\u4e8b\u6587\u672c\u4e00\u6837\u53ef\u8bfb\uff0c\u6709\u9002\u5f53\u7684\u5927\u5199\u548c\u6807\u70b9\u7b26\u53f7\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5b8c\u6574\u7684\u53e5\u5b50\u6bd4\u53e5\u5b50\u7247\u6bb5\u66f4\u5177\u53ef\u8bfb\u6027\u3002\u8f83\u77ed\u7684\u6ce8\u91ca\uff0c\u4f8b\u5982\u4ee3\u7801\u884c\u672b\u5c3e\u7684\u6ce8\u91ca\uff0c\u6709\u65f6\u53ef\u80fd\u4e0d\u90a3\u4e48\u6b63\u5f0f\uff0c\u4f46\u5e94\u8be5\u4e0e\u4f60\u7684\u98ce\u683c\u4fdd\u6301\u4e00\u81f4\u3002 \u867d\u7136\u88ab\u4ee3\u7801\u5ba1\u9605\u8005\u6307\u51fa\u6807\u70b9\u7b26\u53f7\u4f7f\u7528\u4e0d\u51c6\u786e\uff08\u5728\u7528\u5206\u53f7\u7684\u5730\u65b9\u7528\u4e86\u9017\u53f7\uff09\u7684\u611f\u89c9\u4f1a\u5f88\u4e0d\u723d\uff0c\u4f46\u6e90\u4ee3\u7801\u4fdd\u6301\u9ad8\u5ea6\u7684\u6e05\u6670\u6027\u548c\u53ef\u8bfb\u6027\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u6b63\u786e\u7684\u6807\u70b9\u3001\u62fc\u5199\u548c\u8bed\u6cd5\u6709\u52a9\u4e8e\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u3002","title":"3.8.6 \u6807\u70b9\u7b26\u53f7\u3001\u62fc\u5199\u548c\u8bed\u6cd5"},{"location":"standard/style_rules/#310","text":"\u5373\u4f7f\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u8981\u4f7f\u7528 f-string \uff0c % \u64cd\u4f5c\u7b26\u6216\u8005 format \u65b9\u6cd5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002\u4e0d\u8fc7\u4e5f\u4e0d\u80fd\u4e00\u6982\u800c\u8bba\uff0c\u4f60\u9700\u8981\u5728 + \u548c % \uff08\u6216 format \uff09\u4e4b\u95f4\u597d\u597d\u5224\u5b9a\u3002\u4e0d\u8981\u5c06 % \u6216 format \u65b9\u6cd5\u7528\u4e8e\u7eaf\u8fde\u63a5\u3002 \u63a8\u8350 x = a + b x = ' %s , %s !' % ( imperative , expletive ) x = ' {} , {} ' . format ( first , second ) x = 'name: %s ; score: %d ' % ( name , n ) x = 'name: {} ; score: {} ' . format ( name , n ) x = f 'name: { name } ; score: { n } ' # Python 3.6+ \u4e0d\u63a8\u8350 x = ' %s%s ' % ( a , b ) # use + in this case x = ' {}{} ' . format ( a , b ) # use + in this case x = first + ', ' + second x = 'name: ' + name + '; score: ' + str ( n ) \u907f\u514d\u5728\u5faa\u73af\u4e2d\u7528 + \u548c += \u64cd\u4f5c\u7b26\u6765\u7d2f\u52a0\u5b57\u7b26\u4e32\u3002 \u7531\u4e8e\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u6837\u505a\u4f1a\u521b\u5efa\u4e0d\u5fc5\u8981\u7684\u4e34\u65f6\u5bf9\u8c61\uff0c\u4e14\u5bfc\u81f4\u4e8c\u6b21\u65b9\u800c\u4e0d\u662f\u7ebf\u6027\u7684\u8fd0\u884c\u65f6\u95f4\u3002\u5c3d\u7ba1\u8fd9\u79cd\u5e38\u89c1\u7684\u7d2f\u52a0\u53ef\u4ee5\u5728 CPython \u4e0a\u8fdb\u884c\u4f18\u5316\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u5b9e\u73b0\u7ec6\u8282\u3002\u5e94\u7528\u4f18\u5316\u7684\u6761\u4ef6\u4e0d\u5bb9\u6613\u9884\u6d4b\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u6539\u53d8\u3002\u4f5c\u4e3a\u66ff\u4ee3\u65b9\u6848\uff0c\u4f60\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5b50\u4e32\u52a0\u5165\u5217\u8868\uff0c\u7136\u540e\u5728\u5faa\u73af\u7ed3\u675f\u540e\u7528 ''.join \u8fde\u63a5\u5217\u8868\uff08\u4e5f\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5b50\u4e32\u5199\u5165\u4e00\u4e2a io.StringIO \u7f13\u5b58\u4e2d\uff09\u3002 \u63a8\u8350 items = [ '<table>' ] for last_name , first_name in employee_list : items . append ( '<tr><td> %s , %s </td></tr>' % ( last_name , first_name )) items . append ( '</table>' ) employee_table = '' . join ( items ) \u4e0d\u63a8\u8350 employee_table = '<table>' for last_name , first_name in employee_list : employee_table += '<tr><td> %s , %s </td></tr>' % ( last_name , first_name ) employee_table += '</table>' \u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4fdd\u6301\u4f7f\u7528\u5b57\u7b26\u4e32\u5f15\u53f7\u7684\u4e00\u81f4\u6027\u3002\u4f7f\u7528\u5355\u5f15\u53f7 ' \u6216\u8005\u53cc\u5f15\u53f7 \" \u4e4b\u4e00\u7528\u4ee5\u5f15\u7528\u5b57\u7b26\u4e32\uff0c\u5e76\u5728\u540c\u4e00\u6587\u4ef6\u4e2d\u6cbf\u7528\u3002\u5728\u5b57\u7b26\u4e32\u5185\u53ef\u4ee5\u4f7f\u7528\u53e6\u5916\u4e00\u79cd\u5f15\u53f7\uff0c\u4ee5\u907f\u514d\u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528 \\\\ \u8f6c\u4e49\u3002 \u63a8\u8350 Python ( 'Why are you hiding your eyes?' ) Gollum ( \"I'm scared of lint errors.\" ) Narrator ( '\"Good!\" thought a happy Python reviewer.' ) \u4e0d\u63a8\u8350 Python ( \"Why are you hiding your eyes?\" ) Gollum ( 'The lint. It burns. It burns us.' ) Gollum ( \"Always the great lint. Watching. Watching.\" ) \u4e3a\u591a\u884c\u5b57\u7b26\u4e32\u4f7f\u7528\u4e09\u91cd\u53cc\u5f15\u53f7 \"\"\" \u800c\u975e\u4e09\u91cd\u5355\u5f15\u53f7 ''' \u3002\u5f53\u4e14\u4ec5\u5f53\u9879\u76ee\u4e2d\u4f7f\u7528\u5355\u5f15\u53f7 ' \u6765\u5f15\u7528\u5b57\u7b26\u4e32\u65f6\uff0c\u624d\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e09\u91cd ''' \u4e3a\u975e\u6587\u6863\u5b57\u7b26\u4e32\u7684\u591a\u884c\u5b57\u7b26\u4e32\u6765\u6807\u8bc6\u5f15\u7528\u3002\u6587\u6863\u5b57\u7b26\u4e32\u5fc5\u987b\u4f7f\u7528\u4e09\u91cd\u53cc\u5f15\u53f7 \"\"\" \u3002 \u591a\u884c\u5b57\u7b26\u4e32\u4e0d\u4f1a\u968f\u7a0b\u5e8f\u5176\u4f59\u90e8\u5206\u7684\u7f29\u8fdb\u800c\u7f29\u8fdb\u3002\u5982\u679c\u8981\u907f\u514d\u5728\u5b57\u7b26\u4e32\u4e2d\u5d4c\u5165\u989d\u5916\u7684\u7a7a\u767d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e32\u8054\u7684\u5355\u884c\u5b57\u7b26\u4e32\u6216\u5e26\u6709 textwrap.dedent() \u7684\u591a\u884c\u5b57\u7b26\u4e32\u6765\u5220\u9664\u6bcf\u884c\u4e0a\u7684\u521d\u59cb\u7a7a\u767d\u3002 \u63a8\u8350 long_string = \"\"\"This is fine if your use case can accept extraneous leading spaces.\"\"\" long_string = ( \"And this is fine if you cannot accept \\n \" + \"extraneous leading spaces.\" ) long_string = textwrap . dedent ( \"\"\" \\ This is also fine, because textwrap.dedent() will collapse common leading spaces in each line.\"\"\" ) \u4e0d\u63a8\u8350 def foo (): long_string = \"\"\"This is pretty ugly. Don't do this. \"\"\"","title":"3.10 \u5b57\u7b26\u4e32"},{"location":"standard/style_rules/#3101","text":"\u5bf9\u4e8e\u671f\u671b\u4ee5\u6a21\u5f0f\u5b57\u7b26\u4e32\uff08\u5e26\u6709 % - \u5360\u4f4d\u7b26\uff09\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u65e5\u5fd7\u51fd\u6570\uff1a\u59cb\u7ec8\u4f7f\u7528\u5b57\u7b26\u4e32\u6587\u672c\uff08\u800c\u4e0d\u662f f-string \uff09\u4f5c\u4e3a\u5b83\u4eec\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5e76\u4f7f\u7528\u6a21\u5f0f\u53c2\u6570\uff08pattern-parameters\uff09\u4f5c\u4e3a\u540e\u7eed\u53c2\u6570\u3002\u4e00\u4e9b\u65e5\u5fd7\u5b9e\u73b0\u5c06\u672a\u5c55\u5f00\u7684\u6a21\u5f0f\u5b57\u7b26\u4e32\u6536\u96c6\u4e3a\u53ef\u67e5\u8be2\u5b57\u6bb5\u3002\u5b83\u8fd8\u9632\u6b62\u82b1\u8d39\u65f6\u95f4\u5448\u73b0\u6ca1\u6709\u914d\u7f6e\u8bb0\u5f55\u5668\u8f93\u51fa\u7684\u6d88\u606f\u3002 \u63a8\u8350 import tensorflow as tf logger = tf . get_logger () logger . info ( 'TensorFlow Version is: %s ' , tf . __version__ ) \u63a8\u8350 import os from absl import logging logging . info ( 'Current $PAGER is: %s ' , os . getenv ( 'PAGER' , default = '' )) homedir = os . getenv ( 'HOME' ) if homedir is None or not os . access ( homedir , os . W_OK ): logging . error ( 'Cannot write to home directory, $HOME= %r ' , homedir ) \u4e0d\u63a8\u8350 import os from absl import logging logging . info ( 'Current $PAGER is:' ) logging . info ( os . getenv ( 'PAGER' , default = '' )) homedir = os . getenv ( 'HOME' ) if homedir is None or not os . access ( homedir , os . W_OK ): logging . error ( f 'Cannot write to home directory, $HOME= { homedir !r} ' )","title":"3.10.1 \u65e5\u5fd7"},{"location":"standard/style_rules/#3102","text":"\u9519\u8bef\u6d88\u606f\uff08\u4f8b\u5982\uff1a ValueError \u7b49\u5f02\u5e38\u7684\u6d88\u606f\u5b57\u7b26\u4e32\uff0c\u6216\u663e\u793a\u7ed9\u7528\u6237\u7684\u6d88\u606f\uff09\u5e94\u9075\u5faa\u4e09\u4e2a\u51c6\u5219\uff1a \u6d88\u606f\u9700\u8981\u4e0e\u5b9e\u9645\u9519\u8bef\u6761\u4ef6\u7cbe\u786e\u5339\u914d\u3002 \u63d2\u5165\u7684\u7247\u6bb5\u5fc5\u987b\u59cb\u7ec8\u80fd\u591f\u6e05\u695a\u5730\u8bc6\u522b\u3002 \u5b83\u4eec\u5e94\u8be5\u5141\u8bb8\u7b80\u5355\u7684\u81ea\u52a8\u5316\u5904\u7406\uff08\u4f8b\u5982 grepping \uff09\u3002 \u63a8\u8350 if not 0 <= p <= 1 : raise ValueError ( f 'Not a probability: { p !r} ' ) try : os . rmdir ( workdir ) except OSError as error : logging . warning ( 'Could not remove directory (reason: %r ): %r ' , error , workdir ) \u4e0d\u63a8\u8350 if p < 0 or p > 1 : # PROBLEM: also false for float('nan')! raise ValueError ( f 'Not a probability: { p !r} ' ) try : os . rmdir ( workdir ) except OSError : # PROBLEM: Message makes an assumption that might not be true: # Deletion might have failed for some other reason, misleading # whoever has to debug this. logging . warning ( 'Directory already was deleted: %s ' , workdir ) try : os . rmdir ( workdir ) except OSError : # PROBLEM: The message is harder to grep for than necessary, and # not universally non-confusing for all possible values of `workdir`. # Imagine someone calling a library function with such code # using a name such as workdir = 'deleted'. The warning would read: # \"The deleted directory could not be deleted.\" logging . warning ( 'The %s directory could not be deleted.' , workdir )","title":"3.10.2 \u9519\u8bef\u6d88\u606f"},{"location":"standard/style_rules/#311-sockets","text":"\u5728\u6587\u4ef6\u548c sockets \u7ed3\u675f\u65f6\uff0c\u663e\u5f0f\u7684\u5173\u95ed\u5b83\u3002 \u9664\u6587\u4ef6\u5916\uff0csockets \u6216\u5176\u4ed6\u7c7b\u4f3c\u6587\u4ef6\u7684\u5bf9\u8c61\u5728\u6ca1\u6709\u5fc5\u8981\u7684\u60c5\u51b5\u4e0b\u6253\u5f00\uff0c\u4f1a\u6709\u8bb8\u591a\u526f\u4f5c\u7528\uff0c\u4f8b\u5982\uff1a \u5b83\u4eec\u53ef\u80fd\u4f1a\u6d88\u8017\u6709\u9650\u7684\u7cfb\u7edf\u8d44\u6e90\u3002\u5982\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u5982\u679c\u8fd9\u4e9b\u8d44\u6e90\u5728\u4f7f\u7528\u540e\u6ca1\u6709\u53ca\u65f6\u5f52\u8fd8\u7cfb\u7edf\uff0c\u90a3\u4e48\u7528\u4e8e\u5904\u7406\u8fd9\u4e9b\u5bf9\u8c61\u7684\u4ee3\u7801\u4f1a\u5c06\u8d44\u6e90\u6d88\u8017\u6b86\u5c3d\u3002 \u6301\u6709\u6587\u4ef6\u5c06\u4f1a\u963b\u6b62\u5bf9\u4e8e\u6587\u4ef6\u7684\u5176\u4ed6\u8bf8\u5982\u79fb\u52a8\u3001\u5220\u9664\u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002 \u4ec5\u4ec5\u662f\u4ece\u903b\u8f91\u4e0a\u5173\u95ed\u6587\u4ef6\u548c Sockets\uff0c\u90a3\u4e48\u5b83\u4eec\u4ecd\u7136\u53ef\u80fd\u4f1a\u88ab\u5176\u5171\u4eab\u7684\u7a0b\u5e8f\u5728\u65e0\u610f\u4e2d\u8fdb\u884c\u8bfb\u6216\u8005\u5199\u64cd\u4f5c\u3002\u53ea\u6709\u5f53\u5b83\u4eec\u771f\u6b63\u88ab\u5173\u95ed\u540e\uff0c\u5bf9\u4e8e\u5b83\u4eec\u5c1d\u8bd5\u8fdb\u884c\u8bfb\u6216\u8005\u5199\u64cd\u4f5c\u5c06\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u5e76\u4f7f\u5f97\u95ee\u9898\u5feb\u901f\u663e\u73b0\u51fa\u6765\u3002 \u800c\u4e14\uff0c\u5e7b\u60f3\u5f53\u6587\u4ef6\u5bf9\u8c61\u6790\u6784\u65f6\uff0c\u6587\u4ef6\u548c sockets \u4f1a\u81ea\u52a8\u5173\u95ed\uff0c \u8bd5\u56fe\u5c06\u6587\u4ef6\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u548c\u6587\u4ef6\u7684\u72b6\u6001\u7ed1\u5b9a\u5728\u4e00\u8d77\u7684\u60f3\u6cd5\uff0c\u90fd\u662f\u4e0d\u73b0\u5b9e\u7684\u3002\u56e0\u4e3a\u6709\u5982\u4e0b\u539f\u56e0\uff1a \u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u8fd0\u884c\u73af\u5883\u4f1a\u771f\u6b63\u7684\u6267\u884c\u6587\u4ef6\u7684\u6790\u6784\u3002\u4e0d\u540c\u7684 Python \u5b9e\u73b0\u91c7\u7528\u4e0d\u540c\u7684\u5185\u5b58\u7ba1\u7406\u6280\u672f\uff0c\u6bd4\u5982\u5ef6\u65f6\u5783\u573e\u5904\u7406\u673a\u5236\u3002\u5ef6\u65f6\u5783\u573e\u5904\u7406\u673a\u5236\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5bf9\u8c61\u751f\u547d\u5468\u671f\u88ab\u4efb\u610f\u65e0\u9650\u5236\u7684\u5ef6\u957f\u3002 \u5bf9\u4e8e\u6587\u4ef6\u610f\u5916\u7684\u5f15\u7528\uff0c\u4f1a\u5bfc\u81f4\u5bf9\u4e8e\u6587\u4ef6\u7684\u6301\u6709\u65f6\u95f4\u8d85\u51fa\u9884\u671f\uff08\u6bd4\u5982\u5bf9\u4e8e\u5f02\u5e38\u7684\u8ddf\u8e2a\uff0c\u5305\u542b\u6709\u5168\u5c40\u53d8\u91cf\u7b49\uff09\u3002 \u7ba1\u7406\u6587\u4ef6\u7684\u9996\u9009\u65b9\u6cd5\u662f\u4f7f\u7528 with \u8bed\u53e5 \uff1a with open ( \"hello.txt\" ) as hello_file : for line in hello_file : print ( line ) \u5bf9\u4e8e\u4e0d\u652f\u6301 with \u8bed\u53e5\u7684\u7c7b\u6587\u4ef6\u5bf9\u8c61\uff0c\u8bf7\u4f7f\u7528 contextlib.closing() \uff1a import contextlib with contextlib . closing ( urllib . urlopen ( \"http://www.python.org/\" )) as front_page : for line in front_page : print ( line )","title":"3.11 \u6587\u4ef6\u548c Sockets"},{"location":"standard/style_rules/#312-todo","text":"\u4e3a\u4e34\u65f6\u4ee3\u7801\u4f7f\u7528 TODO \u6ce8\u91ca\uff0c\u5b83\u662f\u4e00\u79cd\u77ed\u671f\u89e3\u51b3\u65b9\u6848\uff0c\u4e0d\u7b97\u5b8c\u7f8e\uff0c\u4f46\u591f\u597d\u4e86\u3002 TODO \u6ce8\u91ca\u5e94\u8be5\u5728\u6240\u6709\u5f00\u5934\u5904\u5305\u542b TODO \u5b57\u7b26\u4e32\uff0c\u7d27\u8ddf\u7740\u662f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4f60\u7684\u540d\u5b57\uff0c\u90ae\u7bb1\u5730\u5740\u6216\u5176\u5b83\u6807\u8bc6\u7b26\u3002\u7136\u540e\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u5192\u53f7\u3002\u63a5\u7740\u5fc5\u987b\u6709\u4e00\u884c\u6ce8\u91ca\uff0c\u89e3\u91ca\u8981\u505a\u4ec0\u4e48\u3002 \u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u6709\u4e00\u4e2a\u7edf\u4e00\u7684 TODO \u683c\u5f0f\uff0c\u8fd9\u6837\u6dfb\u52a0\u6ce8\u91ca\u7684\u4eba\u5c31\u53ef\u4ee5\u641c\u7d22\u5230\uff08\u5e76\u53ef\u4ee5\u6309\u9700\u63d0\u4f9b\u66f4\u591a\u7ec6\u8282\uff09\u3002\u5199\u4e86 TODO \u6ce8\u91ca\u5e76\u4e0d\u4fdd\u8bc1\u5199\u7684\u4eba\u4f1a\u4eb2\u81ea\u89e3\u51b3\u95ee\u9898\u3002\u5f53\u4f60\u5199\u4e86\u4e00\u4e2a TODO \uff0c\u8bf7\u6ce8\u4e0a\u4f60\u7684\u540d\u5b57\u3002 # TODO(kl@gmail.com): Use a \"*\" here for string repetition. # TODO(Zeke) Change this to use relations. \u5982\u679c\u4f60\u7684 TODO \u662f \u201c\u5c06\u6765\u505a\u67d0\u4e8b\u201d \u7684\u5f62\u5f0f\uff0c\u90a3\u4e48\u8bf7\u786e\u4fdd\u4f60\u5305\u542b\u4e86\u4e00\u4e2a\u6307\u5b9a\u7684\u65e5\u671f\uff082009\u5e7411\u6708\u89e3\u51b3\uff09\u6216\u8005\u4e00\u4e2a\u7279\u5b9a\u7684\u4e8b\u4ef6\uff08\u7b49\u5230\u6240\u6709\u7684\u5ba2\u6237\u90fd\u53ef\u4ee5\u5904\u7406 XML \u8bf7\u6c42\u5c31\u79fb\u9664\u8fd9\u4e9b\u4ee3\u7801\uff09\u3002","title":"3.12 TODO \u6ce8\u91ca"},{"location":"standard/style_rules/#313","text":"\u6bcf\u4e2a\u5bfc\u5165\u5e94\u8be5\u72ec\u5360\u4e00\u884c\uff0c typing \u5bfc\u5165\u662f\u4e2a\u4f8b\u5916 \u3002 \u63a8\u8350 import os import sys from typing import Mapping , Sequence \u4e0d\u63a8\u8350 import os , sys \u5bfc\u5165\u603b\u5e94\u8be5\u653e\u5728\u6587\u4ef6\u9876\u90e8\uff0c\u4f4d\u4e8e\u6a21\u5757\u6ce8\u91ca\u548c\u6587\u6863\u5b57\u7b26\u4e32\u4e4b\u540e\uff0c\u6a21\u5757\u5168\u5c40\u53d8\u91cf\u548c\u5e38\u91cf\u4e4b\u524d\u3002\u5bfc\u5165\u5e94\u8be5\u6309\u7167\u4ece\u6700\u901a\u7528\u5230\u6700\u4e0d\u901a\u7528\u7684\u987a\u5e8f\u5206\u7ec4\uff1a Future \u5bfc\u5165\u8bed\u53e5\uff1a from __future__ import absolute_import from __future__ import division from __future__ import print_function \u8bf7\u53c2\u9605 \u4e0a\u9762 \u7684\u66f4\u591a\u4fe1\u606f\u3002 \u6807\u51c6\u5e93\u5bfc\u5165\uff1a import sys \u7b2c\u4e09\u65b9 \u6a21\u5757\u6216\u5305\u5bfc\u5165\uff1a import tensorflow as tf \u4ee3\u7801\u5e93\u5b50\u5305\u5bfc\u5165\uff1a from otherproject.ai import mind \u5df2\u5f03\u7528\uff1a \u4e0e\u6b64\u6587\u4ef6\u5c5e\u4e8e\u540c\u4e00\u9876\u7ea7\u5b50\u5305\u7684\u5e94\u7528\u7a0b\u5e8f\u7279\u5b9a\u5bfc\u5165\u3002\u4f8b\u5982\uff1a from myproject.backend.hgwells import time_machine \u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u4e4b\u524d\u7684 Google Python \u98ce\u683c\u662f\u8fd9\u4e48\u505a\u7684\uff0c\u4f46\u73b0\u5728\u5df2\u7ecf\u4e0d\u63a8\u8350\u4e86\u3002 \u65b0\u7684\u4ee3\u7801\u4e0d\u8981\u8fd9\u4e48\u505a \u3002\u53ea\u9700\u5c06\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u5b50\u5305\u5bfc\u5165\u4e0e\u5176\u4ed6\u5b50\u5305\u5bfc\u5165\u4e00\u6837\u5bf9\u5f85\u5373\u53ef\u3002 \u6bcf\u79cd\u5206\u7ec4\u4e2d\uff0c\u5e94\u8be5\u6839\u636e\u6bcf\u4e2a\u6a21\u5757\u7684\u5b8c\u6574\u5305\u8def\u5f84\uff08 from path import ... \u4e2d\u7684 path \uff09\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\uff0c\u5ffd\u7565\u5927\u5c0f\u5199\u3002\u4ee3\u7801\u53ef\u4ee5\u9009\u62e9\u5728\u5bfc\u5165\u8282\u4e4b\u95f4\u653e\u7f6e\u4e00\u4e2a\u7a7a\u884c\u3002 import collections import queue import sys from absl import app from absl import flags import bs4 import cryptography import tensorflow as tf from book.genres import scifi from myproject.backend import huxley from myproject.backend.hgwells import time_machine from myproject.backend.state_machine import main_loop from otherproject.ai import body from otherproject.ai import mind from otherproject.ai import soul # \u4e4b\u524d\u98ce\u683c\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5c06\u4e00\u4e9b\u5bfc\u5165\u653e\u5728\u8fd9\u91cc: #from myproject.backend.hgwells import time_machine #from myproject.backend.state_machine import main_loop","title":"3.13 \u5bfc\u5165\u683c\u5f0f"},{"location":"standard/style_rules/#314","text":"\u901a\u5e38\u6bcf\u4e2a\u8bed\u53e5\u5e94\u8be5\u72ec\u5360\u4e00\u884c\u3002 \u4e0d\u8fc7\uff0c\u5982\u679c\u6d4b\u8bd5\u7ed3\u679c\u4e0e\u6d4b\u8bd5\u8bed\u53e5\u5728\u4e00\u884c\u653e\u5f97\u4e0b\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5728\u540c\u4e00\u884c\u3002\u5982\u679c\u662f if \u8bed\u53e5\uff0c\u53ea\u6709\u5728\u6ca1\u6709 else \u65f6\u624d\u80fd\u8fd9\u6837\u505a\u3002\u7279\u522b\u5730\uff0c\u7edd\u4e0d\u8981\u5bf9 try/except \u8fd9\u6837\u505a\uff0c\u56e0\u4e3a try \u548c except \u4e0d\u80fd\u653e\u5728\u540c\u4e00\u884c\u3002 \u63a8\u8350 if foo : bar ( foo ) \u4e0d\u63a8\u8350 if foo : bar ( foo ) else : baz ( foo ) try : bar ( foo ) except ValueError : baz ( foo ) try : bar ( foo ) except ValueError : baz ( foo )","title":"3.14 \u8bed\u53e5"},{"location":"standard/style_rules/#315","text":"\u5728 Python \u4e2d\uff0c \u5bf9\u4e8e\u7410\u788e\u53c8\u4e0d\u592a\u91cd\u8981\u7684\u8bbf\u95ee\u51fd\u6570\uff0c\u4f60\u5e94\u8be5\u76f4\u63a5\u4f7f\u7528\u516c\u6709\u53d8\u91cf\u6765\u53d6\u4ee3\u5b83\u4eec\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u989d\u5916\u7684\u51fd\u6570\u8c03\u7528\u5f00\u9500\u3002\u5f53\u6dfb\u52a0\u66f4\u591a\u529f\u80fd\u65f6\uff0c\u4f60\u53ef\u4ee5\u7528\u5c5e\u6027\uff08 property \uff09\u6765\u4fdd\u6301\u8bed\u6cd5\u7684\u4e00\u81f4\u6027\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u8bbf\u95ee\u66f4\u590d\u6742\uff0c\u6216\u8005\u53d8\u91cf\u7684\u8bbf\u95ee\u5f00\u9500\u5f88\u663e\u8457\uff0c\u90a3\u4e48\u4f60\u5e94\u8be5\u4f7f\u7528\u50cf get_foo() \u548c set_foo() \u8fd9\u6837\u7684\u51fd\u6570\u8c03\u7528\uff08\u9075\u5faa \u547d\u540d \u51c6\u5219\uff09\u3002\u5982\u679c\u4e4b\u524d\u7684\u4ee3\u7801\u884c\u4e3a\u5141\u8bb8\u901a\u8fc7\u5c5e\u6027\uff08 property \uff09\u8bbf\u95ee\uff0c\u90a3\u4e48\u5c31\u4e0d\u8981\u5c06\u65b0\u7684\u8bbf\u95ee\u51fd\u6570\u4e0e\u5c5e\u6027\u7ed1\u5b9a\u3002\u8fd9\u6837\uff0c\u4efb\u4f55\u8bd5\u56fe\u901a\u8fc7\u8001\u65b9\u6cd5\u8bbf\u95ee\u53d8\u91cf\u7684\u4ee3\u7801\u5c31\u6ca1\u6cd5\u8fd0\u884c\uff0c\u4f7f\u7528\u8005\u4e5f\u5c31\u4f1a\u610f\u8bc6\u5230\u590d\u6742\u6027\u53d1\u751f\u4e86\u53d8\u5316\u3002","title":"3.15 \u8bbf\u95ee\u63a7\u5236"},{"location":"standard/style_rules/#316","text":"module_name \u3001 package_name \u3001 ClassName \u3001 method_name \u3001 ExceptionName \u3001 function_name \u3001 GLOBAL_CONSTANT_NAME \u3001 global_var_name \u3001 instance_var_name \u3001 function_parameter_name \u3001 local_var_name \u3002 \u51fd\u6570\u540d\u3001\u53d8\u91cf\u540d\u548c\u6587\u4ef6\u540d\u5e94\u8be5\u90fd\u662f\u63cf\u8ff0\u6027\u7684\uff0c\u907f\u514d\u4f7f\u7528\u7f29\u5199\u3002\u7279\u522b\u662f\uff0c\u4e0d\u8981\u4f7f\u7528\u5bf9\u9879\u76ee\u4ee5\u5916\u7684\u8bfb\u8005\u6765\u8bf4\u6a21\u68f1\u4e24\u53ef\u6216\u4e0d\u719f\u6089\u7684\u7f29\u5199\uff0c\u4e5f\u4e0d\u8981\u901a\u8fc7\u5220\u9664\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\u6765\u7f29\u5199\u3002 \u603b\u662f\u4f7f\u7528 .py \u6587\u4ef6\u6269\u5c55\u540d\uff0c\u4e0d\u8981\u4f7f\u7528\u8fde\u5b57\u7b26\u3002","title":"3.16 \u547d\u540d"},{"location":"standard/style_rules/#3161","text":"\u5355\u5b57\u7b26\u540d\u79f0\uff0c\u9664\u4e86\u4ee5\u4e0b\u7279\u6b8a\u60c5\u51b5\uff1a \u8ba1\u6570\u5668\u548c\u8fed\u4ee3\u5668\uff08\u4f8b\u5982\uff1a i \uff0c j \uff0c k \uff0c v \u7b49\u7b49\uff09 \u4f5c\u4e3a try/except \u8bed\u53e5\u7684\u5f02\u5e38\u6807\u8bc6\u7b26 e \u3002 \u4f5c\u4e3a with \u8bed\u53e5\u58f0\u660e\u7684\u6587\u4ef6\u5bf9\u8c61 f \u6ce8\u610f\u4e0d\u8981\u6ee5\u7528\u5355\u5b57\u7b26\u547d\u540d\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u63cf\u8ff0\u6027\u5e94\u4e0e\u540d\u79f0\u7684\u53ef\u89c1\u6027\u8303\u56f4\u6210\u6bd4\u4f8b\u3002\u4f8b\u5982\uff1a i \u53ef\u80fd\u662f\u4e94\u884c\u4ee3\u7801\u5757\u7684\u597d\u540d\u79f0\uff0c\u4f46\u5728\u591a\u4e2a\u5d4c\u5957\u8303\u56f4\u5185\uff0c\u5b83\u53ef\u80fd\u592a\u6a21\u7cca\u4e86\u3002 \u5305/\u6a21\u5757\u540d\u4e2d\u7684\u8fde\u5b57\u7b26\uff08 - \uff09 __double_leading_and_trailing_underscore__ \u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u5e76\u7ed3\u5c3e\u7684\u540d\u79f0\uff08Python\u4fdd\u7559\uff09 \u4e0d\u793c\u8c8c\u7684\u7528\u8bed \u4e0d\u9700\u8981\u5305\u542b\u53d8\u91cf\u7c7b\u578b\u7684\u540d\u79f0\uff08\u4f8b\u5982\uff1a id_to_name_dict \uff09","title":"3.16.1 \u5e94\u8be5\u907f\u514d\u7684\u540d\u79f0"},{"location":"standard/style_rules/#3162","text":"\u6240\u8c13\u201c\u5185\u90e8\uff08 Internal \uff09\u201d\u8868\u793a\u4ec5\u6a21\u5757\u5185\u53ef\u7528\uff0c\u6216\u8005\u5728\u7c7b\u5185\u662f\u4fdd\u62a4\u6216\u79c1\u6709\u7684\u3002 \u7528\u5355\u4e0b\u5212\u7ebf\uff08 _ \uff09\u5f00\u5934\u8868\u793a\u6a21\u5757\u53d8\u91cf\u6216\u51fd\u6570\u662f protected \u7684\uff08\u4f7f\u7528 import * from \u65f6\u4e0d\u4f1a\u5305\u542b\uff09\u3002\u7528\u53cc\u4e0b\u5212\u7ebf\uff08 __ \uff09\u5f00\u5934\u7684\u5b9e\u4f8b\u53d8\u91cf\u6216\u65b9\u6cd5\u8868\u793a\u7c7b\u5185\u79c1\u6709\uff0c\u4f46\u5e76\u4e0d\u63a8\u8350\u8fd9\u4e48\u505a\uff0c\u56e0\u4e3a\u4f1a\u5f71\u54cd\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u6216\u53ef\u6d4b\u8bd5\u6027\uff0c\u800c\u4e14\u4e5f\u4e0d\u662f\u771f\u6b63\u7684\u79c1\u6709\u3002 \u5c06\u76f8\u5173\u7684\u7c7b\u548c\u9876\u7ea7\u51fd\u6570\u653e\u5728\u540c\u4e00\u4e2a\u6a21\u5757\u91cc\u3002\u4e0d\u50cf Java \uff0c\u6ca1\u5fc5\u8981\u9650\u5236\u4e00\u4e2a\u7c7b\u4e00\u4e2a\u6a21\u5757\u3002 \u5bf9\u7c7b\u540d\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd\uff08\u5982 CapWords \uff0c\u5373 Pascal \u98ce\u683c\uff09\uff0c\u4f46\u662f\u6a21\u5757\u540d\u5e94\u8be5\u7528\u5c0f\u5199\u52a0\u4e0b\u5212\u7ebf\u7684\u65b9\u5f0f\uff08\u5982 lower_with_under.py \uff09\u3002 \u5c3d\u7ba1\u5df2\u7ecf\u6709\u5f88\u591a\u73b0\u5b58\u7684\u6a21\u5757\u4f7f\u7528\u7c7b\u4f3c\u4e8e CapWords.py \u8fd9\u6837\u7684\u547d\u540d\uff0c\u4f46\u73b0\u5728\u5df2\u7ecf\u4e0d\u9f13\u52b1\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5982\u679c\u6a21\u5757\u540d\u78b0\u5de7\u548c\u7c7b\u540d\u4e00\u81f4\uff0c\u8fd9\u4f1a\u8ba9\u4eba\u56f0\u6270\u3002\uff08\u201c\u60f3\u60f3 - \u6211\u5e94\u8be5\u7528 import StringIO \u8fd8\u662f from StringIO import StringIO \uff1f\u201d\uff09 \u4e0b\u5212\u7ebf\u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u4ee5 test \u5f00\u5934\u7684 unittest \u65b9\u6cd5\u540d\u79f0\u4e2d\uff0c\u5e38\u7528\u4e8e\u5206\u9694\u903b\u8f91\u7ec4\u4ef6\u7684\u540d\u79f0\uff0c\u5373\u4f7f\u7ec4\u4ef6\u540d\u79f0\u4f7f\u7528 CapWords \u4e5f\u5e94\u5982\u6b64\u3002\u4e00\u79cd\u53ef\u7528\u7684\u6a21\u5f0f\u662f\uff1a test<MethodUnderTest>_<state> \uff0c\u4f8b\u5982\u3000 testPop_EmptyStack \u3002\u5176\u5b9e\u5bf9\u4e8e\u6d4b\u8bd5\u65b9\u6cd5\u7684\u547d\u540d\u5e76\u6ca1\u6709\u5f3a\u5236\u89c4\u5b9a\u3002","title":"3.16.2 \u547d\u540d\u7ea6\u5b9a"},{"location":"standard/style_rules/#3163","text":"Python \u6587\u4ef6\u540d\u5fc5\u987b\u4ee5 .py \u6269\u5c55\u540d\u7ed3\u5c3e\uff0c\u5e76\u4e14\u4e0d\u8981\u5305\u542b\u8fde\u5b57\u7b26\uff08 - \uff09\u3002\u8fd9\u6837\u53ef\u4ee5\u65b9\u4fbf\u5bfc\u5165\u548c\u5355\u5143\u6d4b\u8bd5\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528\u6ca1\u6709\u6269\u5c55\u540d\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8f6f\u8fde\u63a5\u65b9\u5f0f\u6216\u8005\u5305\u542b exec \"$0.py\" \"$@\" \u7684\u7b80\u5355\u5305\u88c5\u811a\u672c\u3002","title":"3.16.3 \u6587\u4ef6\u547d\u540d"},{"location":"standard/style_rules/#3164-guidos","text":"Type Public Internal Packages lower_with_under Modules lower_with_under _lower_with_under Classes CapWords _CapWords Exceptions CapWords Functions lower_with_under() _lower_with_under() Global/Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER Global/Class Variables lower_with_under _lower_with_under Instance Variables lower_with_under _lower_with_under (protected) Method Names lower_with_under() _lower_with_under() (protected) Function/Method Parameters lower_with_under Local Variables lower_with_under","title":"3.16.4 \u57fa\u4e8e Guido\u2019s \u63a8\u8350\u7684\u6d3e\u751f\u51c6\u5219"},{"location":"standard/style_rules/#3165","text":"\u5bf9\u4e8e\u504f\u6570\u5b66\u8fd0\u7b97\u7684\u4ee3\u7801\uff0c\u5f53\u5b83\u4eec\u5339\u914d\u53c2\u8003\u8bba\u6587\u6216\u7b97\u6cd5\u4e2d\u5df2\u5efa\u7acb\u7684\u7b26\u53f7\u65f6\uff0c\u8f83\u77ed\u7684\u53d8\u91cf\u540d\u4f1a\u8fdd\u53cd\u6837\u5f0f\u6307\u5357\u3002\u6267\u884c\u6b64\u64cd\u4f5c\u65f6\uff0c\u8bf7\u5728\u6ce8\u91ca\u6216\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u5f15\u7528\u6240\u6709\u547d\u540d\u7ea6\u5b9a\u7684\u6765\u6e90\uff0c\u5982\u679c\u6765\u6e90\u65e0\u6cd5\u8bbf\u95ee\uff0c\u8bf7\u6e05\u695a\u5730\u8bb0\u5f55\u547d\u540d\u7ea6\u5b9a\u3002\u5bf9\u4e8e\u516c\u5171 API\uff0c\u6700\u597d\u4f7f\u7528\u7b26\u5408 PEP8 \u7684\u63cf\u8ff0\u6027\u540d\u79f0\uff08 descriptive_names \uff09\uff0c\u8fd9\u6837\u66f4\u5bb9\u6613\u8131\u79bb\u4e0a\u4e0b\u6587\u3002","title":"3.16.5 \u6570\u5b66\u7b26\u53f7"},{"location":"standard/style_rules/#317-main","text":"\u5728 Python \u4e2d\uff0c pydoc \u4ee5\u53ca\u5355\u5143\u6d4b\u8bd5\u8981\u6c42\u6a21\u5757\u5fc5\u987b\u662f\u53ef\u5bfc\u5165\u7684\u3002\u5982\u679c\u6587\u4ef6\u6253\u7b97\u4f5c\u4e3a\u53ef\u6267\u884c\u6587\u4ef6\u4f7f\u7528\uff0c\u90a3\u4e48\u5b83\u7684\u4e3b\u8981\u529f\u80fd\u5e94\u8be5\u653e\u5728 main() \u51fd\u6570\u4e2d\u3002\u4f60\u7684\u4ee3\u7801\u5e94\u8be5\u5728\u6267\u884c\u4e3b\u7a0b\u5e8f\u524d\u603b\u662f\u68c0\u67e5 if __name__ == '__main__' \uff0c\u8fd9\u6837\u5f53\u6a21\u5757\u88ab\u5bfc\u5165\u65f6\u4e3b\u7a0b\u5e8f\u5c31\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u5f53\u4f7f\u7528 absl \u65f6\uff0c\u8bf7\u4f7f\u7528 app.run \uff1a from absl import app ... def main ( argv ): # process non-flag arguments ... if __name__ == '__main__' : app . run ( main ) \u6216\u8005\uff1a def main (): ... if __name__ == '__main__' : main () \u6240\u6709\u7684\u9876\u7ea7\u4ee3\u7801\u5728\u6a21\u5757\u5bfc\u5165\u65f6\u90fd\u4f1a\u88ab\u6267\u884c\u3002\u8981\u5c0f\u5fc3\u4e0d\u8981\u53bb\u8c03\u7528\u51fd\u6570\u3001\u521b\u5efa\u5bf9\u8c61\u6216\u8005\u6267\u884c\u90a3\u4e9b\u4e0d\u5e94\u8be5\u5728\u4f7f\u7528 pydoc \u65f6\u6267\u884c\u7684\u64cd\u4f5c\u3002","title":"3.17 Main"},{"location":"standard/style_rules/#318","text":"\u559c\u6b22\u5c0f\u800c\u7f8e\u7684\u51fd\u6570\u3002 \u957f\u51fd\u6570\u6709\u65f6\u5019\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u5bf9\u51fd\u6570\u7684\u957f\u5ea6\u6ca1\u6709\u786c\u6027\u9650\u5236\u3002\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u8d85\u8fc7\u4e8640\u884c\uff0c\u5c31\u9700\u8981\u601d\u8003\u4e00\u4e0b\uff0c\u5728\u4e0d\u7834\u574f\u7a0b\u5e8f\u7ed3\u6784\u7684\u60c5\u51b5\u4e0b\u662f\u5426\u9700\u8981\u62c6\u5206\u3002 \u5373\u4f7f\u4f60\u7684\u957f\u51fd\u6570\u73b0\u5728\u8fd0\u884c\u826f\u597d\uff0c\u5c06\u6765\u4fee\u6539\u5b83\u7684\u4eba\u4e5f\u53ef\u80fd\u4f1a\u6dfb\u52a0\u65b0\u7684\u529f\u80fd\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4 BUG \u5f88\u96be\u67e5\u627e\u3002\u4fdd\u6301\u51fd\u6570\u7684\u7b80\u77ed\u548c\u7b80\u5355\u53ef\u4ee5\u4f7f\u5176\u4ed6\u4eba\u66f4\u5bb9\u6613\u9605\u8bfb\u548c\u4fee\u6539\u4f60\u7684\u4ee3\u7801\u3002 \u5728\u5904\u7406\u67d0\u4e9b\u4ee3\u7801\u65f6\uff0c\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u957f\u5e76\u4e14\u590d\u6742\u7684\u51fd\u6570\u3002\u5148\u4e0d\u8981\u88ab\u4fee\u6539\u8fd9\u4e9b\u4ee3\u7801\u6240\u5413\u5012\uff1a\u5982\u679c\u611f\u5230\u51fd\u6570\u4f7f\u7528\u56f0\u96be\uff0c\u9519\u8bef\u4e5f\u5f88\u96be\u8c03\u8bd5\uff0c\u6216\u8005\u60f3\u5728\u51e0\u4e2a\u4e0d\u540c\u7684\u5730\u65b9\u4f7f\u7528\u76f8\u540c\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u8003\u8651\u5c06\u51fd\u6570\u62c6\u5206\u6210\u66f4\u5c0f\u548c\u66f4\u6613\u4e8e\u7ba1\u7406\u7684\u4ee3\u7801\u6bb5\u3002","title":"3.18 \u51fd\u6570\u957f\u5ea6"},{"location":"standard/style_rules/#319","text":"","title":"3.19 \u7c7b\u578b\u6807\u6ce8"},{"location":"standard/style_rules/#3191","text":"\u719f\u6089 PEP-484 \u5728\u65b9\u6cd5\u4e2d\uff0c\u53ea\u6709\u5728\u9700\u8981\u6b63\u786e\u7684\u7c7b\u578b\u4fe1\u606f\u65f6\u624d\u6807\u6ce8 self \u6216 cls \u3002\u4f8b\u5982\uff1a @classmethod def create ( cls : Type [ T ]) -> T : return cls () \u5982\u679c\u65e0\u6cd5\u8868\u793a\u4efb\u4f55\u5176\u4ed6\u53d8\u91cf\u6216\u8fd4\u56de\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528 Any \u3002 \u4f60\u4e0d\u9700\u8981\u6807\u6ce8\u6a21\u5757\u4e2d\u7684\u6240\u6709\u51fd\u6570\u3002 \u81f3\u5c11\u8981\u6807\u6ce8\u516c\u5171 API\u3002 \u5728\u5b89\u5168\u6027\u548c\u6e05\u6670\u6027\u4e0e\u7075\u6d3b\u6027\u4e4b\u95f4\u627e\u5230\u4e00\u4e2a\u5e73\u8861\u70b9\u3002 \u6807\u6ce8\u90a3\u4e9b\u5bb9\u6613\u51fa\u73b0\u7c7b\u578b\u76f8\u5173\u9519\u8bef\uff08\u4ee5\u524d\u7684 BUG \u6216\u590d\u6742\u6027\uff09\u7684\u4ee3\u7801 \u6807\u6ce8\u90a3\u4e9b\u96be\u4ee5\u7406\u89e3\u7684\u4ee3\u7801\u3002 \u6807\u6ce8\u90a3\u4e9b\u4ece\u7c7b\u578b\u7684\u89d2\u5ea6\u6765\u770b\u5df2\u7ecf\u7a33\u5b9a\u7684\u4ee3\u7801\u3002\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5728\u7a33\u5b9a\u7684\u4ee3\u7801\u4e2d\u6807\u6ce8\u6240\u6709\u51fd\u6570\uff0c\u800c\u4e0d\u4f1a\u5931\u53bb\u592a\u591a\u7075\u6d3b\u6027\u3002","title":"3.19.1 \u901a\u7528\u89c4\u5219"},{"location":"standard/style_rules/#3192","text":"\u9075\u5faa\u73b0\u6709 \u7f29\u8fdb\u89c4\u5219 \u3002 \u5728\u6807\u6ce8\u4e4b\u540e\uff0c\u8bb8\u591a\u51fd\u6570\u7b7e\u540d\u5c06\u53d8\u6210\u201c\u6bcf\u884c\u4e00\u4e2a\u53c2\u6570\u201d\u3002 def my_method ( self , first_var : int , second_var : Foo , third_var : Optional [ Bar ]) -> int : ... \u5c3d\u91cf\u5728\u53d8\u91cf\u4e4b\u95f4\u65ad\u884c\uff0c\u4e0d\u8981\u5728\u53d8\u91cf\u540d\u548c\u7c7b\u578b\u6807\u6ce8\u4e4b\u95f4\u65ad\u884c\u3002\u5982\u679c\u6240\u6709\u5185\u5bb9\u90fd\u5728\u4e00\u884c\u4e0a\uff0c\u5c31\u4e0d\u8981\u7ba1\u4e86\u3002 def my_method ( self , first_var : int ) -> int : ... \u5982\u679c\u51fd\u6570\u540d\u3001\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u7ec4\u5408\u8d77\u6765\u592a\u957f\u4e86\uff0c\u53ef\u4ee5\u65b0\u6362\u4e00\u884c\u5e76\u7f29\u8fdb4\u4e2a\u5b57\u7b26\u3002 def my_method ( self , first_var : int ) -> Tuple [ MyLongType1 , MyLongType1 ]: ... \u5f53\u8fd4\u56de\u7c7b\u578b\u4e0e\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4e0d\u5728\u540c\u4e00\u884c\u65f6\uff0c\u63a8\u8350\u7684\u505a\u6cd5\u662f\u5728\u65b0\u884c\u4e2d\u5c06\u53c2\u6570\u7f29\u8fdb4\u4e2a\u5b57\u7b26\uff0c\u5e76\u5c06\u53f3\u62ec\u53f7\u4e0e def \u5bf9\u9f50\u3002 \u63a8\u8350 def my_method ( self , other_arg : Optional [ MyLongType ] ) -> Dict [ OtherLongType , MyLongType ]: ... Pylint \u5141\u8bb8\u60a8\u5c06\u53f3\u62ec\u53f7\u79fb\u5230\u65b0\u884c\uff0c\u5e76\u4e0e\u5de6\u62ec\u53f7\u5bf9\u9f50\uff0c\u4f46\u8fd9\u4e48\u505a\u53ef\u8bfb\u6027\u4f1a\u6bd4\u8f83\u5dee\u3002 \u4e0d\u63a8\u8350 def my_method ( self , other_arg : Optional [ MyLongType ] ) -> Dict [ OtherLongType , MyLongType ]: ... \u5c31\u50cf\u4e0a\u9762\u7684\u4f8b\u5b50\u4e00\u6837\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u622a\u65ad\u7c7b\u578b\u3002\u4f46\u662f\uff0c\u6709\u65f6\u5019\u5b83\u4eec\u653e\u5728\u4e00\u884c\u4e0a\u5b9e\u5728\u592a\u957f\u4e86\uff08\u5c3d\u91cf\u4fdd\u6301\u5b50\u7c7b\u578b\u4e0d\u88ab\u622a\u65ad\uff09\uff1a def my_method ( self , first_var : Tuple [ List [ MyLongType1 ], List [ MyLongType2 ]], second_var : List [ Dict [ MyLongType3 , MyLongType4 ]]) -> None : ... \u5982\u679c\u5355\u4e2a\u540d\u79f0\u548c\u7c7b\u578b\u592a\u957f\uff0c\u8bf7\u8003\u8651\u4f7f\u7528\u7c7b\u578b\u7684\u522b\u540d\u3002\u6700\u540e\u4e00\u79cd\u65b9\u6cd5\u662f\u5728\u5192\u53f7\u540e\u9762\u622a\u65ad\uff0c\u5e76\u7f29\u8fdb4\u4e2a\u5b57\u7b26\u3002 \u63a8\u8350 def my_function ( long_variable_name : long_module_name . LongTypeName , ) -> None : ... \u4e0d\u63a8\u8350 def my_function ( long_variable_name : long_module_name . LongTypeName , ) -> None : ...","title":"3.19.2 \u65ad\u884c"},{"location":"standard/style_rules/#3193","text":"\u5982\u679c\u4f60\u9700\u8981\u5728\u540c\u4e00\u6a21\u5757\u4e2d\u4f7f\u7528\u6ca1\u6709\u5b9a\u4e49\u7684\u7c7b\u540d\uff08\u4f8b\u5982\uff0c\u9700\u8981\u5728\u58f0\u660e\u7c7b\u4e2d\u4f7f\u7528\u7c7b\u540d\uff0c\u6216\u8005\u7c7b\u4f3c\u4e0b\u9762\u7684\u5b9a\u4e49\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u4f5c\u4e3a\u7c7b\u540d\u3002 class MyClass : def __init__ ( self , stack : List [ \"MyClass\" ]) -> None :","title":"3.19.3 \u524d\u7f6e\u58f0\u660e"},{"location":"standard/style_rules/#3194","text":"\u6839\u636e PEP-008 \uff0c\u4ec5\u5728\u540c\u65f6\u5177\u6709\u7c7b\u578b\u6807\u6ce8\u548c\u9ed8\u8ba4\u503c\u53c2\u6570\u7684 = \u5de6\u53f3\u4e24\u8fb9\u4f7f\u7528\u7a7a\u683c\u3002 \u63a8\u8350 def func ( a : int = 0 ) -> int : ... \u4e0d\u63a8\u8350 def func ( a : int = 0 ) -> int : ...","title":"3.19.4 \u9ed8\u8ba4\u503c"},{"location":"standard/style_rules/#3195-nonetype","text":"\u5728 Python \u7c7b\u578b\u7cfb\u7edf\u4e2d\uff0c NoneType \u662f\u201c\u7b2c\u4e00\u7c7b\uff08first class\uff09\u201d\u7c7b\u578b\uff0c\u800c\u4e14\u4e3a\u4e86\u65b9\u4fbf\u62fc\u5199\uff0c\u5b9a\u4e49\u4e86 None \u4f5c\u4e3a NoneType \u7684\u522b\u540d\u3002\u5982\u679c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u4e3a None \uff0c\u5c31\u5fc5\u987b\u58f0\u660e\u5b83\uff01\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528 Union \uff0c\u4f46\u5982\u679c\u53ea\u6709\u4e00\u79cd\u7c7b\u578b\uff0c\u8bf7\u4f7f\u7528 Optional \u3002 \u4f7f\u7528\u663e\u5f0f Optional \u66ff\u4ee3\u9690\u5f0f Optional \u3002PEP-484 \u7684\u65e9\u671f\u7248\u672c\u5141\u8bb8\u5c06 a: str = None \u89e3\u91ca\u4e3a a: Optional[str] = None \uff0c\u4f46\u73b0\u5728\u5df2\u7ecf\u4e0d\u63a8\u8350\u4e86\u3002 \u63a8\u8350 def func ( a : Optional [ str ], b : Optional [ str ] = None ) -> str : ... def multiple_nullable_union ( a : Union [ None , str , int ]) -> str ... \u4e0d\u63a8\u8350 def nullable_union ( a : Union [ None , str ]) -> str : ... def implicit_optional ( a : str = None ) -> str : ...","title":"3.19.5 NoneType"},{"location":"standard/style_rules/#3196","text":"\u53ef\u4ee5\u4e3a\u590d\u6742\u7c7b\u578b\u58f0\u660e\u522b\u540d\u3002\u522b\u540d\u5e94\u8be5\u662f\u5927\u5199\u7684\uff08 CapWorded \uff09\u3002\u5982\u679c\u522b\u540d\u4ec5\u5728\u6a21\u5757\u4e2d\u4f7f\u7528\uff0c\u90a3\u4e48\u5e94\u8be5\u4f7f\u7528\u524d\u7f6e\u4e0b\u5212\u7ebf\u8ba9\u5176\u53d8\u6210\u79c1\u6709\u7684\uff08\u5982 _Private \uff09\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6a21\u5757\u540d\u79f0\u548c\u7c7b\u578b\u5728\u4e00\u8d77\u592a\u957f\u4e86\uff1a _ShortName = module_with_long_name . TypeWithLongName ComplexMap = Mapping [ Text , List [ Tuple [ int , int ]]] \u5176\u4ed6\u4f8b\u5b50\u8fd8\u6709\u590d\u6742\u7684\u5d4c\u5957\u7c7b\u578b\u548c\u51fd\u6570\u7684\u591a\u4e2a\u8fd4\u56de\u53d8\u91cf\uff08\u4f5c\u4e3a\u5143\u7ec4\uff09\u3002","title":"3.19.6 \u7c7b\u578b\u522b\u540d"},{"location":"standard/style_rules/#3197","text":"\u53ef\u4ee5\u5728\u884c\u4e0a\u4f7f\u7528\u7279\u6b8a\u6ce8\u91ca # type: ignore \u7981\u7528\u7c7b\u578b\u68c0\u67e5\u3002 pytype \u6709\u4e00\u4e2a\u9488\u5bf9\u7279\u5b9a\u9519\u8bef\u7684\u7981\u7528\u9009\u9879\uff08\u7c7b\u4f3c\u4e8e lint\uff09 # pytype: disable=attribute-error","title":"3.19.7 \u5ffd\u7565\u7c7b\u578b"},{"location":"standard/style_rules/#3198","text":"\u5982\u679c\u5185\u90e8\u53d8\u91cf\u7684\u7c7b\u578b\u5f88\u96be\u63a8\u65ad\u6216\u8005\u65e0\u6cd5\u63a8\u65ad\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u6307\u5b9a\u5176\u7c7b\u578b\u3002 \u7c7b\u578b\u6ce8\u91ca \u5728\u884c\u672b\u5c3e\u4f7f\u7528 # type: \u7c7b\u578b\u6ce8\u91ca\u3002 a = SomeUndecoratedFunction () # type: Foo \u8d4b\u503c\u6807\u6ce8 \u5728\u53d8\u91cf\u540d\u548c\u503c\u4e4b\u95f4\u4f7f\u7528\u5192\u53f7\u548c\u7c7b\u578b\uff0c\u5c31\u50cf\u51fd\u6570\u53c2\u6570\u4e00\u6837\uff1a a : Foo = SomeUndecoratedFunction ()","title":"3.19.8 \u6807\u6ce8\u53d8\u91cf"},{"location":"standard/style_rules/#3199-vs","text":"\u7c7b\u578b\u5316\u5217\u8868\u53ea\u80fd\u5305\u542b\u5355\u4e00\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\u7c7b\u578b\u5316\u5143\u7ec4\u53ef\u4ee5\u5177\u6709\u5355\u4e2a\u91cd\u590d\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u5177\u6709\u4e00\u7ec4\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\u3002\u540e\u8005\u901a\u5e38\u7528\u4f5c\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u3002 a = [ 1 , 2 , 3 ] # type: List[int] b = ( 1 , 2 , 3 ) # type: Tuple[int, ...] c = ( 1 , \"2\" , 3.5 ) # type: Tuple[int, str, float]","title":"3.19.9 \u5143\u7ec4 vs \u5217\u8868"},{"location":"standard/style_rules/#31910-typevars","text":"Python \u7c7b\u578b\u7cfb\u7edf\u4e2d\u6709 \u6cdb\u578b \uff0c\u5de5\u5382\u51fd\u6570 TypeVar \u662f\u4f7f\u7528\u5b83\u4eec\u7684\u5e38\u7528\u65b9\u6cd5\u3002 \u4f8b\u5982\uff1a from typing import List , TypeVar T = TypeVar ( \"T\" ) ... def next ( l : List [ T ]) -> T : return l . pop () TypeVar \u53ef\u4ee5\u88ab\u7ea6\u675f\uff1a AddableType = TypeVar ( \"AddableType\" , int , float , str ) def add ( a : AddableType , b : AddableType ) -> AddableType : return a + b typing \u6a21\u5757\u4e2d\u4e00\u4e2a\u5e38\u89c1\u7684\u9884\u5b9a\u4e49\u7c7b\u578b\u53d8\u91cf\u662f AnyStr \u3002\u53ef\u4ee5\u7528\u4e8e\u6807\u6ce8 bytes \u6216 unicode \uff0c\u4f46\u662f\u5fc5\u987b\u662f\u5728\u76f8\u540c\u7c7b\u578b\u4e2d\u4f7f\u7528\u3002 from typing import AnyStr def check_length ( x : AnyStr ) -> AnyStr : if len ( x ) <= 42 : return x raise ValueError ()","title":"3.19.10 TypeVars"},{"location":"standard/style_rules/#31911","text":"\u60f3\u8981\u6b63\u786e\u7684\u6807\u6ce8\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u53d6\u51b3\u4e8e\u4ee3\u7801\u5c06\u4f7f\u7528\u54ea\u4e2a\u7248\u672c\u7684 Python \u3002 \u5bf9\u4e8e Python 3 \u4ee3\u7801\uff0c\u6700\u597d\u4f7f\u7528 str \u3002 Text \u4e5f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u4f7f\u7528\u65f6\u8bf7\u4fdd\u6301\u4e00\u81f4\u6027\u3002 \u5bf9\u4e8e\u8981\u517c\u5bb9 Python 2 \u7684\u4ee3\u7801\uff0c\u53ef\u4ee5\u4f7f\u7528 Text \u3002\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 str \u53ef\u80fd\u662f\u6709\u610f\u4e49\u7684\uff1b\u901a\u5e38\uff0c\u5f53\u4e24\u4e2a Python \u7248\u672c\u4e4b\u95f4\u7684\u8fd4\u56de\u7c7b\u578b\u4e0d\u540c\u65f6\uff0c\u53ef\u4ee5\u63d0\u9ad8\u517c\u5bb9\u6027\u3002 \u907f\u514d\u4f7f\u7528 unicode \uff0c\u56e0\u4e3a\u5b83\u5728 Python 3 \u4e2d\u4e0d\u5b58\u5728\u3002 \u4e4b\u6240\u4ee5\u5b58\u5728\u8fd9\u79cd\u5dee\u5f02\uff0c\u662f\u56e0\u4e3a str \u7684\u542b\u4e49\u548c Python \u7248\u672c\u6709\u5173\u3002 \u4e0d\u63a8\u8350 def py2_code ( x : str ) -> unicode : ... \u5bf9\u4e8e\u5904\u7406\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u4ee3\u7801\uff0c\u8bf7\u4f7f\u7528 bytes \uff1a def deals_with_binary_data ( x : bytes ) -> bytes : ... \u5bf9\u4e8e\u5904\u7406\u6587\u672c\u6570\u636e\u7684 python 2 \u517c\u5bb9\u4ee3\u7801\uff08Python 2 \u4e2d\u7684 str \u6216 unicode \uff0cPython 3 \u4e2d\u7684 str \uff09\uff0c\u8bf7\u4f7f\u7528 Text \u3002\u5bf9\u4e8e\u4ec5\u5904\u7406\u6587\u672c\u6570\u636e\u7684 python 3 \u4ee3\u7801\uff0c\u9996\u9009 str \u3002 from typing import Text ... def py2_compatible ( x : Text ) -> Text : ... def py3_only ( x : str ) -> str : ... \u5982\u679c\u7c7b\u578b\u53ef\u4ee5\u662f bytes \u6216 text \uff0c\u8bf7\u4f7f\u7528 Unicode \u548c\u9002\u5f53\u7684\u6587\u672c\u7c7b\u578b\u3002 from typing import Text , Union ... def py2_compatible ( x : Union [ bytes , Text ]) -> Union [ bytes , Text ]: ... def py3_only ( x : Union [ bytes , str ]) -> Union [ bytes , str ]: ... \u5982\u679c\u51fd\u6570\u7684\u6240\u6709\u5b57\u7b26\u4e32\u7c7b\u578b\u59cb\u7ec8\u76f8\u540c\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u8fd4\u56de\u7c7b\u578b\u4e0e\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u7684\u53c2\u6570\u7c7b\u578b\u76f8\u540c\uff0c\u5219\u4f7f\u7528 AnyStr\u3002 \u8fd9\u6837\u7f16\u5199\u53ef\u4ee5\u7b80\u5316\u5c06\u4ee3\u7801\u79fb\u690d\u5230 python 3 \u7684\u8fc7\u7a0b\u3002","title":"3.19.11 \u5b57\u7b26\u4e32\u7c7b\u578b"},{"location":"standard/style_rules/#31912","text":"\u5bf9\u4e8e typing \u6a21\u5757\u4e2d\u7684\u7c7b\uff0c\u8bf7\u59cb\u7ec8\u5bfc\u5165\u7c7b\u672c\u8eab\u3002\u660e\u786e\u5141\u8bb8\u5728\u4e00\u884c\u4e0a\u4ece typing \u6a21\u5757\u5bfc\u5165\u591a\u4e2a\u7279\u5b9a\u7684\u7c7b\u3002\u4f8b\u5982\uff1a from typing import Any , Dict , Optional \u65e2\u7136\u8fd9\u79cd\u4ece typing \u6a21\u5757\u5bfc\u5165\u7684\u65b9\u5f0f\u4f1a\u5c06\u5bfc\u5165\u9879\u6dfb\u52a0\u5230\u672c\u5730\u547d\u540d\u7a7a\u95f4\uff0c \u90a3\u4e48 typing \u4e2d\u7684\u4efb\u4f55\u540d\u79f0\u90fd\u5e94\u8be5\u7c7b\u4f3c\u4e8e\u5173\u952e\u5b57\uff0c\u800c\u4e14\u4e0d\u8981\u5728\u4f60\u7684 Python \u4ee3\u7801\u4e2d\u53bb\u5b9a\u4e49\uff08\u65e0\u8bba\u662f\u5426\u6709\u7c7b\u578b\uff09\u3002\u5982\u679c\u6a21\u5757\u4e2d\u7684\u7c7b\u578b\u548c\u73b0\u6709\u540d\u79f0\u4e4b\u95f4\u5b58\u5728\u51b2\u7a81\uff0c\u8bf7\u4f7f\u7528 import x as y \u5bfc\u5165\u3002 from typing import Any as AnyType","title":"3.19.12 \u7c7b\u578b\u5bfc\u5165"},{"location":"standard/style_rules/#31913","text":"\u4ec5\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u624d\u4f7f\u7528\u6761\u4ef6\u5bfc\u5165\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u907f\u514d\u7c7b\u578b\u68c0\u67e5\u6240\u9700\u7684\u5176\u4ed6\u5bfc\u5165\u3002\u4e0d\u63a8\u8350\u8fd9\u79cd\u65b9\u5f0f\uff1b\u5e94\u8be5\u9996\u9009\u5176\u4ed6\u65b9\u6cd5\uff0c\u6bd4\u5982\u91cd\u6784\u4ee3\u7801\u4ee5\u5141\u8bb8\u9876\u7ea7\u5bfc\u5165\u3002 \u53ef\u4ee5\u5c06\u4ec5\u7528\u4e8e\u7c7b\u578b\u6807\u6ce8\u7684\u5bfc\u5165\u653e\u5728 if TYPE_CHECKING: \u4ee3\u7801\u5757\u4e2d\u3002 \u6709\u6761\u4ef6\u5bfc\u5165\u7684\u7c7b\u578b\u9700\u8981\u4f5c\u4e3a\u5b57\u7b26\u4e32\u5f15\u7528\uff0c\u4ee5\u4fbf\u6807\u6ce8\u8868\u8fbe\u5f0f\u5b9e\u9645\u8fd0\u884c\u65f6\u80fd\u5411\u524d\u517c\u5bb9 Python 3.6\u3002 \u8fd9\u91cc\u53ea\u5e94\u8be5\u5b9a\u4e49\u7528\u4e8e\u7c7b\u578b\u6807\u6ce8\u7684\u5b9e\u4f53\uff1b\u5305\u62ec\u522b\u540d\u3002\u5426\u5219\u5c06\u4f1a\u6709\u4e00\u4e2a\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u56e0\u4e3a\u6a21\u5757\u5c06\u4e0d\u4f1a\u5728\u8fd0\u884c\u65f6\u5bfc\u5165\u3002 \u6240\u6709\u6b63\u5e38\u5bfc\u5165\u540e\u7684\u4ee3\u7801\u5757\u5e94\u8be5\u662f\u6b63\u786e\u7684\u3002 \u7c7b\u578b\u5bfc\u5165\u5217\u8868\u4e2d\u4e0d\u5e94\u8be5\u6709\u7a7a\u884c\u3002 \u5c06\u6b64\u5217\u8868\u6309\u7167\u5e38\u89c4\u5bfc\u5165\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002 import typing if typing . TYPE_CHECKING : import sketch def f ( x : \"sketch.Sketch\" ): ...","title":"3.19.13 \u6761\u4ef6\u5bfc\u5165"},{"location":"standard/style_rules/#31914","text":"\u7531\u7c7b\u578b\u5f15\u8d77\u7684\u5faa\u73af\u4f9d\u8d56\u662f\u4e00\u79cd\u4ee3\u7801\u5473\u9053\u3002\u8fd9\u4e9b\u4ee3\u7801\u9700\u8981\u8fdb\u884c\u91cd\u6784\u3002\u867d\u7136\u5728\u6280\u672f\u4e0a\u53ef\u4ee5\u4fdd\u6301\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\uff0c\u4f46\u662f\u5404\u79cd\u6784\u5efa\u7cfb\u7edf\u4e0d\u5141\u8bb8\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6a21\u5757\u90fd\u5fc5\u987b\u4f9d\u8d56\u4e8e\u5176\u4ed6\u6a21\u5757\u3002 \u5c06\u5f15\u8d77\u5faa\u73af\u4f9d\u8d56\u5bfc\u5165\u7684\u6a21\u5757\u66ff\u6362\u4e3a Any \u3002\u8bbe\u7f6e\u4e00\u4e2a\u6709\u610f\u4e49\u7684 \u522b\u540d \uff0c\u5e76\u4f7f\u7528\u6b64\u6a21\u5757\u4e2d\u7684\u5b9e\u9645\u7c7b\u578b\u540d\u79f0\uff08Any \u7684\u4efb\u4f55\u5c5e\u6027\u90fd\u662f Any\uff09\u3002\u522b\u540d\u5b9a\u4e49\u5e94\u8be5\u4e0e\u6700\u540e\u5bfc\u5165\u5206\u5f00\u4e00\u884c\u3002 from typing import Any some_mod = Any # some_mod.py imports this module. ... def my_method ( self , var : \"some_mod.SomeType\" ) -> None : ...","title":"3.19.14 \u5faa\u73af\u4f9d\u8d56"},{"location":"standard/style_rules/#31915","text":"\u8fdb\u884c\u6807\u6ce8\u65f6\uff0c\u6700\u597d\u4e3a\u6cdb\u578b\u7c7b\u578b\u6307\u5b9a\u7c7b\u578b\u53c2\u6570\uff1b\u5426\u5219\uff0c \u6cdb\u578b\u53c2\u6570\u5c06\u88ab\u5047\u5b9a\u4e3a Any \u3002 def get_names ( employee_ids : List [ int ]) -> Dict [ int , Any ]: ... # These are both interpreted as get_names(employee_ids: List[Any]) -> Dict[Any, Any] def get_names ( employee_ids : list ) -> Dict : ... def get_names ( employee_ids : List ) -> Dict : ... \u5982\u679c\u6cdb\u578b\u7684\u6700\u4f73\u7c7b\u578b\u53c2\u6570\u662f Any \uff0c\u8bf7\u4f7f\u7528\u663e\u5f0f\u8bbe\u7f6e\u3002\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b TypeVar \u53ef\u80fd\u66f4\u5408\u9002\u3002 def get_names ( employee_ids : List [ Any ]) -> Dict [ Any , Text ]: \"\"\"Returns a mapping from employee ID to employee name for given IDs.\"\"\" T = TypeVar ( 'T' ) def get_names ( employee_ids : List [ T ]) -> Dict [ T , Text ]: \"\"\"Returns a mapping from employee ID to employee name for given IDs.\"\"\"","title":"3.19.15 \u6cdb\u578b"}]}